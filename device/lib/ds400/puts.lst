                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:30 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module puts
                                      7 	.optsdcc -mds400 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _puts
                                     35 	.globl _putchar
                                     36 ;--------------------------------------------------------
                                     37 ; special function registers
                                     38 ;--------------------------------------------------------
                                     39 ;--------------------------------------------------------
                                     40 ; special function bits
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; overlayable register banks
                                     44 ;--------------------------------------------------------
                                     45 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         46 	.ds 8
                                     47 	.area REG_BANK_3	(REL,OVR,DATA)
      000000                         48 	.ds 8
                                     49 ;--------------------------------------------------------
                                     50 ; internal ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area DSEG    (DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; overlayable items in internal ram 
                                     55 ;--------------------------------------------------------
                                     56 ;--------------------------------------------------------
                                     57 ; indirectly addressable internal ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area ISEG    (DATA)
                                     60 ;--------------------------------------------------------
                                     61 ; absolute internal ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area IABS    (ABS,DATA)
                                     64 	.area IABS    (ABS,DATA)
                                     65 ;--------------------------------------------------------
                                     66 ; bit data
                                     67 ;--------------------------------------------------------
                                     68 	.area BSEG    (BIT)
                                     69 ;--------------------------------------------------------
                                     70 ; paged external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area PSEG    (PAG,XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; external ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XSEG    (XDATA)
                                     77 ;--------------------------------------------------------
                                     78 ; absolute external ram data
                                     79 ;--------------------------------------------------------
                                     80 	.area XABS    (ABS,XDATA)
                                     81 ;--------------------------------------------------------
                                     82 ; external initialized ram data
                                     83 ;--------------------------------------------------------
                                     84 	.area XISEG   (XDATA)
                                     85 ;--------------------------------------------------------
                                     86 ; global & static initialisations
                                     87 ;--------------------------------------------------------
                                     88 	.area HOME    (CODE)
                                     89 	.area GSINIT  (CODE)
                                     90 	.area GSFINAL (CODE)
                                     91 	.area GSINIT  (CODE)
                                     92 ;--------------------------------------------------------
                                     93 ; Home
                                     94 ;--------------------------------------------------------
                                     95 	.area HOME    (CODE)
                                     96 	.area HOME    (CODE)
                                     97 ;--------------------------------------------------------
                                     98 ; code
                                     99 ;--------------------------------------------------------
                                    100 	.area CSEG    (CODE)
                                    101 ;------------------------------------------------------------
                                    102 ;Allocation info for local variables in function 'puts'
                                    103 ;------------------------------------------------------------
                                    104 ;s                         Allocated to registers 
                                    105 ;i                         Allocated to registers 
                                    106 ;------------------------------------------------------------
                                    107 ;	puts.c:31: int puts (char *s)
                                    108 ;	-----------------------------------------
                                    109 ;	 function puts
                                    110 ;	-----------------------------------------
      000000                        111 _puts:
                           000002   112 	ar2 = 0x02
                           000003   113 	ar3 = 0x03
                           000004   114 	ar4 = 0x04
                           000005   115 	ar5 = 0x05
                           000006   116 	ar6 = 0x06
                           000007   117 	ar7 = 0x07
                           000000   118 	ar0 = 0x00
                           000001   119 	ar1 = 0x01
      000000 AA 82            [ 8]  120 	mov	r2,dpl
      000002 AB 83            [ 8]  121 	mov	r3,dph
      000004 AC 93            [ 8]  122 	mov	r4,dpx
      000006 AD F0            [ 8]  123 	mov	r5,b
                                    124 ;	puts.c:34: while (*s){
                                    125 ;	genAssign: resultIsFar = FALSE
      000008 7E 00            [ 8]  126 	mov	r6,#0x00
      00000A 7F 00            [ 8]  127 	mov	r7,#0x00
      00000C                        128 00101$:
      00000C 8A 82            [ 8]  129 	mov	dpl,r2
      00000E 8B 83            [ 8]  130 	mov	dph,r3
      000010 8C 93            [ 8]  131 	mov	dpx,r4
      000012 8D F0            [ 8]  132 	mov	b,r5
      000014 12s00r00r00      [16]  133 	lcall	__gptrget
      000018 F8               [ 4]  134 	mov  r0,a
      000019 60 2E            [12]  135 	jz  00103$
      00001B                        136 00113$:
                                    137 ;	puts.c:35: putchar(*s++);
      00001B 0A               [ 4]  138 	inc	r2
      00001C BA 00 05         [16]  139 	cjne	r2,#0x00,00114$
      00001F 0B               [ 4]  140 	inc	r3
      000020 BB 00 01         [16]  141 	cjne	r3,#0x00,00114$
      000023 0C               [ 4]  142 	inc	r4
      000024                        143 00114$:
      000024 C0 02            [ 8]  144 	push	ar2
      000026 C0 03            [ 8]  145 	push	ar3
      000028 C0 04            [ 8]  146 	push	ar4
      00002A C0 05            [ 8]  147 	push	ar5
      00002C C0 06            [ 8]  148 	push	ar6
      00002E C0 07            [ 8]  149 	push	ar7
      000030 88 82            [ 8]  150 	mov	dpl,r0
      000032 12s00r00r00      [16]  151 	lcall	_putchar
      000036 D0 07            [ 8]  152 	pop	ar7
      000038 D0 06            [ 8]  153 	pop	ar6
      00003A D0 05            [ 8]  154 	pop	ar5
      00003C D0 04            [ 8]  155 	pop	ar4
      00003E D0 03            [ 8]  156 	pop	ar3
      000040 D0 02            [ 8]  157 	pop	ar2
                                    158 ;	puts.c:36: i++;
      000042 0E               [ 4]  159 	inc	r6
      000043 BE 00 01         [16]  160 	cjne	r6,#0x00,00115$
      000046 0F               [ 4]  161 	inc	r7
      000047                        162 00115$:
      000047 80 C3            [12]  163 	sjmp 00101$
      000049                        164 00103$:
                                    165 ;	puts.c:38: putchar('\n');
      000049 C0 06            [ 8]  166 	push	ar6
      00004B C0 07            [ 8]  167 	push	ar7
      00004D 75 82 0A         [12]  168 	mov	dpl,#0x0A
      000050 12s00r00r00      [16]  169 	lcall	_putchar
      000054 D0 07            [ 8]  170 	pop	ar7
      000056 D0 06            [ 8]  171 	pop	ar6
                                    172 ;	puts.c:39: return i+1;
      000058 8F 83            [ 8]  173 	mov	dph,r7
      00005A 8E 82            [ 8]  174 	mov	dpl,r6
      00005C A3               [12]  175 	inc	dptr
      00005D                        176 00104$:
      00005D 22               [16]  177 	ret
                                    178 	.area CSEG    (CODE)
                                    179 	.area CONST   (CODE)
                                    180 	.area XINIT   (CODE)
                                    181 	.area CABS    (ABS,CODE)
