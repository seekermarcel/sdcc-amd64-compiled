                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:10:35 2022
                              5 ;--------------------------------------------------------
                              6 	.module _memmove
                              7 	.optsdcc -mhc08
                              8 	
                              9 	.area HOME    (CODE)
                             10 	.area GSINIT0 (CODE)
                             11 	.area GSINIT  (CODE)
                             12 	.area GSFINAL (CODE)
                             13 	.area CSEG    (CODE)
                             14 	.area XINIT   (CODE)
                             15 	.area CONST   (CODE)
                             16 	.area DSEG    (PAG)
                             17 	.area OSEG    (PAG, OVR)
                             18 	.area XSEG
                             19 	.area XISEG
                             20 ;--------------------------------------------------------
                             21 ; Public variables in this module
                             22 ;--------------------------------------------------------
                             23 	.globl _memmove_PARM_3
                             24 	.globl _memmove_PARM_2
                             25 	.globl _memmove
                             26 ;--------------------------------------------------------
                             27 ; ram data
                             28 ;--------------------------------------------------------
                             29 	.area DSEG    (PAG)
                             30 ;--------------------------------------------------------
                             31 ; overlayable items in ram 
                             32 ;--------------------------------------------------------
                             33 	.area	OSEG    (PAG, OVR)
   0000                      34 _memmove_sloc0_1_0:
   0000                      35 	.ds 2
   0002                      36 _memmove_sloc1_1_0:
   0002                      37 	.ds 2
   0004                      38 _memmove_sloc2_1_0:
   0004                      39 	.ds 2
   0006                      40 _memmove_sloc3_1_0:
   0006                      41 	.ds 2
   0008                      42 _memmove_sloc4_1_0:
   0008                      43 	.ds 2
                             44 ;--------------------------------------------------------
                             45 ; absolute ram data
                             46 ;--------------------------------------------------------
                             47 	.area IABS    (ABS)
                             48 	.area IABS    (ABS)
                             49 ;--------------------------------------------------------
                             50 ; absolute external ram data
                             51 ;--------------------------------------------------------
                             52 	.area XABS    (ABS)
                             53 ;--------------------------------------------------------
                             54 ; external initialized ram data
                             55 ;--------------------------------------------------------
                             56 	.area XISEG
                             57 ;--------------------------------------------------------
                             58 ; extended address mode data
                             59 ;--------------------------------------------------------
                             60 	.area XSEG
   0000                      61 _memmove_PARM_2:
   0000                      62 	.ds 2
   0002                      63 _memmove_PARM_3:
   0002                      64 	.ds 2
   0004                      65 _memmove_ret_1_22:
   0004                      66 	.ds 2
                             67 ;--------------------------------------------------------
                             68 ; global & static initialisations
                             69 ;--------------------------------------------------------
                             70 	.area HOME    (CODE)
                             71 	.area GSINIT  (CODE)
                             72 	.area GSFINAL (CODE)
                             73 	.area GSINIT  (CODE)
                             74 ;--------------------------------------------------------
                             75 ; Home
                             76 ;--------------------------------------------------------
                             77 	.area HOME    (CODE)
                             78 	.area HOME    (CODE)
                             79 ;--------------------------------------------------------
                             80 ; code
                             81 ;--------------------------------------------------------
                             82 	.area CSEG    (CODE)
                             83 ;------------------------------------------------------------
                             84 ;Allocation info for local variables in function 'memmove'
                             85 ;------------------------------------------------------------
                             86 ;src                       Allocated with name '_memmove_PARM_2'
                             87 ;acount                    Allocated with name '_memmove_PARM_3'
                             88 ;dst                       Allocated to registers x h 
                             89 ;ret                       Allocated with name '_memmove_ret_1_22'
                             90 ;d                         Allocated to registers 
                             91 ;s                         Allocated to registers 
                             92 ;sloc0                     Allocated with name '_memmove_sloc0_1_0'
                             93 ;sloc1                     Allocated with name '_memmove_sloc1_1_0'
                             94 ;sloc2                     Allocated with name '_memmove_sloc2_1_0'
                             95 ;sloc3                     Allocated with name '_memmove_sloc3_1_0'
                             96 ;sloc4                     Allocated with name '_memmove_sloc4_1_0'
                             97 ;------------------------------------------------------------
                             98 ;../_memmove.c:40: void * memmove (void * dst, const void * src, size_t acount)
                             99 ;	-----------------------------------------
                            100 ;	 function memmove
                            101 ;	-----------------------------------------
                            102 ;	Register assignment might be sub-optimal.
                            103 ;	Stack space usage: 0 bytes.
   0000                     104 _memmove:
   0000 89            [ 2]  105 	pshx
   0001 97            [ 1]  106 	tax
   0002 8A            [ 2]  107 	pulh
                            108 ;../_memmove.c:42: void * ret = dst;
   0003 8B            [ 2]  109 	pshh
   0004 86            [ 2]  110 	pula
   0005 C7r00r04      [ 4]  111 	sta	_memmove_ret_1_22
   0008 CFr00r05      [ 4]  112 	stx	(_memmove_ret_1_22 + 1)
                            113 ;../_memmove.c:46: if ((uintptr_t)src < (uintptr_t)dst) {
   000B C6r00r01      [ 4]  114 	lda	(_memmove_PARM_2 + 1)
   000E B7*01         [ 3]  115 	sta	*(_memmove_sloc0_1_0 + 1)
   0010 C6r00r00      [ 4]  116 	lda	_memmove_PARM_2
   0013 B7*00         [ 3]  117 	sta	*_memmove_sloc0_1_0
   0015 BF*03         [ 3]  118 	stx	*(_memmove_sloc1_1_0 + 1)
   0017 8B            [ 2]  119 	pshh
   0018 86            [ 2]  120 	pula
   0019 B7*02         [ 3]  121 	sta	*_memmove_sloc1_1_0
                            122 ;../_memmove.c:50: d = ((char *)dst)+acount-1;
                            123 ;../_memmove.c:51: s = ((char *)src)+acount-1;
   001B C6r00r01      [ 4]  124 	lda	(_memmove_PARM_2 + 1)
   001E B7*05         [ 3]  125 	sta	*(_memmove_sloc2_1_0 + 1)
   0020 C6r00r00      [ 4]  126 	lda	_memmove_PARM_2
   0023 B7*04         [ 3]  127 	sta	*_memmove_sloc2_1_0
                            128 ;../_memmove.c:52: while (acount--) {
   0025 C6r00r02      [ 4]  129 	lda	_memmove_PARM_3
   0028 B7*06         [ 3]  130 	sta	*_memmove_sloc3_1_0
   002A C6r00r03      [ 4]  131 	lda	(_memmove_PARM_3 + 1)
   002D B7*07         [ 3]  132 	sta	*(_memmove_sloc3_1_0 + 1)
                            133 ;../_memmove.c:46: if ((uintptr_t)src < (uintptr_t)dst) {
   002F B6*01         [ 3]  134 	lda	*(_memmove_sloc0_1_0 + 1)
   0031 B0*03         [ 3]  135 	sub	*(_memmove_sloc1_1_0 + 1)
   0033 B6*00         [ 3]  136 	lda	*_memmove_sloc0_1_0
   0035 B2*02         [ 3]  137 	sbc	*_memmove_sloc1_1_0
   0037 24 4C         [ 3]  138 	bcc	00108$
                            139 ;../_memmove.c:50: d = ((char *)dst)+acount-1;
   0039 9F            [ 1]  140 	txa
   003A CBr00r03      [ 4]  141 	add	(_memmove_PARM_3 + 1)
   003D 97            [ 1]  142 	tax
   003E 8B            [ 2]  143 	pshh
   003F 86            [ 2]  144 	pula
   0040 C9r00r02      [ 4]  145 	adc	_memmove_PARM_3
   0043 87            [ 2]  146 	psha
   0044 8A            [ 2]  147 	pulh
   0045 AF FF         [ 2]  148 	aix	#-1
   0047 35*02         [ 4]  149 	sthx	*_memmove_sloc1_1_0
                            150 ;../_memmove.c:51: s = ((char *)src)+acount-1;
   0049 B6*05         [ 3]  151 	lda	*(_memmove_sloc2_1_0 + 1)
   004B CBr00r03      [ 4]  152 	add	(_memmove_PARM_3 + 1)
   004E 97            [ 1]  153 	tax
   004F B6*04         [ 3]  154 	lda	*_memmove_sloc2_1_0
   0051 C9r00r02      [ 4]  155 	adc	_memmove_PARM_3
   0054 87            [ 2]  156 	psha
   0055 8A            [ 2]  157 	pulh
   0056 AF FF         [ 2]  158 	aix	#-1
   0058 35*00         [ 4]  159 	sthx	*_memmove_sloc0_1_0
                            160 ;../_memmove.c:52: while (acount--) {
   005A 4E*06*08      [ 5]  161 	mov	*_memmove_sloc3_1_0,*_memmove_sloc4_1_0
   005D 4E*07*09      [ 5]  162 	mov	*(_memmove_sloc3_1_0 + 1),*(_memmove_sloc4_1_0 + 1)
   0060                     163 00101$:
   0060 55*08         [ 4]  164 	ldhx	*_memmove_sloc4_1_0
   0062 89            [ 2]  165 	pshx
   0063 8B            [ 2]  166 	pshh
   0064 55*08         [ 4]  167 	ldhx	*_memmove_sloc4_1_0
   0066 AF FF         [ 2]  168 	aix	#-1
   0068 35*08         [ 4]  169 	sthx	*_memmove_sloc4_1_0
   006A 8A            [ 2]  170 	pulh
   006B 88            [ 2]  171 	pulx
   006C 65 00 00      [ 3]  172 	cphx	#0x00
   006F 27 3B         [ 3]  173 	beq	00109$
                            174 ;../_memmove.c:53: *d-- = *s--;
   0071 55*00         [ 4]  175 	ldhx	*_memmove_sloc0_1_0
   0073 F6            [ 2]  176 	lda	,x
   0074 55*00         [ 4]  177 	ldhx	*_memmove_sloc0_1_0
   0076 AF FF         [ 2]  178 	aix	#-1
   0078 35*00         [ 4]  179 	sthx	*_memmove_sloc0_1_0
   007A 55*02         [ 4]  180 	ldhx	*_memmove_sloc1_1_0
   007C F7            [ 2]  181 	sta	,x
   007D 55*02         [ 4]  182 	ldhx	*_memmove_sloc1_1_0
   007F AF FF         [ 2]  183 	aix	#-1
   0081 35*02         [ 4]  184 	sthx	*_memmove_sloc1_1_0
   0083 20 DB         [ 3]  185 	bra	00101$
   0085                     186 00108$:
                            187 ;../_memmove.c:60: d = dst;
   0085 35*08         [ 4]  188 	sthx	*_memmove_sloc4_1_0
                            189 ;../_memmove.c:61: s = src;
                            190 ;../_memmove.c:62: while (acount--) {
   0087                     191 00104$:
   0087 55*06         [ 4]  192 	ldhx	*_memmove_sloc3_1_0
   0089 89            [ 2]  193 	pshx
   008A 8B            [ 2]  194 	pshh
   008B 55*06         [ 4]  195 	ldhx	*_memmove_sloc3_1_0
   008D AF FF         [ 2]  196 	aix	#-1
   008F 35*06         [ 4]  197 	sthx	*_memmove_sloc3_1_0
   0091 8A            [ 2]  198 	pulh
   0092 88            [ 2]  199 	pulx
   0093 65 00 00      [ 3]  200 	cphx	#0x00
   0096 27 14         [ 3]  201 	beq	00109$
                            202 ;../_memmove.c:63: *d++ = *s++;
   0098 55*04         [ 4]  203 	ldhx	*_memmove_sloc2_1_0
   009A F6            [ 2]  204 	lda	,x
   009B B7*02         [ 3]  205 	sta	*_memmove_sloc1_1_0
   009D AF 01         [ 2]  206 	aix	#1
   009F 35*04         [ 4]  207 	sthx	*_memmove_sloc2_1_0
   00A1 55*08         [ 4]  208 	ldhx	*_memmove_sloc4_1_0
   00A3 B6*02         [ 3]  209 	lda	*_memmove_sloc1_1_0
   00A5 F7            [ 2]  210 	sta	,x
   00A6 AF 01         [ 2]  211 	aix	#1
   00A8 35*08         [ 4]  212 	sthx	*_memmove_sloc4_1_0
   00AA 20 DB         [ 3]  213 	bra	00104$
   00AC                     214 00109$:
                            215 ;../_memmove.c:67: return(ret);
   00AC CEr00r04      [ 4]  216 	ldx	_memmove_ret_1_22
   00AF C6r00r05      [ 4]  217 	lda	(_memmove_ret_1_22 + 1)
   00B2 81            [ 4]  218 	rts
                            219 	.area CSEG    (CODE)
                            220 	.area CONST   (CODE)
                            221 	.area XINIT   (CODE)
                            222 	.area CABS    (ABS,CODE)
