                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:15:46 2022
                              5 ;--------------------------------------------------------
                              6 	.hd64
                              7 	.module _free
                              8 	.optsdcc -mz180
                              9 	
                             10 ;--------------------------------------------------------
                             11 ; Public variables in this module
                             12 ;--------------------------------------------------------
                             13 	.globl __sdcc_find_memheader
                             14 	.globl __sdcc_prev_memheader
                             15 	.globl _free
                             16 ;--------------------------------------------------------
                             17 ; special function registers
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; ram data
                             21 ;--------------------------------------------------------
                             22 	.area _DATA
   0000                      23 __sdcc_prev_memheader::
   0000                      24 	.ds 2
                             25 ;--------------------------------------------------------
                             26 ; ram data
                             27 ;--------------------------------------------------------
                             28 	.area _INITIALIZED
                             29 ;--------------------------------------------------------
                             30 ; absolute external ram data
                             31 ;--------------------------------------------------------
                             32 	.area _DABS (ABS)
                             33 ;--------------------------------------------------------
                             34 ; global & static initialisations
                             35 ;--------------------------------------------------------
                             36 	.area _HOME
                             37 	.area _GSINIT
                             38 	.area _GSFINAL
                             39 	.area _GSINIT
                             40 ;--------------------------------------------------------
                             41 ; Home
                             42 ;--------------------------------------------------------
                             43 	.area _HOME
                             44 	.area _HOME
                             45 ;--------------------------------------------------------
                             46 ; code
                             47 ;--------------------------------------------------------
                             48 	.area _CODE
                             49 ;../_free.c:62: _sdcc_find_memheader(void * p)
                             50 ;	---------------------------------
                             51 ; Function _sdcc_find_memheader
                             52 ; ---------------------------------
   0000                      53 __sdcc_find_memheader::
                             54 ;../_free.c:65: if (!p)
   0000 21 03 00      [ 9]   55 	ld	hl, #2+1
   0003 39            [ 7]   56 	add	hl, sp
   0004 7E            [ 6]   57 	ld	a, (hl)
   0005 2B            [ 4]   58 	dec	hl
   0006 B6            [ 6]   59 	or	a,(hl)
   0007 20 04         [ 8]   60 	jr	NZ,00102$
                             61 ;../_free.c:66: return NULL;
   0009 21 00 00      [ 9]   62 	ld	hl,#0x0000
   000C C9            [ 9]   63 	ret
   000D                      64 00102$:
                             65 ;../_free.c:67: pthis = (MEMHEADER * )((char *)  p - HEADER_SIZE); //to start of header
   000D C1            [ 9]   66 	pop	bc
   000E D1            [ 9]   67 	pop	de
   000F D5            [11]   68 	push	de
   0010 C5            [11]   69 	push	bc
   0011 7B            [ 4]   70 	ld	a,e
   0012 C6 FA         [ 6]   71 	add	a,#0xFA
   0014 5F            [ 4]   72 	ld	e,a
   0015 7A            [ 4]   73 	ld	a,d
   0016 CE FF         [ 6]   74 	adc	a,#0xFF
   0018 57            [ 4]   75 	ld	d,a
                             76 ;../_free.c:68: _sdcc_prev_memheader = pthis->prev;
   0019 6B            [ 4]   77 	ld	l, e
   001A 62            [ 4]   78 	ld	h, d
   001B 23            [ 4]   79 	inc	hl
   001C 23            [ 4]   80 	inc	hl
   001D 7E            [ 6]   81 	ld	a,(hl)
   001E FD 21r00r00   [12]   82 	ld	iy,#__sdcc_prev_memheader
   0022 FD 77 00      [15]   83 	ld	0 (iy),a
   0025 23            [ 4]   84 	inc	hl
   0026 7E            [ 6]   85 	ld	a,(hl)
   0027 32r01r00      [13]   86 	ld	(#__sdcc_prev_memheader + 1),a
                             87 ;../_free.c:70: return (pthis);
   002A EB            [ 3]   88 	ex	de,hl
   002B C9            [ 9]   89 	ret
                             90 ;../_free.c:74: free (void *p)
                             91 ;	---------------------------------
                             92 ; Function free
                             93 ; ---------------------------------
   002C                      94 _free::
   002C DD E5         [14]   95 	push	ix
   002E DD 21 00 00   [12]   96 	ld	ix,#0
   0032 DD 39         [10]   97 	add	ix,sp
   0034 3B            [ 4]   98 	dec	sp
   0035 3B            [ 4]   99 	dec	sp
                            100 ;../_free.c:78: if ( p ) //For allocated pointers only!
   0036 DD 7E 05      [14]  101 	ld	a,5 (ix)
   0039 DD B6 04      [14]  102 	or	a,4 (ix)
   003C 28 4E         [ 8]  103 	jr	Z,00108$
                            104 ;../_free.c:95: }
   003E ED 57         [ 6]  105 	ld	a,i
   0040 F3            [ 3]  106 	di
   0041 F5            [11]  107 	push	af
                            108 ;../_free.c:81: pthis = (MEMHEADER * )((char *)  p - HEADER_SIZE); //to start of header
   0042 DD 7E 04      [14]  109 	ld	a, 4 (ix)
   0045 DD 66 05      [14]  110 	ld	h, 5 (ix)
   0048 C6 FA         [ 6]  111 	add	a,#0xFA
   004A 4F            [ 4]  112 	ld	c,a
   004B 7C            [ 4]  113 	ld	a,h
   004C CE FF         [ 6]  114 	adc	a,#0xFF
   004E 47            [ 4]  115 	ld	b,a
                            116 ;../_free.c:82: if ( pthis->prev ) // For the regular header
   004F 69            [ 4]  117 	ld	l, c
   0050 60            [ 4]  118 	ld	h, b
   0051 23            [ 4]  119 	inc	hl
   0052 23            [ 4]  120 	inc	hl
   0053 5E            [ 6]  121 	ld	e,(hl)
   0054 23            [ 4]  122 	inc	hl
   0055 56            [ 6]  123 	ld	d,(hl)
   0056 7A            [ 4]  124 	ld	a,d
   0057 B3            [ 4]  125 	or	a,e
   0058 28 25         [ 8]  126 	jr	Z,00104$
                            127 ;../_free.c:84: prev_header = pthis->prev;
                            128 ;../_free.c:85: prev_header->next = pthis->next;
   005A 0A            [ 6]  129 	ld	a,(bc)
   005B DD 77 FE      [15]  130 	ld	-2 (ix),a
   005E 03            [ 4]  131 	inc	bc
   005F 0A            [ 6]  132 	ld	a,(bc)
   0060 DD 77 FF      [15]  133 	ld	-1 (ix),a
   0063 0B            [ 4]  134 	dec	bc
   0064 6B            [ 4]  135 	ld	l, e
   0065 62            [ 4]  136 	ld	h, d
   0066 DD 7E FE      [14]  137 	ld	a,-2 (ix)
   0069 77            [ 7]  138 	ld	(hl),a
   006A 23            [ 4]  139 	inc	hl
   006B DD 7E FF      [14]  140 	ld	a,-1 (ix)
   006E 77            [ 7]  141 	ld	(hl),a
                            142 ;../_free.c:86: if (pthis->next)
   006F 69            [ 4]  143 	ld	l, c
   0070 60            [ 4]  144 	ld	h, b
   0071 7E            [ 6]  145 	ld	a, (hl)
   0072 23            [ 4]  146 	inc	hl
   0073 66            [ 6]  147 	ld	h,(hl)
   0074 6F            [ 4]  148 	ld	l,a
   0075 B4            [ 4]  149 	or	a,h
   0076 28 0F         [ 8]  150 	jr	Z,00105$
                            151 ;../_free.c:88: pthis->next->prev = prev_header;
   0078 23            [ 4]  152 	inc	hl
   0079 23            [ 4]  153 	inc	hl
   007A 73            [ 7]  154 	ld	(hl),e
   007B 23            [ 4]  155 	inc	hl
   007C 72            [ 7]  156 	ld	(hl),d
   007D 18 08         [ 8]  157 	jr	00105$
   007F                     158 00104$:
                            159 ;../_free.c:93: pthis->len = 0; //For the first header
   007F 21 04 00      [ 9]  160 	ld	hl,#0x0004
   0082 09            [ 7]  161 	add	hl,bc
   0083 AF            [ 4]  162 	xor	a, a
   0084 77            [ 7]  163 	ld	(hl), a
   0085 23            [ 4]  164 	inc	hl
   0086 77            [ 7]  165 	ld	(hl), a
   0087                     166 00105$:
   0087 F1            [ 9]  167 	pop	af
   0088 E2r8Cr00      [ 9]  168 	jp	PO,00123$
   008B FB            [ 3]  169 	ei
   008C                     170 00123$:
   008C                     171 00108$:
   008C DD F9         [ 7]  172 	ld	sp, ix
   008E DD E1         [12]  173 	pop	ix
   0090 C9            [ 9]  174 	ret
                            175 	.area _CODE
                            176 	.area _INITIALIZER
                            177 	.area _CABS (ABS)
