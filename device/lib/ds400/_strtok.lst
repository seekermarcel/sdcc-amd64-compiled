                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:30 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _strtok
                                      7 	.optsdcc -mds400 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _strchr
                                     35 	.globl _strtok_PARM_2
                                     36 	.globl _strtok
                                     37 ;--------------------------------------------------------
                                     38 ; special function registers
                                     39 ;--------------------------------------------------------
                                     40 ;--------------------------------------------------------
                                     41 ; special function bits
                                     42 ;--------------------------------------------------------
                                     43 ;--------------------------------------------------------
                                     44 ; overlayable register banks
                                     45 ;--------------------------------------------------------
                                     46 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         47 	.ds 8
                                     48 	.area REG_BANK_3	(REL,OVR,DATA)
      000000                         49 	.ds 8
                                     50 ;--------------------------------------------------------
                                     51 ; internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area DSEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; overlayable items in internal ram 
                                     56 ;--------------------------------------------------------
                                     57 ;--------------------------------------------------------
                                     58 ; indirectly addressable internal ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area ISEG    (DATA)
                                     61 ;--------------------------------------------------------
                                     62 ; absolute internal ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area IABS    (ABS,DATA)
                                     65 	.area IABS    (ABS,DATA)
                                     66 ;--------------------------------------------------------
                                     67 ; bit data
                                     68 ;--------------------------------------------------------
                                     69 	.area BSEG    (BIT)
                                     70 ;--------------------------------------------------------
                                     71 ; paged external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area PSEG    (PAG,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XSEG    (XDATA)
      000000                         78 _strtok_PARM_2:
      000000                         79 	.ds 4
      000004                         80 _strtok_s_1_22:
      000004                         81 	.ds 4
                                     82 ;--------------------------------------------------------
                                     83 ; absolute external ram data
                                     84 ;--------------------------------------------------------
                                     85 	.area XABS    (ABS,XDATA)
                                     86 ;--------------------------------------------------------
                                     87 ; external initialized ram data
                                     88 ;--------------------------------------------------------
                                     89 	.area XISEG   (XDATA)
                                     90 ;--------------------------------------------------------
                                     91 ; global & static initialisations
                                     92 ;--------------------------------------------------------
                                     93 	.area HOME    (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 	.area GSFINAL (CODE)
                                     96 	.area GSINIT  (CODE)
                                     97 ;--------------------------------------------------------
                                     98 ; Home
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME    (CODE)
                                    101 	.area HOME    (CODE)
                                    102 ;--------------------------------------------------------
                                    103 ; code
                                    104 ;--------------------------------------------------------
                                    105 	.area CSEG    (CODE)
                                    106 ;------------------------------------------------------------
                                    107 ;Allocation info for local variables in function 'strtok'
                                    108 ;------------------------------------------------------------
                                    109 ;control                   Allocated with name '_strtok_PARM_2'
                                    110 ;str                       Allocated to registers r2 r3 r4 r5 
                                    111 ;s                         Allocated with name '_strtok_s_1_22'
                                    112 ;s1                        Allocated to registers r2 r3 r4 r5 
                                    113 ;------------------------------------------------------------
                                    114 ;	_strtok.c:36: char * strtok ( char * str, const char * control )
                                    115 ;	-----------------------------------------
                                    116 ;	 function strtok
                                    117 ;	-----------------------------------------
      000000                        118 _strtok:
                           000002   119 	ar2 = 0x02
                           000003   120 	ar3 = 0x03
                           000004   121 	ar4 = 0x04
                           000005   122 	ar5 = 0x05
                           000006   123 	ar6 = 0x06
                           000007   124 	ar7 = 0x07
                           000000   125 	ar0 = 0x00
                           000001   126 	ar1 = 0x01
      000000 AA 82            [ 8]  127 	mov	r2,dpl
      000002 AB 83            [ 8]  128 	mov	r3,dph
      000004 AC 93            [ 8]  129 	mov	r4,dpx
      000006 AD F0            [ 8]  130 	mov	r5,b
                                    131 ;	_strtok.c:41: if ( str )
      000008 EA               [ 4]  132 	mov	a,r2
      000009 4B               [ 4]  133 	orl	a,r3
      00000A 4C               [ 4]  134 	orl	a,r4
      00000B 60 0F            [12]  135 	jz  00102$
      00000D                        136 00148$:
                                    137 ;	_strtok.c:42: s = str;
                                    138 ;	genAssign: resultIsFar = TRUE
      00000D 90s00r00r04      [12]  139 	mov	dptr,#_strtok_s_1_22
      000011 EA               [ 4]  140 	mov	a,r2
      000012 F0               [ 8]  141 	movx	@dptr,a
      000013 A3               [12]  142 	inc	dptr
      000014 EB               [ 4]  143 	mov	a,r3
      000015 F0               [ 8]  144 	movx	@dptr,a
      000016 A3               [12]  145 	inc	dptr
      000017 EC               [ 4]  146 	mov	a,r4
      000018 F0               [ 8]  147 	movx	@dptr,a
      000019 A3               [12]  148 	inc	dptr
      00001A ED               [ 4]  149 	mov	a,r5
      00001B F0               [ 8]  150 	movx	@dptr,a
      00001C                        151 00102$:
                                    152 ;	_strtok.c:43: if ( !s )
      00001C 90s00r00r04      [12]  153 	mov	dptr,#_strtok_s_1_22
      000020 E0               [ 8]  154 	movx	a,@dptr
      000021 F5 F0            [ 8]  155 	mov	b,a
      000023 A3               [12]  156 	inc	dptr
      000024 E0               [ 8]  157 	movx	a,@dptr
      000025 42 F0            [ 8]  158 	orl	b,a
      000027 A3               [12]  159 	inc	dptr
      000028 E0               [ 8]  160 	movx	a,@dptr
      000029 45 F0            [ 8]  161 	orl	a,b
      00002B 70 0B            [12]  162 	jnz  00108$
      00002D                        163 00149$:
                                    164 ;	_strtok.c:44: return NULL;
      00002D 90 00 00 00      [12]  165 	mov  dptr,#0x0000
      000031 75 F0 00         [12]  166 	mov	b,#0x00
      000034 02s00r01r8F      [16]  167 	ljmp	00119$
                                    168 ;	_strtok.c:46: while (*s) {
      000038                        169 00108$:
      000038 90s00r00r04      [12]  170 	mov	dptr,#_strtok_s_1_22
                                    171 ;	genAssign: resultIsFar = FALSE
      00003C E0               [ 8]  172 	movx	a,@dptr
      00003D FA               [ 4]  173 	mov	r2,a
      00003E A3               [12]  174 	inc	dptr
      00003F E0               [ 8]  175 	movx	a,@dptr
      000040 FB               [ 4]  176 	mov	r3,a
      000041 A3               [12]  177 	inc	dptr
      000042 E0               [ 8]  178 	movx	a,@dptr
      000043 FC               [ 4]  179 	mov	r4,a
      000044 A3               [12]  180 	inc	dptr
      000045 E0               [ 8]  181 	movx	a,@dptr
      000046 FD               [ 4]  182 	mov	r5,a
      000047 8A 82            [ 8]  183 	mov	dpl,r2
      000049 8B 83            [ 8]  184 	mov	dph,r3
      00004B 8C 93            [ 8]  185 	mov	dpx,r4
      00004D 8D F0            [ 8]  186 	mov	b,r5
      00004F 12s00r00r00      [16]  187 	lcall	__gptrget
      000053 FA               [ 4]  188 	mov  r2,a
      000054 60 47            [12]  189 	jz  00110$
      000056                        190 00150$:
                                    191 ;	_strtok.c:47: if (strchr(control,*s))
      000056 90s00r00r00      [12]  192 	mov	dptr,#_strchr_PARM_2
      00005A EA               [ 4]  193 	mov	a,r2
      00005B F0               [ 8]  194 	movx	@dptr,a
      00005C EA               [ 4]  195 	mov	a,r2
      00005D 33               [ 4]  196 	rlc	a
      00005E 95 E0            [ 8]  197 	subb	a,acc
      000060 A3               [12]  198 	inc	dptr
      000061 F0               [ 8]  199 	movx	@dptr,a
      000062 05 86            [ 8]  200 	inc	dps
      000064 90s00r00r00      [12]  201 	mov	dptr,#_strtok_PARM_2
      000068 E0               [ 8]  202 	movx	a,@dptr
      000069 F5 82            [ 8]  203 	mov	dpl,a
      00006B A3               [12]  204 	inc	dptr
      00006C E0               [ 8]  205 	movx	a,@dptr
      00006D F5 83            [ 8]  206 	mov	dph,a
      00006F A3               [12]  207 	inc	dptr
      000070 E0               [ 8]  208 	movx	a,@dptr
      000071 F5 93            [ 8]  209 	mov	dpx,a
      000073 A3               [12]  210 	inc	dptr
      000074 E0               [ 8]  211 	movx	a,@dptr
      000075 F5 F0            [ 8]  212 	mov	b,a
      000077 75 86 00         [12]  213 	mov	dps,#0
      00007A 12s00r00r00      [16]  214 	lcall	_strchr
      00007E E5 82            [ 8]  215 	mov	a,dpl
      000080 45 83            [ 8]  216 	orl	a,dph
      000082 45 93            [ 8]  217 	orl	a,dpx
      000084 60 17            [12]  218 	jz  00110$
      000086                        219 00151$:
                                    220 ;	_strtok.c:48: s++;
      000086 90s00r00r04      [12]  221 	mov	dptr,#_strtok_s_1_22
      00008A E0               [ 8]  222 	movx	a,@dptr
      00008B 24 01            [ 8]  223 	add	a,#0x01
      00008D F0               [ 8]  224 	movx	@dptr,a
      00008E A3               [12]  225 	inc	dptr
      00008F E0               [ 8]  226 	movx	a,@dptr
      000090 34 00            [ 8]  227 	addc	a,#0x00
      000092 F0               [ 8]  228 	movx	@dptr,a
      000093 A3               [12]  229 	inc	dptr
      000094 E0               [ 8]  230 	movx	a,@dptr
      000095 34 00            [ 8]  231 	addc	a,#0x00
      000097 F0               [ 8]  232 	movx	@dptr,a
      000098 A3               [12]  233 	inc	dptr
      000099 E0               [ 8]  234 	movx	a,@dptr
      00009A F0               [ 8]  235 	movx	@dptr,a
                                    236 ;	_strtok.c:50: break;
      00009B 80 9B            [12]  237 	sjmp 00108$
      00009D                        238 00110$:
                                    239 ;	_strtok.c:53: s1 = s;
      00009D 90s00r00r04      [12]  240 	mov	dptr,#_strtok_s_1_22
                                    241 ;	genAssign: resultIsFar = FALSE
      0000A1 E0               [ 8]  242 	movx	a,@dptr
      0000A2 FA               [ 4]  243 	mov	r2,a
      0000A3 A3               [12]  244 	inc	dptr
      0000A4 E0               [ 8]  245 	movx	a,@dptr
      0000A5 FB               [ 4]  246 	mov	r3,a
      0000A6 A3               [12]  247 	inc	dptr
      0000A7 E0               [ 8]  248 	movx	a,@dptr
      0000A8 FC               [ 4]  249 	mov	r4,a
      0000A9 A3               [12]  250 	inc	dptr
      0000AA E0               [ 8]  251 	movx	a,@dptr
      0000AB FD               [ 4]  252 	mov	r5,a
                                    253 ;	genAssign: resultIsFar = TRUE
                                    254 ;	_strtok.c:55: while (*s) {
      0000AC                        255 00113$:
      0000AC 90s00r00r04      [12]  256 	mov	dptr,#_strtok_s_1_22
                                    257 ;	genAssign: resultIsFar = FALSE
      0000B0 E0               [ 8]  258 	movx	a,@dptr
      0000B1 FE               [ 4]  259 	mov	r6,a
      0000B2 A3               [12]  260 	inc	dptr
      0000B3 E0               [ 8]  261 	movx	a,@dptr
      0000B4 FF               [ 4]  262 	mov	r7,a
      0000B5 A3               [12]  263 	inc	dptr
      0000B6 E0               [ 8]  264 	movx	a,@dptr
      0000B7 F8               [ 4]  265 	mov	r0,a
      0000B8 A3               [12]  266 	inc	dptr
      0000B9 E0               [ 8]  267 	movx	a,@dptr
      0000BA F9               [ 4]  268 	mov	r1,a
      0000BB 8E 82            [ 8]  269 	mov	dpl,r6
      0000BD 8F 83            [ 8]  270 	mov	dph,r7
      0000BF 88 93            [ 8]  271 	mov	dpx,r0
      0000C1 89 F0            [ 8]  272 	mov	b,r1
      0000C3 12s00r00r00      [16]  273 	lcall	__gptrget
      0000C7 FE               [ 4]  274 	mov  r6,a
      0000C8 70 04            [12]  275 	jnz	00152$
      0000CA 02s00r01r62      [16]  276 	ljmp	00115$
      0000CE                        277 00152$:
                                    278 ;	_strtok.c:56: if (strchr(control,*s)) {
      0000CE 90s00r00r00      [12]  279 	mov	dptr,#_strchr_PARM_2
      0000D2 EE               [ 4]  280 	mov	a,r6
      0000D3 F0               [ 8]  281 	movx	@dptr,a
      0000D4 EE               [ 4]  282 	mov	a,r6
      0000D5 33               [ 4]  283 	rlc	a
      0000D6 95 E0            [ 8]  284 	subb	a,acc
      0000D8 A3               [12]  285 	inc	dptr
      0000D9 F0               [ 8]  286 	movx	@dptr,a
      0000DA C0 02            [ 8]  287 	push	ar2
      0000DC C0 03            [ 8]  288 	push	ar3
      0000DE C0 04            [ 8]  289 	push	ar4
      0000E0 C0 05            [ 8]  290 	push	ar5
      0000E2 05 86            [ 8]  291 	inc	dps
      0000E4 90s00r00r00      [12]  292 	mov	dptr,#_strtok_PARM_2
      0000E8 E0               [ 8]  293 	movx	a,@dptr
      0000E9 F5 82            [ 8]  294 	mov	dpl,a
      0000EB A3               [12]  295 	inc	dptr
      0000EC E0               [ 8]  296 	movx	a,@dptr
      0000ED F5 83            [ 8]  297 	mov	dph,a
      0000EF A3               [12]  298 	inc	dptr
      0000F0 E0               [ 8]  299 	movx	a,@dptr
      0000F1 F5 93            [ 8]  300 	mov	dpx,a
      0000F3 A3               [12]  301 	inc	dptr
      0000F4 E0               [ 8]  302 	movx	a,@dptr
      0000F5 F5 F0            [ 8]  303 	mov	b,a
      0000F7 75 86 00         [12]  304 	mov	dps,#0
      0000FA 12s00r00r00      [16]  305 	lcall	_strchr
      0000FE D0 05            [ 8]  306 	pop	ar5
      000100 D0 04            [ 8]  307 	pop	ar4
      000102 D0 03            [ 8]  308 	pop	ar3
      000104 D0 02            [ 8]  309 	pop	ar2
      000106 E5 82            [ 8]  310 	mov	a,dpl
      000108 45 83            [ 8]  311 	orl	a,dph
      00010A 45 93            [ 8]  312 	orl	a,dpx
      00010C 60 3B            [12]  313 	jz  00112$
      00010E                        314 00153$:
                                    315 ;	_strtok.c:57: *s++ = '\0';
      00010E 90s00r00r04      [12]  316 	mov	dptr,#_strtok_s_1_22
                                    317 ;	genAssign: resultIsFar = FALSE
      000112 E0               [ 8]  318 	movx	a,@dptr
      000113 FE               [ 4]  319 	mov	r6,a
      000114 A3               [12]  320 	inc	dptr
      000115 E0               [ 8]  321 	movx	a,@dptr
      000116 FF               [ 4]  322 	mov	r7,a
      000117 A3               [12]  323 	inc	dptr
      000118 E0               [ 8]  324 	movx	a,@dptr
      000119 F8               [ 4]  325 	mov	r0,a
      00011A A3               [12]  326 	inc	dptr
      00011B E0               [ 8]  327 	movx	a,@dptr
      00011C F9               [ 4]  328 	mov	r1,a
      00011D 8E 82            [ 8]  329 	mov	dpl,r6
      00011F 8F 83            [ 8]  330 	mov	dph,r7
      000121 88 93            [ 8]  331 	mov	dpx,r0
      000123 89 F0            [ 8]  332 	mov	b,r1
      000125 E4               [ 4]  333 	clr	a
      000126 12s00r00r00      [16]  334 	lcall	__gptrput
      00012A 90s00r00r04      [12]  335 	mov	dptr,#_strtok_s_1_22
      00012E E0               [ 8]  336 	movx	a,@dptr
      00012F 24 01            [ 8]  337 	add	a,#0x01
      000131 F0               [ 8]  338 	movx	@dptr,a
      000132 A3               [12]  339 	inc	dptr
      000133 E0               [ 8]  340 	movx	a,@dptr
      000134 34 00            [ 8]  341 	addc	a,#0x00
      000136 F0               [ 8]  342 	movx	@dptr,a
      000137 A3               [12]  343 	inc	dptr
      000138 E0               [ 8]  344 	movx	a,@dptr
      000139 34 00            [ 8]  345 	addc	a,#0x00
      00013B F0               [ 8]  346 	movx	@dptr,a
      00013C A3               [12]  347 	inc	dptr
      00013D E0               [ 8]  348 	movx	a,@dptr
      00013E F0               [ 8]  349 	movx	@dptr,a
                                    350 ;	_strtok.c:58: return s1;
      00013F 8A 82            [ 8]  351 	mov	dpl,r2
      000141 8B 83            [ 8]  352 	mov	dph,r3
      000143 8C 93            [ 8]  353 	mov	dpx,r4
      000145 8D F0            [ 8]  354 	mov	b,r5
      000147 80 46            [12]  355 	sjmp 00119$
      000149                        356 00112$:
                                    357 ;	_strtok.c:60: s++ ;
      000149 90s00r00r04      [12]  358 	mov	dptr,#_strtok_s_1_22
      00014D E0               [ 8]  359 	movx	a,@dptr
      00014E 24 01            [ 8]  360 	add	a,#0x01
      000150 F0               [ 8]  361 	movx	@dptr,a
      000151 A3               [12]  362 	inc	dptr
      000152 E0               [ 8]  363 	movx	a,@dptr
      000153 34 00            [ 8]  364 	addc	a,#0x00
      000155 F0               [ 8]  365 	movx	@dptr,a
      000156 A3               [12]  366 	inc	dptr
      000157 E0               [ 8]  367 	movx	a,@dptr
      000158 34 00            [ 8]  368 	addc	a,#0x00
      00015A F0               [ 8]  369 	movx	@dptr,a
      00015B A3               [12]  370 	inc	dptr
      00015C E0               [ 8]  371 	movx	a,@dptr
      00015D F0               [ 8]  372 	movx	@dptr,a
      00015E 02s00r00rAC      [16]  373 	ljmp	00113$
      000162                        374 00115$:
                                    375 ;	_strtok.c:63: s = NULL;
                                    376 ;	genAssign: resultIsFar = TRUE
      000162 90s00r00r04      [12]  377 	mov	dptr,#_strtok_s_1_22
      000166 E4               [ 4]  378 	clr	a
      000167 F0               [ 8]  379 	movx	@dptr,a
      000168 A3               [12]  380 	inc	dptr
      000169 F0               [ 8]  381 	movx	@dptr,a
      00016A A3               [12]  382 	inc	dptr
      00016B F0               [ 8]  383 	movx	@dptr,a
      00016C A3               [12]  384 	inc	dptr
      00016D E4               [ 4]  385 	clr	a
      00016E F0               [ 8]  386 	movx	@dptr,a
                                    387 ;	_strtok.c:65: if (*s1)
      00016F 8A 82            [ 8]  388 	mov	dpl,r2
      000171 8B 83            [ 8]  389 	mov	dph,r3
      000173 8C 93            [ 8]  390 	mov	dpx,r4
      000175 8D F0            [ 8]  391 	mov	b,r5
      000177 12s00r00r00      [16]  392 	lcall	__gptrget
      00017B FE               [ 4]  393 	mov  r6,a
      00017C 60 0A            [12]  394 	jz  00117$
      00017E                        395 00154$:
                                    396 ;	_strtok.c:66: return s1;
      00017E 8A 82            [ 8]  397 	mov	dpl,r2
      000180 8B 83            [ 8]  398 	mov	dph,r3
      000182 8C 93            [ 8]  399 	mov	dpx,r4
      000184 8D F0            [ 8]  400 	mov	b,r5
      000186 80 07            [12]  401 	sjmp 00119$
      000188                        402 00117$:
                                    403 ;	_strtok.c:68: return NULL;
      000188 90 00 00 00      [12]  404 	mov  dptr,#0x0000
      00018C 75 F0 00         [12]  405 	mov	b,#0x00
      00018F                        406 00119$:
      00018F 22               [16]  407 	ret
                                    408 	.area CSEG    (CODE)
                                    409 	.area CONST   (CODE)
                                    410 	.area XINIT   (CODE)
                                    411 	.area CABS    (ABS,CODE)
