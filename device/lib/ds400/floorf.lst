                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:29 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module floorf
                                      7 	.optsdcc -mds400 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _floorf
                                     35 ;--------------------------------------------------------
                                     36 ; special function registers
                                     37 ;--------------------------------------------------------
                                     38 ;--------------------------------------------------------
                                     39 ; special function bits
                                     40 ;--------------------------------------------------------
                                     41 ;--------------------------------------------------------
                                     42 ; overlayable register banks
                                     43 ;--------------------------------------------------------
                                     44 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         45 	.ds 8
                                     46 	.area REG_BANK_3	(REL,OVR,DATA)
      000000                         47 	.ds 8
                                     48 ;--------------------------------------------------------
                                     49 ; internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area DSEG    (DATA)
                                     52 ;--------------------------------------------------------
                                     53 ; overlayable items in internal ram 
                                     54 ;--------------------------------------------------------
                                     55 ;--------------------------------------------------------
                                     56 ; indirectly addressable internal ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area ISEG    (DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; absolute internal ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area IABS    (ABS,DATA)
                                     63 	.area IABS    (ABS,DATA)
                                     64 ;--------------------------------------------------------
                                     65 ; bit data
                                     66 ;--------------------------------------------------------
                                     67 	.area BSEG    (BIT)
                                     68 ;--------------------------------------------------------
                                     69 ; paged external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area PSEG    (PAG,XDATA)
                                     72 ;--------------------------------------------------------
                                     73 ; external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area XSEG    (XDATA)
                                     76 ;--------------------------------------------------------
                                     77 ; absolute external ram data
                                     78 ;--------------------------------------------------------
                                     79 	.area XABS    (ABS,XDATA)
                                     80 ;--------------------------------------------------------
                                     81 ; external initialized ram data
                                     82 ;--------------------------------------------------------
                                     83 	.area XISEG   (XDATA)
                                     84 ;--------------------------------------------------------
                                     85 ; global & static initialisations
                                     86 ;--------------------------------------------------------
                                     87 	.area HOME    (CODE)
                                     88 	.area GSINIT  (CODE)
                                     89 	.area GSFINAL (CODE)
                                     90 	.area GSINIT  (CODE)
                                     91 ;--------------------------------------------------------
                                     92 ; Home
                                     93 ;--------------------------------------------------------
                                     94 	.area HOME    (CODE)
                                     95 	.area HOME    (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; code
                                     98 ;--------------------------------------------------------
                                     99 	.area CSEG    (CODE)
                                    100 ;------------------------------------------------------------
                                    101 ;Allocation info for local variables in function 'floorf'
                                    102 ;------------------------------------------------------------
                                    103 ;x                         Allocated to stack - _bp +1
                                    104 ;r                         Allocated to registers r6 r7 r0 r1 
                                    105 ;------------------------------------------------------------
                                    106 ;	floorf.c:33: float floorf (float x) _FLOAT_FUNC_REENTRANT
                                    107 ;	-----------------------------------------
                                    108 ;	 function floorf
                                    109 ;	-----------------------------------------
      000000                        110 _floorf:
                           000002   111 	ar2 = 0x02
                           000003   112 	ar3 = 0x03
                           000004   113 	ar4 = 0x04
                           000005   114 	ar5 = 0x05
                           000006   115 	ar6 = 0x06
                           000007   116 	ar7 = 0x07
                           000000   117 	ar0 = 0x00
                           000001   118 	ar1 = 0x01
      000000 C0*00            [ 8]  119 	push	_bpx
      000002 C0*01            [ 8]  120 	push	_bpx+1
      000004 85 81*00         [12]  121 	mov	_bpx,sp
      000007 85 9B*01         [12]  122 	mov	_bpx+1,esp
      00000A 53*01 03         [12]  123 	anl	_bpx+1,#3
      00000D 43*01 DC         [12]  124 	orl	_bpx+1,#0xDC
      000010 C0 E0            [ 8]  125 	push	acc
      000012 C0 E0            [ 8]  126 	push	acc
      000014 C0 E0            [ 8]  127 	push	acc
      000016 C0 E0            [ 8]  128 	push	acc
      000018 75 95 FF         [12]  129 	mov	dpx1,#0xFF
      00001B 85*01 85         [12]  130 	mov	dph1,_bpx+1
      00001E 85*00 84         [12]  131 	mov	dpl1,_bpx
      000021 75 86 01         [12]  132 	mov	dps,#1
      000024 A3               [12]  133 	inc	dptr
      000025 75 86 01         [12]  134 	mov	dps, #1
      000028 E5 82            [ 8]  135 	mov	a,dpl
      00002A F0               [ 8]  136 	movx	@dptr,a
      00002B A3               [12]  137 	inc	dptr
      00002C E5 83            [ 8]  138 	mov	a,dph
      00002E F0               [ 8]  139 	movx	@dptr,a
      00002F A3               [12]  140 	inc	dptr
      000030 E5 93            [ 8]  141 	mov	a,dpx
      000032 F0               [ 8]  142 	movx	@dptr,a
      000033 A3               [12]  143 	inc	dptr
      000034 E5 F0            [ 8]  144 	mov	a,b
      000036 F0               [ 8]  145 	movx	@dptr,a
      000037 75 86 00         [12]  146 	mov	dps,#0
                                    147 ;	floorf.c:36: r=x;
      00003A 75 95 FF         [12]  148 	mov	dpx1,#0xFF
      00003D 85*01 85         [12]  149 	mov	dph1,_bpx+1
      000040 85*00 84         [12]  150 	mov	dpl1,_bpx
      000043 75 86 01         [12]  151 	mov	dps,#1
      000046 A3               [12]  152 	inc	dptr
      000047 75 86 01         [12]  153 	mov	dps, #1
      00004A E0               [ 8]  154 	movx	a,@dptr
      00004B F5 82            [ 8]  155 	mov	dpl,a
      00004D A3               [12]  156 	inc	dptr
      00004E E0               [ 8]  157 	movx	a,@dptr
      00004F F5 83            [ 8]  158 	mov	dph,a
      000051 A3               [12]  159 	inc	dptr
      000052 E0               [ 8]  160 	movx	a,@dptr
      000053 F5 93            [ 8]  161 	mov	dpx,a
      000055 A3               [12]  162 	inc	dptr
      000056 E0               [ 8]  163 	movx	a,@dptr
      000057 F5 F0            [ 8]  164 	mov	b,a
      000059 75 86 00         [12]  165 	mov	dps,#0
      00005C 12s00r00r00      [16]  166 	lcall	___fs2slong
      000060 AE 82            [ 8]  167 	mov	r6,dpl
      000062 AF 83            [ 8]  168 	mov	r7,dph
      000064 A8 93            [ 8]  169 	mov	r0,dpx
      000066 A9 F0            [ 8]  170 	mov	r1,b
                                    171 ;	genAssign: resultIsFar = TRUE
                                    172 ;	floorf.c:37: if (r<=0)
      000068 C3               [ 4]  173 	clr	c
      000069 E4               [ 4]  174 	clr	a
      00006A 9E               [ 4]  175 	subb	a,r6
      00006B E4               [ 4]  176 	clr	a
      00006C 9F               [ 4]  177 	subb	a,r7
      00006D E4               [ 4]  178 	clr	a
      00006E 98               [ 4]  179 	subb	a,r0
      00006F E4               [ 4]  180 	clr	a
      000070 64 80            [ 8]  181 	xrl	a,#0x80
      000072 89 F0            [ 8]  182 	mov	b,r1
      000074 63 F0 80         [12]  183 	xrl	b,#0x80
      000077 95 F0            [ 8]  184 	subb	a,b
      000079 50 04            [12]  185 	jnc	00114$
      00007B 02s00r01r0C      [16]  186 	ljmp	00102$
      00007F                        187 00114$:
                                    188 ;	floorf.c:38: return (r+((r>x)?-1:0));
      00007F C0 06            [ 8]  189 	push	ar6
      000081 C0 07            [ 8]  190 	push	ar7
      000083 C0 00            [ 8]  191 	push	ar0
      000085 C0 01            [ 8]  192 	push	ar1
      000087 8E 82            [ 8]  193 	mov	dpl,r6
      000089 8F 83            [ 8]  194 	mov	dph,r7
      00008B 88 93            [ 8]  195 	mov	dpx,r0
      00008D 89 F0            [ 8]  196 	mov	b,r1
      00008F 12s00r00r00      [16]  197 	lcall	___slong2fs
      000093 AA 82            [ 8]  198 	mov	r2,dpl
      000095 AB 83            [ 8]  199 	mov	r3,dph
      000097 AC 93            [ 8]  200 	mov	r4,dpx
      000099 AD F0            [ 8]  201 	mov	r5,b
      00009B D0 01            [ 8]  202 	pop	ar1
      00009D D0 00            [ 8]  203 	pop	ar0
      00009F D0 07            [ 8]  204 	pop	ar7
      0000A1 D0 06            [ 8]  205 	pop	ar6
      0000A3 75 93 FF         [12]  206 	mov	dpx,#0xFF
      0000A6 85*01 83         [12]  207 	mov	dph,_bpx+1
      0000A9 85*00 82         [12]  208 	mov	dpl,_bpx
      0000AC A3               [12]  209 	inc	dptr
                                    210 ;	genAssign: resultIsFar = TRUE
      0000AD 75 86 21         [12]  211 	mov	dps,#0x21
      0000B0 90s00r00r00      [12]  212 	mov	dptr,#___fsgt_PARM_2
      0000B4 E0               [ 8]  213 	movx	a,@dptr
      0000B5 F0               [ 8]  214 	movx	@dptr,a
      0000B6 A3               [12]  215 	inc	dptr
      0000B7 A3               [12]  216 	inc	dptr
      0000B8 E0               [ 8]  217 	movx	a,@dptr
      0000B9 F0               [ 8]  218 	movx	@dptr,a
      0000BA A3               [12]  219 	inc	dptr
      0000BB A3               [12]  220 	inc	dptr
      0000BC E0               [ 8]  221 	movx	a,@dptr
      0000BD F0               [ 8]  222 	movx	@dptr,a
      0000BE A3               [12]  223 	inc	dptr
      0000BF A3               [12]  224 	inc	dptr
      0000C0 E0               [ 8]  225 	movx	a,@dptr
      0000C1 F0               [ 8]  226 	movx	@dptr,a
      0000C2 75 86 00         [12]  227 	mov	dps,#0
      0000C5 C0 06            [ 8]  228 	push	ar6
      0000C7 C0 07            [ 8]  229 	push	ar7
      0000C9 C0 00            [ 8]  230 	push	ar0
      0000CB C0 01            [ 8]  231 	push	ar1
      0000CD 8A 82            [ 8]  232 	mov	dpl,r2
      0000CF 8B 83            [ 8]  233 	mov	dph,r3
      0000D1 8C 93            [ 8]  234 	mov	dpx,r4
      0000D3 8D F0            [ 8]  235 	mov	b,r5
      0000D5 12s00r00r00      [16]  236 	lcall	___fsgt
      0000D9 D0 01            [ 8]  237 	pop	ar1
      0000DB D0 00            [ 8]  238 	pop	ar0
      0000DD D0 07            [ 8]  239 	pop	ar7
      0000DF D0 06            [ 8]  240 	pop	ar6
      0000E1 E5 82            [ 8]  241 	mov	a,dpl
      0000E3 60 04            [12]  242 	jz  00106$
      0000E5                        243 00115$:
                                    244 ;	genAssign: resultIsFar = FALSE
      0000E5 7A FF            [ 8]  245 	mov	r2,#0xFF
      0000E7 80 02            [12]  246 	sjmp 00107$
      0000E9                        247 00106$:
                                    248 ;	genAssign: resultIsFar = FALSE
      0000E9 7A 00            [ 8]  249 	mov	r2,#0x00
      0000EB                        250 00107$:
      0000EB EA               [ 4]  251 	mov	a,r2
      0000EC 33               [ 4]  252 	rlc	a
      0000ED 95 E0            [ 8]  253 	subb	a,acc
      0000EF FB               [ 4]  254 	mov	r3,a
      0000F0 FC               [ 4]  255 	mov	r4,a
      0000F1 FD               [ 4]  256 	mov	r5,a
      0000F2 EA               [ 4]  257 	mov	a,r2
      0000F3 2E               [ 4]  258 	add	a,r6
      0000F4 FA               [ 4]  259 	mov	r2,a
      0000F5 EB               [ 4]  260 	mov	a,r3
      0000F6 3F               [ 4]  261 	addc	a,r7
      0000F7 FB               [ 4]  262 	mov	r3,a
      0000F8 EC               [ 4]  263 	mov	a,r4
      0000F9 38               [ 4]  264 	addc	a,r0
      0000FA FC               [ 4]  265 	mov	r4,a
      0000FB ED               [ 4]  266 	mov	a,r5
      0000FC 39               [ 4]  267 	addc	a,r1
      0000FD FD               [ 4]  268 	mov	r5,a
      0000FE 8A 82            [ 8]  269 	mov	dpl,r2
      000100 8B 83            [ 8]  270 	mov	dph,r3
      000102 8C 93            [ 8]  271 	mov	dpx,r4
      000104 8D F0            [ 8]  272 	mov	b,r5
      000106 12s00r00r00      [16]  273 	lcall	___slong2fs
      00010A 80 0C            [12]  274 	sjmp 00104$
      00010C                        275 00102$:
                                    276 ;	floorf.c:40: return r;
      00010C 8E 82            [ 8]  277 	mov	dpl,r6
      00010E 8F 83            [ 8]  278 	mov	dph,r7
      000110 88 93            [ 8]  279 	mov	dpx,r0
      000112 89 F0            [ 8]  280 	mov	b,r1
      000114 12s00r00r00      [16]  281 	lcall	___slong2fs
      000118                        282 00104$:
      000118 85*00 81         [12]  283 	mov	sp,_bpx
      00011B 85*01 9B         [12]  284 	mov	esp,_bpx+1
      00011E D0*01            [ 8]  285 	pop	_bpx+1
      000120 D0*00            [ 8]  286 	pop	_bpx
      000122 22               [16]  287 	ret
                                    288 	.area CSEG    (CODE)
                                    289 	.area CONST   (CODE)
                                    290 	.area XINIT   (CODE)
                                    291 	.area CABS    (ABS,CODE)
