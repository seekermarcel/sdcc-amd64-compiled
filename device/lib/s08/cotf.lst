                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:10:36 2022
                              5 ;--------------------------------------------------------
                              6 	.cs08
                              7 	.module cotf
                              8 	.optsdcc -ms08
                              9 	
                             10 	.area HOME    (CODE)
                             11 	.area GSINIT0 (CODE)
                             12 	.area GSINIT  (CODE)
                             13 	.area GSFINAL (CODE)
                             14 	.area CSEG    (CODE)
                             15 	.area XINIT   (CODE)
                             16 	.area CONST   (CODE)
                             17 	.area DSEG    (PAG)
                             18 	.area OSEG    (PAG, OVR)
                             19 	.area XSEG
                             20 	.area XISEG
                             21 ;--------------------------------------------------------
                             22 ; Public variables in this module
                             23 ;--------------------------------------------------------
                             24 	.globl _tancotf
                             25 	.globl _fabsf
                             26 	.globl _cotf
                             27 ;--------------------------------------------------------
                             28 ; ram data
                             29 ;--------------------------------------------------------
                             30 	.area DSEG    (PAG)
                             31 ;--------------------------------------------------------
                             32 ; overlayable items in ram 
                             33 ;--------------------------------------------------------
                             34 ;--------------------------------------------------------
                             35 ; absolute ram data
                             36 ;--------------------------------------------------------
                             37 	.area IABS    (ABS)
                             38 	.area IABS    (ABS)
                             39 ;--------------------------------------------------------
                             40 ; absolute external ram data
                             41 ;--------------------------------------------------------
                             42 	.area XABS    (ABS)
                             43 ;--------------------------------------------------------
                             44 ; external initialized ram data
                             45 ;--------------------------------------------------------
                             46 	.area XISEG
                             47 ;--------------------------------------------------------
                             48 ; extended address mode data
                             49 ;--------------------------------------------------------
                             50 	.area XSEG
                             51 ;--------------------------------------------------------
                             52 ; global & static initialisations
                             53 ;--------------------------------------------------------
                             54 	.area HOME    (CODE)
                             55 	.area GSINIT  (CODE)
                             56 	.area GSFINAL (CODE)
                             57 	.area GSINIT  (CODE)
                             58 ;--------------------------------------------------------
                             59 ; Home
                             60 ;--------------------------------------------------------
                             61 	.area HOME    (CODE)
                             62 	.area HOME    (CODE)
                             63 ;--------------------------------------------------------
                             64 ; code
                             65 ;--------------------------------------------------------
                             66 	.area CSEG    (CODE)
                             67 ;------------------------------------------------------------
                             68 ;Allocation info for local variables in function 'cotf'
                             69 ;------------------------------------------------------------
                             70 ;x                         Allocated to stack - sp -2
                             71 ;y                         Allocated to stack - sp -8
                             72 ;sloc0                     Allocated to stack - sp -8
                             73 ;------------------------------------------------------------
                             74 ;../cotf.c:37: float cotf(float x) _FLOAT_FUNC_REENTRANT
                             75 ;	-----------------------------------------
                             76 ;	 function cotf
                             77 ;	-----------------------------------------
                             78 ;	Register assignment is optimal.
                             79 ;	Stack space usage: 4 bytes.
   0000                      80 _cotf:
   0000 A7 FC         [ 2]   81 	ais	#-4
                             82 ;../cotf.c:41: y=fabsf(x);
   0002 95            [ 2]   83 	tsx
   0003 E6 09         [ 3]   84 	lda	9,x
   0005 87            [ 2]   85 	psha
   0006 E6 08         [ 3]   86 	lda	8,x
   0008 87            [ 2]   87 	psha
   0009 E6 07         [ 3]   88 	lda	7,x
   000B 87            [ 2]   89 	psha
   000C E6 06         [ 3]   90 	lda	6,x
   000E 87            [ 2]   91 	psha
   000F CDr00r00      [ 6]   92 	jsr	_fabsf
   0012 C7r00r03      [ 4]   93 	sta	(___fslt_PARM_1 + 3)
   0015 CFr00r02      [ 4]   94 	stx	(___fslt_PARM_1 + 2)
   0018 B6*00         [ 3]   95 	lda	*___SDCC_hc08_ret2
   001A C7r00r01      [ 4]   96 	sta	(___fslt_PARM_1 + 1)
   001D B6*00         [ 3]   97 	lda	*___SDCC_hc08_ret3
   001F C7r00r00      [ 4]   98 	sta	___fslt_PARM_1
   0022 A7 04         [ 2]   99 	ais	#4
                            100 ;../cotf.c:42: if (y<1.0E-30) //This one requires more thinking...
   0024 45 0D A2      [ 3]  101 	ldhx	#0x0DA2
   0027 96r00r00      [ 5]  102 	sthx	___fslt_PARM_2
   002A 45 42 60      [ 3]  103 	ldhx	#0x4260
   002D 96r00r02      [ 5]  104 	sthx	(___fslt_PARM_2 + 2)
   0030 CDr00r00      [ 6]  105 	jsr	___fslt
   0033 4D            [ 1]  106 	tsta
   0034 27 3E         [ 3]  107 	beq	00105$
                            108 ;../cotf.c:44: errno = ERANGE;
   0036 45 00 22      [ 3]  109 	ldhx	#0x0022
   0039 96r00r00      [ 5]  110 	sthx	_errno
                            111 ;../cotf.c:45: if (x<0.0)
   003C 95            [ 2]  112 	tsx
   003D E6 06         [ 3]  113 	lda	6,x
   003F C7r00r00      [ 4]  114 	sta	___fslt_PARM_1
   0042 E6 07         [ 3]  115 	lda	7,x
   0044 C7r00r01      [ 4]  116 	sta	(___fslt_PARM_1 + 1)
   0047 E6 08         [ 3]  117 	lda	8,x
   0049 C7r00r02      [ 4]  118 	sta	(___fslt_PARM_1 + 2)
   004C E6 09         [ 3]  119 	lda	9,x
   004E C7r00r03      [ 4]  120 	sta	(___fslt_PARM_1 + 3)
   0051 8C            [ 1]  121 	clrh
   0052 5F            [ 1]  122 	clrx
   0053 96r00r00      [ 5]  123 	sthx	___fslt_PARM_2
   0056 96r00r02      [ 5]  124 	sthx	(___fslt_PARM_2 + 2)
   0059 CDr00r00      [ 6]  125 	jsr	___fslt
   005C 4D            [ 1]  126 	tsta
   005D 27 0A         [ 3]  127 	beq	00102$
                            128 ;../cotf.c:46: return -HUGE_VALF;
   005F A6 FF         [ 2]  129 	lda	#0xFF
   0061 97            [ 1]  130 	tax
   0062 6E 7F*00      [ 4]  131 	mov	#0x7F,*___SDCC_hc08_ret2
   0065 B7*00         [ 3]  132 	sta	*___SDCC_hc08_ret3
   0067 20 45         [ 3]  133 	bra	00106$
   0069                     134 00102$:
                            135 ;../cotf.c:48: return +HUGE_VALF;
   0069 A6 FF         [ 2]  136 	lda	#0xFF
   006B 97            [ 1]  137 	tax
   006C 6E 7F*00      [ 4]  138 	mov	#0x7F,*___SDCC_hc08_ret2
   006F 6E 7F*00      [ 4]  139 	mov	#0x7F,*___SDCC_hc08_ret3
   0072 20 3A         [ 3]  140 	bra	00106$
   0074                     141 00105$:
                            142 ;../cotf.c:50: return tancotf(x, 1);
   0074 95            [ 2]  143 	tsx
   0075 E6 06         [ 3]  144 	lda	6,x
   0077 C7r00r00      [ 4]  145 	sta	_tancotf_PARM_1
   007A E6 07         [ 3]  146 	lda	7,x
   007C C7r00r01      [ 4]  147 	sta	(_tancotf_PARM_1 + 1)
   007F E6 08         [ 3]  148 	lda	8,x
   0081 C7r00r02      [ 4]  149 	sta	(_tancotf_PARM_1 + 2)
   0084 E6 09         [ 3]  150 	lda	9,x
   0086 C7r00r03      [ 4]  151 	sta	(_tancotf_PARM_1 + 3)
   0089 A6 01         [ 2]  152 	lda	#0x01
   008B C7r00r00      [ 4]  153 	sta	_tancotf_PARM_2
   008E CDr00r00      [ 6]  154 	jsr	_tancotf
   0091 9E E7 04      [ 4]  155 	sta	4,s
   0094 9E EF 03      [ 4]  156 	stx	3,s
   0097 B6*00         [ 3]  157 	lda	*___SDCC_hc08_ret2
   0099 9E E7 02      [ 4]  158 	sta	2,s
   009C B6*00         [ 3]  159 	lda	*___SDCC_hc08_ret3
   009E 9E E7 01      [ 4]  160 	sta	1,s
   00A1 95            [ 2]  161 	tsx
   00A2 F6            [ 3]  162 	lda	,x
   00A3 B7*00         [ 3]  163 	sta	*___SDCC_hc08_ret3
   00A5 E6 01         [ 3]  164 	lda	1,x
   00A7 B7*00         [ 3]  165 	sta	*___SDCC_hc08_ret2
   00A9 EE 02         [ 3]  166 	ldx	2,x
   00AB 9E E6 04      [ 4]  167 	lda	4,s
   00AE                     168 00106$:
   00AE A7 04         [ 2]  169 	ais	#4
   00B0 81            [ 6]  170 	rts
                            171 	.area CSEG    (CODE)
                            172 	.area CONST   (CODE)
                            173 	.area XINIT   (CODE)
                            174 	.area CABS    (ABS,CODE)
