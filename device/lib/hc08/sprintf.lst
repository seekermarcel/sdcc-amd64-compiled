                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:10:35 2022
                              5 ;--------------------------------------------------------
                              6 	.module sprintf
                              7 	.optsdcc -mhc08
                              8 	
                              9 	.area HOME    (CODE)
                             10 	.area GSINIT0 (CODE)
                             11 	.area GSINIT  (CODE)
                             12 	.area GSFINAL (CODE)
                             13 	.area CSEG    (CODE)
                             14 	.area XINIT   (CODE)
                             15 	.area CONST   (CODE)
                             16 	.area DSEG    (PAG)
                             17 	.area OSEG    (PAG, OVR)
                             18 	.area XSEG
                             19 	.area XISEG
                             20 ;--------------------------------------------------------
                             21 ; Public variables in this module
                             22 ;--------------------------------------------------------
                             23 	.globl __print_format
                             24 	.globl _vsprintf_PARM_3
                             25 	.globl _vsprintf_PARM_2
                             26 	.globl _vsprintf
                             27 	.globl _sprintf
                             28 ;--------------------------------------------------------
                             29 ; ram data
                             30 ;--------------------------------------------------------
                             31 	.area DSEG    (PAG)
                             32 ;--------------------------------------------------------
                             33 ; overlayable items in ram 
                             34 ;--------------------------------------------------------
                             35 ;--------------------------------------------------------
                             36 ; absolute ram data
                             37 ;--------------------------------------------------------
                             38 	.area IABS    (ABS)
                             39 	.area IABS    (ABS)
                             40 ;--------------------------------------------------------
                             41 ; absolute external ram data
                             42 ;--------------------------------------------------------
                             43 	.area XABS    (ABS)
                             44 ;--------------------------------------------------------
                             45 ; external initialized ram data
                             46 ;--------------------------------------------------------
                             47 	.area XISEG
                             48 ;--------------------------------------------------------
                             49 ; extended address mode data
                             50 ;--------------------------------------------------------
                             51 	.area XSEG
   0000                      52 _vsprintf_PARM_2:
   0000                      53 	.ds 2
   0002                      54 _vsprintf_PARM_3:
   0002                      55 	.ds 2
   0004                      56 _vsprintf_buf_1_14:
   0004                      57 	.ds 2
   0006                      58 _vsprintf_i_1_15:
   0006                      59 	.ds 2
                             60 ;--------------------------------------------------------
                             61 ; global & static initialisations
                             62 ;--------------------------------------------------------
                             63 	.area HOME    (CODE)
                             64 	.area GSINIT  (CODE)
                             65 	.area GSFINAL (CODE)
                             66 	.area GSINIT  (CODE)
                             67 ;--------------------------------------------------------
                             68 ; Home
                             69 ;--------------------------------------------------------
                             70 	.area HOME    (CODE)
                             71 	.area HOME    (CODE)
                             72 ;--------------------------------------------------------
                             73 ; code
                             74 ;--------------------------------------------------------
                             75 	.area CSEG    (CODE)
                             76 ;------------------------------------------------------------
                             77 ;Allocation info for local variables in function 'put_char_to_string'
                             78 ;------------------------------------------------------------
                             79 ;p                         Allocated to stack - sp -2
                             80 ;c                         Allocated to registers a 
                             81 ;buf                       Allocated to registers x h 
                             82 ;sloc0                     Allocated to stack - sp -6
                             83 ;sloc1                     Allocated to stack - sp -8
                             84 ;------------------------------------------------------------
                             85 ;../sprintf.c:34: put_char_to_string (char c, void* p) _REENTRANT
                             86 ;	-----------------------------------------
                             87 ;	 function put_char_to_string
                             88 ;	-----------------------------------------
                             89 ;	Register assignment is optimal.
                             90 ;	Stack space usage: 4 bytes.
   0000                      91 _put_char_to_string:
   0000 A7 FC         [ 2]   92 	ais	#-4
                             93 ;../sprintf.c:36: char **buf = (char **)p;
   0002 9E EE 07      [ 4]   94 	ldx	7,s
   0005 89            [ 2]   95 	pshx
   0006 8A            [ 2]   96 	pulh
   0007 9E EE 08      [ 4]   97 	ldx	8,s
                             98 ;../sprintf.c:37: *(*buf)++ = c;
   000A 87            [ 2]   99 	psha
   000B F6            [ 2]  100 	lda	,x
   000C 9E E7 04      [ 4]  101 	sta	4,s
   000F E6 01         [ 3]  102 	lda	1,x
   0011 9E E7 05      [ 4]  103 	sta	5,s
   0014 9E E6 05      [ 4]  104 	lda	5,s
   0017 AB 01         [ 2]  105 	add	#0x01
   0019 9E E7 03      [ 4]  106 	sta	3,s
   001C 9E E6 04      [ 4]  107 	lda	4,s
   001F A9 00         [ 2]  108 	adc	#0
   0021 9E E7 02      [ 4]  109 	sta	2,s
   0024 9E E6 02      [ 4]  110 	lda	2,s
   0027 F7            [ 2]  111 	sta	,x
   0028 9E E6 03      [ 4]  112 	lda	3,s
   002B E7 01         [ 3]  113 	sta	1,x
   002D 86            [ 2]  114 	pula
   002E 9E EE 03      [ 4]  115 	ldx	3,s
   0031 89            [ 2]  116 	pshx
   0032 8A            [ 2]  117 	pulh
   0033 9E EE 04      [ 4]  118 	ldx	4,s
   0036 F7            [ 2]  119 	sta	,x
   0037 A7 04         [ 2]  120 	ais	#4
   0039 81            [ 4]  121 	rts
                            122 ;------------------------------------------------------------
                            123 ;Allocation info for local variables in function 'vsprintf'
                            124 ;------------------------------------------------------------
                            125 ;format                    Allocated with name '_vsprintf_PARM_2'
                            126 ;ap                        Allocated with name '_vsprintf_PARM_3'
                            127 ;buf                       Allocated with name '_vsprintf_buf_1_14'
                            128 ;i                         Allocated with name '_vsprintf_i_1_15'
                            129 ;------------------------------------------------------------
                            130 ;../sprintf.c:41: vsprintf (char *buf, const char *format, va_list ap)
                            131 ;	-----------------------------------------
                            132 ;	 function vsprintf
                            133 ;	-----------------------------------------
                            134 ;	Register assignment is optimal.
                            135 ;	Stack space usage: 0 bytes.
   003A                     136 _vsprintf:
   003A C7r00r05      [ 4]  137 	sta	(_vsprintf_buf_1_14 + 1)
   003D CFr00r04      [ 4]  138 	stx	_vsprintf_buf_1_14
                            139 ;../sprintf.c:44: i = _print_format (put_char_to_string, &buf, format, ap);
   0040 A6r04         [ 2]  140 	lda	#_vsprintf_buf_1_14
   0042 C7r00r01      [ 4]  141 	sta	(__print_format_PARM_2 + 1)
   0045 A6s00         [ 2]  142 	lda	#>_vsprintf_buf_1_14
   0047 C7r00r00      [ 4]  143 	sta	__print_format_PARM_2
   004A C6r00r00      [ 4]  144 	lda	_vsprintf_PARM_2
   004D C7r00r00      [ 4]  145 	sta	__print_format_PARM_3
   0050 C6r00r01      [ 4]  146 	lda	(_vsprintf_PARM_2 + 1)
   0053 C7r00r01      [ 4]  147 	sta	(__print_format_PARM_3 + 1)
   0056 C6r00r02      [ 4]  148 	lda	_vsprintf_PARM_3
   0059 C7r00r00      [ 4]  149 	sta	__print_format_PARM_4
   005C C6r00r03      [ 4]  150 	lda	(_vsprintf_PARM_3 + 1)
   005F C7r00r01      [ 4]  151 	sta	(__print_format_PARM_4 + 1)
   0062 A6r00         [ 2]  152 	lda	#_put_char_to_string
   0064 AEs00         [ 2]  153 	ldx	#>_put_char_to_string
   0066 CDr00r00      [ 5]  154 	jsr	__print_format
   0069 C7r00r07      [ 4]  155 	sta	(_vsprintf_i_1_15 + 1)
   006C CFr00r06      [ 4]  156 	stx	_vsprintf_i_1_15
                            157 ;../sprintf.c:45: *buf = 0;
   006F C6r00r04      [ 4]  158 	lda	_vsprintf_buf_1_14
   0072 87            [ 2]  159 	psha
   0073 8A            [ 2]  160 	pulh
   0074 CEr00r05      [ 4]  161 	ldx	(_vsprintf_buf_1_14 + 1)
   0077 4F            [ 1]  162 	clra
   0078 F7            [ 2]  163 	sta	,x
                            164 ;../sprintf.c:46: return i;
   0079 CEr00r06      [ 4]  165 	ldx	_vsprintf_i_1_15
   007C C6r00r07      [ 4]  166 	lda	(_vsprintf_i_1_15 + 1)
   007F 81            [ 4]  167 	rts
                            168 ;------------------------------------------------------------
                            169 ;Allocation info for local variables in function 'sprintf'
                            170 ;------------------------------------------------------------
                            171 ;buf                       Allocated to stack - sp +0
                            172 ;format                    Allocated to stack - sp +2
                            173 ;arg                       Allocated to registers 
                            174 ;i                         Allocated to stack - sp -4
                            175 ;------------------------------------------------------------
                            176 ;../sprintf.c:50: sprintf (char *buf, const char *format, ...)
                            177 ;	-----------------------------------------
                            178 ;	 function sprintf
                            179 ;	-----------------------------------------
                            180 ;	Register assignment is optimal.
                            181 ;	Stack space usage: 2 bytes.
   0080                     182 _sprintf:
   0080 A7 FE         [ 2]  183 	ais	#-2
                            184 ;../sprintf.c:55: va_start (arg, format);
   0082 95            [ 2]  185 	tsx
   0083 AF 06         [ 2]  186 	aix	#6
   0085 AF 02         [ 2]  187 	aix	#2
   0087 8B            [ 2]  188 	pshh
   0088 86            [ 2]  189 	pula
   0089 C7r00r00      [ 4]  190 	sta	__print_format_PARM_4
   008C CFr00r01      [ 4]  191 	stx	(__print_format_PARM_4 + 1)
                            192 ;../sprintf.c:56: i = _print_format (put_char_to_string, &buf, format, arg);
   008F 95            [ 2]  193 	tsx
   0090 AF 04         [ 2]  194 	aix	#4
   0092 CFr00r01      [ 4]  195 	stx	(__print_format_PARM_2 + 1)
   0095 8B            [ 2]  196 	pshh
   0096 86            [ 2]  197 	pula
   0097 C7r00r00      [ 4]  198 	sta	__print_format_PARM_2
   009A 95            [ 2]  199 	tsx
   009B E6 06         [ 3]  200 	lda	6,x
   009D C7r00r00      [ 4]  201 	sta	__print_format_PARM_3
   00A0 E6 07         [ 3]  202 	lda	7,x
   00A2 C7r00r01      [ 4]  203 	sta	(__print_format_PARM_3 + 1)
   00A5 A6r00         [ 2]  204 	lda	#_put_char_to_string
   00A7 AEs00         [ 2]  205 	ldx	#>_put_char_to_string
   00A9 CDr00r00      [ 5]  206 	jsr	__print_format
   00AC 9E E7 02      [ 4]  207 	sta	2,s
   00AF 9E EF 01      [ 4]  208 	stx	1,s
                            209 ;../sprintf.c:57: *buf = 0;
   00B2 9E E6 05      [ 4]  210 	lda	5,s
   00B5 87            [ 2]  211 	psha
   00B6 8A            [ 2]  212 	pulh
   00B7 9E EE 06      [ 4]  213 	ldx	6,s
   00BA 4F            [ 1]  214 	clra
   00BB F7            [ 2]  215 	sta	,x
                            216 ;../sprintf.c:60: return i;
   00BC 95            [ 2]  217 	tsx
   00BD FE            [ 2]  218 	ldx	,x
   00BE 9E E6 02      [ 4]  219 	lda	2,s
   00C1 A7 02         [ 2]  220 	ais	#2
   00C3 81            [ 4]  221 	rts
                            222 	.area CSEG    (CODE)
                            223 	.area CONST   (CODE)
                            224 	.area XINIT   (CODE)
                            225 	.area CABS    (ABS,CODE)
