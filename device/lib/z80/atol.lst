                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:15:26 2022
                              5 ;--------------------------------------------------------
                              6 	.module atol
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _atol
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 ;--------------------------------------------------------
                             17 ; ram data
                             18 ;--------------------------------------------------------
                             19 	.area _DATA
                             20 ;--------------------------------------------------------
                             21 ; ram data
                             22 ;--------------------------------------------------------
                             23 	.area _INITIALIZED
                             24 ;--------------------------------------------------------
                             25 ; absolute external ram data
                             26 ;--------------------------------------------------------
                             27 	.area _DABS (ABS)
                             28 ;--------------------------------------------------------
                             29 ; global & static initialisations
                             30 ;--------------------------------------------------------
                             31 	.area _HOME
                             32 	.area _GSINIT
                             33 	.area _GSFINAL
                             34 	.area _GSINIT
                             35 ;--------------------------------------------------------
                             36 ; Home
                             37 ;--------------------------------------------------------
                             38 	.area _HOME
                             39 	.area _HOME
                             40 ;--------------------------------------------------------
                             41 ; code
                             42 ;--------------------------------------------------------
                             43 	.area _CODE
                             44 ;../atol.c:34: long int atol(const char *nptr)
                             45 ;	---------------------------------
                             46 ; Function atol
                             47 ; ---------------------------------
   0000                      48 _atol::
   0000 DD E5         [15]   49 	push	ix
   0002 DD 21 00 00   [14]   50 	ld	ix,#0
   0006 DD 39         [15]   51 	add	ix,sp
   0008 21 F6 FF      [10]   52 	ld	hl,#-10
   000B 39            [11]   53 	add	hl,sp
   000C F9            [ 6]   54 	ld	sp,hl
                             55 ;../atol.c:36: long int ret = 0;
   000D AF            [ 4]   56 	xor	a, a
   000E DD 77 F7      [19]   57 	ld	-9 (ix),a
   0011 DD 77 F8      [19]   58 	ld	-8 (ix),a
   0014 DD 77 F9      [19]   59 	ld	-7 (ix),a
   0017 DD 77 FA      [19]   60 	ld	-6 (ix),a
                             61 ;../atol.c:39: while (isblank (*nptr))
   001A DD 5E 04      [19]   62 	ld	e,4 (ix)
   001D DD 56 05      [19]   63 	ld	d,5 (ix)
   0020                      64 00101$:
   0020 1A            [ 7]   65 	ld	a,(de)
   0021 6F            [ 4]   66 	ld	l,a
   0022 67            [ 4]   67 	ld	h,a
   0023 17            [ 4]   68 	rla
   0024 9F            [ 4]   69 	sbc	a, a
   0025 47            [ 4]   70 	ld	b,a
                             71 ;./../../include/ctype.h:53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
   0026 7C            [ 4]   72 	ld	a,h
   0027 FE 20         [ 7]   73 	cp	a,#0x20
   0029 28 04         [12]   74 	jr	Z,00115$
   002B D6 09         [ 7]   75 	sub	a, #0x09
   002D 20 03         [12]   76 	jr	NZ,00131$
   002F                      77 00115$:
                             78 ;../atol.c:40: nptr++;
   002F 13            [ 6]   79 	inc	de
   0030 18 EE         [12]   80 	jr	00101$
   0032                      81 00131$:
   0032 DD 73 04      [19]   82 	ld	4 (ix),e
   0035 DD 72 05      [19]   83 	ld	5 (ix),d
                             84 ;../atol.c:42: neg = (*nptr == '-');
   0038 7D            [ 4]   85 	ld	a,l
   0039 D6 2D         [ 7]   86 	sub	a, #0x2D
   003B 20 04         [12]   87 	jr	NZ,00157$
   003D 3E 01         [ 7]   88 	ld	a,#0x01
   003F 18 01         [12]   89 	jr	00158$
   0041                      90 00157$:
   0041 AF            [ 4]   91 	xor	a,a
   0042                      92 00158$:
   0042 DD 77 F6      [19]   93 	ld	-10 (ix),a
                             94 ;../atol.c:44: if (*nptr == '-' || *nptr == '+')
   0045 CB 47         [ 8]   95 	bit	0,a
   0047 20 05         [12]   96 	jr	NZ,00104$
   0049 7D            [ 4]   97 	ld	a,l
   004A D6 2B         [ 7]   98 	sub	a, #0x2B
   004C 20 07         [12]   99 	jr	NZ,00129$
   004E                     100 00104$:
                            101 ;../atol.c:45: nptr++;
   004E 13            [ 6]  102 	inc	de
   004F DD 73 04      [19]  103 	ld	4 (ix),e
   0052 DD 72 05      [19]  104 	ld	5 (ix),d
                            105 ;../atol.c:47: while (isdigit (*nptr))
   0055                     106 00129$:
   0055 DD 4E 04      [19]  107 	ld	c,4 (ix)
   0058 DD 46 05      [19]  108 	ld	b,5 (ix)
   005B                     109 00107$:
   005B 0A            [ 7]  110 	ld	a,(bc)
   005C 5F            [ 4]  111 	ld	e,a
   005D 17            [ 4]  112 	rla
   005E 9F            [ 4]  113 	sbc	a, a
   005F 57            [ 4]  114 	ld	d,a
   0060 6B            [ 4]  115 	ld	l, e
                            116 ;./../../include/ctype.h:62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
   0061 7D            [ 4]  117 	ld	a,l
   0062 D6 30         [ 7]  118 	sub	a, #0x30
   0064 38 61         [12]  119 	jr	C,00109$
   0066 3E 39         [ 7]  120 	ld	a,#0x39
   0068 95            [ 4]  121 	sub	a, l
   0069 38 5C         [12]  122 	jr	C,00109$
                            123 ;../atol.c:48: ret = ret * 10 + (*(nptr++) - '0');
   006B C5            [11]  124 	push	bc
   006C D5            [11]  125 	push	de
   006D DD 6E F9      [19]  126 	ld	l,-7 (ix)
   0070 DD 66 FA      [19]  127 	ld	h,-6 (ix)
   0073 E5            [11]  128 	push	hl
   0074 DD 6E F7      [19]  129 	ld	l,-9 (ix)
   0077 DD 66 F8      [19]  130 	ld	h,-8 (ix)
   007A E5            [11]  131 	push	hl
   007B 21 00 00      [10]  132 	ld	hl,#0x0000
   007E E5            [11]  133 	push	hl
   007F 21 0A 00      [10]  134 	ld	hl,#0x000A
   0082 E5            [11]  135 	push	hl
   0083 CDr00r00      [17]  136 	call	__mullong
   0086 F1            [10]  137 	pop	af
   0087 F1            [10]  138 	pop	af
   0088 F1            [10]  139 	pop	af
   0089 F1            [10]  140 	pop	af
   008A DD 72 FF      [19]  141 	ld	-1 (ix),d
   008D DD 73 FE      [19]  142 	ld	-2 (ix),e
   0090 DD 74 FD      [19]  143 	ld	-3 (ix),h
   0093 DD 75 FC      [19]  144 	ld	-4 (ix),l
   0096 D1            [10]  145 	pop	de
   0097 C1            [10]  146 	pop	bc
   0098 03            [ 6]  147 	inc	bc
   0099 7B            [ 4]  148 	ld	a,e
   009A C6 D0         [ 7]  149 	add	a,#0xD0
   009C 6F            [ 4]  150 	ld	l,a
   009D 7A            [ 4]  151 	ld	a,d
   009E CE FF         [ 7]  152 	adc	a,#0xFF
   00A0 67            [ 4]  153 	ld	h,a
   00A1 17            [ 4]  154 	rla
   00A2 9F            [ 4]  155 	sbc	a, a
   00A3 5F            [ 4]  156 	ld	e,a
   00A4 57            [ 4]  157 	ld	d,a
   00A5 DD 7E FC      [19]  158 	ld	a,-4 (ix)
   00A8 85            [ 4]  159 	add	a, l
   00A9 6F            [ 4]  160 	ld	l,a
   00AA DD 7E FD      [19]  161 	ld	a,-3 (ix)
   00AD 8C            [ 4]  162 	adc	a, h
   00AE 67            [ 4]  163 	ld	h,a
   00AF DD 7E FE      [19]  164 	ld	a,-2 (ix)
   00B2 8B            [ 4]  165 	adc	a, e
   00B3 5F            [ 4]  166 	ld	e,a
   00B4 DD 7E FF      [19]  167 	ld	a,-1 (ix)
   00B7 8A            [ 4]  168 	adc	a, d
   00B8 57            [ 4]  169 	ld	d,a
   00B9 DD 75 F7      [19]  170 	ld	-9 (ix),l
   00BC DD 74 F8      [19]  171 	ld	-8 (ix),h
   00BF DD 73 F9      [19]  172 	ld	-7 (ix),e
   00C2 DD 72 FA      [19]  173 	ld	-6 (ix),d
   00C5 18 94         [12]  174 	jr	00107$
   00C7                     175 00109$:
                            176 ;../atol.c:50: return (neg ? -ret : ret); // Since -LONG_MIN is LONG_MIN in sdcc, the result value always turns out ok.
   00C7 DD CB F6 46   [20]  177 	bit	0,-10 (ix)
   00CB 28 19         [12]  178 	jr	Z,00120$
   00CD AF            [ 4]  179 	xor	a, a
   00CE DD 96 F7      [19]  180 	sub	a, -9 (ix)
   00D1 6F            [ 4]  181 	ld	l,a
   00D2 3E 00         [ 7]  182 	ld	a, #0x00
   00D4 DD 9E F8      [19]  183 	sbc	a, -8 (ix)
   00D7 67            [ 4]  184 	ld	h,a
   00D8 3E 00         [ 7]  185 	ld	a, #0x00
   00DA DD 9E F9      [19]  186 	sbc	a, -7 (ix)
   00DD 5F            [ 4]  187 	ld	e,a
   00DE 3E 00         [ 7]  188 	ld	a, #0x00
   00E0 DD 9E FA      [19]  189 	sbc	a, -6 (ix)
   00E3 57            [ 4]  190 	ld	d,a
   00E4 18 0C         [12]  191 	jr	00121$
   00E6                     192 00120$:
   00E6 DD 6E F7      [19]  193 	ld	l,-9 (ix)
   00E9 DD 66 F8      [19]  194 	ld	h,-8 (ix)
   00EC DD 5E F9      [19]  195 	ld	e,-7 (ix)
   00EF DD 56 FA      [19]  196 	ld	d,-6 (ix)
   00F2                     197 00121$:
   00F2 DD F9         [10]  198 	ld	sp, ix
   00F4 DD E1         [14]  199 	pop	ix
   00F6 C9            [10]  200 	ret
                            201 	.area _CODE
                            202 	.area _INITIALIZER
                            203 	.area _CABS (ABS)
