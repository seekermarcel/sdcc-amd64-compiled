                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:10:33 2022
                              5 ;--------------------------------------------------------
                              6 	.module _strstr
                              7 	.optsdcc -mhc08
                              8 	
                              9 	.area HOME    (CODE)
                             10 	.area GSINIT0 (CODE)
                             11 	.area GSINIT  (CODE)
                             12 	.area GSFINAL (CODE)
                             13 	.area CSEG    (CODE)
                             14 	.area XINIT   (CODE)
                             15 	.area CONST   (CODE)
                             16 	.area DSEG    (PAG)
                             17 	.area OSEG    (PAG, OVR)
                             18 	.area XSEG
                             19 	.area XISEG
                             20 ;--------------------------------------------------------
                             21 ; Public variables in this module
                             22 ;--------------------------------------------------------
                             23 	.globl _strstr_PARM_2
                             24 	.globl _strstr
                             25 ;--------------------------------------------------------
                             26 ; ram data
                             27 ;--------------------------------------------------------
                             28 	.area DSEG    (PAG)
                             29 ;--------------------------------------------------------
                             30 ; overlayable items in ram 
                             31 ;--------------------------------------------------------
                             32 	.area	OSEG    (PAG, OVR)
   0000                      33 _strstr_sloc0_1_0:
   0000                      34 	.ds 2
   0002                      35 _strstr_sloc1_1_0:
   0002                      36 	.ds 1
   0003                      37 _strstr_sloc2_1_0:
   0003                      38 	.ds 2
   0005                      39 _strstr_sloc3_1_0:
   0005                      40 	.ds 2
   0007                      41 _strstr_sloc4_1_0:
   0007                      42 	.ds 2
   0009                      43 _strstr_sloc5_1_0:
   0009                      44 	.ds 2
   000B                      45 _strstr_sloc6_1_0:
   000B                      46 	.ds 2
                             47 ;--------------------------------------------------------
                             48 ; absolute ram data
                             49 ;--------------------------------------------------------
                             50 	.area IABS    (ABS)
                             51 	.area IABS    (ABS)
                             52 ;--------------------------------------------------------
                             53 ; absolute external ram data
                             54 ;--------------------------------------------------------
                             55 	.area XABS    (ABS)
                             56 ;--------------------------------------------------------
                             57 ; external initialized ram data
                             58 ;--------------------------------------------------------
                             59 	.area XISEG
                             60 ;--------------------------------------------------------
                             61 ; extended address mode data
                             62 ;--------------------------------------------------------
                             63 	.area XSEG
   0000                      64 _strstr_PARM_2:
   0000                      65 	.ds 2
   0002                      66 _strstr_cp_1_22:
   0002                      67 	.ds 2
                             68 ;--------------------------------------------------------
                             69 ; global & static initialisations
                             70 ;--------------------------------------------------------
                             71 	.area HOME    (CODE)
                             72 	.area GSINIT  (CODE)
                             73 	.area GSFINAL (CODE)
                             74 	.area GSINIT  (CODE)
                             75 ;--------------------------------------------------------
                             76 ; Home
                             77 ;--------------------------------------------------------
                             78 	.area HOME    (CODE)
                             79 	.area HOME    (CODE)
                             80 ;--------------------------------------------------------
                             81 ; code
                             82 ;--------------------------------------------------------
                             83 	.area CSEG    (CODE)
                             84 ;------------------------------------------------------------
                             85 ;Allocation info for local variables in function 'strstr'
                             86 ;------------------------------------------------------------
                             87 ;str2                      Allocated with name '_strstr_PARM_2'
                             88 ;str1                      Allocated to registers x h 
                             89 ;cp                        Allocated with name '_strstr_cp_1_22'
                             90 ;s1                        Allocated to registers 
                             91 ;s2                        Allocated to registers 
                             92 ;sloc0                     Allocated with name '_strstr_sloc0_1_0'
                             93 ;sloc1                     Allocated with name '_strstr_sloc1_1_0'
                             94 ;sloc2                     Allocated with name '_strstr_sloc2_1_0'
                             95 ;sloc3                     Allocated with name '_strstr_sloc3_1_0'
                             96 ;sloc4                     Allocated with name '_strstr_sloc4_1_0'
                             97 ;sloc5                     Allocated with name '_strstr_sloc5_1_0'
                             98 ;sloc6                     Allocated with name '_strstr_sloc6_1_0'
                             99 ;------------------------------------------------------------
                            100 ;../_strstr.c:31: char * strstr ( const char * str1, const char * str2 )
                            101 ;	-----------------------------------------
                            102 ;	 function strstr
                            103 ;	-----------------------------------------
                            104 ;	Register assignment might be sub-optimal.
                            105 ;	Stack space usage: 0 bytes.
   0000                     106 _strstr:
   0000 89            [ 2]  107 	pshx
   0001 97            [ 1]  108 	tax
   0002 8A            [ 2]  109 	pulh
                            110 ;../_strstr.c:33: const char * cp = str1;
   0003 8B            [ 2]  111 	pshh
   0004 86            [ 2]  112 	pula
   0005 C7r00r02      [ 4]  113 	sta	_strstr_cp_1_22
   0008 CFr00r03      [ 4]  114 	stx	(_strstr_cp_1_22 + 1)
                            115 ;../_strstr.c:37: if ( !*str2 )
   000B C6r00r00      [ 4]  116 	lda	_strstr_PARM_2
   000E B7*00         [ 3]  117 	sta	*_strstr_sloc0_1_0
   0010 C6r00r01      [ 4]  118 	lda	(_strstr_PARM_2 + 1)
   0013 B7*01         [ 3]  119 	sta	*(_strstr_sloc0_1_0 + 1)
   0015 89            [ 2]  120 	pshx
   0016 8B            [ 2]  121 	pshh
   0017 55*00         [ 4]  122 	ldhx	*_strstr_sloc0_1_0
   0019 F6            [ 2]  123 	lda	,x
   001A 8A            [ 2]  124 	pulh
   001B 88            [ 2]  125 	pulx
   001C 26 05         [ 3]  126 	bne	00122$
                            127 ;../_strstr.c:38: return str1;
   001E 89            [ 2]  128 	pshx
   001F 8B            [ 2]  129 	pshh
   0020 88            [ 2]  130 	pulx
   0021 86            [ 2]  131 	pula
   0022 81            [ 4]  132 	rts
                            133 ;../_strstr.c:40: while (*cp)
   0023                     134 00122$:
   0023 35*03         [ 4]  135 	sthx	*_strstr_sloc2_1_0
   0025                     136 00110$:
   0025 55*03         [ 4]  137 	ldhx	*_strstr_sloc2_1_0
   0027 FE            [ 2]  138 	ldx	,x
   0028 27 65         [ 3]  139 	beq	00112$
                            140 ;../_strstr.c:43: s2 = str2;
   002A 4E*00*05      [ 5]  141 	mov	*_strstr_sloc0_1_0,*_strstr_sloc3_1_0
   002D 4E*01*06      [ 5]  142 	mov	*(_strstr_sloc0_1_0 + 1),*(_strstr_sloc3_1_0 + 1)
                            143 ;../_strstr.c:45: while ( *s1 && *s2 && !(*s1-*s2) )
   0030 4E*03*07      [ 5]  144 	mov	*_strstr_sloc2_1_0,*_strstr_sloc4_1_0
   0033 4E*04*08      [ 5]  145 	mov	*(_strstr_sloc2_1_0 + 1),*(_strstr_sloc4_1_0 + 1)
   0036                     146 00105$:
   0036 55*07         [ 4]  147 	ldhx	*_strstr_sloc4_1_0
   0038 F6            [ 2]  148 	lda	,x
   0039 55*05         [ 4]  149 	ldhx	*_strstr_sloc3_1_0
   003B FE            [ 2]  150 	ldx	,x
   003C 4D            [ 1]  151 	tsta
   003D 27 34         [ 3]  152 	beq	00107$
   003F 5D            [ 1]  153 	tstx
   0040 27 31         [ 3]  154 	beq	00107$
   0042 B7*0A         [ 3]  155 	sta	*(_strstr_sloc5_1_0 + 1)
   0044 49            [ 1]  156 	rola	
   0045 4F            [ 1]  157 	clra	
   0046 A2 00         [ 2]  158 	sbc	#0x00
   0048 B7*09         [ 3]  159 	sta	*_strstr_sloc5_1_0
   004A 9F            [ 1]  160 	txa
   004B B7*0C         [ 3]  161 	sta	*(_strstr_sloc6_1_0 + 1)
   004D 49            [ 1]  162 	rola	
   004E 4F            [ 1]  163 	clra	
   004F A2 00         [ 2]  164 	sbc	#0x00
   0051 B7*0B         [ 3]  165 	sta	*_strstr_sloc6_1_0
   0053 B6*0A         [ 3]  166 	lda	*(_strstr_sloc5_1_0 + 1)
   0055 B0*0C         [ 3]  167 	sub	*(_strstr_sloc6_1_0 + 1)
   0057 B7*0C         [ 3]  168 	sta	*(_strstr_sloc6_1_0 + 1)
   0059 B6*09         [ 3]  169 	lda	*_strstr_sloc5_1_0
   005B B2*0B         [ 3]  170 	sbc	*_strstr_sloc6_1_0
   005D B7*0B         [ 3]  171 	sta	*_strstr_sloc6_1_0
   005F B6*0C         [ 3]  172 	lda	*(_strstr_sloc6_1_0 + 1)
   0061 BA*0B         [ 3]  173 	ora	*_strstr_sloc6_1_0
   0063 26 0E         [ 3]  174 	bne	00107$
                            175 ;../_strstr.c:46: s1++, s2++;
   0065 55*07         [ 4]  176 	ldhx	*_strstr_sloc4_1_0
   0067 AF 01         [ 2]  177 	aix	#1
   0069 35*07         [ 4]  178 	sthx	*_strstr_sloc4_1_0
   006B 55*05         [ 4]  179 	ldhx	*_strstr_sloc3_1_0
   006D AF 01         [ 2]  180 	aix	#1
   006F 35*05         [ 4]  181 	sthx	*_strstr_sloc3_1_0
   0071 20 C3         [ 3]  182 	bra	00105$
   0073                     183 00107$:
                            184 ;../_strstr.c:48: if (!*s2)
   0073 5D            [ 1]  185 	tstx
   0074 26 07         [ 3]  186 	bne	00109$
                            187 ;../_strstr.c:49: return( (char*)cp );
   0076 CEr00r02      [ 4]  188 	ldx	_strstr_cp_1_22
   0079 C6r00r03      [ 4]  189 	lda	(_strstr_cp_1_22 + 1)
   007C 81            [ 4]  190 	rts
   007D                     191 00109$:
                            192 ;../_strstr.c:51: cp++;
   007D 55*03         [ 4]  193 	ldhx	*_strstr_sloc2_1_0
   007F AF 01         [ 2]  194 	aix	#1
   0081 35*03         [ 4]  195 	sthx	*_strstr_sloc2_1_0
   0083 B6*03         [ 3]  196 	lda	*_strstr_sloc2_1_0
   0085 C7r00r02      [ 4]  197 	sta	_strstr_cp_1_22
   0088 B6*04         [ 3]  198 	lda	*(_strstr_sloc2_1_0 + 1)
   008A C7r00r03      [ 4]  199 	sta	(_strstr_cp_1_22 + 1)
   008D 20 96         [ 3]  200 	bra	00110$
   008F                     201 00112$:
                            202 ;../_strstr.c:54: return (NULL) ;
   008F 4F            [ 1]  203 	clra
   0090 97            [ 1]  204 	tax
   0091 81            [ 4]  205 	rts
                            206 	.area CSEG    (CODE)
                            207 	.area CONST   (CODE)
                            208 	.area XINIT   (CODE)
                            209 	.area CABS    (ABS,CODE)
