                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:10:36 2022
                              5 ;--------------------------------------------------------
                              6 	.cs08
                              7 	.module _moduint
                              8 	.optsdcc -ms08
                              9 	
                             10 	.area HOME    (CODE)
                             11 	.area GSINIT0 (CODE)
                             12 	.area GSINIT  (CODE)
                             13 	.area GSFINAL (CODE)
                             14 	.area CSEG    (CODE)
                             15 	.area XINIT   (CODE)
                             16 	.area CONST   (CODE)
                             17 	.area DSEG    (PAG)
                             18 	.area OSEG    (PAG, OVR)
                             19 	.area XSEG
                             20 	.area XISEG
                             21 ;--------------------------------------------------------
                             22 ; Public variables in this module
                             23 ;--------------------------------------------------------
                             24 	.globl __moduint_PARM_2
                             25 	.globl __moduint
                             26 ;--------------------------------------------------------
                             27 ; ram data
                             28 ;--------------------------------------------------------
                             29 	.area DSEG    (PAG)
                             30 ;--------------------------------------------------------
                             31 ; overlayable items in ram 
                             32 ;--------------------------------------------------------
                             33 	.area	OSEG    (PAG, OVR)
   0000                      34 __moduint_sloc0_1_0:
   0000                      35 	.ds 1
                             36 ;--------------------------------------------------------
                             37 ; absolute ram data
                             38 ;--------------------------------------------------------
                             39 	.area IABS    (ABS)
                             40 	.area IABS    (ABS)
                             41 ;--------------------------------------------------------
                             42 ; absolute external ram data
                             43 ;--------------------------------------------------------
                             44 	.area XABS    (ABS)
                             45 ;--------------------------------------------------------
                             46 ; external initialized ram data
                             47 ;--------------------------------------------------------
                             48 	.area XISEG
                             49 ;--------------------------------------------------------
                             50 ; extended address mode data
                             51 ;--------------------------------------------------------
                             52 	.area XSEG
   0000                      53 __moduint_PARM_2:
   0000                      54 	.ds 2
   0002                      55 __moduint_count_1_2:
   0002                      56 	.ds 1
                             57 ;--------------------------------------------------------
                             58 ; global & static initialisations
                             59 ;--------------------------------------------------------
                             60 	.area HOME    (CODE)
                             61 	.area GSINIT  (CODE)
                             62 	.area GSFINAL (CODE)
                             63 	.area GSINIT  (CODE)
                             64 ;--------------------------------------------------------
                             65 ; Home
                             66 ;--------------------------------------------------------
                             67 	.area HOME    (CODE)
                             68 	.area HOME    (CODE)
                             69 ;--------------------------------------------------------
                             70 ; code
                             71 ;--------------------------------------------------------
                             72 	.area CSEG    (CODE)
                             73 ;------------------------------------------------------------
                             74 ;Allocation info for local variables in function '_moduint'
                             75 ;------------------------------------------------------------
                             76 ;b                         Allocated with name '__moduint_PARM_2'
                             77 ;a                         Allocated to registers x h 
                             78 ;count                     Allocated with name '__moduint_count_1_2'
                             79 ;sloc0                     Allocated with name '__moduint_sloc0_1_0'
                             80 ;------------------------------------------------------------
                             81 ;../_moduint.c:173: _moduint (unsigned int a, unsigned int b)
                             82 ;	-----------------------------------------
                             83 ;	 function _moduint
                             84 ;	-----------------------------------------
                             85 ;	Register assignment is optimal.
                             86 ;	Stack space usage: 0 bytes.
   0000                      87 __moduint:
   0000 89            [ 2]   88 	pshx
   0001 97            [ 1]   89 	tax
   0002 8A            [ 3]   90 	pulh
                             91 ;../_moduint.c:175: unsigned char count = 0;
   0003 4F            [ 1]   92 	clra
   0004 C7r00r02      [ 4]   93 	sta	__moduint_count_1_2
                             94 ;../_moduint.c:177: while (!MSB_SET(b))
   0007                      95 00103$:
   0007 87            [ 2]   96 	psha
   0008 C6r00r00      [ 4]   97 	lda	__moduint_PARM_2
   000B 49            [ 1]   98 	rola
   000C 4F            [ 1]   99 	clra
   000D 49            [ 1]  100 	rola
   000E B7*00         [ 3]  101 	sta	*__moduint_sloc0_1_0
   0010 86            [ 3]  102 	pula
   0011 3D*00         [ 4]  103 	tst	*__moduint_sloc0_1_0
   0013 26 2F         [ 3]  104 	bne	00117$
                            105 ;../_moduint.c:179: b <<= 1;
   0015 87            [ 2]  106 	psha
   0016 89            [ 2]  107 	pshx
   0017 C6r00r01      [ 4]  108 	lda	(__moduint_PARM_2 + 1)
   001A CEr00r00      [ 4]  109 	ldx	__moduint_PARM_2
   001D 48            [ 1]  110 	lsla
   001E 59            [ 1]  111 	rolx
   001F C7r00r01      [ 4]  112 	sta	(__moduint_PARM_2 + 1)
   0022 CFr00r00      [ 4]  113 	stx	__moduint_PARM_2
   0025 88            [ 3]  114 	pulx
   0026 86            [ 3]  115 	pula
                            116 ;../_moduint.c:180: if (b > a)
   0027 3Er00r00      [ 6]  117 	cphx	__moduint_PARM_2
   002A 24 12         [ 3]  118 	bcc	00102$
                            119 ;../_moduint.c:182: b >>=1;
   002C 89            [ 2]  120 	pshx
   002D C6r00r01      [ 4]  121 	lda	(__moduint_PARM_2 + 1)
   0030 CEr00r00      [ 4]  122 	ldx	__moduint_PARM_2
   0033 54            [ 1]  123 	lsrx
   0034 46            [ 1]  124 	rora
   0035 C7r00r01      [ 4]  125 	sta	(__moduint_PARM_2 + 1)
   0038 CFr00r00      [ 4]  126 	stx	__moduint_PARM_2
   003B 88            [ 3]  127 	pulx
                            128 ;../_moduint.c:183: break;
   003C 20 06         [ 3]  129 	bra	00117$
   003E                     130 00102$:
                            131 ;../_moduint.c:185: count++;
   003E 4C            [ 1]  132 	inca
   003F C7r00r02      [ 4]  133 	sta	__moduint_count_1_2
   0042 20 C3         [ 3]  134 	bra	00103$
                            135 ;../_moduint.c:187: do
   0044                     136 00117$:
   0044 C6r00r02      [ 4]  137 	lda	__moduint_count_1_2
   0047                     138 00108$:
                            139 ;../_moduint.c:189: if (a >= b)
   0047 3Er00r00      [ 6]  140 	cphx	__moduint_PARM_2
   004A 25 0E         [ 3]  141 	bcs	00107$
                            142 ;../_moduint.c:190: a -= b;
   004C 87            [ 2]  143 	psha
   004D 9F            [ 1]  144 	txa
   004E C0r00r01      [ 4]  145 	sub	(__moduint_PARM_2 + 1)
   0051 97            [ 1]  146 	tax
   0052 8B            [ 2]  147 	pshh
   0053 86            [ 3]  148 	pula
   0054 C2r00r00      [ 4]  149 	sbc	__moduint_PARM_2
   0057 87            [ 2]  150 	psha
   0058 8A            [ 3]  151 	pulh
   0059 86            [ 3]  152 	pula
   005A                     153 00107$:
                            154 ;../_moduint.c:191: b >>= 1;
   005A 87            [ 2]  155 	psha
   005B 89            [ 2]  156 	pshx
   005C C6r00r01      [ 4]  157 	lda	(__moduint_PARM_2 + 1)
   005F CEr00r00      [ 4]  158 	ldx	__moduint_PARM_2
   0062 54            [ 1]  159 	lsrx
   0063 46            [ 1]  160 	rora
   0064 C7r00r01      [ 4]  161 	sta	(__moduint_PARM_2 + 1)
   0067 CFr00r00      [ 4]  162 	stx	__moduint_PARM_2
   006A 88            [ 3]  163 	pulx
   006B 86            [ 3]  164 	pula
                            165 ;../_moduint.c:193: while (count--);
   006C B7*00         [ 3]  166 	sta	*__moduint_sloc0_1_0
   006E 4A            [ 1]  167 	deca
   006F 3D*00         [ 4]  168 	tst	*__moduint_sloc0_1_0
   0071 26 D4         [ 3]  169 	bne	00108$
                            170 ;../_moduint.c:194: return a;
   0073 89            [ 2]  171 	pshx
   0074 8B            [ 2]  172 	pshh
   0075 88            [ 3]  173 	pulx
   0076 86            [ 3]  174 	pula
   0077 81            [ 6]  175 	rts
                            176 	.area CSEG    (CODE)
                            177 	.area CONST   (CODE)
                            178 	.area XINIT   (CODE)
                            179 	.area CABS    (ABS,CODE)
