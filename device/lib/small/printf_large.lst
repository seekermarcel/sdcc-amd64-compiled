                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:41 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module printf_large
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _strlen
                                     13 	.globl __print_format_PARM_4
                                     14 	.globl __print_format_PARM_3
                                     15 	.globl __print_format_PARM_2
                                     16 	.globl __print_format
                                     17 ;--------------------------------------------------------
                                     18 ; special function registers
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; special function bits
                                     24 ;--------------------------------------------------------
                                     25 	.area RSEG    (ABS,DATA)
      000000                         26 	.org 0x0000
                                     27 ;--------------------------------------------------------
                                     28 ; overlayable register banks
                                     29 ;--------------------------------------------------------
                                     30 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         31 	.ds 8
                                     32 ;--------------------------------------------------------
                                     33 ; internal ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area DSEG    (DATA)
      000000                         36 _output_char:
      000000                         37 	.ds 2
      000002                         38 _p:
      000002                         39 	.ds 3
      000005                         40 _value:
      000005                         41 	.ds 5
      00000A                         42 _charsOutputted:
      00000A                         43 	.ds 2
      00000C                         44 __print_format_PARM_2:
      00000C                         45 	.ds 3
      00000F                         46 __print_format_PARM_3:
      00000F                         47 	.ds 3
      000012                         48 __print_format_PARM_4:
      000012                         49 	.ds 1
      000013                         50 __print_format_radix_1_67:
      000013                         51 	.ds 1
      000014                         52 __print_format_width_1_67:
      000014                         53 	.ds 1
      000015                         54 __print_format_pstore_4_88:
      000015                         55 	.ds 1
      000016                         56 __print_format_sloc0_1_0:
      000016                         57 	.ds 1
      000017                         58 __print_format_sloc1_1_0:
      000017                         59 	.ds 3
                                     60 ;--------------------------------------------------------
                                     61 ; overlayable items in internal ram 
                                     62 ;--------------------------------------------------------
                                     63 	.area	OSEG    (OVR,DATA)
      000000                         64 _calculate_digit_radix_1_62:
      000000                         65 	.ds 1
      000001                         66 _calculate_digit_ul_1_63:
      000001                         67 	.ds 4
      000005                         68 _calculate_digit_i_1_63:
      000005                         69 	.ds 1
                                     70 ;--------------------------------------------------------
                                     71 ; indirectly addressable internal ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area ISEG    (DATA)
      000000                         74 __print_format_store_4_88:
      000000                         75 	.ds 6
                                     76 ;--------------------------------------------------------
                                     77 ; absolute internal ram data
                                     78 ;--------------------------------------------------------
                                     79 	.area IABS    (ABS,DATA)
                                     80 	.area IABS    (ABS,DATA)
                                     81 ;--------------------------------------------------------
                                     82 ; bit data
                                     83 ;--------------------------------------------------------
                                     84 	.area BSEG    (BIT)
      000000                         85 _lower_case:
      000000                         86 	.ds 1
      000001                         87 __print_format_left_justify_1_67:
      000001                         88 	.ds 1
      000002                         89 __print_format_zero_padding_1_67:
      000002                         90 	.ds 1
      000003                         91 __print_format_prefix_sign_1_67:
      000003                         92 	.ds 1
      000004                         93 __print_format_prefix_space_1_67:
      000004                         94 	.ds 1
      000005                         95 __print_format_signed_argument_1_67:
      000005                         96 	.ds 1
      000006                         97 __print_format_char_argument_1_67:
      000006                         98 	.ds 1
      000007                         99 __print_format_long_argument_1_67:
      000007                        100 	.ds 1
      000008                        101 __print_format_float_argument_1_67:
      000008                        102 	.ds 1
      000009                        103 __print_format_lsd_1_67:
      000009                        104 	.ds 1
                                    105 ;--------------------------------------------------------
                                    106 ; paged external ram data
                                    107 ;--------------------------------------------------------
                                    108 	.area PSEG    (PAG,XDATA)
                                    109 ;--------------------------------------------------------
                                    110 ; external ram data
                                    111 ;--------------------------------------------------------
                                    112 	.area XSEG    (XDATA)
                                    113 ;--------------------------------------------------------
                                    114 ; absolute external ram data
                                    115 ;--------------------------------------------------------
                                    116 	.area XABS    (ABS,XDATA)
                                    117 ;--------------------------------------------------------
                                    118 ; external initialized ram data
                                    119 ;--------------------------------------------------------
                                    120 	.area XISEG   (XDATA)
                                    121 	.area HOME    (CODE)
                                    122 	.area GSINIT0 (CODE)
                                    123 	.area GSINIT1 (CODE)
                                    124 	.area GSINIT2 (CODE)
                                    125 	.area GSINIT3 (CODE)
                                    126 	.area GSINIT4 (CODE)
                                    127 	.area GSINIT5 (CODE)
                                    128 	.area GSINIT  (CODE)
                                    129 	.area GSFINAL (CODE)
                                    130 	.area CSEG    (CODE)
                                    131 ;--------------------------------------------------------
                                    132 ; global & static initialisations
                                    133 ;--------------------------------------------------------
                                    134 	.area HOME    (CODE)
                                    135 	.area GSINIT  (CODE)
                                    136 	.area GSFINAL (CODE)
                                    137 	.area GSINIT  (CODE)
                                    138 ;--------------------------------------------------------
                                    139 ; Home
                                    140 ;--------------------------------------------------------
                                    141 	.area HOME    (CODE)
                                    142 	.area HOME    (CODE)
                                    143 ;--------------------------------------------------------
                                    144 ; code
                                    145 ;--------------------------------------------------------
                                    146 	.area CSEG    (CODE)
                                    147 ;------------------------------------------------------------
                                    148 ;Allocation info for local variables in function '_output_char'
                                    149 ;------------------------------------------------------------
                                    150 ;c                         Allocated to registers r7 
                                    151 ;------------------------------------------------------------
                                    152 ;	printf_large.c:105: _output_char (unsigned char c)
                                    153 ;	-----------------------------------------
                                    154 ;	 function _output_char
                                    155 ;	-----------------------------------------
      000000                        156 __output_char:
                           000007   157 	ar7 = 0x07
                           000006   158 	ar6 = 0x06
                           000005   159 	ar5 = 0x05
                           000004   160 	ar4 = 0x04
                           000003   161 	ar3 = 0x03
                           000002   162 	ar2 = 0x02
                           000001   163 	ar1 = 0x01
                           000000   164 	ar0 = 0x00
      000000 AF 82            [24]  165 	mov	r7,dpl
                                    166 ;	printf_large.c:107: output_char( c, p );
      000002 C0*02            [24]  167 	push	_p
      000004 C0*03            [24]  168 	push	(_p + 1)
      000006 C0*04            [24]  169 	push	(_p + 2)
      000008 12r00r0D         [24]  170 	lcall	00103$
      00000B 80 07            [24]  171 	sjmp	00104$
      00000D                        172 00103$:
      00000D C0*00            [24]  173 	push	_output_char
      00000F C0*01            [24]  174 	push	(_output_char + 1)
      000011 8F 82            [24]  175 	mov	dpl,r7
      000013 22               [24]  176 	ret
      000014                        177 00104$:
      000014 15 81            [12]  178 	dec	sp
      000016 15 81            [12]  179 	dec	sp
      000018 15 81            [12]  180 	dec	sp
                                    181 ;	printf_large.c:108: charsOutputted++;
      00001A 05*0A            [12]  182 	inc	_charsOutputted
      00001C E4               [12]  183 	clr	a
      00001D B5*0A 02         [24]  184 	cjne	a,_charsOutputted,00105$
      000020 05*0B            [12]  185 	inc	(_charsOutputted + 1)
      000022                        186 00105$:
      000022 22               [24]  187 	ret
                                    188 ;------------------------------------------------------------
                                    189 ;Allocation info for local variables in function 'output_digit'
                                    190 ;------------------------------------------------------------
                                    191 ;n                         Allocated to registers r7 
                                    192 ;c                         Allocated to registers r7 
                                    193 ;------------------------------------------------------------
                                    194 ;	printf_large.c:130: output_digit (unsigned char n)
                                    195 ;	-----------------------------------------
                                    196 ;	 function output_digit
                                    197 ;	-----------------------------------------
      000023                        198 _output_digit:
      000023 AF 82            [24]  199 	mov	r7,dpl
                                    200 ;	printf_large.c:132: register unsigned char c = n + (unsigned char)'0';
      000025 74 30            [12]  201 	mov	a,#0x30
      000027 2F               [12]  202 	add	a,r7
                                    203 ;	printf_large.c:134: if (c > (unsigned char)'9')
      000028 FF               [12]  204 	mov  r7,a
      000029 24 C6            [12]  205 	add	a,#0xff - 0x39
      00002B 50 0A            [24]  206 	jnc	00104$
                                    207 ;	printf_large.c:136: c += (unsigned char)('A' - '0' - 10);
      00002D 74 07            [12]  208 	mov	a,#0x07
      00002F 2F               [12]  209 	add	a,r7
      000030 FF               [12]  210 	mov	r7,a
                                    211 ;	printf_large.c:137: if (lower_case)
      000031 30*00 03         [24]  212 	jnb	_lower_case,00104$
                                    213 ;	printf_large.c:138: c = tolower(c);
      000034 43 07 20         [24]  214 	orl	ar7,#0x20
      000037                        215 00104$:
                                    216 ;	printf_large.c:140: _output_char( c );
      000037 8F 82            [24]  217 	mov	dpl,r7
      000039 02r00r00         [24]  218 	ljmp	__output_char
                                    219 ;------------------------------------------------------------
                                    220 ;Allocation info for local variables in function 'output_2digits'
                                    221 ;------------------------------------------------------------
                                    222 ;b                         Allocated to registers r7 
                                    223 ;------------------------------------------------------------
                                    224 ;	printf_large.c:157: output_2digits (unsigned char b)
                                    225 ;	-----------------------------------------
                                    226 ;	 function output_2digits
                                    227 ;	-----------------------------------------
      00003C                        228 _output_2digits:
                                    229 ;	printf_large.c:159: output_digit( b>>4   );
      00003C E5 82            [12]  230 	mov	a,dpl
      00003E FF               [12]  231 	mov	r7,a
      00003F C4               [12]  232 	swap	a
      000040 54 0F            [12]  233 	anl	a,#0x0F
      000042 F5 82            [12]  234 	mov	dpl,a
      000044 C0 07            [24]  235 	push	ar7
      000046 12r00r23         [24]  236 	lcall	_output_digit
      000049 D0 07            [24]  237 	pop	ar7
                                    238 ;	printf_large.c:160: output_digit( b&0x0F );
      00004B 74 0F            [12]  239 	mov	a,#0x0F
      00004D 5F               [12]  240 	anl	a,r7
      00004E F5 82            [12]  241 	mov	dpl,a
      000050 02r00r23         [24]  242 	ljmp	_output_digit
                                    243 ;------------------------------------------------------------
                                    244 ;Allocation info for local variables in function 'calculate_digit'
                                    245 ;------------------------------------------------------------
                                    246 ;radix                     Allocated with name '_calculate_digit_radix_1_62'
                                    247 ;ul                        Allocated with name '_calculate_digit_ul_1_63'
                                    248 ;b4                        Allocated to registers r2 
                                    249 ;i                         Allocated with name '_calculate_digit_i_1_63'
                                    250 ;------------------------------------------------------------
                                    251 ;	printf_large.c:189: calculate_digit (unsigned char radix)
                                    252 ;	-----------------------------------------
                                    253 ;	 function calculate_digit
                                    254 ;	-----------------------------------------
      000053                        255 _calculate_digit:
      000053 85 82*00         [24]  256 	mov	_calculate_digit_radix_1_62,dpl
                                    257 ;	printf_large.c:191: register unsigned long ul = value.ul;
      000056 85*05*01         [24]  258 	mov	_calculate_digit_ul_1_63,(_value + 0)
      000059 85*06*02         [24]  259 	mov	(_calculate_digit_ul_1_63 + 1),(_value + 1)
      00005C 85*07*03         [24]  260 	mov	(_calculate_digit_ul_1_63 + 2),(_value + 2)
      00005F 85*08*04         [24]  261 	mov	(_calculate_digit_ul_1_63 + 3),(_value + 3)
                                    262 ;	printf_large.c:192: register unsigned char b4 = value.byte[4];
      000062 AA*09            [24]  263 	mov	r2,(_value + 0x0004)
                                    264 ;	printf_large.c:193: register unsigned char i = 32;
      000064 75*05 20         [24]  265 	mov	_calculate_digit_i_1_63,#0x20
                                    266 ;	printf_large.c:195: do
      000067                        267 00103$:
                                    268 ;	printf_large.c:197: b4 = (b4 << 1);
      000067 EA               [12]  269 	mov	a,r2
      000068 2A               [12]  270 	add	a,r2
      000069 FA               [12]  271 	mov	r2,a
                                    272 ;	printf_large.c:198: b4 |= (ul >> 31) & 0x01;
      00006A E5*04            [12]  273 	mov	a,(_calculate_digit_ul_1_63 + 3)
      00006C 23               [12]  274 	rl	a
      00006D 54 01            [12]  275 	anl	a,#0x01
      00006F FF               [12]  276 	mov	r7,a
      000070 8A 06            [24]  277 	mov	ar6,r2
      000072 4E               [12]  278 	orl	a,r6
      000073 FA               [12]  279 	mov	r2,a
                                    280 ;	printf_large.c:199: ul <<= 1;
      000074 E5*01            [12]  281 	mov	a,_calculate_digit_ul_1_63
      000076 25*01            [12]  282 	add	a,_calculate_digit_ul_1_63
      000078 F5*01            [12]  283 	mov	_calculate_digit_ul_1_63,a
      00007A E5*02            [12]  284 	mov	a,(_calculate_digit_ul_1_63 + 1)
      00007C 33               [12]  285 	rlc	a
      00007D F5*02            [12]  286 	mov	(_calculate_digit_ul_1_63 + 1),a
      00007F E5*03            [12]  287 	mov	a,(_calculate_digit_ul_1_63 + 2)
      000081 33               [12]  288 	rlc	a
      000082 F5*03            [12]  289 	mov	(_calculate_digit_ul_1_63 + 2),a
      000084 E5*04            [12]  290 	mov	a,(_calculate_digit_ul_1_63 + 3)
      000086 33               [12]  291 	rlc	a
      000087 F5*04            [12]  292 	mov	(_calculate_digit_ul_1_63 + 3),a
                                    293 ;	printf_large.c:201: if (radix <= b4 )
      000089 C3               [12]  294 	clr	c
      00008A EA               [12]  295 	mov	a,r2
      00008B 95*00            [12]  296 	subb	a,_calculate_digit_radix_1_62
      00008D 40 08            [24]  297 	jc	00104$
                                    298 ;	printf_large.c:203: b4 -= radix;
      00008F EA               [12]  299 	mov	a,r2
      000090 C3               [12]  300 	clr	c
      000091 95*00            [12]  301 	subb	a,_calculate_digit_radix_1_62
      000093 FA               [12]  302 	mov	r2,a
                                    303 ;	printf_large.c:204: ul |= 1;
      000094 43*01 01         [24]  304 	orl	_calculate_digit_ul_1_63,#0x01
      000097                        305 00104$:
                                    306 ;	printf_large.c:206: } while (--i);
      000097 E5*05            [12]  307 	mov	a,_calculate_digit_i_1_63
      000099 14               [12]  308 	dec	a
      00009A FF               [12]  309 	mov	r7,a
      00009B 8F*05            [24]  310 	mov	_calculate_digit_i_1_63,r7
      00009D 70 C8            [24]  311 	jnz	00103$
                                    312 ;	printf_large.c:207: value.ul = ul;
      00009F 85*01*05         [24]  313 	mov	(_value + 0),_calculate_digit_ul_1_63
      0000A2 85*02*06         [24]  314 	mov	(_value + 1),(_calculate_digit_ul_1_63 + 1)
      0000A5 85*03*07         [24]  315 	mov	(_value + 2),(_calculate_digit_ul_1_63 + 2)
      0000A8 85*04*08         [24]  316 	mov	(_value + 3),(_calculate_digit_ul_1_63 + 3)
                                    317 ;	printf_large.c:208: value.byte[4] = b4;
      0000AB 8A*09            [24]  318 	mov	(_value + 0x0004),r2
      0000AD 22               [24]  319 	ret
                                    320 ;------------------------------------------------------------
                                    321 ;Allocation info for local variables in function '_print_format'
                                    322 ;------------------------------------------------------------
                                    323 ;pvoid                     Allocated with name '__print_format_PARM_2'
                                    324 ;format                    Allocated with name '__print_format_PARM_3'
                                    325 ;ap                        Allocated with name '__print_format_PARM_4'
                                    326 ;pfn                       Allocated to registers 
                                    327 ;radix                     Allocated with name '__print_format_radix_1_67'
                                    328 ;width                     Allocated with name '__print_format_width_1_67'
                                    329 ;decimals                  Allocated to registers r4 
                                    330 ;length                    Allocated to registers r5 
                                    331 ;c                         Allocated to registers r7 
                                    332 ;memtype                   Allocated to registers r4 
                                    333 ;pstore                    Allocated with name '__print_format_pstore_4_88'
                                    334 ;sloc0                     Allocated with name '__print_format_sloc0_1_0'
                                    335 ;sloc1                     Allocated with name '__print_format_sloc1_1_0'
                                    336 ;store                     Allocated with name '__print_format_store_4_88'
                                    337 ;------------------------------------------------------------
                                    338 ;	printf_large.c:434: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                                    339 ;	-----------------------------------------
                                    340 ;	 function _print_format
                                    341 ;	-----------------------------------------
      0000AE                        342 __print_format:
      0000AE 85 82*00         [24]  343 	mov	_output_char,dpl
      0000B1 85 83*01         [24]  344 	mov	(_output_char + 1),dph
                                    345 ;	printf_large.c:462: p = pvoid;
      0000B4 85*0C*02         [24]  346 	mov	_p,__print_format_PARM_2
      0000B7 85*0D*03         [24]  347 	mov	(_p + 1),(__print_format_PARM_2 + 1)
      0000BA 85*0E*04         [24]  348 	mov	(_p + 2),(__print_format_PARM_2 + 2)
                                    349 ;	printf_large.c:466: charsOutputted = 0;
      0000BD E4               [12]  350 	clr	a
      0000BE F5*0A            [12]  351 	mov	_charsOutputted,a
      0000C0 F5*0B            [12]  352 	mov	(_charsOutputted + 1),a
                                    353 ;	printf_large.c:475: while( c=*format++ )
      0000C2                        354 00243$:
      0000C2 AD*0F            [24]  355 	mov	r5,__print_format_PARM_3
      0000C4 AE*10            [24]  356 	mov	r6,(__print_format_PARM_3 + 1)
      0000C6 AF*11            [24]  357 	mov	r7,(__print_format_PARM_3 + 2)
      0000C8 8D 82            [24]  358 	mov	dpl,r5
      0000CA 8E 83            [24]  359 	mov	dph,r6
      0000CC 8F F0            [24]  360 	mov	b,r7
      0000CE 12r00r00         [24]  361 	lcall	__gptrget
      0000D1 FC               [12]  362 	mov	r4,a
      0000D2 74 01            [12]  363 	mov	a,#0x01
      0000D4 2D               [12]  364 	add	a,r5
      0000D5 F5*0F            [12]  365 	mov	__print_format_PARM_3,a
      0000D7 E4               [12]  366 	clr	a
      0000D8 3E               [12]  367 	addc	a,r6
      0000D9 F5*10            [12]  368 	mov	(__print_format_PARM_3 + 1),a
      0000DB 8F*11            [24]  369 	mov	(__print_format_PARM_3 + 2),r7
      0000DD EC               [12]  370 	mov	a,r4
      0000DE FF               [12]  371 	mov	r7,a
      0000DF 70 03            [24]  372 	jnz	00500$
      0000E1 02r05rB1         [24]  373 	ljmp	00245$
      0000E4                        374 00500$:
                                    375 ;	printf_large.c:477: if ( c=='%' )
      0000E4 BF 25 02         [24]  376 	cjne	r7,#0x25,00501$
      0000E7 80 03            [24]  377 	sjmp	00502$
      0000E9                        378 00501$:
      0000E9 02r05rA9         [24]  379 	ljmp	00241$
      0000EC                        380 00502$:
                                    381 ;	printf_large.c:479: left_justify    = 0;
      0000EC C2*01            [12]  382 	clr	__print_format_left_justify_1_67
                                    383 ;	printf_large.c:480: zero_padding    = 0;
      0000EE C2*02            [12]  384 	clr	__print_format_zero_padding_1_67
                                    385 ;	printf_large.c:481: prefix_sign     = 0;
      0000F0 C2*03            [12]  386 	clr	__print_format_prefix_sign_1_67
                                    387 ;	printf_large.c:482: prefix_space    = 0;
      0000F2 C2*04            [12]  388 	clr	__print_format_prefix_space_1_67
                                    389 ;	printf_large.c:483: signed_argument = 0;
      0000F4 C2*05            [12]  390 	clr	__print_format_signed_argument_1_67
                                    391 ;	printf_large.c:484: char_argument   = 0;
      0000F6 C2*06            [12]  392 	clr	__print_format_char_argument_1_67
                                    393 ;	printf_large.c:485: long_argument   = 0;
      0000F8 C2*07            [12]  394 	clr	__print_format_long_argument_1_67
                                    395 ;	printf_large.c:486: float_argument  = 0;
      0000FA C2*08            [12]  396 	clr	__print_format_float_argument_1_67
                                    397 ;	printf_large.c:487: radix           = 0;
      0000FC 75*13 00         [24]  398 	mov	__print_format_radix_1_67,#0x00
                                    399 ;	printf_large.c:488: width           = 0;
      0000FF 75*14 00         [24]  400 	mov	__print_format_width_1_67,#0x00
                                    401 ;	printf_large.c:489: decimals        = -1;
      000102 7C FF            [12]  402 	mov	r4,#0xFF
                                    403 ;	printf_large.c:491: get_conversion_spec:
      000104 AA*0F            [24]  404 	mov	r2,__print_format_PARM_3
      000106 AB*10            [24]  405 	mov	r3,(__print_format_PARM_3 + 1)
      000108 AE*11            [24]  406 	mov	r6,(__print_format_PARM_3 + 2)
      00010A                        407 00101$:
                                    408 ;	printf_large.c:493: c = *format++;
      00010A 8A 82            [24]  409 	mov	dpl,r2
      00010C 8B 83            [24]  410 	mov	dph,r3
      00010E 8E F0            [24]  411 	mov	b,r6
      000110 12r00r00         [24]  412 	lcall	__gptrget
      000113 FF               [12]  413 	mov	r7,a
      000114 A3               [24]  414 	inc	dptr
      000115 AA 82            [24]  415 	mov	r2,dpl
      000117 AB 83            [24]  416 	mov	r3,dph
      000119 8A*0F            [24]  417 	mov	__print_format_PARM_3,r2
      00011B 8B*10            [24]  418 	mov	(__print_format_PARM_3 + 1),r3
      00011D 8E*11            [24]  419 	mov	(__print_format_PARM_3 + 2),r6
                                    420 ;	printf_large.c:495: if (c=='%')
      00011F BF 25 07         [24]  421 	cjne	r7,#0x25,00103$
                                    422 ;	printf_large.c:497: OUTPUT_CHAR(c, p);
      000122 8F 82            [24]  423 	mov	dpl,r7
      000124 12r00r00         [24]  424 	lcall	__output_char
                                    425 ;	printf_large.c:498: continue;
      000127 80 99            [24]  426 	sjmp	00243$
      000129                        427 00103$:
                                    428 ;	printf_large.c:501: if (isdigit(c))
      000129 8F*16            [24]  429 	mov	__print_format_sloc0_1_0,r7
      00012B 74 D0            [12]  430 	mov	a,#0x100 - 0x30
      00012D 25*16            [12]  431 	add	a,__print_format_sloc0_1_0
      00012F 50 26            [24]  432 	jnc	00110$
      000131 E5*16            [12]  433 	mov	a,__print_format_sloc0_1_0
      000133 24 C6            [12]  434 	add	a,#0xff - 0x39
      000135 40 20            [24]  435 	jc	00110$
                                    436 ;	printf_large.c:503: if (decimals==-1)
      000137 BC FF 12         [24]  437 	cjne	r4,#0xFF,00107$
                                    438 ;	printf_large.c:505: width = 10*width + c - '0';
      00013A E5*14            [12]  439 	mov	a,__print_format_width_1_67
      00013C 75 F0 0A         [24]  440 	mov	b,#0x0A
      00013F A4               [48]  441 	mul	ab
      000140 FD               [12]  442 	mov	r5,a
      000141 2F               [12]  443 	add	a,r7
      000142 24 D0            [12]  444 	add	a,#0xD0
                                    445 ;	printf_large.c:506: if (width == 0)
      000144 F5*14            [12]  446 	mov	__print_format_width_1_67,a
      000146 70 C2            [24]  447 	jnz	00101$
                                    448 ;	printf_large.c:509: zero_padding = 1;
      000148 D2*02            [12]  449 	setb	__print_format_zero_padding_1_67
      00014A 80 BE            [24]  450 	sjmp	00101$
      00014C                        451 00107$:
                                    452 ;	printf_large.c:514: decimals = 10*decimals + c - '0';
      00014C EC               [12]  453 	mov	a,r4
      00014D 75 F0 0A         [24]  454 	mov	b,#0x0A
      000150 A4               [48]  455 	mul	ab
      000151 2F               [12]  456 	add	a,r7
      000152 24 D0            [12]  457 	add	a,#0xD0
      000154 FC               [12]  458 	mov	r4,a
                                    459 ;	printf_large.c:516: goto get_conversion_spec;
      000155 80 B3            [24]  460 	sjmp	00101$
      000157                        461 00110$:
                                    462 ;	printf_large.c:519: if (c=='.')
      000157 BF 2E 07         [24]  463 	cjne	r7,#0x2E,00115$
                                    464 ;	printf_large.c:521: if (decimals==-1)
      00015A BC FF AD         [24]  465 	cjne	r4,#0xFF,00101$
                                    466 ;	printf_large.c:522: decimals=0;
      00015D 7C 00            [12]  467 	mov	r4,#0x00
                                    468 ;	printf_large.c:525: goto get_conversion_spec;
      00015F 80 A9            [24]  469 	sjmp	00101$
      000161                        470 00115$:
                                    471 ;	printf_large.c:528: if (islower(c))
      000161 8F 05            [24]  472 	mov	ar5,r7
      000163 BD 61 00         [24]  473 	cjne	r5,#0x61,00514$
      000166                        474 00514$:
      000166 40 0C            [24]  475 	jc	00117$
      000168 ED               [12]  476 	mov	a,r5
      000169 24 85            [12]  477 	add	a,#0xff - 0x7A
      00016B 40 07            [24]  478 	jc	00117$
                                    479 ;	printf_large.c:530: c = toupper(c);
      00016D 53 07 DF         [24]  480 	anl	ar7,#0xDF
                                    481 ;	printf_large.c:531: lower_case = 1;
      000170 D2*00            [12]  482 	setb	_lower_case
      000172 80 02            [24]  483 	sjmp	00118$
      000174                        484 00117$:
                                    485 ;	printf_large.c:534: lower_case = 0;
      000174 C2*00            [12]  486 	clr	_lower_case
      000176                        487 00118$:
                                    488 ;	printf_large.c:536: switch( c )
      000176 BF 20 02         [24]  489 	cjne	r7,#0x20,00517$
      000179 80 6D            [24]  490 	sjmp	00122$
      00017B                        491 00517$:
      00017B BF 2B 02         [24]  492 	cjne	r7,#0x2B,00518$
      00017E 80 63            [24]  493 	sjmp	00121$
      000180                        494 00518$:
      000180 BF 2D 02         [24]  495 	cjne	r7,#0x2D,00519$
      000183 80 59            [24]  496 	sjmp	00120$
      000185                        497 00519$:
      000185 BF 42 02         [24]  498 	cjne	r7,#0x42,00520$
      000188 80 63            [24]  499 	sjmp	00123$
      00018A                        500 00520$:
      00018A BF 43 02         [24]  501 	cjne	r7,#0x43,00521$
      00018D 80 68            [24]  502 	sjmp	00129$
      00018F                        503 00521$:
      00018F BF 44 03         [24]  504 	cjne	r7,#0x44,00522$
      000192 02r03r53         [24]  505 	ljmp	00166$
      000195                        506 00522$:
      000195 BF 46 03         [24]  507 	cjne	r7,#0x46,00523$
      000198 02r03r69         [24]  508 	ljmp	00170$
      00019B                        509 00523$:
      00019B BF 48 03         [24]  510 	cjne	r7,#0x48,00524$
      00019E 02r01r0A         [24]  511 	ljmp	00101$
      0001A1                        512 00524$:
      0001A1 BF 49 03         [24]  513 	cjne	r7,#0x49,00525$
      0001A4 02r03r53         [24]  514 	ljmp	00166$
      0001A7                        515 00525$:
      0001A7 BF 4A 03         [24]  516 	cjne	r7,#0x4A,00526$
      0001AA 02r01r0A         [24]  517 	ljmp	00101$
      0001AD                        518 00526$:
      0001AD BF 4C 02         [24]  519 	cjne	r7,#0x4C,00527$
      0001B0 80 40            [24]  520 	sjmp	00128$
      0001B2                        521 00527$:
      0001B2 BF 4F 03         [24]  522 	cjne	r7,#0x4F,00528$
      0001B5 02r03r5A         [24]  523 	ljmp	00167$
      0001B8                        524 00528$:
      0001B8 BF 50 03         [24]  525 	cjne	r7,#0x50,00529$
      0001BB 02r02rE8         [24]  526 	ljmp	00152$
      0001BE                        527 00529$:
      0001BE BF 53 02         [24]  528 	cjne	r7,#0x53,00530$
      0001C1 80 5C            [24]  529 	sjmp	00133$
      0001C3                        530 00530$:
      0001C3 BF 54 03         [24]  531 	cjne	r7,#0x54,00531$
      0001C6 02r01r0A         [24]  532 	ljmp	00101$
      0001C9                        533 00531$:
      0001C9 BF 55 03         [24]  534 	cjne	r7,#0x55,00532$
      0001CC 02r03r5F         [24]  535 	ljmp	00168$
      0001CF                        536 00532$:
      0001CF BF 58 03         [24]  537 	cjne	r7,#0x58,00533$
      0001D2 02r03r64         [24]  538 	ljmp	00169$
      0001D5                        539 00533$:
      0001D5 BF 5A 03         [24]  540 	cjne	r7,#0x5A,00534$
      0001D8 02r01r0A         [24]  541 	ljmp	00101$
      0001DB                        542 00534$:
      0001DB 02r03r6D         [24]  543 	ljmp	00171$
                                    544 ;	printf_large.c:538: case '-':
      0001DE                        545 00120$:
                                    546 ;	printf_large.c:539: left_justify = 1;
      0001DE D2*01            [12]  547 	setb	__print_format_left_justify_1_67
                                    548 ;	printf_large.c:540: goto get_conversion_spec;
      0001E0 02r01r0A         [24]  549 	ljmp	00101$
                                    550 ;	printf_large.c:541: case '+':
      0001E3                        551 00121$:
                                    552 ;	printf_large.c:542: prefix_sign = 1;
      0001E3 D2*03            [12]  553 	setb	__print_format_prefix_sign_1_67
                                    554 ;	printf_large.c:543: goto get_conversion_spec;
      0001E5 02r01r0A         [24]  555 	ljmp	00101$
                                    556 ;	printf_large.c:544: case ' ':
      0001E8                        557 00122$:
                                    558 ;	printf_large.c:545: prefix_space = 1;
      0001E8 D2*04            [12]  559 	setb	__print_format_prefix_space_1_67
                                    560 ;	printf_large.c:546: goto get_conversion_spec;
      0001EA 02r01r0A         [24]  561 	ljmp	00101$
                                    562 ;	printf_large.c:547: case 'B': /* byte */
      0001ED                        563 00123$:
                                    564 ;	printf_large.c:548: char_argument = 1;
      0001ED D2*06            [12]  565 	setb	__print_format_char_argument_1_67
                                    566 ;	printf_large.c:549: goto get_conversion_spec;
      0001EF 02r01r0A         [24]  567 	ljmp	00101$
                                    568 ;	printf_large.c:556: case 'L': /* long */
      0001F2                        569 00128$:
                                    570 ;	printf_large.c:557: long_argument = 1;
      0001F2 D2*07            [12]  571 	setb	__print_format_long_argument_1_67
                                    572 ;	printf_large.c:558: goto get_conversion_spec;
      0001F4 02r01r0A         [24]  573 	ljmp	00101$
                                    574 ;	printf_large.c:560: case 'C':
      0001F7                        575 00129$:
                                    576 ;	printf_large.c:561: if( char_argument )
      0001F7 30*06 0C         [24]  577 	jnb	__print_format_char_argument_1_67,00131$
                                    578 ;	printf_large.c:562: c = va_arg(ap,char);
      0001FA E5*12            [12]  579 	mov	a,__print_format_PARM_4
      0001FC 14               [12]  580 	dec	a
      0001FD FE               [12]  581 	mov	r6,a
      0001FE 8E*12            [24]  582 	mov	__print_format_PARM_4,r6
      000200 8E 01            [24]  583 	mov	ar1,r6
      000202 87 07            [24]  584 	mov	ar7,@r1
      000204 80 11            [24]  585 	sjmp	00132$
      000206                        586 00131$:
                                    587 ;	printf_large.c:564: c = va_arg(ap,int);
      000206 E5*12            [12]  588 	mov	a,__print_format_PARM_4
      000208 24 FE            [12]  589 	add	a,#0xFE
      00020A FE               [12]  590 	mov	r6,a
      00020B 8E*12            [24]  591 	mov	__print_format_PARM_4,r6
      00020D 8E 01            [24]  592 	mov	ar1,r6
      00020F 87 05            [24]  593 	mov	ar5,@r1
      000211 09               [12]  594 	inc	r1
      000212 87 06            [24]  595 	mov	ar6,@r1
      000214 19               [12]  596 	dec	r1
      000215 8D 07            [24]  597 	mov	ar7,r5
      000217                        598 00132$:
                                    599 ;	printf_large.c:565: OUTPUT_CHAR( c, p );
      000217 8F 82            [24]  600 	mov	dpl,r7
      000219 12r00r00         [24]  601 	lcall	__output_char
                                    602 ;	printf_large.c:566: break;
      00021C 02r03r76         [24]  603 	ljmp	00172$
                                    604 ;	printf_large.c:568: case 'S':
      00021F                        605 00133$:
                                    606 ;	printf_large.c:569: PTR = va_arg(ap,ptr_t);
      00021F E5*12            [12]  607 	mov	a,__print_format_PARM_4
      000221 24 FD            [12]  608 	add	a,#0xFD
      000223 FE               [12]  609 	mov	r6,a
      000224 8E*12            [24]  610 	mov	__print_format_PARM_4,r6
      000226 8E 01            [24]  611 	mov	ar1,r6
      000228 87 03            [24]  612 	mov	ar3,@r1
      00022A 09               [12]  613 	inc	r1
      00022B 87 05            [24]  614 	mov	ar5,@r1
      00022D 09               [12]  615 	inc	r1
      00022E 87 06            [24]  616 	mov	ar6,@r1
      000230 19               [12]  617 	dec	r1
      000231 19               [12]  618 	dec	r1
      000232 8B*05            [24]  619 	mov	(_value + 0),r3
      000234 8D*06            [24]  620 	mov	(_value + 1),r5
      000236 8E*07            [24]  621 	mov	(_value + 2),r6
                                    622 ;	printf_large.c:582: length = strlen(PTR);
      000238 8B 82            [24]  623 	mov	dpl,r3
      00023A 8D 83            [24]  624 	mov	dph,r5
      00023C 8E F0            [24]  625 	mov	b,r6
      00023E C0 04            [24]  626 	push	ar4
      000240 12r00r00         [24]  627 	lcall	_strlen
      000243 AD 82            [24]  628 	mov	r5,dpl
      000245 AE 83            [24]  629 	mov	r6,dph
      000247 D0 04            [24]  630 	pop	ar4
                                    631 ;	printf_large.c:584: if ( decimals == -1 )
      000249 BC FF 02         [24]  632 	cjne	r4,#0xFF,00135$
                                    633 ;	printf_large.c:586: decimals = length;
      00024C 8D 04            [24]  634 	mov	ar4,r5
      00024E                        635 00135$:
                                    636 ;	printf_large.c:588: if ( ( !left_justify ) && (length < width) )
      00024E 20*01 2A         [24]  637 	jb	__print_format_left_justify_1_67,00289$
      000251 C3               [12]  638 	clr	c
      000252 ED               [12]  639 	mov	a,r5
      000253 95*14            [12]  640 	subb	a,__print_format_width_1_67
      000255 50 24            [24]  641 	jnc	00289$
                                    642 ;	printf_large.c:590: width -= length;
      000257 E5*14            [12]  643 	mov	a,__print_format_width_1_67
      000259 C3               [12]  644 	clr	c
      00025A 9D               [12]  645 	subb	a,r5
      00025B F5*14            [12]  646 	mov	__print_format_width_1_67,a
                                    647 ;	printf_large.c:591: while( width-- != 0 )
      00025D AE*14            [24]  648 	mov	r6,__print_format_width_1_67
      00025F                        649 00136$:
      00025F 8E 03            [24]  650 	mov	ar3,r6
      000261 1E               [12]  651 	dec	r6
      000262 EB               [12]  652 	mov	a,r3
      000263 60 14            [24]  653 	jz	00329$
                                    654 ;	printf_large.c:593: OUTPUT_CHAR( ' ', p );
      000265 75 82 20         [24]  655 	mov	dpl,#0x20
      000268 C0 06            [24]  656 	push	ar6
      00026A C0 05            [24]  657 	push	ar5
      00026C C0 04            [24]  658 	push	ar4
      00026E 12r00r00         [24]  659 	lcall	__output_char
      000271 D0 04            [24]  660 	pop	ar4
      000273 D0 05            [24]  661 	pop	ar5
      000275 D0 06            [24]  662 	pop	ar6
                                    663 ;	printf_large.c:597: while ( (c = *PTR)  && (decimals-- > 0))
      000277 80 E6            [24]  664 	sjmp	00136$
      000279                        665 00329$:
      000279 8E*14            [24]  666 	mov	__print_format_width_1_67,r6
      00027B                        667 00289$:
      00027B 8C 06            [24]  668 	mov	ar6,r4
      00027D                        669 00143$:
      00027D 85*05 82         [24]  670 	mov	dpl,_value
      000280 85*06 83         [24]  671 	mov	dph,(_value + 1)
      000283 85*07 F0         [24]  672 	mov	b,(_value + 2)
      000286 12r00r00         [24]  673 	lcall	__gptrget
      000289 FC               [12]  674 	mov	r4,a
      00028A FF               [12]  675 	mov	r7,a
      00028B 60 2F            [24]  676 	jz	00145$
      00028D 8E 04            [24]  677 	mov	ar4,r6
      00028F 1E               [12]  678 	dec	r6
      000290 C3               [12]  679 	clr	c
      000291 74 80            [12]  680 	mov	a,#(0x00 ^ 0x80)
      000293 8C F0            [24]  681 	mov	b,r4
      000295 63 F0 80         [24]  682 	xrl	b,#0x80
      000298 95 F0            [12]  683 	subb	a,b
      00029A 50 20            [24]  684 	jnc	00145$
                                    685 ;	printf_large.c:599: OUTPUT_CHAR( c, p );
      00029C 8F 82            [24]  686 	mov	dpl,r7
      00029E C0 06            [24]  687 	push	ar6
      0002A0 C0 05            [24]  688 	push	ar5
      0002A2 12r00r00         [24]  689 	lcall	__output_char
      0002A5 D0 05            [24]  690 	pop	ar5
      0002A7 D0 06            [24]  691 	pop	ar6
                                    692 ;	printf_large.c:600: PTR++;
      0002A9 AA*05            [24]  693 	mov	r2,(_value + 0)
      0002AB AB*06            [24]  694 	mov	r3,(_value + 1)
      0002AD AC*07            [24]  695 	mov	r4,(_value + 2)
      0002AF 0A               [12]  696 	inc	r2
      0002B0 BA 00 01         [24]  697 	cjne	r2,#0x00,00543$
      0002B3 0B               [12]  698 	inc	r3
      0002B4                        699 00543$:
      0002B4 8A*05            [24]  700 	mov	(_value + 0),r2
      0002B6 8B*06            [24]  701 	mov	(_value + 1),r3
      0002B8 8C*07            [24]  702 	mov	(_value + 2),r4
      0002BA 80 C1            [24]  703 	sjmp	00143$
      0002BC                        704 00145$:
                                    705 ;	printf_large.c:603: if ( left_justify && (length < width))
      0002BC 20*01 03         [24]  706 	jb	__print_format_left_justify_1_67,00544$
      0002BF 02r03r76         [24]  707 	ljmp	00172$
      0002C2                        708 00544$:
      0002C2 C3               [12]  709 	clr	c
      0002C3 ED               [12]  710 	mov	a,r5
      0002C4 95*14            [12]  711 	subb	a,__print_format_width_1_67
      0002C6 40 03            [24]  712 	jc	00545$
      0002C8 02r03r76         [24]  713 	ljmp	00172$
      0002CB                        714 00545$:
                                    715 ;	printf_large.c:605: width -= length;
      0002CB E5*14            [12]  716 	mov	a,__print_format_width_1_67
      0002CD C3               [12]  717 	clr	c
      0002CE 9D               [12]  718 	subb	a,r5
      0002CF F5*14            [12]  719 	mov	__print_format_width_1_67,a
                                    720 ;	printf_large.c:606: while( width-- != 0 )
      0002D1 AE*14            [24]  721 	mov	r6,__print_format_width_1_67
      0002D3                        722 00146$:
      0002D3 8E 04            [24]  723 	mov	ar4,r6
      0002D5 1E               [12]  724 	dec	r6
      0002D6 EC               [12]  725 	mov	a,r4
      0002D7 70 03            [24]  726 	jnz	00546$
      0002D9 02r03r74         [24]  727 	ljmp	00331$
      0002DC                        728 00546$:
                                    729 ;	printf_large.c:608: OUTPUT_CHAR( ' ', p );
      0002DC 75 82 20         [24]  730 	mov	dpl,#0x20
      0002DF C0 06            [24]  731 	push	ar6
      0002E1 12r00r00         [24]  732 	lcall	__output_char
      0002E4 D0 06            [24]  733 	pop	ar6
                                    734 ;	printf_large.c:613: case 'P':
      0002E6 80 EB            [24]  735 	sjmp	00146$
      0002E8                        736 00152$:
                                    737 ;	printf_large.c:614: PTR = va_arg(ap,ptr_t);
      0002E8 E5*12            [12]  738 	mov	a,__print_format_PARM_4
      0002EA 24 FD            [12]  739 	add	a,#0xFD
      0002EC FC               [12]  740 	mov	r4,a
      0002ED 8C*12            [24]  741 	mov	__print_format_PARM_4,r4
      0002EF 8C 01            [24]  742 	mov	ar1,r4
      0002F1 87 02            [24]  743 	mov	ar2,@r1
      0002F3 09               [12]  744 	inc	r1
      0002F4 87 03            [24]  745 	mov	ar3,@r1
      0002F6 09               [12]  746 	inc	r1
      0002F7 87 04            [24]  747 	mov	ar4,@r1
      0002F9 19               [12]  748 	dec	r1
      0002FA 19               [12]  749 	dec	r1
      0002FB 8A*05            [24]  750 	mov	(_value + 0),r2
      0002FD 8B*06            [24]  751 	mov	(_value + 1),r3
      0002FF 8C*07            [24]  752 	mov	(_value + 2),r4
                                    753 ;	printf_large.c:637: unsigned char memtype = value.byte[2];
      000301 AC*07            [24]  754 	mov	r4,(_value + 0x0002)
                                    755 ;	printf_large.c:638: if (memtype >= 0x80)
      000303 BC 80 00         [24]  756 	cjne	r4,#0x80,00547$
      000306                        757 00547$:
      000306 40 04            [24]  758 	jc	00160$
                                    759 ;	printf_large.c:639: c = 'C';
      000308 7F 43            [12]  760 	mov	r7,#0x43
      00030A 80 14            [24]  761 	sjmp	00161$
      00030C                        762 00160$:
                                    763 ;	printf_large.c:640: else if (memtype >= 0x60)
      00030C BC 60 00         [24]  764 	cjne	r4,#0x60,00549$
      00030F                        765 00549$:
      00030F 40 04            [24]  766 	jc	00157$
                                    767 ;	printf_large.c:641: c = 'P';
      000311 7F 50            [12]  768 	mov	r7,#0x50
      000313 80 0B            [24]  769 	sjmp	00161$
      000315                        770 00157$:
                                    771 ;	printf_large.c:642: else if (memtype >= 0x40)
      000315 BC 40 00         [24]  772 	cjne	r4,#0x40,00551$
      000318                        773 00551$:
      000318 40 04            [24]  774 	jc	00154$
                                    775 ;	printf_large.c:643: c = 'I';
      00031A 7F 49            [12]  776 	mov	r7,#0x49
      00031C 80 02            [24]  777 	sjmp	00161$
      00031E                        778 00154$:
                                    779 ;	printf_large.c:645: c = 'X';
      00031E 7F 58            [12]  780 	mov	r7,#0x58
      000320                        781 00161$:
                                    782 ;	printf_large.c:647: OUTPUT_CHAR(c, p);
      000320 8F 82            [24]  783 	mov	dpl,r7
      000322 C0 07            [24]  784 	push	ar7
      000324 12r00r00         [24]  785 	lcall	__output_char
                                    786 ;	printf_large.c:648: OUTPUT_CHAR(':', p);
      000327 75 82 3A         [24]  787 	mov	dpl,#0x3A
      00032A 12r00r00         [24]  788 	lcall	__output_char
                                    789 ;	printf_large.c:649: OUTPUT_CHAR('0', p);
      00032D 75 82 30         [24]  790 	mov	dpl,#0x30
      000330 12r00r00         [24]  791 	lcall	__output_char
                                    792 ;	printf_large.c:650: OUTPUT_CHAR('x', p);
      000333 75 82 78         [24]  793 	mov	dpl,#0x78
      000336 12r00r00         [24]  794 	lcall	__output_char
      000339 D0 07            [24]  795 	pop	ar7
                                    796 ;	printf_large.c:651: if ((c != 'I' /* idata */) &&
      00033B BF 49 02         [24]  797 	cjne	r7,#0x49,00553$
      00033E 80 0B            [24]  798 	sjmp	00163$
      000340                        799 00553$:
                                    800 ;	printf_large.c:652: (c != 'P' /* pdata */))
      000340 BF 50 02         [24]  801 	cjne	r7,#0x50,00554$
      000343 80 06            [24]  802 	sjmp	00163$
      000345                        803 00554$:
                                    804 ;	printf_large.c:654: OUTPUT_2DIGITS( value.byte[1] );
      000345 85*06 82         [24]  805 	mov	dpl,(_value + 0x0001)
      000348 12r00r3C         [24]  806 	lcall	_output_2digits
      00034B                        807 00163$:
                                    808 ;	printf_large.c:656: OUTPUT_2DIGITS( value.byte[0] );
      00034B 85*05 82         [24]  809 	mov	dpl,_value
      00034E 12r00r3C         [24]  810 	lcall	_output_2digits
                                    811 ;	printf_large.c:663: break;
                                    812 ;	printf_large.c:666: case 'I':
      000351 80 23            [24]  813 	sjmp	00172$
      000353                        814 00166$:
                                    815 ;	printf_large.c:667: signed_argument = 1;
      000353 D2*05            [12]  816 	setb	__print_format_signed_argument_1_67
                                    817 ;	printf_large.c:668: radix = 10;
      000355 75*13 0A         [24]  818 	mov	__print_format_radix_1_67,#0x0A
                                    819 ;	printf_large.c:669: break;
                                    820 ;	printf_large.c:671: case 'O':
      000358 80 1C            [24]  821 	sjmp	00172$
      00035A                        822 00167$:
                                    823 ;	printf_large.c:672: radix = 8;
      00035A 75*13 08         [24]  824 	mov	__print_format_radix_1_67,#0x08
                                    825 ;	printf_large.c:673: break;
                                    826 ;	printf_large.c:675: case 'U':
      00035D 80 17            [24]  827 	sjmp	00172$
      00035F                        828 00168$:
                                    829 ;	printf_large.c:676: radix = 10;
      00035F 75*13 0A         [24]  830 	mov	__print_format_radix_1_67,#0x0A
                                    831 ;	printf_large.c:677: break;
                                    832 ;	printf_large.c:679: case 'X':
      000362 80 12            [24]  833 	sjmp	00172$
      000364                        834 00169$:
                                    835 ;	printf_large.c:680: radix = 16;
      000364 75*13 10         [24]  836 	mov	__print_format_radix_1_67,#0x10
                                    837 ;	printf_large.c:681: break;
                                    838 ;	printf_large.c:683: case 'F':
      000367 80 0D            [24]  839 	sjmp	00172$
      000369                        840 00170$:
                                    841 ;	printf_large.c:684: float_argument=1;
      000369 D2*08            [12]  842 	setb	__print_format_float_argument_1_67
                                    843 ;	printf_large.c:685: break;
                                    844 ;	printf_large.c:687: default:
      00036B 80 09            [24]  845 	sjmp	00172$
      00036D                        846 00171$:
                                    847 ;	printf_large.c:689: OUTPUT_CHAR( c, p );
      00036D 8F 82            [24]  848 	mov	dpl,r7
      00036F 12r00r00         [24]  849 	lcall	__output_char
                                    850 ;	printf_large.c:872: return charsOutputted;
                                    851 ;	printf_large.c:691: }
      000372 80 02            [24]  852 	sjmp	00172$
      000374                        853 00331$:
      000374 8E*14            [24]  854 	mov	__print_format_width_1_67,r6
      000376                        855 00172$:
                                    856 ;	printf_large.c:693: if (float_argument)
      000376 30*08 5C         [24]  857 	jnb	__print_format_float_argument_1_67,00238$
                                    858 ;	printf_large.c:695: value.f = va_arg(ap, float);
      000379 E5*12            [12]  859 	mov	a,__print_format_PARM_4
      00037B 24 FC            [12]  860 	add	a,#0xFC
      00037D FE               [12]  861 	mov	r6,a
      00037E 8E*12            [24]  862 	mov	__print_format_PARM_4,r6
      000380 8E 01            [24]  863 	mov	ar1,r6
      000382 87 02            [24]  864 	mov	ar2,@r1
      000384 09               [12]  865 	inc	r1
      000385 87 03            [24]  866 	mov	ar3,@r1
      000387 09               [12]  867 	inc	r1
      000388 87 04            [24]  868 	mov	ar4,@r1
      00038A 09               [12]  869 	inc	r1
      00038B 87 06            [24]  870 	mov	ar6,@r1
      00038D 19               [12]  871 	dec	r1
      00038E 19               [12]  872 	dec	r1
      00038F 19               [12]  873 	dec	r1
      000390 8A*05            [24]  874 	mov	(_value + 0),r2
      000392 8B*06            [24]  875 	mov	(_value + 1),r3
      000394 8C*07            [24]  876 	mov	(_value + 2),r4
      000396 8E*08            [24]  877 	mov	(_value + 3),r6
                                    878 ;	printf_large.c:697: PTR="<NO FLOAT>";
      000398 75*05r00         [24]  879 	mov	(_value + 0),#___str_0
      00039B 75*06s00         [24]  880 	mov	(_value + 1),#(___str_0 >> 8)
      00039E 75*07 80         [24]  881 	mov	(_value + 2),#0x80
                                    882 ;	printf_large.c:698: while (c=*PTR++)
      0003A1                        883 00173$:
      0003A1 85*05*17         [24]  884 	mov	__print_format_sloc1_1_0,(_value + 0)
      0003A4 85*06*18         [24]  885 	mov	(__print_format_sloc1_1_0 + 1),(_value + 1)
      0003A7 85*07*19         [24]  886 	mov	(__print_format_sloc1_1_0 + 2),(_value + 2)
      0003AA 74 01            [12]  887 	mov	a,#0x01
      0003AC 25*17            [12]  888 	add	a,__print_format_sloc1_1_0
      0003AE FA               [12]  889 	mov	r2,a
      0003AF E4               [12]  890 	clr	a
      0003B0 35*18            [12]  891 	addc	a,(__print_format_sloc1_1_0 + 1)
      0003B2 FC               [12]  892 	mov	r4,a
      0003B3 AE*19            [24]  893 	mov	r6,(__print_format_sloc1_1_0 + 2)
      0003B5 8A*05            [24]  894 	mov	(_value + 0),r2
      0003B7 8C*06            [24]  895 	mov	(_value + 1),r4
      0003B9 8E*07            [24]  896 	mov	(_value + 2),r6
      0003BB 85*17 82         [24]  897 	mov	dpl,__print_format_sloc1_1_0
      0003BE 85*18 83         [24]  898 	mov	dph,(__print_format_sloc1_1_0 + 1)
      0003C1 85*19 F0         [24]  899 	mov	b,(__print_format_sloc1_1_0 + 2)
      0003C4 12r00r00         [24]  900 	lcall	__gptrget
      0003C7 FE               [12]  901 	mov	r6,a
      0003C8 FF               [12]  902 	mov	r7,a
      0003C9 70 03            [24]  903 	jnz	00556$
      0003CB 02r00rC2         [24]  904 	ljmp	00243$
      0003CE                        905 00556$:
                                    906 ;	printf_large.c:700: OUTPUT_CHAR (c, p);
      0003CE 8F 82            [24]  907 	mov	dpl,r7
      0003D0 12r00r00         [24]  908 	lcall	__output_char
      0003D3 80 CC            [24]  909 	sjmp	00173$
      0003D5                        910 00238$:
                                    911 ;	printf_large.c:718: else if (radix != 0)
      0003D5 E5*13            [12]  912 	mov	a,__print_format_radix_1_67
      0003D7 70 03            [24]  913 	jnz	00557$
      0003D9 02r00rC2         [24]  914 	ljmp	00243$
      0003DC                        915 00557$:
                                    916 ;	printf_large.c:723: unsigned char MEM_SPACE_BUF_PP *pstore = &store[5];
      0003DC 75*15r05         [24]  917 	mov	__print_format_pstore_4_88,#(__print_format_store_4_88 + 0x0005)
                                    918 ;	printf_large.c:726: if (char_argument)
      0003DF 30*06 2D         [24]  919 	jnb	__print_format_char_argument_1_67,00184$
                                    920 ;	printf_large.c:728: value.l = va_arg(ap, char);
      0003E2 E5*12            [12]  921 	mov	a,__print_format_PARM_4
      0003E4 14               [12]  922 	dec	a
      0003E5 FC               [12]  923 	mov	r4,a
      0003E6 8C*12            [24]  924 	mov	__print_format_PARM_4,r4
      0003E8 8C 01            [24]  925 	mov	ar1,r4
      0003EA E7               [12]  926 	mov	a,@r1
      0003EB FA               [12]  927 	mov	r2,a
      0003EC 33               [12]  928 	rlc	a
      0003ED 95 E0            [12]  929 	subb	a,acc
      0003EF FB               [12]  930 	mov	r3,a
      0003F0 FC               [12]  931 	mov	r4,a
      0003F1 FE               [12]  932 	mov	r6,a
      0003F2 8A*05            [24]  933 	mov	(_value + 0),r2
      0003F4 8B*06            [24]  934 	mov	(_value + 1),r3
      0003F6 8C*07            [24]  935 	mov	(_value + 2),r4
      0003F8 8E*08            [24]  936 	mov	(_value + 3),r6
                                    937 ;	printf_large.c:729: if (!signed_argument)
      0003FA 20*05 66         [24]  938 	jb	__print_format_signed_argument_1_67,00185$
                                    939 ;	printf_large.c:731: value.l &= 0xFF;
      0003FD AA*05            [24]  940 	mov	r2,_value
      0003FF 7B 00            [12]  941 	mov	r3,#0x00
      000401 7C 00            [12]  942 	mov	r4,#0x00
      000403 7E 00            [12]  943 	mov	r6,#0x00
      000405 8A*05            [24]  944 	mov	(_value + 0),r2
      000407 8B*06            [24]  945 	mov	(_value + 1),r3
      000409 8C*07            [24]  946 	mov	(_value + 2),r4
      00040B 8E*08            [24]  947 	mov	(_value + 3),r6
      00040D 80 54            [24]  948 	sjmp	00185$
      00040F                        949 00184$:
                                    950 ;	printf_large.c:734: else if (long_argument)
      00040F 30*07 21         [24]  951 	jnb	__print_format_long_argument_1_67,00181$
                                    952 ;	printf_large.c:736: value.l = va_arg(ap, long);
      000412 E5*12            [12]  953 	mov	a,__print_format_PARM_4
      000414 24 FC            [12]  954 	add	a,#0xFC
      000416 FE               [12]  955 	mov	r6,a
      000417 8E*12            [24]  956 	mov	__print_format_PARM_4,r6
      000419 8E 01            [24]  957 	mov	ar1,r6
      00041B 87 02            [24]  958 	mov	ar2,@r1
      00041D 09               [12]  959 	inc	r1
      00041E 87 03            [24]  960 	mov	ar3,@r1
      000420 09               [12]  961 	inc	r1
      000421 87 04            [24]  962 	mov	ar4,@r1
      000423 09               [12]  963 	inc	r1
      000424 87 06            [24]  964 	mov	ar6,@r1
      000426 19               [12]  965 	dec	r1
      000427 19               [12]  966 	dec	r1
      000428 19               [12]  967 	dec	r1
      000429 8A*05            [24]  968 	mov	(_value + 0),r2
      00042B 8B*06            [24]  969 	mov	(_value + 1),r3
      00042D 8C*07            [24]  970 	mov	(_value + 2),r4
      00042F 8E*08            [24]  971 	mov	(_value + 3),r6
      000431 80 30            [24]  972 	sjmp	00185$
      000433                        973 00181$:
                                    974 ;	printf_large.c:740: value.l = va_arg(ap, int);
      000433 E5*12            [12]  975 	mov	a,__print_format_PARM_4
      000435 24 FE            [12]  976 	add	a,#0xFE
      000437 FE               [12]  977 	mov	r6,a
      000438 8E*12            [24]  978 	mov	__print_format_PARM_4,r6
      00043A 8E 01            [24]  979 	mov	ar1,r6
      00043C 87 04            [24]  980 	mov	ar4,@r1
      00043E 09               [12]  981 	inc	r1
      00043F 87 06            [24]  982 	mov	ar6,@r1
      000441 19               [12]  983 	dec	r1
      000442 EE               [12]  984 	mov	a,r6
      000443 33               [12]  985 	rlc	a
      000444 95 E0            [12]  986 	subb	a,acc
      000446 FB               [12]  987 	mov	r3,a
      000447 FA               [12]  988 	mov	r2,a
      000448 8C*05            [24]  989 	mov	(_value + 0),r4
      00044A 8E*06            [24]  990 	mov	(_value + 1),r6
      00044C 8B*07            [24]  991 	mov	(_value + 2),r3
      00044E 8A*08            [24]  992 	mov	(_value + 3),r2
                                    993 ;	printf_large.c:741: if (!signed_argument)
      000450 20*05 10         [24]  994 	jb	__print_format_signed_argument_1_67,00185$
                                    995 ;	printf_large.c:743: value.l &= 0xFFFF;
      000453 AA*05            [24]  996 	mov	r2,_value
      000455 AB*06            [24]  997 	mov	r3,(_value + 1)
      000457 7C 00            [12]  998 	mov	r4,#0x00
      000459 7E 00            [12]  999 	mov	r6,#0x00
      00045B 8A*05            [24] 1000 	mov	(_value + 0),r2
      00045D 8B*06            [24] 1001 	mov	(_value + 1),r3
      00045F 8C*07            [24] 1002 	mov	(_value + 2),r4
      000461 8E*08            [24] 1003 	mov	(_value + 3),r6
      000463                       1004 00185$:
                                   1005 ;	printf_large.c:747: if ( signed_argument )
      000463 30*05 22         [24] 1006 	jnb	__print_format_signed_argument_1_67,00190$
                                   1007 ;	printf_large.c:749: if (value.l < 0)
      000466 E5*08            [12] 1008 	mov	a,(_value + 3)
      000468 30 E7 1B         [24] 1009 	jnb	acc.7,00187$
                                   1010 ;	printf_large.c:750: value.l = -value.l;
      00046B C3               [12] 1011 	clr	c
      00046C E4               [12] 1012 	clr	a
      00046D 95*05            [12] 1013 	subb	a,_value
      00046F FA               [12] 1014 	mov	r2,a
      000470 E4               [12] 1015 	clr	a
      000471 95*06            [12] 1016 	subb	a,(_value + 1)
      000473 FB               [12] 1017 	mov	r3,a
      000474 E4               [12] 1018 	clr	a
      000475 95*07            [12] 1019 	subb	a,(_value + 2)
      000477 FC               [12] 1020 	mov	r4,a
      000478 E4               [12] 1021 	clr	a
      000479 95*08            [12] 1022 	subb	a,(_value + 3)
      00047B FE               [12] 1023 	mov	r6,a
      00047C 8A*05            [24] 1024 	mov	(_value + 0),r2
      00047E 8B*06            [24] 1025 	mov	(_value + 1),r3
      000480 8C*07            [24] 1026 	mov	(_value + 2),r4
      000482 8E*08            [24] 1027 	mov	(_value + 3),r6
      000484 80 02            [24] 1028 	sjmp	00190$
      000486                       1029 00187$:
                                   1030 ;	printf_large.c:752: signed_argument = 0;
      000486 C2*05            [12] 1031 	clr	__print_format_signed_argument_1_67
      000488                       1032 00190$:
                                   1033 ;	printf_large.c:756: lsd = 1;
      000488 D2*09            [12] 1034 	setb	__print_format_lsd_1_67
                                   1035 ;	printf_large.c:758: do {
      00048A A9*15            [24] 1036 	mov	r1,__print_format_pstore_4_88
      00048C 7E 00            [12] 1037 	mov	r6,#0x00
      00048E                       1038 00194$:
                                   1039 ;	printf_large.c:759: value.byte[4] = 0;
      00048E 75*09 00         [24] 1040 	mov	(_value + 0x0004),#0x00
                                   1041 ;	printf_large.c:763: calculate_digit(radix);
      000491 85*13 82         [24] 1042 	mov	dpl,__print_format_radix_1_67
      000494 C0 06            [24] 1043 	push	ar6
      000496 C0 01            [24] 1044 	push	ar1
      000498 12r00r53         [24] 1045 	lcall	_calculate_digit
      00049B D0 01            [24] 1046 	pop	ar1
      00049D D0 06            [24] 1047 	pop	ar6
                                   1048 ;	printf_large.c:765: if (!lsd)
      00049F 20*09 0B         [24] 1049 	jb	__print_format_lsd_1_67,00192$
                                   1050 ;	printf_large.c:767: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
      0004A2 E5*09            [12] 1051 	mov	a,(_value + 0x0004)
      0004A4 C4               [12] 1052 	swap	a
      0004A5 FC               [12] 1053 	mov	r4,a
      0004A6 E7               [12] 1054 	mov	a,@r1
      0004A7 FB               [12] 1055 	mov	r3,a
      0004A8 4C               [12] 1056 	orl	a,r4
      0004A9 F7               [12] 1057 	mov	@r1,a
                                   1058 ;	printf_large.c:768: pstore--;
      0004AA 19               [12] 1059 	dec	r1
      0004AB 80 02            [24] 1060 	sjmp	00193$
      0004AD                       1061 00192$:
                                   1062 ;	printf_large.c:772: *pstore = value.byte[4];
      0004AD A7*09            [24] 1063 	mov	@r1,(_value + 0x0004)
      0004AF                       1064 00193$:
                                   1065 ;	printf_large.c:774: length++;
      0004AF 0E               [12] 1066 	inc	r6
                                   1067 ;	printf_large.c:775: lsd = !lsd;
      0004B0 B2*09            [12] 1068 	cpl	__print_format_lsd_1_67
                                   1069 ;	printf_large.c:776: } while( value.ul );
      0004B2 E5*05            [12] 1070 	mov	a,_value
      0004B4 45*06            [12] 1071 	orl	a,(_value + 1)
      0004B6 45*07            [12] 1072 	orl	a,(_value + 2)
      0004B8 45*08            [12] 1073 	orl	a,(_value + 3)
      0004BA 70 D2            [24] 1074 	jnz	00194$
                                   1075 ;	printf_large.c:778: if (width == 0)
      0004BC 89*15            [24] 1076 	mov	__print_format_pstore_4_88,r1
      0004BE 8E 05            [24] 1077 	mov	ar5,r6
      0004C0 E5*14            [12] 1078 	mov	a,__print_format_width_1_67
      0004C2 70 03            [24] 1079 	jnz	00198$
                                   1080 ;	printf_large.c:783: width = 1;
      0004C4 75*14 01         [24] 1081 	mov	__print_format_width_1_67,#0x01
      0004C7                       1082 00198$:
                                   1083 ;	printf_large.c:787: if (!zero_padding && !left_justify)
      0004C7 20*02 24         [24] 1084 	jb	__print_format_zero_padding_1_67,00203$
      0004CA 20*01 21         [24] 1085 	jb	__print_format_left_justify_1_67,00203$
                                   1086 ;	printf_large.c:789: while ( width > (unsigned char) (length+1) )
      0004CD ED               [12] 1087 	mov	a,r5
      0004CE 04               [12] 1088 	inc	a
      0004CF FE               [12] 1089 	mov	r6,a
      0004D0 AC*14            [24] 1090 	mov	r4,__print_format_width_1_67
      0004D2                       1091 00199$:
      0004D2 C3               [12] 1092 	clr	c
      0004D3 EE               [12] 1093 	mov	a,r6
      0004D4 9C               [12] 1094 	subb	a,r4
      0004D5 50 15            [24] 1095 	jnc	00333$
                                   1096 ;	printf_large.c:791: OUTPUT_CHAR( ' ', p );
      0004D7 75 82 20         [24] 1097 	mov	dpl,#0x20
      0004DA C0 06            [24] 1098 	push	ar6
      0004DC C0 05            [24] 1099 	push	ar5
      0004DE C0 04            [24] 1100 	push	ar4
      0004E0 12r00r00         [24] 1101 	lcall	__output_char
      0004E3 D0 04            [24] 1102 	pop	ar4
      0004E5 D0 05            [24] 1103 	pop	ar5
      0004E7 D0 06            [24] 1104 	pop	ar6
                                   1105 ;	printf_large.c:792: width--;
      0004E9 1C               [12] 1106 	dec	r4
      0004EA 80 E6            [24] 1107 	sjmp	00199$
      0004EC                       1108 00333$:
      0004EC 8C*14            [24] 1109 	mov	__print_format_width_1_67,r4
      0004EE                       1110 00203$:
                                   1111 ;	printf_large.c:796: if (signed_argument) // this now means the original value was negative
      0004EE 30*05 0E         [24] 1112 	jnb	__print_format_signed_argument_1_67,00213$
                                   1113 ;	printf_large.c:798: OUTPUT_CHAR( '-', p );
      0004F1 75 82 2D         [24] 1114 	mov	dpl,#0x2D
      0004F4 C0 05            [24] 1115 	push	ar5
      0004F6 12r00r00         [24] 1116 	lcall	__output_char
      0004F9 D0 05            [24] 1117 	pop	ar5
                                   1118 ;	printf_large.c:800: width--;
      0004FB 15*14            [12] 1119 	dec	__print_format_width_1_67
      0004FD 80 23            [24] 1120 	sjmp	00214$
      0004FF                       1121 00213$:
                                   1122 ;	printf_large.c:802: else if (length != 0)
      0004FF ED               [12] 1123 	mov	a,r5
      000500 60 20            [24] 1124 	jz	00214$
                                   1125 ;	printf_large.c:805: if (prefix_sign)
      000502 30*03 0E         [24] 1126 	jnb	__print_format_prefix_sign_1_67,00208$
                                   1127 ;	printf_large.c:807: OUTPUT_CHAR( '+', p );
      000505 75 82 2B         [24] 1128 	mov	dpl,#0x2B
      000508 C0 05            [24] 1129 	push	ar5
      00050A 12r00r00         [24] 1130 	lcall	__output_char
      00050D D0 05            [24] 1131 	pop	ar5
                                   1132 ;	printf_large.c:809: width--;
      00050F 15*14            [12] 1133 	dec	__print_format_width_1_67
      000511 80 0F            [24] 1134 	sjmp	00214$
      000513                       1135 00208$:
                                   1136 ;	printf_large.c:811: else if (prefix_space)
      000513 30*04 0C         [24] 1137 	jnb	__print_format_prefix_space_1_67,00214$
                                   1138 ;	printf_large.c:813: OUTPUT_CHAR( ' ', p );
      000516 75 82 20         [24] 1139 	mov	dpl,#0x20
      000519 C0 05            [24] 1140 	push	ar5
      00051B 12r00r00         [24] 1141 	lcall	__output_char
      00051E D0 05            [24] 1142 	pop	ar5
                                   1143 ;	printf_large.c:815: width--;
      000520 15*14            [12] 1144 	dec	__print_format_width_1_67
      000522                       1145 00214$:
                                   1146 ;	printf_large.c:820: if (!left_justify)
      000522 20*01 22         [24] 1147 	jb	__print_format_left_justify_1_67,00222$
                                   1148 ;	printf_large.c:822: while ( width-- > length )
      000525 AE*14            [24] 1149 	mov	r6,__print_format_width_1_67
      000527                       1150 00215$:
      000527 8E 04            [24] 1151 	mov	ar4,r6
      000529 1E               [12] 1152 	dec	r6
      00052A C3               [12] 1153 	clr	c
      00052B ED               [12] 1154 	mov	a,r5
      00052C 9C               [12] 1155 	subb	a,r4
      00052D 50 2B            [24] 1156 	jnc	00334$
                                   1157 ;	printf_large.c:824: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
      00052F 30*02 04         [24] 1158 	jnb	__print_format_zero_padding_1_67,00248$
      000532 7C 30            [12] 1159 	mov	r4,#0x30
      000534 80 02            [24] 1160 	sjmp	00249$
      000536                       1161 00248$:
      000536 7C 20            [12] 1162 	mov	r4,#0x20
      000538                       1163 00249$:
      000538 8C 82            [24] 1164 	mov	dpl,r4
      00053A C0 06            [24] 1165 	push	ar6
      00053C C0 05            [24] 1166 	push	ar5
      00053E 12r00r00         [24] 1167 	lcall	__output_char
      000541 D0 05            [24] 1168 	pop	ar5
      000543 D0 06            [24] 1169 	pop	ar6
      000545 80 E0            [24] 1170 	sjmp	00215$
      000547                       1171 00222$:
                                   1172 ;	printf_large.c:830: if (width > length)
      000547 C3               [12] 1173 	clr	c
      000548 ED               [12] 1174 	mov	a,r5
      000549 95*14            [12] 1175 	subb	a,__print_format_width_1_67
      00054B 50 08            [24] 1176 	jnc	00219$
                                   1177 ;	printf_large.c:831: width -= length;
      00054D E5*14            [12] 1178 	mov	a,__print_format_width_1_67
      00054F C3               [12] 1179 	clr	c
      000550 9D               [12] 1180 	subb	a,r5
      000551 F5*14            [12] 1181 	mov	__print_format_width_1_67,a
      000553 80 07            [24] 1182 	sjmp	00326$
      000555                       1183 00219$:
                                   1184 ;	printf_large.c:833: width = 0;
      000555 75*14 00         [24] 1185 	mov	__print_format_width_1_67,#0x00
                                   1186 ;	printf_large.c:872: return charsOutputted;
                                   1187 ;	printf_large.c:837: while( length-- )
      000558 80 02            [24] 1188 	sjmp	00326$
      00055A                       1189 00334$:
      00055A 8E*14            [24] 1190 	mov	__print_format_width_1_67,r6
      00055C                       1191 00326$:
      00055C A9*15            [24] 1192 	mov	r1,__print_format_pstore_4_88
      00055E 8D 06            [24] 1193 	mov	ar6,r5
      000560                       1194 00227$:
      000560 8E 05            [24] 1195 	mov	ar5,r6
      000562 1E               [12] 1196 	dec	r6
      000563 ED               [12] 1197 	mov	a,r5
      000564 60 26            [24] 1198 	jz	00229$
                                   1199 ;	printf_large.c:839: lsd = !lsd;
      000566 B2*09            [12] 1200 	cpl	__print_format_lsd_1_67
                                   1201 ;	printf_large.c:840: if (!lsd)
      000568 20*09 0A         [24] 1202 	jb	__print_format_lsd_1_67,00225$
                                   1203 ;	printf_large.c:842: pstore++;
      00056B 09               [12] 1204 	inc	r1
                                   1205 ;	printf_large.c:843: value.byte[4] = *pstore >> 4;
      00056C E7               [12] 1206 	mov	a,@r1
      00056D C4               [12] 1207 	swap	a
      00056E 54 0F            [12] 1208 	anl	a,#0x0F
      000570 FD               [12] 1209 	mov	r5,a
      000571 8D*09            [24] 1210 	mov	(_value + 0x0004),r5
      000573 80 07            [24] 1211 	sjmp	00226$
      000575                       1212 00225$:
                                   1213 ;	printf_large.c:847: value.byte[4] = *pstore & 0x0F;
      000575 87 05            [24] 1214 	mov	ar5,@r1
      000577 74 0F            [12] 1215 	mov	a,#0x0F
      000579 5D               [12] 1216 	anl	a,r5
      00057A F5*09            [12] 1217 	mov	(_value + 0x0004),a
      00057C                       1218 00226$:
                                   1219 ;	printf_large.c:853: output_digit( value.byte[4] );
      00057C 85*09 82         [24] 1220 	mov	dpl,(_value + 0x0004)
      00057F C0 06            [24] 1221 	push	ar6
      000581 C0 01            [24] 1222 	push	ar1
      000583 12r00r23         [24] 1223 	lcall	_output_digit
      000586 D0 01            [24] 1224 	pop	ar1
      000588 D0 06            [24] 1225 	pop	ar6
      00058A 80 D4            [24] 1226 	sjmp	00227$
      00058C                       1227 00229$:
                                   1228 ;	printf_large.c:856: if (left_justify)
      00058C 20*01 03         [24] 1229 	jb	__print_format_left_justify_1_67,00580$
      00058F 02r00rC2         [24] 1230 	ljmp	00243$
      000592                       1231 00580$:
                                   1232 ;	printf_large.c:858: while (width-- > 0)
      000592 AE*14            [24] 1233 	mov	r6,__print_format_width_1_67
      000594                       1234 00230$:
      000594 8E 05            [24] 1235 	mov	ar5,r6
      000596 1E               [12] 1236 	dec	r6
      000597 ED               [12] 1237 	mov	a,r5
      000598 70 03            [24] 1238 	jnz	00581$
      00059A 02r00rC2         [24] 1239 	ljmp	00243$
      00059D                       1240 00581$:
                                   1241 ;	printf_large.c:860: OUTPUT_CHAR(' ', p);
      00059D 75 82 20         [24] 1242 	mov	dpl,#0x20
      0005A0 C0 06            [24] 1243 	push	ar6
      0005A2 12r00r00         [24] 1244 	lcall	__output_char
      0005A5 D0 06            [24] 1245 	pop	ar6
      0005A7 80 EB            [24] 1246 	sjmp	00230$
      0005A9                       1247 00241$:
                                   1248 ;	printf_large.c:868: OUTPUT_CHAR( c, p );
      0005A9 8F 82            [24] 1249 	mov	dpl,r7
      0005AB 12r00r00         [24] 1250 	lcall	__output_char
      0005AE 02r00rC2         [24] 1251 	ljmp	00243$
      0005B1                       1252 00245$:
                                   1253 ;	printf_large.c:872: return charsOutputted;
      0005B1 85*0A 82         [24] 1254 	mov	dpl,_charsOutputted
      0005B4 85*0B 83         [24] 1255 	mov	dph,(_charsOutputted + 1)
      0005B7 22               [24] 1256 	ret
                                   1257 	.area CSEG    (CODE)
                                   1258 	.area CONST   (CODE)
      000000                       1259 ___str_0:
      000000 3C 4E 4F 20 46 4C 4F  1260 	.ascii "<NO FLOAT>"
             41 54 3E
      00000A 00                    1261 	.db 0x00
                                   1262 	.area XINIT   (CODE)
                                   1263 	.area CABS    (ABS,CODE)
