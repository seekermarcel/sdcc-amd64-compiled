                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:16:31 2022
                              5 ;--------------------------------------------------------
                              6 	.module cotf
                              7 	.optsdcc -mtlcs90
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _tancotf
                             13 	.globl _fabsf
                             14 	.globl _cotf
                             15 ;--------------------------------------------------------
                             16 ; ram data
                             17 ;--------------------------------------------------------
                             18 	.area _DATA
                             19 ;--------------------------------------------------------
                             20 ; ram data
                             21 ;--------------------------------------------------------
                             22 	.area _INITIALIZED
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area _DABS (ABS)
                             27 ;--------------------------------------------------------
                             28 ; global & static initialisations
                             29 ;--------------------------------------------------------
                             30 	.area _HOME
                             31 	.area _GSINIT
                             32 	.area _GSFINAL
                             33 	.area _GSINIT
                             34 ;--------------------------------------------------------
                             35 ; Home
                             36 ;--------------------------------------------------------
                             37 	.area _HOME
                             38 	.area _HOME
                             39 ;--------------------------------------------------------
                             40 ; code
                             41 ;--------------------------------------------------------
                             42 	.area _CODE
                             43 ;../cotf.c:37: float cotf(float x) _FLOAT_FUNC_REENTRANT
                             44 ;	---------------------------------
                             45 ; Function cotf
                             46 ; ---------------------------------
   0000                      47 _cotf::
   0000 54            [ 4]   48 	push	ix
                             49 ;../cotf.c:41: y=fabsf(x);
   0001 F2 06 4A      [10]   50 	ld	hl, 6 (sp)
   0004 52            [ 4]   51 	push	hl
   0005 F2 06 4A      [10]   52 	ld	hl, 6 (sp)
   0008 52            [ 4]   53 	push	hl
   0009 1Cr00r00      [ 4]   54 	call	_fabsf
   000C 16 04 00      [ 7]   55 	add	sp, #4
   000F FD 31                56 	ld	c,l
   0011 FC 30         [17]   57 	ld	b,h
                             58 ;../cotf.c:42: if (y<1.0E-30) //This one requires more thinking...
   0013 3A A2 0D      [13]   59 	ld	hl,#0x0DA2
   0016 52            [ 4]   60 	push	hl
   0017 3A 60 42      [13]   61 	ld	hl,#0x4260
   001A 52            [ 4]   62 	push	hl
   001B 51            [ 4]   63 	push	de
   001C 50            [ 4]   64 	push	bc
   001D 1Cr00r00      [ 4]   65 	call	___fslt
   0020 16 08 00      [ 7]   66 	add	sp, #8
   0023 25            [ 4]   67 	ld	a,l
   0024 FE 66         [ 7]   68 	or	a, a
   0026 EBr5Cr00 C6   [ 4]   69 	jp	Z,00105$
                             70 ;../cotf.c:44: errno = ERANGE;
   002A 3A 22 00      [13]   71 	ld	hl,#0x0022
   002D EBr00r00 42   [ 4]   72 	ld	(_errno),hl
                             73 ;../cotf.c:45: if (x<0.0)
   0031 3A 00 00      [13]   74 	ld	hl,#0x0000
   0034 52            [ 4]   75 	push	hl
   0035 3A 00 00      [13]   76 	ld	hl,#0x0000
   0038 52            [ 4]   77 	push	hl
   0039 F2 0A 4A      [10]   78 	ld	hl, 10 (sp)
   003C 52            [ 4]   79 	push	hl
   003D F2 0A 4A      [10]   80 	ld	hl, 10 (sp)
   0040 52            [ 4]   81 	push	hl
   0041 1Cr00r00      [ 4]   82 	call	___fslt
   0044 16 08 00      [ 7]   83 	add	sp, #8
   0047 25            [ 4]   84 	ld	a,l
   0048 FE 66         [ 7]   85 	or	a, a
   004A C6 08         [ 7]   86 	jr	Z,00102$
                             87 ;../cotf.c:46: return -HUGE_VALF;
   004C 3A FF FF      [13]   88 	ld	hl,#0xFFFF
   004F 39 7F FF      [11]   89 	ld	de,#0xFF7F
   0052 C8 1A         [11]   90 	jr	00106$
   0054                      91 00102$:
                             92 ;../cotf.c:48: return +HUGE_VALF;
   0054 3A FF FF      [13]   93 	ld	hl,#0xFFFF
   0057 39 7F 7F      [11]   94 	ld	de,#0x7F7F
   005A C8 12         [11]   95 	jr	00106$
   005C                      96 00105$:
                             97 ;../cotf.c:50: return tancotf(x, 1);
   005C 36 01         [10]   98 	ld	a,#0x01
   005E 56            [ 7]   99 	push	af
   005F 96            [ 7]  100 	inc	sp
   0060 F2 07 4A      [10]  101 	ld	hl, 7 (sp)
   0063 52            [ 4]  102 	push	hl
   0064 F2 07 4A      [10]  103 	ld	hl, 7 (sp)
   0067 52            [ 4]  104 	push	hl
   0068 1Cr00r00      [ 4]  105 	call	_tancotf
   006B 16 05 00      [ 7]  106 	add	sp, #5
   006E                     107 00106$:
   006E 5C            [ 4]  108 	pop	ix
   006F 1E            [ 7]  109 	ret
                            110 	.area _CODE
                            111 	.area _INITIALIZER
                            112 	.area _CABS (ABS)
