                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:49 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module sincoshf
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _sincoshf
                                     13 	.globl _expf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'sincoshf'
                                    107 ;------------------------------------------------------------
                                    108 ;iscosh                    Allocated to registers b0 
                                    109 ;x                         Allocated to stack - _bp +1
                                    110 ;y                         Allocated to registers r2 r3 r6 r7 
                                    111 ;w                         Allocated to registers r7 r6 r4 r3 
                                    112 ;z                         Allocated to stack - _bp +9
                                    113 ;sign                      Allocated to registers b1 
                                    114 ;sloc0                     Allocated to stack - _bp +5
                                    115 ;------------------------------------------------------------
                                    116 ;	sincoshf.c:56: float sincoshf(float x, bool iscosh)
                                    117 ;	-----------------------------------------
                                    118 ;	 function sincoshf
                                    119 ;	-----------------------------------------
      000000                        120 _sincoshf:
                           000007   121 	ar7 = 0x07
                           000006   122 	ar6 = 0x06
                           000005   123 	ar5 = 0x05
                           000004   124 	ar4 = 0x04
                           000003   125 	ar3 = 0x03
                           000002   126 	ar2 = 0x02
                           000001   127 	ar1 = 0x01
                           000000   128 	ar0 = 0x00
      000000 C0*00            [24]  129 	push	_bp
      000002 85 81*00         [24]  130 	mov	_bp,sp
      000005 C0 82            [24]  131 	push	dpl
      000007 C0 83            [24]  132 	push	dph
      000009 C0 F0            [24]  133 	push	b
      00000B C0 E0            [24]  134 	push	acc
      00000D E5 81            [12]  135 	mov	a,sp
      00000F 24 08            [12]  136 	add	a,#0x08
      000011 F5 81            [12]  137 	mov	sp,a
                                    138 ;	sincoshf.c:61: if (x<0.0) { y=-x; sign=1; }
      000013 C0*00            [24]  139 	push	bits
      000015 E4               [12]  140 	clr	a
      000016 C0 E0            [24]  141 	push	acc
      000018 C0 E0            [24]  142 	push	acc
      00001A C0 E0            [24]  143 	push	acc
      00001C C0 E0            [24]  144 	push	acc
      00001E A8*00            [24]  145 	mov	r0,_bp
      000020 08               [12]  146 	inc	r0
      000021 86 82            [24]  147 	mov	dpl,@r0
      000023 08               [12]  148 	inc	r0
      000024 86 83            [24]  149 	mov	dph,@r0
      000026 08               [12]  150 	inc	r0
      000027 86 F0            [24]  151 	mov	b,@r0
      000029 08               [12]  152 	inc	r0
      00002A E6               [12]  153 	mov	a,@r0
      00002B 12r00r00         [24]  154 	lcall	___fslt
      00002E AB 82            [24]  155 	mov	r3,dpl
      000030 E5 81            [12]  156 	mov	a,sp
      000032 24 FC            [12]  157 	add	a,#0xfc
      000034 F5 81            [12]  158 	mov	sp,a
      000036 D0*00            [24]  159 	pop	bits
      000038 EB               [12]  160 	mov	a,r3
      000039 60 18            [24]  161 	jz	00102$
      00003B A8*00            [24]  162 	mov	r0,_bp
      00003D 08               [12]  163 	inc	r0
      00003E 86 04            [24]  164 	mov	ar4,@r0
      000040 08               [12]  165 	inc	r0
      000041 86 05            [24]  166 	mov	ar5,@r0
      000043 08               [12]  167 	inc	r0
      000044 86 06            [24]  168 	mov	ar6,@r0
      000046 08               [12]  169 	inc	r0
      000047 E6               [12]  170 	mov	a,@r0
      000048 B2 E7            [12]  171 	cpl	acc.7
      00004A FF               [12]  172 	mov	r7,a
      00004B 8C 02            [24]  173 	mov	ar2,r4
      00004D 8D 03            [24]  174 	mov	ar3,r5
      00004F D2*00            [12]  175 	setb	b1
      000051 80 10            [24]  176 	sjmp	00103$
      000053                        177 00102$:
                                    178 ;	sincoshf.c:62: else { y=x;  sign=0; }
      000053 A8*00            [24]  179 	mov	r0,_bp
      000055 08               [12]  180 	inc	r0
      000056 86 02            [24]  181 	mov	ar2,@r0
      000058 08               [12]  182 	inc	r0
      000059 86 03            [24]  183 	mov	ar3,@r0
      00005B 08               [12]  184 	inc	r0
      00005C 86 06            [24]  185 	mov	ar6,@r0
      00005E 08               [12]  186 	inc	r0
      00005F 86 07            [24]  187 	mov	ar7,@r0
      000061 C2*00            [12]  188 	clr	b1
      000063                        189 00103$:
                                    190 ;	sincoshf.c:64: if ((y>1.0) || iscosh)
      000063 C0 07            [24]  191 	push	ar7
      000065 C0 06            [24]  192 	push	ar6
      000067 C0 03            [24]  193 	push	ar3
      000069 C0 02            [24]  194 	push	ar2
      00006B C0*00            [24]  195 	push	bits
      00006D E4               [12]  196 	clr	a
      00006E C0 E0            [24]  197 	push	acc
      000070 C0 E0            [24]  198 	push	acc
      000072 74 80            [12]  199 	mov	a,#0x80
      000074 C0 E0            [24]  200 	push	acc
      000076 74 3F            [12]  201 	mov	a,#0x3F
      000078 C0 E0            [24]  202 	push	acc
      00007A 8A 82            [24]  203 	mov	dpl,r2
      00007C 8B 83            [24]  204 	mov	dph,r3
      00007E 8E F0            [24]  205 	mov	b,r6
      000080 EF               [12]  206 	mov	a,r7
      000081 12r00r00         [24]  207 	lcall	___fsgt
      000084 AD 82            [24]  208 	mov	r5,dpl
      000086 E5 81            [12]  209 	mov	a,sp
      000088 24 FC            [12]  210 	add	a,#0xfc
      00008A F5 81            [12]  211 	mov	sp,a
      00008C D0*00            [24]  212 	pop	bits
      00008E D0 02            [24]  213 	pop	ar2
      000090 D0 03            [24]  214 	pop	ar3
      000092 D0 06            [24]  215 	pop	ar6
      000094 D0 07            [24]  216 	pop	ar7
      000096 ED               [12]  217 	mov	a,r5
      000097 70 06            [24]  218 	jnz	00117$
      000099 20*00 03         [24]  219 	jb	b0,00146$
      00009C 02r02rD8         [24]  220 	ljmp	00118$
      00009F                        221 00146$:
      00009F                        222 00117$:
                                    223 ;	sincoshf.c:66: if(y>YBAR)
      00009F C0 07            [24]  224 	push	ar7
      0000A1 C0 06            [24]  225 	push	ar6
      0000A3 C0 03            [24]  226 	push	ar3
      0000A5 C0 02            [24]  227 	push	ar2
      0000A7 C0*00            [24]  228 	push	bits
      0000A9 E4               [12]  229 	clr	a
      0000AA C0 E0            [24]  230 	push	acc
      0000AC C0 E0            [24]  231 	push	acc
      0000AE 74 10            [12]  232 	mov	a,#0x10
      0000B0 C0 E0            [24]  233 	push	acc
      0000B2 74 41            [12]  234 	mov	a,#0x41
      0000B4 C0 E0            [24]  235 	push	acc
      0000B6 8A 82            [24]  236 	mov	dpl,r2
      0000B8 8B 83            [24]  237 	mov	dph,r3
      0000BA 8E F0            [24]  238 	mov	b,r6
      0000BC EF               [12]  239 	mov	a,r7
      0000BD 12r00r00         [24]  240 	lcall	___fsgt
      0000C0 AD 82            [24]  241 	mov	r5,dpl
      0000C2 E5 81            [12]  242 	mov	a,sp
      0000C4 24 FC            [12]  243 	add	a,#0xfc
      0000C6 F5 81            [12]  244 	mov	sp,a
      0000C8 D0*00            [24]  245 	pop	bits
      0000CA D0 02            [24]  246 	pop	ar2
      0000CC D0 03            [24]  247 	pop	ar3
      0000CE D0 06            [24]  248 	pop	ar6
      0000D0 D0 07            [24]  249 	pop	ar7
      0000D2 ED               [12]  250 	mov	a,r5
      0000D3 70 03            [24]  251 	jnz	00147$
      0000D5 02r01rE9         [24]  252 	ljmp	00110$
      0000D8                        253 00147$:
                                    254 ;	sincoshf.c:68: w=y-K1;
      0000D8 C0*00            [24]  255 	push	bits
      0000DA E4               [12]  256 	clr	a
      0000DB C0 E0            [24]  257 	push	acc
      0000DD 74 73            [12]  258 	mov	a,#0x73
      0000DF C0 E0            [24]  259 	push	acc
      0000E1 74 31            [12]  260 	mov	a,#0x31
      0000E3 C0 E0            [24]  261 	push	acc
      0000E5 74 3F            [12]  262 	mov	a,#0x3F
      0000E7 C0 E0            [24]  263 	push	acc
      0000E9 8A 82            [24]  264 	mov	dpl,r2
      0000EB 8B 83            [24]  265 	mov	dph,r3
      0000ED 8E F0            [24]  266 	mov	b,r6
      0000EF EF               [12]  267 	mov	a,r7
      0000F0 12r00r00         [24]  268 	lcall	___fssub
      0000F3 AF 82            [24]  269 	mov	r7,dpl
      0000F5 AE 83            [24]  270 	mov	r6,dph
      0000F7 AC F0            [24]  271 	mov	r4,b
      0000F9 FD               [12]  272 	mov	r5,a
      0000FA E5 81            [12]  273 	mov	a,sp
      0000FC 24 FC            [12]  274 	add	a,#0xfc
      0000FE F5 81            [12]  275 	mov	sp,a
      000100 D0*00            [24]  276 	pop	bits
      000102 8D 03            [24]  277 	mov	ar3,r5
                                    278 ;	sincoshf.c:69: if (w>WMAX)
      000104 C0 07            [24]  279 	push	ar7
      000106 C0 06            [24]  280 	push	ar6
      000108 C0 04            [24]  281 	push	ar4
      00010A C0 03            [24]  282 	push	ar3
      00010C C0*00            [24]  283 	push	bits
      00010E 74 CF            [12]  284 	mov	a,#0xCF
      000110 C0 E0            [24]  285 	push	acc
      000112 74 BD            [12]  286 	mov	a,#0xBD
      000114 C0 E0            [24]  287 	push	acc
      000116 74 33            [12]  288 	mov	a,#0x33
      000118 C0 E0            [24]  289 	push	acc
      00011A 74 42            [12]  290 	mov	a,#0x42
      00011C C0 E0            [24]  291 	push	acc
      00011E 8F 82            [24]  292 	mov	dpl,r7
      000120 8E 83            [24]  293 	mov	dph,r6
      000122 8C F0            [24]  294 	mov	b,r4
      000124 EB               [12]  295 	mov	a,r3
      000125 12r00r00         [24]  296 	lcall	___fsgt
      000128 AD 82            [24]  297 	mov	r5,dpl
      00012A E5 81            [12]  298 	mov	a,sp
      00012C 24 FC            [12]  299 	add	a,#0xfc
      00012E F5 81            [12]  300 	mov	sp,a
      000130 D0*00            [24]  301 	pop	bits
      000132 D0 03            [24]  302 	pop	ar3
      000134 D0 04            [24]  303 	pop	ar4
      000136 D0 06            [24]  304 	pop	ar6
      000138 D0 07            [24]  305 	pop	ar7
      00013A ED               [12]  306 	mov	a,r5
      00013B 60 19            [24]  307 	jz	00105$
                                    308 ;	sincoshf.c:71: errno=ERANGE;
      00013D 75*00 22         [24]  309 	mov	_errno,#0x22
      000140 75*01 00         [24]  310 	mov	(_errno + 1),#0x00
                                    311 ;	sincoshf.c:72: z=HUGE_VALF;
      000143 E5*00            [12]  312 	mov	a,_bp
      000145 24 09            [12]  313 	add	a,#0x09
      000147 F8               [12]  314 	mov	r0,a
      000148 76 FF            [12]  315 	mov	@r0,#0xFF
      00014A 08               [12]  316 	inc	r0
      00014B 76 FF            [12]  317 	mov	@r0,#0xFF
      00014D 08               [12]  318 	inc	r0
      00014E 76 7F            [12]  319 	mov	@r0,#0x7F
      000150 08               [12]  320 	inc	r0
      000151 76 7F            [12]  321 	mov	@r0,#0x7F
      000153 02r02rBD         [24]  322 	ljmp	00111$
      000156                        323 00105$:
                                    324 ;	sincoshf.c:76: z=expf(w);
      000156 8F 82            [24]  325 	mov	dpl,r7
      000158 8E 83            [24]  326 	mov	dph,r6
      00015A 8C F0            [24]  327 	mov	b,r4
      00015C EB               [12]  328 	mov	a,r3
      00015D C0*00            [24]  329 	push	bits
      00015F 12r00r00         [24]  330 	lcall	_expf
      000162 AF 82            [24]  331 	mov	r7,dpl
      000164 AE 83            [24]  332 	mov	r6,dph
      000166 AD F0            [24]  333 	mov	r5,b
      000168 FC               [12]  334 	mov	r4,a
      000169 D0*00            [24]  335 	pop	bits
      00016B E5*00            [12]  336 	mov	a,_bp
      00016D 24 09            [12]  337 	add	a,#0x09
      00016F F8               [12]  338 	mov	r0,a
      000170 A6 07            [24]  339 	mov	@r0,ar7
      000172 08               [12]  340 	inc	r0
      000173 A6 06            [24]  341 	mov	@r0,ar6
      000175 08               [12]  342 	inc	r0
      000176 A6 05            [24]  343 	mov	@r0,ar5
      000178 08               [12]  344 	inc	r0
      000179 A6 04            [24]  345 	mov	@r0,ar4
                                    346 ;	sincoshf.c:77: z+=K3*z;
      00017B C0*00            [24]  347 	push	bits
      00017D E5*00            [12]  348 	mov	a,_bp
      00017F 24 09            [12]  349 	add	a,#0x09
      000181 F8               [12]  350 	mov	r0,a
      000182 E6               [12]  351 	mov	a,@r0
      000183 C0 E0            [24]  352 	push	acc
      000185 08               [12]  353 	inc	r0
      000186 E6               [12]  354 	mov	a,@r0
      000187 C0 E0            [24]  355 	push	acc
      000189 08               [12]  356 	inc	r0
      00018A E6               [12]  357 	mov	a,@r0
      00018B C0 E0            [24]  358 	push	acc
      00018D 08               [12]  359 	inc	r0
      00018E E6               [12]  360 	mov	a,@r0
      00018F C0 E0            [24]  361 	push	acc
      000191 90 08 97         [24]  362 	mov	dptr,#0x0897
      000194 75 F0 68         [24]  363 	mov	b,#0x68
      000197 74 37            [12]  364 	mov	a,#0x37
      000199 12r00r00         [24]  365 	lcall	___fsmul
      00019C AF 82            [24]  366 	mov	r7,dpl
      00019E AE 83            [24]  367 	mov	r6,dph
      0001A0 AD F0            [24]  368 	mov	r5,b
      0001A2 FC               [12]  369 	mov	r4,a
      0001A3 E5 81            [12]  370 	mov	a,sp
      0001A5 24 FC            [12]  371 	add	a,#0xfc
      0001A7 F5 81            [12]  372 	mov	sp,a
      0001A9 D0*00            [24]  373 	pop	bits
      0001AB C0*00            [24]  374 	push	bits
      0001AD C0 07            [24]  375 	push	ar7
      0001AF C0 06            [24]  376 	push	ar6
      0001B1 C0 05            [24]  377 	push	ar5
      0001B3 C0 04            [24]  378 	push	ar4
      0001B5 E5*00            [12]  379 	mov	a,_bp
      0001B7 24 09            [12]  380 	add	a,#0x09
      0001B9 F8               [12]  381 	mov	r0,a
      0001BA 86 82            [24]  382 	mov	dpl,@r0
      0001BC 08               [12]  383 	inc	r0
      0001BD 86 83            [24]  384 	mov	dph,@r0
      0001BF 08               [12]  385 	inc	r0
      0001C0 86 F0            [24]  386 	mov	b,@r0
      0001C2 08               [12]  387 	inc	r0
      0001C3 E6               [12]  388 	mov	a,@r0
      0001C4 12r00r00         [24]  389 	lcall	___fsadd
      0001C7 AF 82            [24]  390 	mov	r7,dpl
      0001C9 AE 83            [24]  391 	mov	r6,dph
      0001CB AD F0            [24]  392 	mov	r5,b
      0001CD FC               [12]  393 	mov	r4,a
      0001CE E5 81            [12]  394 	mov	a,sp
      0001D0 24 FC            [12]  395 	add	a,#0xfc
      0001D2 F5 81            [12]  396 	mov	sp,a
      0001D4 D0*00            [24]  397 	pop	bits
      0001D6 E5*00            [12]  398 	mov	a,_bp
      0001D8 24 09            [12]  399 	add	a,#0x09
      0001DA F8               [12]  400 	mov	r0,a
      0001DB A6 07            [24]  401 	mov	@r0,ar7
      0001DD 08               [12]  402 	inc	r0
      0001DE A6 06            [24]  403 	mov	@r0,ar6
      0001E0 08               [12]  404 	inc	r0
      0001E1 A6 05            [24]  405 	mov	@r0,ar5
      0001E3 08               [12]  406 	inc	r0
      0001E4 A6 04            [24]  407 	mov	@r0,ar4
      0001E6 02r02rBD         [24]  408 	ljmp	00111$
      0001E9                        409 00110$:
                                    410 ;	sincoshf.c:82: z=expf(y);
      0001E9 8A 82            [24]  411 	mov	dpl,r2
      0001EB 8B 83            [24]  412 	mov	dph,r3
      0001ED 8E F0            [24]  413 	mov	b,r6
      0001EF EF               [12]  414 	mov	a,r7
      0001F0 C0*00            [24]  415 	push	bits
      0001F2 12r00r00         [24]  416 	lcall	_expf
      0001F5 AF 82            [24]  417 	mov	r7,dpl
      0001F7 AE 83            [24]  418 	mov	r6,dph
      0001F9 AD F0            [24]  419 	mov	r5,b
      0001FB FC               [12]  420 	mov	r4,a
      0001FC D0*00            [24]  421 	pop	bits
      0001FE E5*00            [12]  422 	mov	a,_bp
      000200 24 09            [12]  423 	add	a,#0x09
      000202 F8               [12]  424 	mov	r0,a
      000203 A6 07            [24]  425 	mov	@r0,ar7
      000205 08               [12]  426 	inc	r0
      000206 A6 06            [24]  427 	mov	@r0,ar6
      000208 08               [12]  428 	inc	r0
      000209 A6 05            [24]  429 	mov	@r0,ar5
      00020B 08               [12]  430 	inc	r0
      00020C A6 04            [24]  431 	mov	@r0,ar4
                                    432 ;	sincoshf.c:83: w=1.0/z;
      00020E C0*00            [24]  433 	push	bits
      000210 E5*00            [12]  434 	mov	a,_bp
      000212 24 09            [12]  435 	add	a,#0x09
      000214 F8               [12]  436 	mov	r0,a
      000215 E6               [12]  437 	mov	a,@r0
      000216 C0 E0            [24]  438 	push	acc
      000218 08               [12]  439 	inc	r0
      000219 E6               [12]  440 	mov	a,@r0
      00021A C0 E0            [24]  441 	push	acc
      00021C 08               [12]  442 	inc	r0
      00021D E6               [12]  443 	mov	a,@r0
      00021E C0 E0            [24]  444 	push	acc
      000220 08               [12]  445 	inc	r0
      000221 E6               [12]  446 	mov	a,@r0
      000222 C0 E0            [24]  447 	push	acc
      000224 90 00 00         [24]  448 	mov	dptr,#0x0000
      000227 75 F0 80         [24]  449 	mov	b,#0x80
      00022A 74 3F            [12]  450 	mov	a,#0x3F
      00022C 12r00r00         [24]  451 	lcall	___fsdiv
      00022F C8               [12]  452 	xch	a,r0
      000230 E5*00            [12]  453 	mov	a,_bp
      000232 24 05            [12]  454 	add	a,#0x05
      000234 C8               [12]  455 	xch	a,r0
      000235 A6 82            [24]  456 	mov	@r0,dpl
      000237 08               [12]  457 	inc	r0
      000238 A6 83            [24]  458 	mov	@r0,dph
      00023A 08               [12]  459 	inc	r0
      00023B A6 F0            [24]  460 	mov	@r0,b
      00023D 08               [12]  461 	inc	r0
      00023E F6               [12]  462 	mov	@r0,a
      00023F E5 81            [12]  463 	mov	a,sp
      000241 24 FC            [12]  464 	add	a,#0xfc
      000243 F5 81            [12]  465 	mov	sp,a
      000245 D0*00            [24]  466 	pop	bits
      000247 E5*00            [12]  467 	mov	a,_bp
      000249 24 05            [12]  468 	add	a,#0x05
      00024B F8               [12]  469 	mov	r0,a
      00024C 86 07            [24]  470 	mov	ar7,@r0
      00024E 08               [12]  471 	inc	r0
      00024F 86 06            [24]  472 	mov	ar6,@r0
      000251 08               [12]  473 	inc	r0
      000252 86 04            [24]  474 	mov	ar4,@r0
      000254 08               [12]  475 	inc	r0
      000255 86 03            [24]  476 	mov	ar3,@r0
                                    477 ;	sincoshf.c:84: if(!iscosh) w=-w;
      000257 20*00 04         [24]  478 	jb	b0,00108$
      00025A EB               [12]  479 	mov	a,r3
      00025B B2 E7            [12]  480 	cpl	acc.7
      00025D FB               [12]  481 	mov	r3,a
      00025E                        482 00108$:
                                    483 ;	sincoshf.c:85: z=(z+w)*0.5;
      00025E C0*00            [24]  484 	push	bits
      000260 C0 07            [24]  485 	push	ar7
      000262 C0 06            [24]  486 	push	ar6
      000264 C0 04            [24]  487 	push	ar4
      000266 C0 03            [24]  488 	push	ar3
      000268 E5*00            [12]  489 	mov	a,_bp
      00026A 24 09            [12]  490 	add	a,#0x09
      00026C F8               [12]  491 	mov	r0,a
      00026D 86 82            [24]  492 	mov	dpl,@r0
      00026F 08               [12]  493 	inc	r0
      000270 86 83            [24]  494 	mov	dph,@r0
      000272 08               [12]  495 	inc	r0
      000273 86 F0            [24]  496 	mov	b,@r0
      000275 08               [12]  497 	inc	r0
      000276 E6               [12]  498 	mov	a,@r0
      000277 12r00r00         [24]  499 	lcall	___fsadd
      00027A AF 82            [24]  500 	mov	r7,dpl
      00027C AE 83            [24]  501 	mov	r6,dph
      00027E AD F0            [24]  502 	mov	r5,b
      000280 FC               [12]  503 	mov	r4,a
      000281 E5 81            [12]  504 	mov	a,sp
      000283 24 FC            [12]  505 	add	a,#0xfc
      000285 F5 81            [12]  506 	mov	sp,a
      000287 D0*00            [24]  507 	pop	bits
      000289 C0*00            [24]  508 	push	bits
      00028B C0 07            [24]  509 	push	ar7
      00028D C0 06            [24]  510 	push	ar6
      00028F C0 05            [24]  511 	push	ar5
      000291 C0 04            [24]  512 	push	ar4
      000293 90 00 00         [24]  513 	mov	dptr,#(0x00&0x00ff)
      000296 E4               [12]  514 	clr	a
      000297 F5 F0            [12]  515 	mov	b,a
      000299 74 3F            [12]  516 	mov	a,#0x3F
      00029B 12r00r00         [24]  517 	lcall	___fsmul
      00029E AF 82            [24]  518 	mov	r7,dpl
      0002A0 AE 83            [24]  519 	mov	r6,dph
      0002A2 AD F0            [24]  520 	mov	r5,b
      0002A4 FC               [12]  521 	mov	r4,a
      0002A5 E5 81            [12]  522 	mov	a,sp
      0002A7 24 FC            [12]  523 	add	a,#0xfc
      0002A9 F5 81            [12]  524 	mov	sp,a
      0002AB D0*00            [24]  525 	pop	bits
      0002AD E5*00            [12]  526 	mov	a,_bp
      0002AF 24 09            [12]  527 	add	a,#0x09
      0002B1 F8               [12]  528 	mov	r0,a
      0002B2 A6 07            [24]  529 	mov	@r0,ar7
      0002B4 08               [12]  530 	inc	r0
      0002B5 A6 06            [24]  531 	mov	@r0,ar6
      0002B7 08               [12]  532 	inc	r0
      0002B8 A6 05            [24]  533 	mov	@r0,ar5
      0002BA 08               [12]  534 	inc	r0
      0002BB A6 04            [24]  535 	mov	@r0,ar4
      0002BD                        536 00111$:
                                    537 ;	sincoshf.c:87: if(sign) z=-z;
      0002BD 20*00 03         [24]  538 	jb	b1,00150$
      0002C0 02r04r9A         [24]  539 	ljmp	00119$
      0002C3                        540 00150$:
      0002C3 E5*00            [12]  541 	mov	a,_bp
      0002C5 24 09            [12]  542 	add	a,#0x09
      0002C7 F8               [12]  543 	mov	r0,a
      0002C8 E6               [12]  544 	mov	a,@r0
      0002C9 F6               [12]  545 	mov	@r0,a
      0002CA 08               [12]  546 	inc	r0
      0002CB E6               [12]  547 	mov	a,@r0
      0002CC F6               [12]  548 	mov	@r0,a
      0002CD 08               [12]  549 	inc	r0
      0002CE E6               [12]  550 	mov	a,@r0
      0002CF F6               [12]  551 	mov	@r0,a
      0002D0 08               [12]  552 	inc	r0
      0002D1 E6               [12]  553 	mov	a,@r0
      0002D2 B2 E7            [12]  554 	cpl	acc.7
      0002D4 F6               [12]  555 	mov	@r0,a
      0002D5 02r04r9A         [24]  556 	ljmp	00119$
      0002D8                        557 00118$:
                                    558 ;	sincoshf.c:91: if (y<EPS)
      0002D8 E4               [12]  559 	clr	a
      0002D9 C0 E0            [24]  560 	push	acc
      0002DB C0 E0            [24]  561 	push	acc
      0002DD 74 80            [12]  562 	mov	a,#0x80
      0002DF C0 E0            [24]  563 	push	acc
      0002E1 74 39            [12]  564 	mov	a,#0x39
      0002E3 C0 E0            [24]  565 	push	acc
      0002E5 8A 82            [24]  566 	mov	dpl,r2
      0002E7 8B 83            [24]  567 	mov	dph,r3
      0002E9 8E F0            [24]  568 	mov	b,r6
      0002EB EF               [12]  569 	mov	a,r7
      0002EC 12r00r00         [24]  570 	lcall	___fslt
      0002EF AF 82            [24]  571 	mov	r7,dpl
      0002F1 E5 81            [12]  572 	mov	a,sp
      0002F3 24 FC            [12]  573 	add	a,#0xfc
      0002F5 F5 81            [12]  574 	mov	sp,a
      0002F7 EF               [12]  575 	mov	a,r7
      0002F8 60 19            [24]  576 	jz	00115$
                                    577 ;	sincoshf.c:92: z=x;
      0002FA A8*00            [24]  578 	mov	r0,_bp
      0002FC 08               [12]  579 	inc	r0
      0002FD E5*00            [12]  580 	mov	a,_bp
      0002FF 24 09            [12]  581 	add	a,#0x09
      000301 F9               [12]  582 	mov	r1,a
      000302 E6               [12]  583 	mov	a,@r0
      000303 F7               [12]  584 	mov	@r1,a
      000304 08               [12]  585 	inc	r0
      000305 09               [12]  586 	inc	r1
      000306 E6               [12]  587 	mov	a,@r0
      000307 F7               [12]  588 	mov	@r1,a
      000308 08               [12]  589 	inc	r0
      000309 09               [12]  590 	inc	r1
      00030A E6               [12]  591 	mov	a,@r0
      00030B F7               [12]  592 	mov	@r1,a
      00030C 08               [12]  593 	inc	r0
      00030D 09               [12]  594 	inc	r1
      00030E E6               [12]  595 	mov	a,@r0
      00030F F7               [12]  596 	mov	@r1,a
      000310 02r04r9A         [24]  597 	ljmp	00119$
      000313                        598 00115$:
                                    599 ;	sincoshf.c:95: z=x*x;
      000313 A8*00            [24]  600 	mov	r0,_bp
      000315 08               [12]  601 	inc	r0
      000316 E6               [12]  602 	mov	a,@r0
      000317 C0 E0            [24]  603 	push	acc
      000319 08               [12]  604 	inc	r0
      00031A E6               [12]  605 	mov	a,@r0
      00031B C0 E0            [24]  606 	push	acc
      00031D 08               [12]  607 	inc	r0
      00031E E6               [12]  608 	mov	a,@r0
      00031F C0 E0            [24]  609 	push	acc
      000321 08               [12]  610 	inc	r0
      000322 E6               [12]  611 	mov	a,@r0
      000323 C0 E0            [24]  612 	push	acc
      000325 A8*00            [24]  613 	mov	r0,_bp
      000327 08               [12]  614 	inc	r0
      000328 86 82            [24]  615 	mov	dpl,@r0
      00032A 08               [12]  616 	inc	r0
      00032B 86 83            [24]  617 	mov	dph,@r0
      00032D 08               [12]  618 	inc	r0
      00032E 86 F0            [24]  619 	mov	b,@r0
      000330 08               [12]  620 	inc	r0
      000331 E6               [12]  621 	mov	a,@r0
      000332 12r00r00         [24]  622 	lcall	___fsmul
      000335 AC 82            [24]  623 	mov	r4,dpl
      000337 AD 83            [24]  624 	mov	r5,dph
      000339 AE F0            [24]  625 	mov	r6,b
      00033B FF               [12]  626 	mov	r7,a
      00033C E5 81            [12]  627 	mov	a,sp
      00033E 24 FC            [12]  628 	add	a,#0xfc
      000340 F5 81            [12]  629 	mov	sp,a
      000342 E5*00            [12]  630 	mov	a,_bp
      000344 24 09            [12]  631 	add	a,#0x09
      000346 F8               [12]  632 	mov	r0,a
      000347 A6 04            [24]  633 	mov	@r0,ar4
      000349 08               [12]  634 	inc	r0
      00034A A6 05            [24]  635 	mov	@r0,ar5
      00034C 08               [12]  636 	inc	r0
      00034D A6 06            [24]  637 	mov	@r0,ar6
      00034F 08               [12]  638 	inc	r0
      000350 A6 07            [24]  639 	mov	@r0,ar7
                                    640 ;	sincoshf.c:96: z=x+x*z*P(z)/Q(z);
      000352 E5*00            [12]  641 	mov	a,_bp
      000354 24 09            [12]  642 	add	a,#0x09
      000356 F8               [12]  643 	mov	r0,a
      000357 E6               [12]  644 	mov	a,@r0
      000358 C0 E0            [24]  645 	push	acc
      00035A 08               [12]  646 	inc	r0
      00035B E6               [12]  647 	mov	a,@r0
      00035C C0 E0            [24]  648 	push	acc
      00035E 08               [12]  649 	inc	r0
      00035F E6               [12]  650 	mov	a,@r0
      000360 C0 E0            [24]  651 	push	acc
      000362 08               [12]  652 	inc	r0
      000363 E6               [12]  653 	mov	a,@r0
      000364 C0 E0            [24]  654 	push	acc
      000366 A8*00            [24]  655 	mov	r0,_bp
      000368 08               [12]  656 	inc	r0
      000369 86 82            [24]  657 	mov	dpl,@r0
      00036B 08               [12]  658 	inc	r0
      00036C 86 83            [24]  659 	mov	dph,@r0
      00036E 08               [12]  660 	inc	r0
      00036F 86 F0            [24]  661 	mov	b,@r0
      000371 08               [12]  662 	inc	r0
      000372 E6               [12]  663 	mov	a,@r0
      000373 12r00r00         [24]  664 	lcall	___fsmul
      000376 C8               [12]  665 	xch	a,r0
      000377 E5*00            [12]  666 	mov	a,_bp
      000379 24 05            [12]  667 	add	a,#0x05
      00037B C8               [12]  668 	xch	a,r0
      00037C A6 82            [24]  669 	mov	@r0,dpl
      00037E 08               [12]  670 	inc	r0
      00037F A6 83            [24]  671 	mov	@r0,dph
      000381 08               [12]  672 	inc	r0
      000382 A6 F0            [24]  673 	mov	@r0,b
      000384 08               [12]  674 	inc	r0
      000385 F6               [12]  675 	mov	@r0,a
      000386 E5 81            [12]  676 	mov	a,sp
      000388 24 FC            [12]  677 	add	a,#0xfc
      00038A F5 81            [12]  678 	mov	sp,a
      00038C E5*00            [12]  679 	mov	a,_bp
      00038E 24 09            [12]  680 	add	a,#0x09
      000390 F8               [12]  681 	mov	r0,a
      000391 E6               [12]  682 	mov	a,@r0
      000392 C0 E0            [24]  683 	push	acc
      000394 08               [12]  684 	inc	r0
      000395 E6               [12]  685 	mov	a,@r0
      000396 C0 E0            [24]  686 	push	acc
      000398 08               [12]  687 	inc	r0
      000399 E6               [12]  688 	mov	a,@r0
      00039A C0 E0            [24]  689 	push	acc
      00039C 08               [12]  690 	inc	r0
      00039D E6               [12]  691 	mov	a,@r0
      00039E C0 E0            [24]  692 	push	acc
      0003A0 90 E6 EA         [24]  693 	mov	dptr,#0xE6EA
      0003A3 75 F0 42         [24]  694 	mov	b,#0x42
      0003A6 74 BE            [12]  695 	mov	a,#0xBE
      0003A8 12r00r00         [24]  696 	lcall	___fsmul
      0003AB AA 82            [24]  697 	mov	r2,dpl
      0003AD AB 83            [24]  698 	mov	r3,dph
      0003AF AE F0            [24]  699 	mov	r6,b
      0003B1 FF               [12]  700 	mov	r7,a
      0003B2 E5 81            [12]  701 	mov	a,sp
      0003B4 24 FC            [12]  702 	add	a,#0xfc
      0003B6 F5 81            [12]  703 	mov	sp,a
      0003B8 74 F0            [12]  704 	mov	a,#0xF0
      0003BA C0 E0            [24]  705 	push	acc
      0003BC 74 69            [12]  706 	mov	a,#0x69
      0003BE C0 E0            [24]  707 	push	acc
      0003C0 74 E4            [12]  708 	mov	a,#0xE4
      0003C2 C0 E0            [24]  709 	push	acc
      0003C4 74 C0            [12]  710 	mov	a,#0xC0
      0003C6 C0 E0            [24]  711 	push	acc
      0003C8 8A 82            [24]  712 	mov	dpl,r2
      0003CA 8B 83            [24]  713 	mov	dph,r3
      0003CC 8E F0            [24]  714 	mov	b,r6
      0003CE EF               [12]  715 	mov	a,r7
      0003CF 12r00r00         [24]  716 	lcall	___fsadd
      0003D2 AC 82            [24]  717 	mov	r4,dpl
      0003D4 AD 83            [24]  718 	mov	r5,dph
      0003D6 AE F0            [24]  719 	mov	r6,b
      0003D8 FF               [12]  720 	mov	r7,a
      0003D9 E5 81            [12]  721 	mov	a,sp
      0003DB 24 FC            [12]  722 	add	a,#0xfc
      0003DD F5 81            [12]  723 	mov	sp,a
      0003DF C0 04            [24]  724 	push	ar4
      0003E1 C0 05            [24]  725 	push	ar5
      0003E3 C0 06            [24]  726 	push	ar6
      0003E5 C0 07            [24]  727 	push	ar7
      0003E7 E5*00            [12]  728 	mov	a,_bp
      0003E9 24 05            [12]  729 	add	a,#0x05
      0003EB F8               [12]  730 	mov	r0,a
      0003EC 86 82            [24]  731 	mov	dpl,@r0
      0003EE 08               [12]  732 	inc	r0
      0003EF 86 83            [24]  733 	mov	dph,@r0
      0003F1 08               [12]  734 	inc	r0
      0003F2 86 F0            [24]  735 	mov	b,@r0
      0003F4 08               [12]  736 	inc	r0
      0003F5 E6               [12]  737 	mov	a,@r0
      0003F6 12r00r00         [24]  738 	lcall	___fsmul
      0003F9 C8               [12]  739 	xch	a,r0
      0003FA E5*00            [12]  740 	mov	a,_bp
      0003FC 24 05            [12]  741 	add	a,#0x05
      0003FE C8               [12]  742 	xch	a,r0
      0003FF A6 82            [24]  743 	mov	@r0,dpl
      000401 08               [12]  744 	inc	r0
      000402 A6 83            [24]  745 	mov	@r0,dph
      000404 08               [12]  746 	inc	r0
      000405 A6 F0            [24]  747 	mov	@r0,b
      000407 08               [12]  748 	inc	r0
      000408 F6               [12]  749 	mov	@r0,a
      000409 E5 81            [12]  750 	mov	a,sp
      00040B 24 FC            [12]  751 	add	a,#0xfc
      00040D F5 81            [12]  752 	mov	sp,a
      00040F 74 93            [12]  753 	mov	a,#0x93
      000411 C0 E0            [24]  754 	push	acc
      000413 74 4F            [12]  755 	mov	a,#0x4F
      000415 C0 E0            [24]  756 	push	acc
      000417 74 2B            [12]  757 	mov	a,#0x2B
      000419 C0 E0            [24]  758 	push	acc
      00041B 74 C2            [12]  759 	mov	a,#0xC2
      00041D C0 E0            [24]  760 	push	acc
      00041F E5*00            [12]  761 	mov	a,_bp
      000421 24 09            [12]  762 	add	a,#0x09
      000423 F8               [12]  763 	mov	r0,a
      000424 86 82            [24]  764 	mov	dpl,@r0
      000426 08               [12]  765 	inc	r0
      000427 86 83            [24]  766 	mov	dph,@r0
      000429 08               [12]  767 	inc	r0
      00042A 86 F0            [24]  768 	mov	b,@r0
      00042C 08               [12]  769 	inc	r0
      00042D E6               [12]  770 	mov	a,@r0
      00042E 12r00r00         [24]  771 	lcall	___fsadd
      000431 AA 82            [24]  772 	mov	r2,dpl
      000433 AB 83            [24]  773 	mov	r3,dph
      000435 AE F0            [24]  774 	mov	r6,b
      000437 FF               [12]  775 	mov	r7,a
      000438 E5 81            [12]  776 	mov	a,sp
      00043A 24 FC            [12]  777 	add	a,#0xfc
      00043C F5 81            [12]  778 	mov	sp,a
      00043E C0 02            [24]  779 	push	ar2
      000440 C0 03            [24]  780 	push	ar3
      000442 C0 06            [24]  781 	push	ar6
      000444 C0 07            [24]  782 	push	ar7
      000446 E5*00            [12]  783 	mov	a,_bp
      000448 24 05            [12]  784 	add	a,#0x05
      00044A F8               [12]  785 	mov	r0,a
      00044B 86 82            [24]  786 	mov	dpl,@r0
      00044D 08               [12]  787 	inc	r0
      00044E 86 83            [24]  788 	mov	dph,@r0
      000450 08               [12]  789 	inc	r0
      000451 86 F0            [24]  790 	mov	b,@r0
      000453 08               [12]  791 	inc	r0
      000454 E6               [12]  792 	mov	a,@r0
      000455 12r00r00         [24]  793 	lcall	___fsdiv
      000458 AC 82            [24]  794 	mov	r4,dpl
      00045A AD 83            [24]  795 	mov	r5,dph
      00045C AE F0            [24]  796 	mov	r6,b
      00045E FF               [12]  797 	mov	r7,a
      00045F E5 81            [12]  798 	mov	a,sp
      000461 24 FC            [12]  799 	add	a,#0xfc
      000463 F5 81            [12]  800 	mov	sp,a
      000465 C0 04            [24]  801 	push	ar4
      000467 C0 05            [24]  802 	push	ar5
      000469 C0 06            [24]  803 	push	ar6
      00046B C0 07            [24]  804 	push	ar7
      00046D A8*00            [24]  805 	mov	r0,_bp
      00046F 08               [12]  806 	inc	r0
      000470 86 82            [24]  807 	mov	dpl,@r0
      000472 08               [12]  808 	inc	r0
      000473 86 83            [24]  809 	mov	dph,@r0
      000475 08               [12]  810 	inc	r0
      000476 86 F0            [24]  811 	mov	b,@r0
      000478 08               [12]  812 	inc	r0
      000479 E6               [12]  813 	mov	a,@r0
      00047A 12r00r00         [24]  814 	lcall	___fsadd
      00047D AC 82            [24]  815 	mov	r4,dpl
      00047F AD 83            [24]  816 	mov	r5,dph
      000481 AE F0            [24]  817 	mov	r6,b
      000483 FF               [12]  818 	mov	r7,a
      000484 E5 81            [12]  819 	mov	a,sp
      000486 24 FC            [12]  820 	add	a,#0xfc
      000488 F5 81            [12]  821 	mov	sp,a
      00048A E5*00            [12]  822 	mov	a,_bp
      00048C 24 09            [12]  823 	add	a,#0x09
      00048E F8               [12]  824 	mov	r0,a
      00048F A6 04            [24]  825 	mov	@r0,ar4
      000491 08               [12]  826 	inc	r0
      000492 A6 05            [24]  827 	mov	@r0,ar5
      000494 08               [12]  828 	inc	r0
      000495 A6 06            [24]  829 	mov	@r0,ar6
      000497 08               [12]  830 	inc	r0
      000498 A6 07            [24]  831 	mov	@r0,ar7
      00049A                        832 00119$:
                                    833 ;	sincoshf.c:99: return z;
      00049A E5*00            [12]  834 	mov	a,_bp
      00049C 24 09            [12]  835 	add	a,#0x09
      00049E F8               [12]  836 	mov	r0,a
      00049F 86 82            [24]  837 	mov	dpl,@r0
      0004A1 08               [12]  838 	inc	r0
      0004A2 86 83            [24]  839 	mov	dph,@r0
      0004A4 08               [12]  840 	inc	r0
      0004A5 86 F0            [24]  841 	mov	b,@r0
      0004A7 08               [12]  842 	inc	r0
      0004A8 E6               [12]  843 	mov	a,@r0
      0004A9 85*00 81         [24]  844 	mov	sp,_bp
      0004AC D0*00            [24]  845 	pop	_bp
      0004AE 22               [24]  846 	ret
                                    847 	.area CSEG    (CODE)
                                    848 	.area CONST   (CODE)
                                    849 	.area XINIT   (CODE)
                                    850 	.area CABS    (ABS,CODE)
