                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:50 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module printf_large
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _strlen
                                     13 	.globl __print_format
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'output_digit'
                                    107 ;------------------------------------------------------------
                                    108 ;output_char               Allocated to stack - _bp -4
                                    109 ;p                         Allocated to stack - _bp -7
                                    110 ;lower_case                Allocated to registers b0 
                                    111 ;n                         Allocated to registers r7 
                                    112 ;c                         Allocated to registers r7 
                                    113 ;------------------------------------------------------------
                                    114 ;	printf_large.c:116: output_digit (unsigned char n, bool lower_case, pfn_outputchar output_char, void* p)
                                    115 ;	-----------------------------------------
                                    116 ;	 function output_digit
                                    117 ;	-----------------------------------------
      000000                        118 _output_digit:
                           000007   119 	ar7 = 0x07
                           000006   120 	ar6 = 0x06
                           000005   121 	ar5 = 0x05
                           000004   122 	ar4 = 0x04
                           000003   123 	ar3 = 0x03
                           000002   124 	ar2 = 0x02
                           000001   125 	ar1 = 0x01
                           000000   126 	ar0 = 0x00
      000000 C0*00            [24]  127 	push	_bp
      000002 85 81*00         [24]  128 	mov	_bp,sp
      000005 AF 82            [24]  129 	mov	r7,dpl
                                    130 ;	printf_large.c:118: register unsigned char c = n + (unsigned char)'0';
      000007 74 30            [12]  131 	mov	a,#0x30
      000009 2F               [12]  132 	add	a,r7
                                    133 ;	printf_large.c:120: if (c > (unsigned char)'9')
      00000A FF               [12]  134 	mov  r7,a
      00000B 24 C6            [12]  135 	add	a,#0xff - 0x39
      00000D 50 0B            [24]  136 	jnc	00104$
                                    137 ;	printf_large.c:122: c += (unsigned char)('A' - '0' - 10);
      00000F 74 07            [12]  138 	mov	a,#0x07
      000011 2F               [12]  139 	add	a,r7
      000012 FF               [12]  140 	mov	r7,a
                                    141 ;	printf_large.c:123: if (lower_case)
      000013 30*00 04         [24]  142 	jnb	b0,00104$
                                    143 ;	printf_large.c:124: c += (unsigned char)('a' - 'A');
      000016 74 20            [12]  144 	mov	a,#0x20
      000018 2F               [12]  145 	add	a,r7
      000019 FF               [12]  146 	mov	r7,a
      00001A                        147 00104$:
                                    148 ;	printf_large.c:126: output_char( c, p );
      00001A E5*00            [12]  149 	mov	a,_bp
      00001C 24 F9            [12]  150 	add	a,#0xf9
      00001E F8               [12]  151 	mov	r0,a
      00001F E6               [12]  152 	mov	a,@r0
      000020 C0 E0            [24]  153 	push	acc
      000022 08               [12]  154 	inc	r0
      000023 E6               [12]  155 	mov	a,@r0
      000024 C0 E0            [24]  156 	push	acc
      000026 08               [12]  157 	inc	r0
      000027 E6               [12]  158 	mov	a,@r0
      000028 C0 E0            [24]  159 	push	acc
      00002A 12r00r2F         [24]  160 	lcall	00115$
      00002D 80 0F            [24]  161 	sjmp	00116$
      00002F                        162 00115$:
      00002F E5*00            [12]  163 	mov	a,_bp
      000031 24 FC            [12]  164 	add	a,#0xfc
      000033 F8               [12]  165 	mov	r0,a
      000034 E6               [12]  166 	mov	a,@r0
      000035 C0 E0            [24]  167 	push	acc
      000037 08               [12]  168 	inc	r0
      000038 E6               [12]  169 	mov	a,@r0
      000039 C0 E0            [24]  170 	push	acc
      00003B 8F 82            [24]  171 	mov	dpl,r7
      00003D 22               [24]  172 	ret
      00003E                        173 00116$:
      00003E 15 81            [12]  174 	dec	sp
      000040 15 81            [12]  175 	dec	sp
      000042 15 81            [12]  176 	dec	sp
      000044 D0*00            [24]  177 	pop	_bp
      000046 22               [24]  178 	ret
                                    179 ;------------------------------------------------------------
                                    180 ;Allocation info for local variables in function 'output_2digits'
                                    181 ;------------------------------------------------------------
                                    182 ;output_char               Allocated to stack - _bp -4
                                    183 ;p                         Allocated to stack - _bp -7
                                    184 ;lower_case                Allocated to registers b0 
                                    185 ;b                         Allocated to registers r7 
                                    186 ;------------------------------------------------------------
                                    187 ;	printf_large.c:149: output_2digits (unsigned char b, bool lower_case, pfn_outputchar output_char, void* p)
                                    188 ;	-----------------------------------------
                                    189 ;	 function output_2digits
                                    190 ;	-----------------------------------------
      000047                        191 _output_2digits:
      000047 C0*00            [24]  192 	push	_bp
      000049 85 81*00         [24]  193 	mov	_bp,sp
                                    194 ;	printf_large.c:151: output_digit( b>>4,   lower_case, output_char, p );
      00004C E5 82            [12]  195 	mov	a,dpl
      00004E FF               [12]  196 	mov	r7,a
      00004F C4               [12]  197 	swap	a
      000050 54 0F            [12]  198 	anl	a,#0x0F
      000052 FE               [12]  199 	mov	r6,a
      000053 C0 07            [24]  200 	push	ar7
      000055 C0*00            [24]  201 	push	bits
      000057 E5*00            [12]  202 	mov	a,_bp
      000059 24 F9            [12]  203 	add	a,#0xf9
      00005B F8               [12]  204 	mov	r0,a
      00005C E6               [12]  205 	mov	a,@r0
      00005D C0 E0            [24]  206 	push	acc
      00005F 08               [12]  207 	inc	r0
      000060 E6               [12]  208 	mov	a,@r0
      000061 C0 E0            [24]  209 	push	acc
      000063 08               [12]  210 	inc	r0
      000064 E6               [12]  211 	mov	a,@r0
      000065 C0 E0            [24]  212 	push	acc
      000067 E5*00            [12]  213 	mov	a,_bp
      000069 24 FC            [12]  214 	add	a,#0xfc
      00006B F8               [12]  215 	mov	r0,a
      00006C E6               [12]  216 	mov	a,@r0
      00006D C0 E0            [24]  217 	push	acc
      00006F 08               [12]  218 	inc	r0
      000070 E6               [12]  219 	mov	a,@r0
      000071 C0 E0            [24]  220 	push	acc
      000073 A2*00            [12]  221 	mov	c,b0
      000075 92 F0            [24]  222 	mov	b[0],c
      000077 85 F0*00         [24]  223 	mov	bits,b
      00007A 8E 82            [24]  224 	mov	dpl,r6
      00007C 12r00r00         [24]  225 	lcall	_output_digit
      00007F E5 81            [12]  226 	mov	a,sp
      000081 24 FB            [12]  227 	add	a,#0xfb
      000083 F5 81            [12]  228 	mov	sp,a
      000085 D0*00            [24]  229 	pop	bits
      000087 D0 07            [24]  230 	pop	ar7
                                    231 ;	printf_large.c:152: output_digit( b&0x0F, lower_case, output_char, p );
      000089 53 07 0F         [24]  232 	anl	ar7,#0x0F
      00008C E5*00            [12]  233 	mov	a,_bp
      00008E 24 F9            [12]  234 	add	a,#0xf9
      000090 F8               [12]  235 	mov	r0,a
      000091 E6               [12]  236 	mov	a,@r0
      000092 C0 E0            [24]  237 	push	acc
      000094 08               [12]  238 	inc	r0
      000095 E6               [12]  239 	mov	a,@r0
      000096 C0 E0            [24]  240 	push	acc
      000098 08               [12]  241 	inc	r0
      000099 E6               [12]  242 	mov	a,@r0
      00009A C0 E0            [24]  243 	push	acc
      00009C E5*00            [12]  244 	mov	a,_bp
      00009E 24 FC            [12]  245 	add	a,#0xfc
      0000A0 F8               [12]  246 	mov	r0,a
      0000A1 E6               [12]  247 	mov	a,@r0
      0000A2 C0 E0            [24]  248 	push	acc
      0000A4 08               [12]  249 	inc	r0
      0000A5 E6               [12]  250 	mov	a,@r0
      0000A6 C0 E0            [24]  251 	push	acc
      0000A8 A2*00            [12]  252 	mov	c,b0
      0000AA 92 F0            [24]  253 	mov	b[0],c
      0000AC 85 F0*00         [24]  254 	mov	bits,b
      0000AF 8F 82            [24]  255 	mov	dpl,r7
      0000B1 12r00r00         [24]  256 	lcall	_output_digit
      0000B4 E5 81            [12]  257 	mov	a,sp
      0000B6 24 FB            [12]  258 	add	a,#0xfb
      0000B8 F5 81            [12]  259 	mov	sp,a
      0000BA D0*00            [24]  260 	pop	_bp
      0000BC 22               [24]  261 	ret
                                    262 ;------------------------------------------------------------
                                    263 ;Allocation info for local variables in function 'calculate_digit'
                                    264 ;------------------------------------------------------------
                                    265 ;radix                     Allocated to stack - _bp -3
                                    266 ;value                     Allocated to registers r1 
                                    267 ;ul                        Allocated to registers r4 r5 r6 r7 
                                    268 ;pb4                       Allocated to registers r0 
                                    269 ;i                         Allocated to registers r3 
                                    270 ;sloc0                     Allocated to stack - _bp +8
                                    271 ;------------------------------------------------------------
                                    272 ;	printf_large.c:168: calculate_digit (value_t _AUTOMEM * value, unsigned char radix)
                                    273 ;	-----------------------------------------
                                    274 ;	 function calculate_digit
                                    275 ;	-----------------------------------------
      0000BD                        276 _calculate_digit:
      0000BD C0*00            [24]  277 	push	_bp
      0000BF 85 81*00         [24]  278 	mov	_bp,sp
      0000C2 A9 82            [24]  279 	mov	r1,dpl
                                    280 ;	printf_large.c:170: unsigned long ul = value->ul;
      0000C4 87 04            [24]  281 	mov	ar4,@r1
      0000C6 09               [12]  282 	inc	r1
      0000C7 87 05            [24]  283 	mov	ar5,@r1
      0000C9 09               [12]  284 	inc	r1
      0000CA 87 06            [24]  285 	mov	ar6,@r1
      0000CC 09               [12]  286 	inc	r1
      0000CD 87 07            [24]  287 	mov	ar7,@r1
      0000CF 19               [12]  288 	dec	r1
      0000D0 19               [12]  289 	dec	r1
      0000D1 19               [12]  290 	dec	r1
                                    291 ;	printf_large.c:171: unsigned char _AUTOMEM * pb4 = &value->byte[4];
      0000D2 74 04            [12]  292 	mov	a,#0x04
      0000D4 29               [12]  293 	add	a,r1
      0000D5 F8               [12]  294 	mov	r0,a
                                    295 ;	printf_large.c:172: unsigned char i = 32;
      0000D6 7B 20            [12]  296 	mov	r3,#0x20
                                    297 ;	printf_large.c:174: do
      0000D8                        298 00103$:
                                    299 ;	printf_large.c:176: *pb4 = (*pb4 << 1) | ((ul >> 31) & 0x01);
      0000D8 C0 03            [24]  300 	push	ar3
      0000DA E6               [12]  301 	mov	a,@r0
      0000DB 26               [12]  302 	add	a,@r0
      0000DC FA               [12]  303 	mov	r2,a
      0000DD EF               [12]  304 	mov	a,r7
      0000DE 23               [12]  305 	rl	a
      0000DF 54 01            [12]  306 	anl	a,#0x01
      0000E1 FB               [12]  307 	mov	r3,a
      0000E2 EA               [12]  308 	mov	a,r2
      0000E3 42 03            [12]  309 	orl	ar3,a
      0000E5 A6 03            [24]  310 	mov	@r0,ar3
                                    311 ;	printf_large.c:177: ul <<= 1;
      0000E7 EC               [12]  312 	mov	a,r4
      0000E8 2C               [12]  313 	add	a,r4
      0000E9 FC               [12]  314 	mov	r4,a
      0000EA ED               [12]  315 	mov	a,r5
      0000EB 33               [12]  316 	rlc	a
      0000EC FD               [12]  317 	mov	r5,a
      0000ED EE               [12]  318 	mov	a,r6
      0000EE 33               [12]  319 	rlc	a
      0000EF FE               [12]  320 	mov	r6,a
      0000F0 EF               [12]  321 	mov	a,r7
      0000F1 33               [12]  322 	rlc	a
      0000F2 FF               [12]  323 	mov	r7,a
                                    324 ;	printf_large.c:179: if (radix <= *pb4 )
      0000F3 86 02            [24]  325 	mov	ar2,@r0
      0000F5 C0 00            [24]  326 	push	ar0
      0000F7 E5*00            [12]  327 	mov	a,_bp
      0000F9 24 FD            [12]  328 	add	a,#0xfd
      0000FB F8               [12]  329 	mov	r0,a
      0000FC C3               [12]  330 	clr	c
      0000FD EA               [12]  331 	mov	a,r2
      0000FE 96               [12]  332 	subb	a,@r0
      0000FF D0 00            [24]  333 	pop	ar0
      000101 D0 03            [24]  334 	pop	ar3
      000103 40 12            [24]  335 	jc	00104$
                                    336 ;	printf_large.c:181: *pb4 -= radix;
      000105 C0 00            [24]  337 	push	ar0
      000107 E5*00            [12]  338 	mov	a,_bp
      000109 24 FD            [12]  339 	add	a,#0xfd
      00010B F8               [12]  340 	mov	r0,a
      00010C EA               [12]  341 	mov	a,r2
      00010D C3               [12]  342 	clr	c
      00010E 96               [12]  343 	subb	a,@r0
      00010F FA               [12]  344 	mov	r2,a
      000110 D0 00            [24]  345 	pop	ar0
      000112 A6 02            [24]  346 	mov	@r0,ar2
                                    347 ;	printf_large.c:182: ul |= 1;
      000114 43 04 01         [24]  348 	orl	ar4,#0x01
      000117                        349 00104$:
                                    350 ;	printf_large.c:184: } while (--i);
      000117 EB               [12]  351 	mov	a,r3
      000118 14               [12]  352 	dec	a
      000119 FA               [12]  353 	mov	r2,a
      00011A FB               [12]  354 	mov	r3,a
      00011B 70 BB            [24]  355 	jnz	00103$
                                    356 ;	printf_large.c:185: value->ul = ul;
      00011D A7 04            [24]  357 	mov	@r1,ar4
      00011F 09               [12]  358 	inc	r1
      000120 A7 05            [24]  359 	mov	@r1,ar5
      000122 09               [12]  360 	inc	r1
      000123 A7 06            [24]  361 	mov	@r1,ar6
      000125 09               [12]  362 	inc	r1
      000126 A7 07            [24]  363 	mov	@r1,ar7
      000128 D0*00            [24]  364 	pop	_bp
      00012A 22               [24]  365 	ret
                                    366 ;------------------------------------------------------------
                                    367 ;Allocation info for local variables in function '_print_format'
                                    368 ;------------------------------------------------------------
                                    369 ;pvoid                     Allocated to stack - _bp -5
                                    370 ;format                    Allocated to stack - _bp -8
                                    371 ;ap                        Allocated to stack - _bp -9
                                    372 ;pfn                       Allocated to stack - _bp +1
                                    373 ;left_justify              Allocated to registers b0 
                                    374 ;zero_padding              Allocated to registers b1 
                                    375 ;prefix_sign               Allocated to registers b2 
                                    376 ;prefix_space              Allocated to registers b3 
                                    377 ;signed_argument           Allocated to registers b4 
                                    378 ;char_argument             Allocated to registers b5 
                                    379 ;long_argument             Allocated to registers b6 
                                    380 ;float_argument            Allocated to registers b7 
                                    381 ;lower_case                Allocated to stack - _bp +16
                                    382 ;value                     Allocated to stack - _bp +17
                                    383 ;charsOutputted            Allocated to stack - _bp +11
                                    384 ;lsd                       Allocated to registers b5 
                                    385 ;radix                     Allocated to stack - _bp +22
                                    386 ;width                     Allocated to stack - _bp +23
                                    387 ;decimals                  Allocated to registers r4 
                                    388 ;length                    Allocated to stack - _bp +24
                                    389 ;c                         Allocated to registers r5 
                                    390 ;memtype                   Allocated to registers r7 
                                    391 ;store                     Allocated to stack - _bp +25
                                    392 ;pstore                    Allocated to registers r3 
                                    393 ;sloc0                     Allocated to stack - _bp +3
                                    394 ;sloc1                     Allocated to stack - _bp +4
                                    395 ;sloc2                     Allocated to stack - _bp +7
                                    396 ;sloc3                     Allocated to stack - _bp +8
                                    397 ;sloc4                     Allocated to stack - _bp +9
                                    398 ;sloc5                     Allocated to stack - _bp +11
                                    399 ;sloc6                     Allocated to stack - _bp +13
                                    400 ;------------------------------------------------------------
                                    401 ;	printf_large.c:434: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                                    402 ;	-----------------------------------------
                                    403 ;	 function _print_format
                                    404 ;	-----------------------------------------
      00012B                        405 __print_format:
      00012B C0*00            [24]  406 	push	_bp
      00012D 85 81*00         [24]  407 	mov	_bp,sp
      000130 C0 82            [24]  408 	push	dpl
      000132 C0 83            [24]  409 	push	dph
      000134 E5 81            [12]  410 	mov	a,sp
      000136 24 1C            [12]  411 	add	a,#0x1C
      000138 F5 81            [12]  412 	mov	sp,a
                                    413 ;	printf_large.c:466: charsOutputted = 0;
      00013A E5*00            [12]  414 	mov	a,_bp
      00013C 24 0B            [12]  415 	add	a,#0x0b
      00013E F8               [12]  416 	mov	r0,a
      00013F E4               [12]  417 	clr	a
      000140 F6               [12]  418 	mov	@r0,a
      000141 08               [12]  419 	inc	r0
      000142 F6               [12]  420 	mov	@r0,a
                                    421 ;	printf_large.c:475: while( c=*format++ )
      000143 E5*00            [12]  422 	mov	a,_bp
      000145 24 03            [12]  423 	add	a,#0x03
      000147 F8               [12]  424 	mov	r0,a
      000148 E5*00            [12]  425 	mov	a,_bp
      00014A 24 11            [12]  426 	add	a,#0x11
      00014C F6               [12]  427 	mov	@r0,a
      00014D E5*00            [12]  428 	mov	a,_bp
      00014F 24 19            [12]  429 	add	a,#0x19
      000151 C8               [12]  430 	xch	a,r0
      000152 E5*00            [12]  431 	mov	a,_bp
      000154 24 08            [12]  432 	add	a,#0x08
      000156 C8               [12]  433 	xch	a,r0
      000157 24 05            [12]  434 	add	a,#0x05
      000159 F6               [12]  435 	mov	@r0,a
      00015A E5*00            [12]  436 	mov	a,_bp
      00015C 24 11            [12]  437 	add	a,#0x11
      00015E F8               [12]  438 	mov	r0,a
      00015F 24 04            [12]  439 	add	a,#0x04
      000161 FA               [12]  440 	mov	r2,a
      000162                        441 00243$:
      000162 E5*00            [12]  442 	mov	a,_bp
      000164 24 F8            [12]  443 	add	a,#0xf8
      000166 F9               [12]  444 	mov	r1,a
      000167 87 06            [24]  445 	mov	ar6,@r1
      000169 09               [12]  446 	inc	r1
      00016A 87 05            [24]  447 	mov	ar5,@r1
      00016C 09               [12]  448 	inc	r1
      00016D 87 04            [24]  449 	mov	ar4,@r1
      00016F 8E 82            [24]  450 	mov	dpl,r6
      000171 8D 83            [24]  451 	mov	dph,r5
      000173 8C F0            [24]  452 	mov	b,r4
      000175 12r00r00         [24]  453 	lcall	__gptrget
      000178 FF               [12]  454 	mov	r7,a
      000179 E5*00            [12]  455 	mov	a,_bp
      00017B 24 F8            [12]  456 	add	a,#0xf8
      00017D F9               [12]  457 	mov	r1,a
      00017E 74 01            [12]  458 	mov	a,#0x01
      000180 2E               [12]  459 	add	a,r6
      000181 F7               [12]  460 	mov	@r1,a
      000182 E4               [12]  461 	clr	a
      000183 3D               [12]  462 	addc	a,r5
      000184 09               [12]  463 	inc	r1
      000185 F7               [12]  464 	mov	@r1,a
      000186 09               [12]  465 	inc	r1
      000187 A7 04            [24]  466 	mov	@r1,ar4
      000189 EF               [12]  467 	mov	a,r7
      00018A FD               [12]  468 	mov	r5,a
      00018B 70 03            [24]  469 	jnz	00500$
      00018D 02r0Fr4E         [24]  470 	ljmp	00245$
      000190                        471 00500$:
                                    472 ;	printf_large.c:477: if ( c=='%' )
      000190 BD 25 02         [24]  473 	cjne	r5,#0x25,00501$
      000193 80 03            [24]  474 	sjmp	00502$
      000195                        475 00501$:
      000195 02r0Fr10         [24]  476 	ljmp	00241$
      000198                        477 00502$:
                                    478 ;	printf_large.c:479: left_justify    = 0;
      000198 C2*00            [12]  479 	clr	b0
                                    480 ;	printf_large.c:480: zero_padding    = 0;
      00019A C2*00            [12]  481 	clr	b1
                                    482 ;	printf_large.c:481: prefix_sign     = 0;
      00019C C2*00            [12]  483 	clr	b2
                                    484 ;	printf_large.c:482: prefix_space    = 0;
      00019E C2*00            [12]  485 	clr	b3
                                    486 ;	printf_large.c:483: signed_argument = 0;
      0001A0 C2*00            [12]  487 	clr	b4
                                    488 ;	printf_large.c:484: char_argument   = 0;
      0001A2 C2*00            [12]  489 	clr	b5
                                    490 ;	printf_large.c:485: long_argument   = 0;
      0001A4 C2*00            [12]  491 	clr	b6
                                    492 ;	printf_large.c:486: float_argument  = 0;
      0001A6 C2*00            [12]  493 	clr	b7
                                    494 ;	printf_large.c:487: radix           = 0;
      0001A8 E5*00            [12]  495 	mov	a,_bp
      0001AA 24 16            [12]  496 	add	a,#0x16
      0001AC F9               [12]  497 	mov	r1,a
      0001AD 77 00            [12]  498 	mov	@r1,#0x00
                                    499 ;	printf_large.c:488: width           = 0;
      0001AF E5*00            [12]  500 	mov	a,_bp
      0001B1 24 17            [12]  501 	add	a,#0x17
      0001B3 F9               [12]  502 	mov	r1,a
      0001B4 77 00            [12]  503 	mov	@r1,#0x00
                                    504 ;	printf_large.c:489: decimals        = -1;
      0001B6 7C FF            [12]  505 	mov	r4,#0xFF
                                    506 ;	printf_large.c:491: get_conversion_spec:
      0001B8 E5*00            [12]  507 	mov	a,_bp
      0001BA 24 F8            [12]  508 	add	a,#0xf8
      0001BC F9               [12]  509 	mov	r1,a
      0001BD C0 00            [24]  510 	push	ar0
      0001BF E5*00            [12]  511 	mov	a,_bp
      0001C1 24 04            [12]  512 	add	a,#0x04
      0001C3 F8               [12]  513 	mov	r0,a
      0001C4 E7               [12]  514 	mov	a,@r1
      0001C5 F6               [12]  515 	mov	@r0,a
      0001C6 09               [12]  516 	inc	r1
      0001C7 08               [12]  517 	inc	r0
      0001C8 E7               [12]  518 	mov	a,@r1
      0001C9 F6               [12]  519 	mov	@r0,a
      0001CA 09               [12]  520 	inc	r1
      0001CB 08               [12]  521 	inc	r0
      0001CC E7               [12]  522 	mov	a,@r1
      0001CD F6               [12]  523 	mov	@r0,a
      0001CE D0 00            [24]  524 	pop	ar0
      0001D0                        525 00101$:
                                    526 ;	printf_large.c:493: c = *format++;
      0001D0 E5*00            [12]  527 	mov	a,_bp
      0001D2 24 04            [12]  528 	add	a,#0x04
      0001D4 F9               [12]  529 	mov	r1,a
      0001D5 87 82            [24]  530 	mov	dpl,@r1
      0001D7 09               [12]  531 	inc	r1
      0001D8 87 83            [24]  532 	mov	dph,@r1
      0001DA 09               [12]  533 	inc	r1
      0001DB 87 F0            [24]  534 	mov	b,@r1
      0001DD 12r00r00         [24]  535 	lcall	__gptrget
      0001E0 FD               [12]  536 	mov	r5,a
      0001E1 A3               [24]  537 	inc	dptr
      0001E2 19               [12]  538 	dec	r1
      0001E3 19               [12]  539 	dec	r1
      0001E4 A7 82            [24]  540 	mov	@r1,dpl
      0001E6 09               [12]  541 	inc	r1
      0001E7 A7 83            [24]  542 	mov	@r1,dph
      0001E9 E5*00            [12]  543 	mov	a,_bp
      0001EB 24 04            [12]  544 	add	a,#0x04
      0001ED F9               [12]  545 	mov	r1,a
      0001EE C0 00            [24]  546 	push	ar0
      0001F0 E5*00            [12]  547 	mov	a,_bp
      0001F2 24 F8            [12]  548 	add	a,#0xf8
      0001F4 F8               [12]  549 	mov	r0,a
      0001F5 E7               [12]  550 	mov	a,@r1
      0001F6 F6               [12]  551 	mov	@r0,a
      0001F7 09               [12]  552 	inc	r1
      0001F8 08               [12]  553 	inc	r0
      0001F9 E7               [12]  554 	mov	a,@r1
      0001FA F6               [12]  555 	mov	@r0,a
      0001FB 09               [12]  556 	inc	r1
      0001FC 08               [12]  557 	inc	r0
      0001FD E7               [12]  558 	mov	a,@r1
      0001FE F6               [12]  559 	mov	@r0,a
      0001FF D0 00            [24]  560 	pop	ar0
                                    561 ;	printf_large.c:495: if (c=='%')
      000201 BD 25 3E         [24]  562 	cjne	r5,#0x25,00103$
                                    563 ;	printf_large.c:497: OUTPUT_CHAR(c, p);
      000204 C0 02            [24]  564 	push	ar2
      000206 C0 00            [24]  565 	push	ar0
      000208 E5*00            [12]  566 	mov	a,_bp
      00020A 24 FB            [12]  567 	add	a,#0xfb
      00020C F9               [12]  568 	mov	r1,a
      00020D E7               [12]  569 	mov	a,@r1
      00020E C0 E0            [24]  570 	push	acc
      000210 09               [12]  571 	inc	r1
      000211 E7               [12]  572 	mov	a,@r1
      000212 C0 E0            [24]  573 	push	acc
      000214 09               [12]  574 	inc	r1
      000215 E7               [12]  575 	mov	a,@r1
      000216 C0 E0            [24]  576 	push	acc
      000218 12r02r1D         [24]  577 	lcall	00505$
      00021B 80 0D            [24]  578 	sjmp	00506$
      00021D                        579 00505$:
      00021D A9*00            [24]  580 	mov	r1,_bp
      00021F 09               [12]  581 	inc	r1
      000220 E7               [12]  582 	mov	a,@r1
      000221 C0 E0            [24]  583 	push	acc
      000223 09               [12]  584 	inc	r1
      000224 E7               [12]  585 	mov	a,@r1
      000225 C0 E0            [24]  586 	push	acc
      000227 8D 82            [24]  587 	mov	dpl,r5
      000229 22               [24]  588 	ret
      00022A                        589 00506$:
      00022A 15 81            [12]  590 	dec	sp
      00022C 15 81            [12]  591 	dec	sp
      00022E 15 81            [12]  592 	dec	sp
      000230 D0 00            [24]  593 	pop	ar0
      000232 D0 02            [24]  594 	pop	ar2
      000234 E5*00            [12]  595 	mov	a,_bp
      000236 24 0B            [12]  596 	add	a,#0x0b
      000238 F9               [12]  597 	mov	r1,a
      000239 07               [12]  598 	inc	@r1
      00023A B7 00 02         [24]  599 	cjne	@r1,#0x00,00507$
      00023D 09               [12]  600 	inc	r1
      00023E 07               [12]  601 	inc	@r1
      00023F                        602 00507$:
                                    603 ;	printf_large.c:498: continue;
      00023F 02r01r62         [24]  604 	ljmp	00243$
      000242                        605 00103$:
                                    606 ;	printf_large.c:501: if (isdigit(c))
      000242 8D 07            [24]  607 	mov	ar7,r5
      000244 BF 30 00         [24]  608 	cjne	r7,#0x30,00508$
      000247                        609 00508$:
      000247 40 3A            [24]  610 	jc	00110$
      000249 EF               [12]  611 	mov	a,r7
      00024A 24 C6            [12]  612 	add	a,#0xff - 0x39
      00024C 40 35            [24]  613 	jc	00110$
                                    614 ;	printf_large.c:503: if (decimals==-1)
      00024E BC FF 25         [24]  615 	cjne	r4,#0xFF,00107$
                                    616 ;	printf_large.c:505: width = 10*width + c - '0';
      000251 E5*00            [12]  617 	mov	a,_bp
      000253 24 17            [12]  618 	add	a,#0x17
      000255 F9               [12]  619 	mov	r1,a
      000256 E7               [12]  620 	mov	a,@r1
      000257 75 F0 0A         [24]  621 	mov	b,#0x0A
      00025A A4               [48]  622 	mul	ab
      00025B 2D               [12]  623 	add	a,r5
      00025C FB               [12]  624 	mov	r3,a
      00025D E5*00            [12]  625 	mov	a,_bp
      00025F 24 17            [12]  626 	add	a,#0x17
      000261 F9               [12]  627 	mov	r1,a
      000262 EB               [12]  628 	mov	a,r3
      000263 24 D0            [12]  629 	add	a,#0xD0
      000265 F7               [12]  630 	mov	@r1,a
                                    631 ;	printf_large.c:506: if (width == 0)
      000266 E5*00            [12]  632 	mov	a,_bp
      000268 24 17            [12]  633 	add	a,#0x17
      00026A F9               [12]  634 	mov	r1,a
      00026B E7               [12]  635 	mov	a,@r1
      00026C 60 03            [24]  636 	jz	00513$
      00026E 02r01rD0         [24]  637 	ljmp	00101$
      000271                        638 00513$:
                                    639 ;	printf_large.c:509: zero_padding = 1;
      000271 D2*00            [12]  640 	setb	b1
      000273 02r01rD0         [24]  641 	ljmp	00101$
      000276                        642 00107$:
                                    643 ;	printf_large.c:514: decimals = 10*decimals + c - '0';
      000276 EC               [12]  644 	mov	a,r4
      000277 75 F0 0A         [24]  645 	mov	b,#0x0A
      00027A A4               [48]  646 	mul	ab
      00027B 2D               [12]  647 	add	a,r5
      00027C FB               [12]  648 	mov	r3,a
      00027D 24 D0            [12]  649 	add	a,#0xD0
      00027F FC               [12]  650 	mov	r4,a
                                    651 ;	printf_large.c:516: goto get_conversion_spec;
      000280 02r01rD0         [24]  652 	ljmp	00101$
      000283                        653 00110$:
                                    654 ;	printf_large.c:519: if (c=='.')
      000283 BD 2E 0D         [24]  655 	cjne	r5,#0x2E,00115$
                                    656 ;	printf_large.c:521: if (decimals==-1)
      000286 BC FF 02         [24]  657 	cjne	r4,#0xFF,00516$
      000289 80 03            [24]  658 	sjmp	00517$
      00028B                        659 00516$:
      00028B 02r01rD0         [24]  660 	ljmp	00101$
      00028E                        661 00517$:
                                    662 ;	printf_large.c:522: decimals=0;
      00028E 7C 00            [12]  663 	mov	r4,#0x00
                                    664 ;	printf_large.c:525: goto get_conversion_spec;
      000290 02r01rD0         [24]  665 	ljmp	00101$
      000293                        666 00115$:
                                    667 ;	printf_large.c:528: if (islower(c))
      000293 8D 07            [24]  668 	mov	ar7,r5
      000295 BF 61 00         [24]  669 	cjne	r7,#0x61,00518$
      000298                        670 00518$:
      000298 40 11            [24]  671 	jc	00117$
      00029A EF               [12]  672 	mov	a,r7
      00029B 24 85            [12]  673 	add	a,#0xff - 0x7A
      00029D 40 0C            [24]  674 	jc	00117$
                                    675 ;	printf_large.c:530: c = toupper(c);
      00029F 53 05 DF         [24]  676 	anl	ar5,#0xDF
                                    677 ;	printf_large.c:531: lower_case = 1;
      0002A2 E5*00            [12]  678 	mov	a,_bp
      0002A4 24 10            [12]  679 	add	a,#0x10
      0002A6 F9               [12]  680 	mov	r1,a
      0002A7 77 01            [12]  681 	mov	@r1,#0x01
      0002A9 80 07            [24]  682 	sjmp	00118$
      0002AB                        683 00117$:
                                    684 ;	printf_large.c:534: lower_case = 0;
      0002AB E5*00            [12]  685 	mov	a,_bp
      0002AD 24 10            [12]  686 	add	a,#0x10
      0002AF F9               [12]  687 	mov	r1,a
      0002B0 77 00            [12]  688 	mov	@r1,#0x00
      0002B2                        689 00118$:
                                    690 ;	printf_large.c:536: switch( c )
      0002B2 BD 20 02         [24]  691 	cjne	r5,#0x20,00521$
      0002B5 80 6E            [24]  692 	sjmp	00122$
      0002B7                        693 00521$:
      0002B7 BD 2B 02         [24]  694 	cjne	r5,#0x2B,00522$
      0002BA 80 64            [24]  695 	sjmp	00121$
      0002BC                        696 00522$:
      0002BC BD 2D 02         [24]  697 	cjne	r5,#0x2D,00523$
      0002BF 80 5A            [24]  698 	sjmp	00120$
      0002C1                        699 00523$:
      0002C1 BD 42 02         [24]  700 	cjne	r5,#0x42,00524$
      0002C4 80 64            [24]  701 	sjmp	00123$
      0002C6                        702 00524$:
      0002C6 BD 43 02         [24]  703 	cjne	r5,#0x43,00525$
      0002C9 80 69            [24]  704 	sjmp	00129$
      0002CB                        705 00525$:
      0002CB BD 44 03         [24]  706 	cjne	r5,#0x44,00526$
      0002CE 02r08r44         [24]  707 	ljmp	00166$
      0002D1                        708 00526$:
      0002D1 BD 46 03         [24]  709 	cjne	r5,#0x46,00527$
      0002D4 02r08r6A         [24]  710 	ljmp	00170$
      0002D7                        711 00527$:
      0002D7 BD 48 03         [24]  712 	cjne	r5,#0x48,00528$
      0002DA 02r01rD0         [24]  713 	ljmp	00101$
      0002DD                        714 00528$:
      0002DD BD 49 03         [24]  715 	cjne	r5,#0x49,00529$
      0002E0 02r08r44         [24]  716 	ljmp	00166$
      0002E3                        717 00529$:
      0002E3 BD 4A 03         [24]  718 	cjne	r5,#0x4A,00530$
      0002E6 02r01rD0         [24]  719 	ljmp	00101$
      0002E9                        720 00530$:
      0002E9 BD 4C 02         [24]  721 	cjne	r5,#0x4C,00531$
      0002EC 80 41            [24]  722 	sjmp	00128$
      0002EE                        723 00531$:
      0002EE BD 4F 03         [24]  724 	cjne	r5,#0x4F,00532$
      0002F1 02r08r4F         [24]  725 	ljmp	00167$
      0002F4                        726 00532$:
      0002F4 BD 50 03         [24]  727 	cjne	r5,#0x50,00533$
      0002F7 02r06r21         [24]  728 	ljmp	00152$
      0002FA                        729 00533$:
      0002FA BD 53 03         [24]  730 	cjne	r5,#0x53,00534$
      0002FD 02r03rA8         [24]  731 	ljmp	00133$
      000300                        732 00534$:
      000300 BD 54 03         [24]  733 	cjne	r5,#0x54,00535$
      000303 02r01rD0         [24]  734 	ljmp	00101$
      000306                        735 00535$:
      000306 BD 55 03         [24]  736 	cjne	r5,#0x55,00536$
      000309 02r08r58         [24]  737 	ljmp	00168$
      00030C                        738 00536$:
      00030C BD 58 03         [24]  739 	cjne	r5,#0x58,00537$
      00030F 02r08r61         [24]  740 	ljmp	00169$
      000312                        741 00537$:
      000312 BD 5A 03         [24]  742 	cjne	r5,#0x5A,00538$
      000315 02r01rD0         [24]  743 	ljmp	00101$
      000318                        744 00538$:
      000318 02r08r6E         [24]  745 	ljmp	00171$
                                    746 ;	printf_large.c:538: case '-':
      00031B                        747 00120$:
                                    748 ;	printf_large.c:539: left_justify = 1;
      00031B D2*00            [12]  749 	setb	b0
                                    750 ;	printf_large.c:540: goto get_conversion_spec;
      00031D 02r01rD0         [24]  751 	ljmp	00101$
                                    752 ;	printf_large.c:541: case '+':
      000320                        753 00121$:
                                    754 ;	printf_large.c:542: prefix_sign = 1;
      000320 D2*00            [12]  755 	setb	b2
                                    756 ;	printf_large.c:543: goto get_conversion_spec;
      000322 02r01rD0         [24]  757 	ljmp	00101$
                                    758 ;	printf_large.c:544: case ' ':
      000325                        759 00122$:
                                    760 ;	printf_large.c:545: prefix_space = 1;
      000325 D2*00            [12]  761 	setb	b3
                                    762 ;	printf_large.c:546: goto get_conversion_spec;
      000327 02r01rD0         [24]  763 	ljmp	00101$
                                    764 ;	printf_large.c:547: case 'B': /* byte */
      00032A                        765 00123$:
                                    766 ;	printf_large.c:548: char_argument = 1;
      00032A D2*00            [12]  767 	setb	b5
                                    768 ;	printf_large.c:549: goto get_conversion_spec;
      00032C 02r01rD0         [24]  769 	ljmp	00101$
                                    770 ;	printf_large.c:556: case 'L': /* long */
      00032F                        771 00128$:
                                    772 ;	printf_large.c:557: long_argument = 1;
      00032F D2*00            [12]  773 	setb	b6
                                    774 ;	printf_large.c:558: goto get_conversion_spec;
      000331 02r01rD0         [24]  775 	ljmp	00101$
                                    776 ;	printf_large.c:560: case 'C':
      000334                        777 00129$:
                                    778 ;	printf_large.c:561: if( char_argument )
      000334 30*00 15         [24]  779 	jnb	b5,00131$
                                    780 ;	printf_large.c:562: c = va_arg(ap,char);
      000337 E5*00            [12]  781 	mov	a,_bp
      000339 24 F7            [12]  782 	add	a,#0xf7
      00033B F9               [12]  783 	mov	r1,a
      00033C E7               [12]  784 	mov	a,@r1
      00033D 14               [12]  785 	dec	a
      00033E FB               [12]  786 	mov	r3,a
      00033F E5*00            [12]  787 	mov	a,_bp
      000341 24 F7            [12]  788 	add	a,#0xf7
      000343 F9               [12]  789 	mov	r1,a
      000344 A7 03            [24]  790 	mov	@r1,ar3
      000346 8B 01            [24]  791 	mov	ar1,r3
      000348 87 05            [24]  792 	mov	ar5,@r1
      00034A 80 1A            [24]  793 	sjmp	00132$
      00034C                        794 00131$:
                                    795 ;	printf_large.c:564: c = va_arg(ap,int);
      00034C E5*00            [12]  796 	mov	a,_bp
      00034E 24 F7            [12]  797 	add	a,#0xf7
      000350 F9               [12]  798 	mov	r1,a
      000351 E7               [12]  799 	mov	a,@r1
      000352 24 FE            [12]  800 	add	a,#0xFE
      000354 FB               [12]  801 	mov	r3,a
      000355 E5*00            [12]  802 	mov	a,_bp
      000357 24 F7            [12]  803 	add	a,#0xf7
      000359 F9               [12]  804 	mov	r1,a
      00035A A7 03            [24]  805 	mov	@r1,ar3
      00035C 8B 01            [24]  806 	mov	ar1,r3
      00035E 87 03            [24]  807 	mov	ar3,@r1
      000360 09               [12]  808 	inc	r1
      000361 87 06            [24]  809 	mov	ar6,@r1
      000363 19               [12]  810 	dec	r1
      000364 8B 05            [24]  811 	mov	ar5,r3
                                    812 ;	printf_large.c:872: return charsOutputted;
                                    813 ;	printf_large.c:564: c = va_arg(ap,int);
      000366                        814 00132$:
                                    815 ;	printf_large.c:565: OUTPUT_CHAR( c, p );
      000366 C0 02            [24]  816 	push	ar2
      000368 C0 00            [24]  817 	push	ar0
      00036A C0*00            [24]  818 	push	bits
      00036C E5*00            [12]  819 	mov	a,_bp
      00036E 24 FB            [12]  820 	add	a,#0xfb
      000370 F9               [12]  821 	mov	r1,a
      000371 E7               [12]  822 	mov	a,@r1
      000372 C0 E0            [24]  823 	push	acc
      000374 09               [12]  824 	inc	r1
      000375 E7               [12]  825 	mov	a,@r1
      000376 C0 E0            [24]  826 	push	acc
      000378 09               [12]  827 	inc	r1
      000379 E7               [12]  828 	mov	a,@r1
      00037A C0 E0            [24]  829 	push	acc
      00037C 12r03r81         [24]  830 	lcall	00540$
      00037F 80 0D            [24]  831 	sjmp	00541$
      000381                        832 00540$:
      000381 A9*00            [24]  833 	mov	r1,_bp
      000383 09               [12]  834 	inc	r1
      000384 E7               [12]  835 	mov	a,@r1
      000385 C0 E0            [24]  836 	push	acc
      000387 09               [12]  837 	inc	r1
      000388 E7               [12]  838 	mov	a,@r1
      000389 C0 E0            [24]  839 	push	acc
      00038B 8D 82            [24]  840 	mov	dpl,r5
      00038D 22               [24]  841 	ret
      00038E                        842 00541$:
      00038E 15 81            [12]  843 	dec	sp
      000390 15 81            [12]  844 	dec	sp
      000392 15 81            [12]  845 	dec	sp
      000394 D0*00            [24]  846 	pop	bits
      000396 D0 00            [24]  847 	pop	ar0
      000398 D0 02            [24]  848 	pop	ar2
      00039A E5*00            [12]  849 	mov	a,_bp
      00039C 24 0B            [12]  850 	add	a,#0x0b
      00039E F9               [12]  851 	mov	r1,a
      00039F 07               [12]  852 	inc	@r1
      0003A0 B7 00 02         [24]  853 	cjne	@r1,#0x00,00542$
      0003A3 09               [12]  854 	inc	r1
      0003A4 07               [12]  855 	inc	@r1
      0003A5                        856 00542$:
                                    857 ;	printf_large.c:566: break;
      0003A5 02r08rC0         [24]  858 	ljmp	00172$
                                    859 ;	printf_large.c:568: case 'S':
      0003A8                        860 00133$:
                                    861 ;	printf_large.c:569: PTR = va_arg(ap,ptr_t);
      0003A8 E5*00            [12]  862 	mov	a,_bp
      0003AA 24 11            [12]  863 	add	a,#0x11
      0003AC F9               [12]  864 	mov	r1,a
      0003AD C0 00            [24]  865 	push	ar0
      0003AF E5*00            [12]  866 	mov	a,_bp
      0003B1 24 F7            [12]  867 	add	a,#0xf7
      0003B3 F8               [12]  868 	mov	r0,a
      0003B4 E6               [12]  869 	mov	a,@r0
      0003B5 24 FD            [12]  870 	add	a,#0xFD
      0003B7 FE               [12]  871 	mov	r6,a
      0003B8 E5*00            [12]  872 	mov	a,_bp
      0003BA 24 F7            [12]  873 	add	a,#0xf7
      0003BC F8               [12]  874 	mov	r0,a
      0003BD A6 06            [24]  875 	mov	@r0,ar6
      0003BF A8 06            [24]  876 	mov	r0,ar6
      0003C1 86 03            [24]  877 	mov	ar3,@r0
      0003C3 08               [12]  878 	inc	r0
      0003C4 86 06            [24]  879 	mov	ar6,@r0
      0003C6 08               [12]  880 	inc	r0
      0003C7 86 07            [24]  881 	mov	ar7,@r0
      0003C9 D0 00            [24]  882 	pop	ar0
      0003CB A7 03            [24]  883 	mov	@r1,ar3
      0003CD 09               [12]  884 	inc	r1
      0003CE A7 06            [24]  885 	mov	@r1,ar6
      0003D0 09               [12]  886 	inc	r1
      0003D1 A7 07            [24]  887 	mov	@r1,ar7
      0003D3 19               [12]  888 	dec	r1
      0003D4 19               [12]  889 	dec	r1
                                    890 ;	printf_large.c:582: length = strlen(PTR);
      0003D5 8B 82            [24]  891 	mov	dpl,r3
      0003D7 8E 83            [24]  892 	mov	dph,r6
      0003D9 8F F0            [24]  893 	mov	b,r7
      0003DB C0 04            [24]  894 	push	ar4
      0003DD C0 02            [24]  895 	push	ar2
      0003DF C0 01            [24]  896 	push	ar1
      0003E1 C0 00            [24]  897 	push	ar0
      0003E3 C0*00            [24]  898 	push	bits
      0003E5 12r00r00         [24]  899 	lcall	_strlen
      0003E8 AE 82            [24]  900 	mov	r6,dpl
      0003EA AF 83            [24]  901 	mov	r7,dph
      0003EC D0*00            [24]  902 	pop	bits
      0003EE D0 00            [24]  903 	pop	ar0
      0003F0 D0 01            [24]  904 	pop	ar1
      0003F2 D0 02            [24]  905 	pop	ar2
      0003F4 D0 04            [24]  906 	pop	ar4
      0003F6 C0 00            [24]  907 	push	ar0
      0003F8 E5*00            [12]  908 	mov	a,_bp
      0003FA 24 07            [12]  909 	add	a,#0x07
      0003FC F8               [12]  910 	mov	r0,a
      0003FD A6 06            [24]  911 	mov	@r0,ar6
      0003FF D0 00            [24]  912 	pop	ar0
                                    913 ;	printf_large.c:584: if ( decimals == -1 )
      000401 BC FF 0B         [24]  914 	cjne	r4,#0xFF,00135$
                                    915 ;	printf_large.c:586: decimals = length;
      000404 C0 00            [24]  916 	push	ar0
      000406 E5*00            [12]  917 	mov	a,_bp
      000408 24 07            [12]  918 	add	a,#0x07
      00040A F8               [12]  919 	mov	r0,a
      00040B 86 04            [24]  920 	mov	ar4,@r0
      00040D D0 00            [24]  921 	pop	ar0
      00040F                        922 00135$:
                                    923 ;	printf_large.c:588: if ( ( !left_justify ) && (length < width) )
      00040F 30*00 03         [24]  924 	jnb	b0,00545$
      000412 02r04rC9         [24]  925 	ljmp	00289$
      000415                        926 00545$:
      000415 C0 00            [24]  927 	push	ar0
      000417 E5*00            [12]  928 	mov	a,_bp
      000419 24 07            [12]  929 	add	a,#0x07
      00041B F8               [12]  930 	mov	r0,a
      00041C C0 01            [24]  931 	push	ar1
      00041E E5*00            [12]  932 	mov	a,_bp
      000420 24 17            [12]  933 	add	a,#0x17
      000422 F9               [12]  934 	mov	r1,a
      000423 C3               [12]  935 	clr	c
      000424 E6               [12]  936 	mov	a,@r0
      000425 97               [12]  937 	subb	a,@r1
      000426 D0 01            [24]  938 	pop	ar1
      000428 D0 00            [24]  939 	pop	ar0
      00042A 40 03            [24]  940 	jc	00546$
      00042C 02r04rC9         [24]  941 	ljmp	00289$
      00042F                        942 00546$:
                                    943 ;	printf_large.c:590: width -= length;
      00042F C0 00            [24]  944 	push	ar0
      000431 E5*00            [12]  945 	mov	a,_bp
      000433 24 17            [12]  946 	add	a,#0x17
      000435 F8               [12]  947 	mov	r0,a
      000436 C0 01            [24]  948 	push	ar1
      000438 E5*00            [12]  949 	mov	a,_bp
      00043A 24 07            [12]  950 	add	a,#0x07
      00043C F9               [12]  951 	mov	r1,a
      00043D E6               [12]  952 	mov	a,@r0
      00043E C3               [12]  953 	clr	c
      00043F 97               [12]  954 	subb	a,@r1
      000440 F6               [12]  955 	mov	@r0,a
      000441 D0 01            [24]  956 	pop	ar1
                                    957 ;	printf_large.c:591: while( width-- != 0 )
      000443 E5*00            [12]  958 	mov	a,_bp
      000445 24 0B            [12]  959 	add	a,#0x0b
      000447 F8               [12]  960 	mov	r0,a
      000448 86 06            [24]  961 	mov	ar6,@r0
      00044A 08               [12]  962 	inc	r0
      00044B 86 07            [24]  963 	mov	ar7,@r0
      00044D E5*00            [12]  964 	mov	a,_bp
      00044F 24 17            [12]  965 	add	a,#0x17
      000451 F8               [12]  966 	mov	r0,a
      000452 86 05            [24]  967 	mov	ar5,@r0
      000454 D0 00            [24]  968 	pop	ar0
      000456                        969 00136$:
      000456 8D 03            [24]  970 	mov	ar3,r5
      000458 1D               [12]  971 	dec	r5
      000459 EB               [12]  972 	mov	a,r3
      00045A 60 58            [24]  973 	jz	00329$
                                    974 ;	printf_large.c:593: OUTPUT_CHAR( ' ', p );
      00045C C0 07            [24]  975 	push	ar7
      00045E C0 06            [24]  976 	push	ar6
      000460 C0 05            [24]  977 	push	ar5
      000462 C0 04            [24]  978 	push	ar4
      000464 C0 02            [24]  979 	push	ar2
      000466 C0 01            [24]  980 	push	ar1
      000468 C0 00            [24]  981 	push	ar0
      00046A C0*00            [24]  982 	push	bits
      00046C 85 00 F0         [24]  983 	mov	b,ar0
      00046F E5*00            [12]  984 	mov	a,_bp
      000471 24 FB            [12]  985 	add	a,#0xfb
      000473 F8               [12]  986 	mov	r0,a
      000474 E6               [12]  987 	mov	a,@r0
      000475 C0 E0            [24]  988 	push	acc
      000477 08               [12]  989 	inc	r0
      000478 E6               [12]  990 	mov	a,@r0
      000479 C0 E0            [24]  991 	push	acc
      00047B 08               [12]  992 	inc	r0
      00047C E6               [12]  993 	mov	a,@r0
      00047D C0 E0            [24]  994 	push	acc
      00047F A8 F0            [24]  995 	mov	r0,b
      000481 12r04r86         [24]  996 	lcall	00548$
      000484 80 11            [24]  997 	sjmp	00549$
      000486                        998 00548$:
      000486 85 00 F0         [24]  999 	mov	b,ar0
      000489 A8*00            [24] 1000 	mov	r0,_bp
      00048B 08               [12] 1001 	inc	r0
      00048C E6               [12] 1002 	mov	a,@r0
      00048D C0 E0            [24] 1003 	push	acc
      00048F 08               [12] 1004 	inc	r0
      000490 E6               [12] 1005 	mov	a,@r0
      000491 C0 E0            [24] 1006 	push	acc
      000493 75 82 20         [24] 1007 	mov	dpl,#0x20
      000496 22               [24] 1008 	ret
      000497                       1009 00549$:
      000497 15 81            [12] 1010 	dec	sp
      000499 15 81            [12] 1011 	dec	sp
      00049B 15 81            [12] 1012 	dec	sp
      00049D D0*00            [24] 1013 	pop	bits
      00049F D0 00            [24] 1014 	pop	ar0
      0004A1 D0 01            [24] 1015 	pop	ar1
      0004A3 D0 02            [24] 1016 	pop	ar2
      0004A5 D0 04            [24] 1017 	pop	ar4
      0004A7 D0 05            [24] 1018 	pop	ar5
      0004A9 D0 06            [24] 1019 	pop	ar6
      0004AB D0 07            [24] 1020 	pop	ar7
      0004AD 0E               [12] 1021 	inc	r6
                                   1022 ;	printf_large.c:597: while ( (c = *PTR)  && (decimals-- > 0))
      0004AE BE 00 A5         [24] 1023 	cjne	r6,#0x00,00136$
      0004B1 0F               [12] 1024 	inc	r7
      0004B2 80 A2            [24] 1025 	sjmp	00136$
      0004B4                       1026 00329$:
      0004B4 C0 00            [24] 1027 	push	ar0
      0004B6 E5*00            [12] 1028 	mov	a,_bp
      0004B8 24 0B            [12] 1029 	add	a,#0x0b
      0004BA F8               [12] 1030 	mov	r0,a
      0004BB A6 06            [24] 1031 	mov	@r0,ar6
      0004BD 08               [12] 1032 	inc	r0
      0004BE A6 07            [24] 1033 	mov	@r0,ar7
      0004C0 E5*00            [12] 1034 	mov	a,_bp
      0004C2 24 17            [12] 1035 	add	a,#0x17
      0004C4 F8               [12] 1036 	mov	r0,a
      0004C5 A6 05            [24] 1037 	mov	@r0,ar5
      0004C7 D0 00            [24] 1038 	pop	ar0
      0004C9                       1039 00289$:
      0004C9 C0 00            [24] 1040 	push	ar0
      0004CB E5*00            [12] 1041 	mov	a,_bp
      0004CD 24 0B            [12] 1042 	add	a,#0x0b
      0004CF F8               [12] 1043 	mov	r0,a
      0004D0 C0 01            [24] 1044 	push	ar1
      0004D2 E5*00            [12] 1045 	mov	a,_bp
      0004D4 24 09            [12] 1046 	add	a,#0x09
      0004D6 F9               [12] 1047 	mov	r1,a
      0004D7 E6               [12] 1048 	mov	a,@r0
      0004D8 F7               [12] 1049 	mov	@r1,a
      0004D9 08               [12] 1050 	inc	r0
      0004DA 09               [12] 1051 	inc	r1
      0004DB E6               [12] 1052 	mov	a,@r0
      0004DC F7               [12] 1053 	mov	@r1,a
      0004DD D0 01            [24] 1054 	pop	ar1
      0004DF D0 00            [24] 1055 	pop	ar0
      0004E1                       1056 00143$:
      0004E1 87 03            [24] 1057 	mov	ar3,@r1
      0004E3 09               [12] 1058 	inc	r1
      0004E4 87 06            [24] 1059 	mov	ar6,@r1
      0004E6 09               [12] 1060 	inc	r1
      0004E7 87 07            [24] 1061 	mov	ar7,@r1
      0004E9 19               [12] 1062 	dec	r1
      0004EA 19               [12] 1063 	dec	r1
      0004EB 8B 82            [24] 1064 	mov	dpl,r3
      0004ED 8E 83            [24] 1065 	mov	dph,r6
      0004EF 8F F0            [24] 1066 	mov	b,r7
      0004F1 12r00r00         [24] 1067 	lcall	__gptrget
      0004F4 FB               [12] 1068 	mov	r3,a
      0004F5 FD               [12] 1069 	mov	r5,a
      0004F6 70 03            [24] 1070 	jnz	00551$
      0004F8 02r05r7D         [24] 1071 	ljmp	00330$
      0004FB                       1072 00551$:
      0004FB 8C 07            [24] 1073 	mov	ar7,r4
      0004FD 1C               [12] 1074 	dec	r4
      0004FE C3               [12] 1075 	clr	c
      0004FF 74 80            [12] 1076 	mov	a,#(0x00 ^ 0x80)
      000501 8F F0            [24] 1077 	mov	b,r7
      000503 63 F0 80         [24] 1078 	xrl	b,#0x80
      000506 95 F0            [12] 1079 	subb	a,b
      000508 50 73            [24] 1080 	jnc	00330$
                                   1081 ;	printf_large.c:599: OUTPUT_CHAR( c, p );
      00050A C0 00            [24] 1082 	push	ar0
      00050C C0 04            [24] 1083 	push	ar4
      00050E C0 02            [24] 1084 	push	ar2
      000510 C0 01            [24] 1085 	push	ar1
      000512 C0 00            [24] 1086 	push	ar0
      000514 C0*00            [24] 1087 	push	bits
      000516 85 00 F0         [24] 1088 	mov	b,ar0
      000519 E5*00            [12] 1089 	mov	a,_bp
      00051B 24 FB            [12] 1090 	add	a,#0xfb
      00051D F8               [12] 1091 	mov	r0,a
      00051E E6               [12] 1092 	mov	a,@r0
      00051F C0 E0            [24] 1093 	push	acc
      000521 08               [12] 1094 	inc	r0
      000522 E6               [12] 1095 	mov	a,@r0
      000523 C0 E0            [24] 1096 	push	acc
      000525 08               [12] 1097 	inc	r0
      000526 E6               [12] 1098 	mov	a,@r0
      000527 C0 E0            [24] 1099 	push	acc
      000529 A8 F0            [24] 1100 	mov	r0,b
      00052B 12r05r30         [24] 1101 	lcall	00553$
      00052E 80 10            [24] 1102 	sjmp	00554$
      000530                       1103 00553$:
      000530 85 00 F0         [24] 1104 	mov	b,ar0
      000533 A8*00            [24] 1105 	mov	r0,_bp
      000535 08               [12] 1106 	inc	r0
      000536 E6               [12] 1107 	mov	a,@r0
      000537 C0 E0            [24] 1108 	push	acc
      000539 08               [12] 1109 	inc	r0
      00053A E6               [12] 1110 	mov	a,@r0
      00053B C0 E0            [24] 1111 	push	acc
      00053D 8D 82            [24] 1112 	mov	dpl,r5
      00053F 22               [24] 1113 	ret
      000540                       1114 00554$:
      000540 15 81            [12] 1115 	dec	sp
      000542 15 81            [12] 1116 	dec	sp
      000544 15 81            [12] 1117 	dec	sp
      000546 D0*00            [24] 1118 	pop	bits
      000548 D0 00            [24] 1119 	pop	ar0
      00054A D0 01            [24] 1120 	pop	ar1
      00054C D0 02            [24] 1121 	pop	ar2
      00054E D0 04            [24] 1122 	pop	ar4
      000550 C0 00            [24] 1123 	push	ar0
      000552 E5*00            [12] 1124 	mov	a,_bp
      000554 24 09            [12] 1125 	add	a,#0x09
      000556 F8               [12] 1126 	mov	r0,a
      000557 06               [12] 1127 	inc	@r0
      000558 B6 00 02         [24] 1128 	cjne	@r0,#0x00,00555$
      00055B 08               [12] 1129 	inc	r0
      00055C 06               [12] 1130 	inc	@r0
      00055D                       1131 00555$:
      00055D D0 00            [24] 1132 	pop	ar0
                                   1133 ;	printf_large.c:600: PTR++;
      00055F 87 03            [24] 1134 	mov	ar3,@r1
      000561 09               [12] 1135 	inc	r1
      000562 87 06            [24] 1136 	mov	ar6,@r1
      000564 09               [12] 1137 	inc	r1
      000565 87 07            [24] 1138 	mov	ar7,@r1
      000567 19               [12] 1139 	dec	r1
      000568 19               [12] 1140 	dec	r1
      000569 0B               [12] 1141 	inc	r3
      00056A BB 00 01         [24] 1142 	cjne	r3,#0x00,00556$
      00056D 0E               [12] 1143 	inc	r6
      00056E                       1144 00556$:
      00056E A7 03            [24] 1145 	mov	@r1,ar3
      000570 09               [12] 1146 	inc	r1
      000571 A7 06            [24] 1147 	mov	@r1,ar6
      000573 09               [12] 1148 	inc	r1
      000574 A7 07            [24] 1149 	mov	@r1,ar7
      000576 19               [12] 1150 	dec	r1
      000577 19               [12] 1151 	dec	r1
      000578 D0 00            [24] 1152 	pop	ar0
      00057A 02r04rE1         [24] 1153 	ljmp	00143$
      00057D                       1154 00330$:
      00057D E5*00            [12] 1155 	mov	a,_bp
      00057F 24 09            [12] 1156 	add	a,#0x09
      000581 F9               [12] 1157 	mov	r1,a
      000582 C0 00            [24] 1158 	push	ar0
      000584 E5*00            [12] 1159 	mov	a,_bp
      000586 24 0B            [12] 1160 	add	a,#0x0b
      000588 F8               [12] 1161 	mov	r0,a
      000589 E7               [12] 1162 	mov	a,@r1
      00058A F6               [12] 1163 	mov	@r0,a
      00058B 09               [12] 1164 	inc	r1
      00058C 08               [12] 1165 	inc	r0
      00058D E7               [12] 1166 	mov	a,@r1
      00058E F6               [12] 1167 	mov	@r0,a
      00058F D0 00            [24] 1168 	pop	ar0
                                   1169 ;	printf_large.c:603: if ( left_justify && (length < width))
      000591 20*00 03         [24] 1170 	jb	b0,00557$
      000594 02r08rC0         [24] 1171 	ljmp	00172$
      000597                       1172 00557$:
      000597 E5*00            [12] 1173 	mov	a,_bp
      000599 24 07            [12] 1174 	add	a,#0x07
      00059B F9               [12] 1175 	mov	r1,a
      00059C C0 00            [24] 1176 	push	ar0
      00059E E5*00            [12] 1177 	mov	a,_bp
      0005A0 24 17            [12] 1178 	add	a,#0x17
      0005A2 F8               [12] 1179 	mov	r0,a
      0005A3 C3               [12] 1180 	clr	c
      0005A4 E7               [12] 1181 	mov	a,@r1
      0005A5 96               [12] 1182 	subb	a,@r0
      0005A6 D0 00            [24] 1183 	pop	ar0
      0005A8 40 03            [24] 1184 	jc	00558$
      0005AA 02r08rC0         [24] 1185 	ljmp	00172$
      0005AD                       1186 00558$:
                                   1187 ;	printf_large.c:605: width -= length;
      0005AD E5*00            [12] 1188 	mov	a,_bp
      0005AF 24 17            [12] 1189 	add	a,#0x17
      0005B1 F9               [12] 1190 	mov	r1,a
      0005B2 C0 00            [24] 1191 	push	ar0
      0005B4 E5*00            [12] 1192 	mov	a,_bp
      0005B6 24 07            [12] 1193 	add	a,#0x07
      0005B8 F8               [12] 1194 	mov	r0,a
      0005B9 E7               [12] 1195 	mov	a,@r1
      0005BA C3               [12] 1196 	clr	c
      0005BB 96               [12] 1197 	subb	a,@r0
      0005BC F7               [12] 1198 	mov	@r1,a
      0005BD D0 00            [24] 1199 	pop	ar0
                                   1200 ;	printf_large.c:606: while( width-- != 0 )
      0005BF E5*00            [12] 1201 	mov	a,_bp
      0005C1 24 09            [12] 1202 	add	a,#0x09
      0005C3 F9               [12] 1203 	mov	r1,a
      0005C4 87 06            [24] 1204 	mov	ar6,@r1
      0005C6 09               [12] 1205 	inc	r1
      0005C7 87 05            [24] 1206 	mov	ar5,@r1
      0005C9 E5*00            [12] 1207 	mov	a,_bp
      0005CB 24 17            [12] 1208 	add	a,#0x17
      0005CD F9               [12] 1209 	mov	r1,a
      0005CE 87 03            [24] 1210 	mov	ar3,@r1
      0005D0                       1211 00146$:
      0005D0 8B 07            [24] 1212 	mov	ar7,r3
      0005D2 1B               [12] 1213 	dec	r3
      0005D3 EF               [12] 1214 	mov	a,r7
      0005D4 70 03            [24] 1215 	jnz	00559$
      0005D6 02r08rAF         [24] 1216 	ljmp	00331$
      0005D9                       1217 00559$:
                                   1218 ;	printf_large.c:608: OUTPUT_CHAR( ' ', p );
      0005D9 C0 06            [24] 1219 	push	ar6
      0005DB C0 05            [24] 1220 	push	ar5
      0005DD C0 03            [24] 1221 	push	ar3
      0005DF C0 02            [24] 1222 	push	ar2
      0005E1 C0 00            [24] 1223 	push	ar0
      0005E3 C0*00            [24] 1224 	push	bits
      0005E5 E5*00            [12] 1225 	mov	a,_bp
      0005E7 24 FB            [12] 1226 	add	a,#0xfb
      0005E9 F9               [12] 1227 	mov	r1,a
      0005EA E7               [12] 1228 	mov	a,@r1
      0005EB C0 E0            [24] 1229 	push	acc
      0005ED 09               [12] 1230 	inc	r1
      0005EE E7               [12] 1231 	mov	a,@r1
      0005EF C0 E0            [24] 1232 	push	acc
      0005F1 09               [12] 1233 	inc	r1
      0005F2 E7               [12] 1234 	mov	a,@r1
      0005F3 C0 E0            [24] 1235 	push	acc
      0005F5 12r05rFA         [24] 1236 	lcall	00560$
      0005F8 80 0E            [24] 1237 	sjmp	00561$
      0005FA                       1238 00560$:
      0005FA A9*00            [24] 1239 	mov	r1,_bp
      0005FC 09               [12] 1240 	inc	r1
      0005FD E7               [12] 1241 	mov	a,@r1
      0005FE C0 E0            [24] 1242 	push	acc
      000600 09               [12] 1243 	inc	r1
      000601 E7               [12] 1244 	mov	a,@r1
      000602 C0 E0            [24] 1245 	push	acc
      000604 75 82 20         [24] 1246 	mov	dpl,#0x20
      000607 22               [24] 1247 	ret
      000608                       1248 00561$:
      000608 15 81            [12] 1249 	dec	sp
      00060A 15 81            [12] 1250 	dec	sp
      00060C 15 81            [12] 1251 	dec	sp
      00060E D0*00            [24] 1252 	pop	bits
      000610 D0 00            [24] 1253 	pop	ar0
      000612 D0 02            [24] 1254 	pop	ar2
      000614 D0 03            [24] 1255 	pop	ar3
      000616 D0 05            [24] 1256 	pop	ar5
      000618 D0 06            [24] 1257 	pop	ar6
      00061A 0E               [12] 1258 	inc	r6
                                   1259 ;	printf_large.c:613: case 'P':
      00061B BE 00 B2         [24] 1260 	cjne	r6,#0x00,00146$
      00061E 0D               [12] 1261 	inc	r5
      00061F 80 AF            [24] 1262 	sjmp	00146$
      000621                       1263 00152$:
                                   1264 ;	printf_large.c:614: PTR = va_arg(ap,ptr_t);
      000621 E5*00            [12] 1265 	mov	a,_bp
      000623 24 11            [12] 1266 	add	a,#0x11
      000625 F9               [12] 1267 	mov	r1,a
      000626 C0 00            [24] 1268 	push	ar0
      000628 E5*00            [12] 1269 	mov	a,_bp
      00062A 24 F7            [12] 1270 	add	a,#0xf7
      00062C F8               [12] 1271 	mov	r0,a
      00062D E6               [12] 1272 	mov	a,@r0
      00062E 24 FD            [12] 1273 	add	a,#0xFD
      000630 FF               [12] 1274 	mov	r7,a
      000631 E5*00            [12] 1275 	mov	a,_bp
      000633 24 F7            [12] 1276 	add	a,#0xf7
      000635 F8               [12] 1277 	mov	r0,a
      000636 A6 07            [24] 1278 	mov	@r0,ar7
      000638 A8 07            [24] 1279 	mov	r0,ar7
      00063A 86 05            [24] 1280 	mov	ar5,@r0
      00063C 08               [12] 1281 	inc	r0
      00063D 86 06            [24] 1282 	mov	ar6,@r0
      00063F 08               [12] 1283 	inc	r0
      000640 86 07            [24] 1284 	mov	ar7,@r0
      000642 D0 00            [24] 1285 	pop	ar0
      000644 A7 05            [24] 1286 	mov	@r1,ar5
      000646 09               [12] 1287 	inc	r1
      000647 A7 06            [24] 1288 	mov	@r1,ar6
      000649 09               [12] 1289 	inc	r1
      00064A A7 07            [24] 1290 	mov	@r1,ar7
      00064C 19               [12] 1291 	dec	r1
      00064D 19               [12] 1292 	dec	r1
                                   1293 ;	printf_large.c:637: unsigned char memtype = value.byte[2];
      00064E E5*00            [12] 1294 	mov	a,_bp
      000650 24 11            [12] 1295 	add	a,#0x11
      000652 FE               [12] 1296 	mov	r6,a
      000653 24 02            [12] 1297 	add	a,#0x02
      000655 F9               [12] 1298 	mov	r1,a
      000656 87 07            [24] 1299 	mov	ar7,@r1
                                   1300 ;	printf_large.c:638: if (memtype >= 0x80)
      000658 BF 80 00         [24] 1301 	cjne	r7,#0x80,00563$
      00065B                       1302 00563$:
      00065B 40 04            [24] 1303 	jc	00160$
                                   1304 ;	printf_large.c:639: c = 'C';
      00065D 7D 43            [12] 1305 	mov	r5,#0x43
      00065F 80 14            [24] 1306 	sjmp	00161$
      000661                       1307 00160$:
                                   1308 ;	printf_large.c:640: else if (memtype >= 0x60)
      000661 BF 60 00         [24] 1309 	cjne	r7,#0x60,00565$
      000664                       1310 00565$:
      000664 40 04            [24] 1311 	jc	00157$
                                   1312 ;	printf_large.c:641: c = 'P';
      000666 7D 50            [12] 1313 	mov	r5,#0x50
      000668 80 0B            [24] 1314 	sjmp	00161$
      00066A                       1315 00157$:
                                   1316 ;	printf_large.c:642: else if (memtype >= 0x40)
      00066A BF 40 00         [24] 1317 	cjne	r7,#0x40,00567$
      00066D                       1318 00567$:
      00066D 40 04            [24] 1319 	jc	00154$
                                   1320 ;	printf_large.c:643: c = 'I';
      00066F 7D 49            [12] 1321 	mov	r5,#0x49
      000671 80 02            [24] 1322 	sjmp	00161$
      000673                       1323 00154$:
                                   1324 ;	printf_large.c:645: c = 'X';
      000673 7D 58            [12] 1325 	mov	r5,#0x58
      000675                       1326 00161$:
                                   1327 ;	printf_large.c:647: OUTPUT_CHAR(c, p);
      000675 C0 06            [24] 1328 	push	ar6
      000677 C0 05            [24] 1329 	push	ar5
      000679 C0 02            [24] 1330 	push	ar2
      00067B C0 00            [24] 1331 	push	ar0
      00067D C0*00            [24] 1332 	push	bits
      00067F E5*00            [12] 1333 	mov	a,_bp
      000681 24 FB            [12] 1334 	add	a,#0xfb
      000683 F9               [12] 1335 	mov	r1,a
      000684 E7               [12] 1336 	mov	a,@r1
      000685 C0 E0            [24] 1337 	push	acc
      000687 09               [12] 1338 	inc	r1
      000688 E7               [12] 1339 	mov	a,@r1
      000689 C0 E0            [24] 1340 	push	acc
      00068B 09               [12] 1341 	inc	r1
      00068C E7               [12] 1342 	mov	a,@r1
      00068D C0 E0            [24] 1343 	push	acc
      00068F 12r06r94         [24] 1344 	lcall	00569$
      000692 80 0D            [24] 1345 	sjmp	00570$
      000694                       1346 00569$:
      000694 A9*00            [24] 1347 	mov	r1,_bp
      000696 09               [12] 1348 	inc	r1
      000697 E7               [12] 1349 	mov	a,@r1
      000698 C0 E0            [24] 1350 	push	acc
      00069A 09               [12] 1351 	inc	r1
      00069B E7               [12] 1352 	mov	a,@r1
      00069C C0 E0            [24] 1353 	push	acc
      00069E 8D 82            [24] 1354 	mov	dpl,r5
      0006A0 22               [24] 1355 	ret
      0006A1                       1356 00570$:
      0006A1 15 81            [12] 1357 	dec	sp
      0006A3 15 81            [12] 1358 	dec	sp
      0006A5 15 81            [12] 1359 	dec	sp
      0006A7 D0*00            [24] 1360 	pop	bits
      0006A9 D0 00            [24] 1361 	pop	ar0
      0006AB D0 02            [24] 1362 	pop	ar2
      0006AD D0 05            [24] 1363 	pop	ar5
      0006AF D0 06            [24] 1364 	pop	ar6
      0006B1 E5*00            [12] 1365 	mov	a,_bp
      0006B3 24 0B            [12] 1366 	add	a,#0x0b
      0006B5 F9               [12] 1367 	mov	r1,a
      0006B6 07               [12] 1368 	inc	@r1
      0006B7 B7 00 02         [24] 1369 	cjne	@r1,#0x00,00571$
      0006BA 09               [12] 1370 	inc	r1
      0006BB 07               [12] 1371 	inc	@r1
      0006BC                       1372 00571$:
                                   1373 ;	printf_large.c:648: OUTPUT_CHAR(':', p);
      0006BC C0 06            [24] 1374 	push	ar6
      0006BE C0 05            [24] 1375 	push	ar5
      0006C0 C0 02            [24] 1376 	push	ar2
      0006C2 C0 00            [24] 1377 	push	ar0
      0006C4 C0*00            [24] 1378 	push	bits
      0006C6 E5*00            [12] 1379 	mov	a,_bp
      0006C8 24 FB            [12] 1380 	add	a,#0xfb
      0006CA F9               [12] 1381 	mov	r1,a
      0006CB E7               [12] 1382 	mov	a,@r1
      0006CC C0 E0            [24] 1383 	push	acc
      0006CE 09               [12] 1384 	inc	r1
      0006CF E7               [12] 1385 	mov	a,@r1
      0006D0 C0 E0            [24] 1386 	push	acc
      0006D2 09               [12] 1387 	inc	r1
      0006D3 E7               [12] 1388 	mov	a,@r1
      0006D4 C0 E0            [24] 1389 	push	acc
      0006D6 12r06rDB         [24] 1390 	lcall	00572$
      0006D9 80 0E            [24] 1391 	sjmp	00573$
      0006DB                       1392 00572$:
      0006DB A9*00            [24] 1393 	mov	r1,_bp
      0006DD 09               [12] 1394 	inc	r1
      0006DE E7               [12] 1395 	mov	a,@r1
      0006DF C0 E0            [24] 1396 	push	acc
      0006E1 09               [12] 1397 	inc	r1
      0006E2 E7               [12] 1398 	mov	a,@r1
      0006E3 C0 E0            [24] 1399 	push	acc
      0006E5 75 82 3A         [24] 1400 	mov	dpl,#0x3A
      0006E8 22               [24] 1401 	ret
      0006E9                       1402 00573$:
      0006E9 15 81            [12] 1403 	dec	sp
      0006EB 15 81            [12] 1404 	dec	sp
      0006ED 15 81            [12] 1405 	dec	sp
      0006EF D0*00            [24] 1406 	pop	bits
      0006F1 D0 00            [24] 1407 	pop	ar0
      0006F3 D0 02            [24] 1408 	pop	ar2
      0006F5 D0 05            [24] 1409 	pop	ar5
      0006F7 D0 06            [24] 1410 	pop	ar6
      0006F9 E5*00            [12] 1411 	mov	a,_bp
      0006FB 24 0B            [12] 1412 	add	a,#0x0b
      0006FD F9               [12] 1413 	mov	r1,a
      0006FE 07               [12] 1414 	inc	@r1
      0006FF B7 00 02         [24] 1415 	cjne	@r1,#0x00,00574$
      000702 09               [12] 1416 	inc	r1
      000703 07               [12] 1417 	inc	@r1
      000704                       1418 00574$:
                                   1419 ;	printf_large.c:649: OUTPUT_CHAR('0', p);
      000704 C0 06            [24] 1420 	push	ar6
      000706 C0 05            [24] 1421 	push	ar5
      000708 C0 02            [24] 1422 	push	ar2
      00070A C0 00            [24] 1423 	push	ar0
      00070C C0*00            [24] 1424 	push	bits
      00070E E5*00            [12] 1425 	mov	a,_bp
      000710 24 FB            [12] 1426 	add	a,#0xfb
      000712 F9               [12] 1427 	mov	r1,a
      000713 E7               [12] 1428 	mov	a,@r1
      000714 C0 E0            [24] 1429 	push	acc
      000716 09               [12] 1430 	inc	r1
      000717 E7               [12] 1431 	mov	a,@r1
      000718 C0 E0            [24] 1432 	push	acc
      00071A 09               [12] 1433 	inc	r1
      00071B E7               [12] 1434 	mov	a,@r1
      00071C C0 E0            [24] 1435 	push	acc
      00071E 12r07r23         [24] 1436 	lcall	00575$
      000721 80 0E            [24] 1437 	sjmp	00576$
      000723                       1438 00575$:
      000723 A9*00            [24] 1439 	mov	r1,_bp
      000725 09               [12] 1440 	inc	r1
      000726 E7               [12] 1441 	mov	a,@r1
      000727 C0 E0            [24] 1442 	push	acc
      000729 09               [12] 1443 	inc	r1
      00072A E7               [12] 1444 	mov	a,@r1
      00072B C0 E0            [24] 1445 	push	acc
      00072D 75 82 30         [24] 1446 	mov	dpl,#0x30
      000730 22               [24] 1447 	ret
      000731                       1448 00576$:
      000731 15 81            [12] 1449 	dec	sp
      000733 15 81            [12] 1450 	dec	sp
      000735 15 81            [12] 1451 	dec	sp
      000737 D0*00            [24] 1452 	pop	bits
      000739 D0 00            [24] 1453 	pop	ar0
      00073B D0 02            [24] 1454 	pop	ar2
      00073D D0 05            [24] 1455 	pop	ar5
      00073F D0 06            [24] 1456 	pop	ar6
      000741 E5*00            [12] 1457 	mov	a,_bp
      000743 24 0B            [12] 1458 	add	a,#0x0b
      000745 F9               [12] 1459 	mov	r1,a
      000746 07               [12] 1460 	inc	@r1
      000747 B7 00 02         [24] 1461 	cjne	@r1,#0x00,00577$
      00074A 09               [12] 1462 	inc	r1
      00074B 07               [12] 1463 	inc	@r1
      00074C                       1464 00577$:
                                   1465 ;	printf_large.c:650: OUTPUT_CHAR('x', p);
      00074C C0 06            [24] 1466 	push	ar6
      00074E C0 05            [24] 1467 	push	ar5
      000750 C0 02            [24] 1468 	push	ar2
      000752 C0 00            [24] 1469 	push	ar0
      000754 C0*00            [24] 1470 	push	bits
      000756 E5*00            [12] 1471 	mov	a,_bp
      000758 24 FB            [12] 1472 	add	a,#0xfb
      00075A F9               [12] 1473 	mov	r1,a
      00075B E7               [12] 1474 	mov	a,@r1
      00075C C0 E0            [24] 1475 	push	acc
      00075E 09               [12] 1476 	inc	r1
      00075F E7               [12] 1477 	mov	a,@r1
      000760 C0 E0            [24] 1478 	push	acc
      000762 09               [12] 1479 	inc	r1
      000763 E7               [12] 1480 	mov	a,@r1
      000764 C0 E0            [24] 1481 	push	acc
      000766 12r07r6B         [24] 1482 	lcall	00578$
      000769 80 0E            [24] 1483 	sjmp	00579$
      00076B                       1484 00578$:
      00076B A9*00            [24] 1485 	mov	r1,_bp
      00076D 09               [12] 1486 	inc	r1
      00076E E7               [12] 1487 	mov	a,@r1
      00076F C0 E0            [24] 1488 	push	acc
      000771 09               [12] 1489 	inc	r1
      000772 E7               [12] 1490 	mov	a,@r1
      000773 C0 E0            [24] 1491 	push	acc
      000775 75 82 78         [24] 1492 	mov	dpl,#0x78
      000778 22               [24] 1493 	ret
      000779                       1494 00579$:
      000779 15 81            [12] 1495 	dec	sp
      00077B 15 81            [12] 1496 	dec	sp
      00077D 15 81            [12] 1497 	dec	sp
      00077F D0*00            [24] 1498 	pop	bits
      000781 D0 00            [24] 1499 	pop	ar0
      000783 D0 02            [24] 1500 	pop	ar2
      000785 D0 05            [24] 1501 	pop	ar5
      000787 D0 06            [24] 1502 	pop	ar6
      000789 E5*00            [12] 1503 	mov	a,_bp
      00078B 24 0B            [12] 1504 	add	a,#0x0b
      00078D F9               [12] 1505 	mov	r1,a
      00078E 07               [12] 1506 	inc	@r1
      00078F B7 00 02         [24] 1507 	cjne	@r1,#0x00,00580$
      000792 09               [12] 1508 	inc	r1
      000793 07               [12] 1509 	inc	@r1
      000794                       1510 00580$:
                                   1511 ;	printf_large.c:651: if ((c != 'I' /* idata */) &&
      000794 BD 49 02         [24] 1512 	cjne	r5,#0x49,00581$
      000797 80 55            [24] 1513 	sjmp	00163$
      000799                       1514 00581$:
                                   1515 ;	printf_large.c:652: (c != 'P' /* pdata */))
      000799 BD 50 02         [24] 1516 	cjne	r5,#0x50,00582$
      00079C 80 50            [24] 1517 	sjmp	00163$
      00079E                       1518 00582$:
                                   1519 ;	printf_large.c:654: OUTPUT_2DIGITS( value.byte[1] );
      00079E EE               [12] 1520 	mov	a,r6
      00079F 04               [12] 1521 	inc	a
      0007A0 F9               [12] 1522 	mov	r1,a
      0007A1 87 07            [24] 1523 	mov	ar7,@r1
      0007A3 C0 02            [24] 1524 	push	ar2
      0007A5 C0 00            [24] 1525 	push	ar0
      0007A7 C0*00            [24] 1526 	push	bits
      0007A9 E5*00            [12] 1527 	mov	a,_bp
      0007AB 24 FB            [12] 1528 	add	a,#0xfb
      0007AD F9               [12] 1529 	mov	r1,a
      0007AE E7               [12] 1530 	mov	a,@r1
      0007AF C0 E0            [24] 1531 	push	acc
      0007B1 09               [12] 1532 	inc	r1
      0007B2 E7               [12] 1533 	mov	a,@r1
      0007B3 C0 E0            [24] 1534 	push	acc
      0007B5 09               [12] 1535 	inc	r1
      0007B6 E7               [12] 1536 	mov	a,@r1
      0007B7 C0 E0            [24] 1537 	push	acc
      0007B9 A9*00            [24] 1538 	mov	r1,_bp
      0007BB 09               [12] 1539 	inc	r1
      0007BC E7               [12] 1540 	mov	a,@r1
      0007BD C0 E0            [24] 1541 	push	acc
      0007BF 09               [12] 1542 	inc	r1
      0007C0 E7               [12] 1543 	mov	a,@r1
      0007C1 C0 E0            [24] 1544 	push	acc
      0007C3 E5*00            [12] 1545 	mov	a,_bp
      0007C5 24 10            [12] 1546 	add	a,#0x10
      0007C7 F9               [12] 1547 	mov	r1,a
      0007C8 E7               [12] 1548 	mov	a,@r1
      0007C9 24 FF            [12] 1549 	add	a,#0xff
      0007CB 92 F0            [24] 1550 	mov	b[0],c
      0007CD 85 F0*00         [24] 1551 	mov	bits,b
      0007D0 8F 82            [24] 1552 	mov	dpl,r7
      0007D2 12r00r47         [24] 1553 	lcall	_output_2digits
      0007D5 E5 81            [12] 1554 	mov	a,sp
      0007D7 24 FB            [12] 1555 	add	a,#0xfb
      0007D9 F5 81            [12] 1556 	mov	sp,a
      0007DB D0*00            [24] 1557 	pop	bits
      0007DD D0 00            [24] 1558 	pop	ar0
      0007DF D0 02            [24] 1559 	pop	ar2
      0007E1 E5*00            [12] 1560 	mov	a,_bp
      0007E3 24 0B            [12] 1561 	add	a,#0x0b
      0007E5 F9               [12] 1562 	mov	r1,a
      0007E6 74 02            [12] 1563 	mov	a,#0x02
      0007E8 27               [12] 1564 	add	a,@r1
      0007E9 F7               [12] 1565 	mov	@r1,a
      0007EA E4               [12] 1566 	clr	a
      0007EB 09               [12] 1567 	inc	r1
      0007EC 37               [12] 1568 	addc	a,@r1
      0007ED F7               [12] 1569 	mov	@r1,a
      0007EE                       1570 00163$:
                                   1571 ;	printf_large.c:656: OUTPUT_2DIGITS( value.byte[0] );
      0007EE E5*00            [12] 1572 	mov	a,_bp
      0007F0 24 03            [12] 1573 	add	a,#0x03
      0007F2 F9               [12] 1574 	mov	r1,a
      0007F3 87 01            [24] 1575 	mov	ar1,@r1
      0007F5 87 07            [24] 1576 	mov	ar7,@r1
      0007F7 C0 02            [24] 1577 	push	ar2
      0007F9 C0 00            [24] 1578 	push	ar0
      0007FB C0*00            [24] 1579 	push	bits
      0007FD E5*00            [12] 1580 	mov	a,_bp
      0007FF 24 FB            [12] 1581 	add	a,#0xfb
      000801 F9               [12] 1582 	mov	r1,a
      000802 E7               [12] 1583 	mov	a,@r1
      000803 C0 E0            [24] 1584 	push	acc
      000805 09               [12] 1585 	inc	r1
      000806 E7               [12] 1586 	mov	a,@r1
      000807 C0 E0            [24] 1587 	push	acc
      000809 09               [12] 1588 	inc	r1
      00080A E7               [12] 1589 	mov	a,@r1
      00080B C0 E0            [24] 1590 	push	acc
      00080D A9*00            [24] 1591 	mov	r1,_bp
      00080F 09               [12] 1592 	inc	r1
      000810 E7               [12] 1593 	mov	a,@r1
      000811 C0 E0            [24] 1594 	push	acc
      000813 09               [12] 1595 	inc	r1
      000814 E7               [12] 1596 	mov	a,@r1
      000815 C0 E0            [24] 1597 	push	acc
      000817 E5*00            [12] 1598 	mov	a,_bp
      000819 24 10            [12] 1599 	add	a,#0x10
      00081B F9               [12] 1600 	mov	r1,a
      00081C E7               [12] 1601 	mov	a,@r1
      00081D 24 FF            [12] 1602 	add	a,#0xff
      00081F 92 F0            [24] 1603 	mov	b[0],c
      000821 85 F0*00         [24] 1604 	mov	bits,b
      000824 8F 82            [24] 1605 	mov	dpl,r7
      000826 12r00r47         [24] 1606 	lcall	_output_2digits
      000829 E5 81            [12] 1607 	mov	a,sp
      00082B 24 FB            [12] 1608 	add	a,#0xfb
      00082D F5 81            [12] 1609 	mov	sp,a
      00082F D0*00            [24] 1610 	pop	bits
      000831 D0 00            [24] 1611 	pop	ar0
      000833 D0 02            [24] 1612 	pop	ar2
      000835 E5*00            [12] 1613 	mov	a,_bp
      000837 24 0B            [12] 1614 	add	a,#0x0b
      000839 F9               [12] 1615 	mov	r1,a
      00083A 74 02            [12] 1616 	mov	a,#0x02
      00083C 27               [12] 1617 	add	a,@r1
      00083D F7               [12] 1618 	mov	@r1,a
      00083E E4               [12] 1619 	clr	a
      00083F 09               [12] 1620 	inc	r1
      000840 37               [12] 1621 	addc	a,@r1
      000841 F7               [12] 1622 	mov	@r1,a
                                   1623 ;	printf_large.c:663: break;
                                   1624 ;	printf_large.c:666: case 'I':
      000842 80 7C            [24] 1625 	sjmp	00172$
      000844                       1626 00166$:
                                   1627 ;	printf_large.c:667: signed_argument = 1;
      000844 D2*00            [12] 1628 	setb	b4
                                   1629 ;	printf_large.c:668: radix = 10;
      000846 E5*00            [12] 1630 	mov	a,_bp
      000848 24 16            [12] 1631 	add	a,#0x16
      00084A F9               [12] 1632 	mov	r1,a
      00084B 77 0A            [12] 1633 	mov	@r1,#0x0A
                                   1634 ;	printf_large.c:669: break;
                                   1635 ;	printf_large.c:671: case 'O':
      00084D 80 71            [24] 1636 	sjmp	00172$
      00084F                       1637 00167$:
                                   1638 ;	printf_large.c:672: radix = 8;
      00084F E5*00            [12] 1639 	mov	a,_bp
      000851 24 16            [12] 1640 	add	a,#0x16
      000853 F9               [12] 1641 	mov	r1,a
      000854 77 08            [12] 1642 	mov	@r1,#0x08
                                   1643 ;	printf_large.c:673: break;
                                   1644 ;	printf_large.c:675: case 'U':
      000856 80 68            [24] 1645 	sjmp	00172$
      000858                       1646 00168$:
                                   1647 ;	printf_large.c:676: radix = 10;
      000858 E5*00            [12] 1648 	mov	a,_bp
      00085A 24 16            [12] 1649 	add	a,#0x16
      00085C F9               [12] 1650 	mov	r1,a
      00085D 77 0A            [12] 1651 	mov	@r1,#0x0A
                                   1652 ;	printf_large.c:677: break;
                                   1653 ;	printf_large.c:679: case 'X':
      00085F 80 5F            [24] 1654 	sjmp	00172$
      000861                       1655 00169$:
                                   1656 ;	printf_large.c:680: radix = 16;
      000861 E5*00            [12] 1657 	mov	a,_bp
      000863 24 16            [12] 1658 	add	a,#0x16
      000865 F9               [12] 1659 	mov	r1,a
      000866 77 10            [12] 1660 	mov	@r1,#0x10
                                   1661 ;	printf_large.c:681: break;
                                   1662 ;	printf_large.c:683: case 'F':
      000868 80 56            [24] 1663 	sjmp	00172$
      00086A                       1664 00170$:
                                   1665 ;	printf_large.c:684: float_argument=1;
      00086A D2*00            [12] 1666 	setb	b7
                                   1667 ;	printf_large.c:685: break;
                                   1668 ;	printf_large.c:687: default:
      00086C 80 52            [24] 1669 	sjmp	00172$
      00086E                       1670 00171$:
                                   1671 ;	printf_large.c:689: OUTPUT_CHAR( c, p );
      00086E C0 02            [24] 1672 	push	ar2
      000870 C0 00            [24] 1673 	push	ar0
      000872 C0*00            [24] 1674 	push	bits
      000874 E5*00            [12] 1675 	mov	a,_bp
      000876 24 FB            [12] 1676 	add	a,#0xfb
      000878 F9               [12] 1677 	mov	r1,a
      000879 E7               [12] 1678 	mov	a,@r1
      00087A C0 E0            [24] 1679 	push	acc
      00087C 09               [12] 1680 	inc	r1
      00087D E7               [12] 1681 	mov	a,@r1
      00087E C0 E0            [24] 1682 	push	acc
      000880 09               [12] 1683 	inc	r1
      000881 E7               [12] 1684 	mov	a,@r1
      000882 C0 E0            [24] 1685 	push	acc
      000884 12r08r89         [24] 1686 	lcall	00583$
      000887 80 0D            [24] 1687 	sjmp	00584$
      000889                       1688 00583$:
      000889 A9*00            [24] 1689 	mov	r1,_bp
      00088B 09               [12] 1690 	inc	r1
      00088C E7               [12] 1691 	mov	a,@r1
      00088D C0 E0            [24] 1692 	push	acc
      00088F 09               [12] 1693 	inc	r1
      000890 E7               [12] 1694 	mov	a,@r1
      000891 C0 E0            [24] 1695 	push	acc
      000893 8D 82            [24] 1696 	mov	dpl,r5
      000895 22               [24] 1697 	ret
      000896                       1698 00584$:
      000896 15 81            [12] 1699 	dec	sp
      000898 15 81            [12] 1700 	dec	sp
      00089A 15 81            [12] 1701 	dec	sp
      00089C D0*00            [24] 1702 	pop	bits
      00089E D0 00            [24] 1703 	pop	ar0
      0008A0 D0 02            [24] 1704 	pop	ar2
      0008A2 E5*00            [12] 1705 	mov	a,_bp
      0008A4 24 0B            [12] 1706 	add	a,#0x0b
      0008A6 F9               [12] 1707 	mov	r1,a
      0008A7 07               [12] 1708 	inc	@r1
      0008A8 B7 00 02         [24] 1709 	cjne	@r1,#0x00,00585$
      0008AB 09               [12] 1710 	inc	r1
      0008AC 07               [12] 1711 	inc	@r1
      0008AD                       1712 00585$:
                                   1713 ;	printf_large.c:872: return charsOutputted;
                                   1714 ;	printf_large.c:691: }
      0008AD 80 11            [24] 1715 	sjmp	00172$
      0008AF                       1716 00331$:
      0008AF E5*00            [12] 1717 	mov	a,_bp
      0008B1 24 0B            [12] 1718 	add	a,#0x0b
      0008B3 F9               [12] 1719 	mov	r1,a
      0008B4 A7 06            [24] 1720 	mov	@r1,ar6
      0008B6 09               [12] 1721 	inc	r1
      0008B7 A7 05            [24] 1722 	mov	@r1,ar5
      0008B9 E5*00            [12] 1723 	mov	a,_bp
      0008BB 24 17            [12] 1724 	add	a,#0x17
      0008BD F9               [12] 1725 	mov	r1,a
      0008BE A7 03            [24] 1726 	mov	@r1,ar3
      0008C0                       1727 00172$:
                                   1728 ;	printf_large.c:693: if (float_argument)
      0008C0 20*00 03         [24] 1729 	jb	b7,00586$
      0008C3 02r09rCF         [24] 1730 	ljmp	00238$
      0008C6                       1731 00586$:
                                   1732 ;	printf_large.c:695: value.f = va_arg(ap, float);
      0008C6 C0 00            [24] 1733 	push	ar0
      0008C8 E5*00            [12] 1734 	mov	a,_bp
      0008CA 24 11            [12] 1735 	add	a,#0x11
      0008CC F9               [12] 1736 	mov	r1,a
      0008CD C0 00            [24] 1737 	push	ar0
      0008CF E5*00            [12] 1738 	mov	a,_bp
      0008D1 24 F7            [12] 1739 	add	a,#0xf7
      0008D3 F8               [12] 1740 	mov	r0,a
      0008D4 E6               [12] 1741 	mov	a,@r0
      0008D5 24 FC            [12] 1742 	add	a,#0xFC
      0008D7 FF               [12] 1743 	mov	r7,a
      0008D8 E5*00            [12] 1744 	mov	a,_bp
      0008DA 24 F7            [12] 1745 	add	a,#0xf7
      0008DC F8               [12] 1746 	mov	r0,a
      0008DD A6 07            [24] 1747 	mov	@r0,ar7
      0008DF A8 07            [24] 1748 	mov	r0,ar7
      0008E1 86 03            [24] 1749 	mov	ar3,@r0
      0008E3 08               [12] 1750 	inc	r0
      0008E4 86 05            [24] 1751 	mov	ar5,@r0
      0008E6 08               [12] 1752 	inc	r0
      0008E7 86 06            [24] 1753 	mov	ar6,@r0
      0008E9 08               [12] 1754 	inc	r0
      0008EA 86 07            [24] 1755 	mov	ar7,@r0
      0008EC A7 03            [24] 1756 	mov	@r1,ar3
      0008EE 09               [12] 1757 	inc	r1
      0008EF A7 05            [24] 1758 	mov	@r1,ar5
      0008F1 09               [12] 1759 	inc	r1
      0008F2 A7 06            [24] 1760 	mov	@r1,ar6
      0008F4 09               [12] 1761 	inc	r1
      0008F5 A7 07            [24] 1762 	mov	@r1,ar7
      0008F7 19               [12] 1763 	dec	r1
      0008F8 19               [12] 1764 	dec	r1
      0008F9 19               [12] 1765 	dec	r1
                                   1766 ;	printf_large.c:697: PTR="<NO FLOAT>";
      0008FA E5*00            [12] 1767 	mov	a,_bp
      0008FC 24 11            [12] 1768 	add	a,#0x11
      0008FE F9               [12] 1769 	mov	r1,a
      0008FF 77r00            [12] 1770 	mov	@r1,#___str_0
      000901 09               [12] 1771 	inc	r1
      000902 77s00            [12] 1772 	mov	@r1,#(___str_0 >> 8)
      000904 09               [12] 1773 	inc	r1
      000905 77 80            [12] 1774 	mov	@r1,#0x80
      000907 19               [12] 1775 	dec	r1
      000908 19               [12] 1776 	dec	r1
                                   1777 ;	printf_large.c:698: while (c=*PTR++)
      000909 E5*00            [12] 1778 	mov	a,_bp
      00090B 24 0B            [12] 1779 	add	a,#0x0b
      00090D F8               [12] 1780 	mov	r0,a
      00090E C0 01            [24] 1781 	push	ar1
      000910 E5*00            [12] 1782 	mov	a,_bp
      000912 24 04            [12] 1783 	add	a,#0x04
      000914 F9               [12] 1784 	mov	r1,a
      000915 E6               [12] 1785 	mov	a,@r0
      000916 F7               [12] 1786 	mov	@r1,a
      000917 08               [12] 1787 	inc	r0
      000918 09               [12] 1788 	inc	r1
      000919 E6               [12] 1789 	mov	a,@r0
      00091A F7               [12] 1790 	mov	@r1,a
      00091B D0 01            [24] 1791 	pop	ar1
      00091D D0 00            [24] 1792 	pop	ar0
                                   1793 ;	printf_large.c:872: return charsOutputted;
      00091F D0 00            [24] 1794 	pop	ar0
                                   1795 ;	printf_large.c:698: while (c=*PTR++)
      000921                       1796 00173$:
      000921 C0 00            [24] 1797 	push	ar0
      000923 C0 00            [24] 1798 	push	ar0
      000925 E5*00            [12] 1799 	mov	a,_bp
      000927 24 0D            [12] 1800 	add	a,#0x0d
      000929 F8               [12] 1801 	mov	r0,a
      00092A E7               [12] 1802 	mov	a,@r1
      00092B F6               [12] 1803 	mov	@r0,a
      00092C 09               [12] 1804 	inc	r1
      00092D E7               [12] 1805 	mov	a,@r1
      00092E 08               [12] 1806 	inc	r0
      00092F F6               [12] 1807 	mov	@r0,a
      000930 09               [12] 1808 	inc	r1
      000931 E7               [12] 1809 	mov	a,@r1
      000932 08               [12] 1810 	inc	r0
      000933 F6               [12] 1811 	mov	@r0,a
      000934 19               [12] 1812 	dec	r1
      000935 19               [12] 1813 	dec	r1
      000936 E5*00            [12] 1814 	mov	a,_bp
      000938 24 0D            [12] 1815 	add	a,#0x0d
      00093A F8               [12] 1816 	mov	r0,a
      00093B 74 01            [12] 1817 	mov	a,#0x01
      00093D 26               [12] 1818 	add	a,@r0
      00093E FB               [12] 1819 	mov	r3,a
      00093F E4               [12] 1820 	clr	a
      000940 08               [12] 1821 	inc	r0
      000941 36               [12] 1822 	addc	a,@r0
      000942 FC               [12] 1823 	mov	r4,a
      000943 08               [12] 1824 	inc	r0
      000944 86 07            [24] 1825 	mov	ar7,@r0
      000946 A7 03            [24] 1826 	mov	@r1,ar3
      000948 09               [12] 1827 	inc	r1
      000949 A7 04            [24] 1828 	mov	@r1,ar4
      00094B 09               [12] 1829 	inc	r1
      00094C A7 07            [24] 1830 	mov	@r1,ar7
      00094E 19               [12] 1831 	dec	r1
      00094F 19               [12] 1832 	dec	r1
      000950 E5*00            [12] 1833 	mov	a,_bp
      000952 24 0D            [12] 1834 	add	a,#0x0d
      000954 F8               [12] 1835 	mov	r0,a
      000955 86 82            [24] 1836 	mov	dpl,@r0
      000957 08               [12] 1837 	inc	r0
      000958 86 83            [24] 1838 	mov	dph,@r0
      00095A 08               [12] 1839 	inc	r0
      00095B 86 F0            [24] 1840 	mov	b,@r0
      00095D 12r00r00         [24] 1841 	lcall	__gptrget
      000960 FF               [12] 1842 	mov	r7,a
      000961 D0 00            [24] 1843 	pop	ar0
      000963 8F 05            [24] 1844 	mov	ar5,r7
      000965 D0 00            [24] 1845 	pop	ar0
      000967 EF               [12] 1846 	mov	a,r7
      000968 70 03            [24] 1847 	jnz	00587$
      00096A 02r01r62         [24] 1848 	ljmp	00243$
      00096D                       1849 00587$:
                                   1850 ;	printf_large.c:700: OUTPUT_CHAR (c, p);
      00096D C0 02            [24] 1851 	push	ar2
      00096F C0 01            [24] 1852 	push	ar1
      000971 C0 00            [24] 1853 	push	ar0
      000973 85 00 F0         [24] 1854 	mov	b,ar0
      000976 E5*00            [12] 1855 	mov	a,_bp
      000978 24 FB            [12] 1856 	add	a,#0xfb
      00097A F8               [12] 1857 	mov	r0,a
      00097B E6               [12] 1858 	mov	a,@r0
      00097C C0 E0            [24] 1859 	push	acc
      00097E 08               [12] 1860 	inc	r0
      00097F E6               [12] 1861 	mov	a,@r0
      000980 C0 E0            [24] 1862 	push	acc
      000982 08               [12] 1863 	inc	r0
      000983 E6               [12] 1864 	mov	a,@r0
      000984 C0 E0            [24] 1865 	push	acc
      000986 A8 F0            [24] 1866 	mov	r0,b
      000988 12r09r8D         [24] 1867 	lcall	00588$
      00098B 80 10            [24] 1868 	sjmp	00589$
      00098D                       1869 00588$:
      00098D 85 00 F0         [24] 1870 	mov	b,ar0
      000990 A8*00            [24] 1871 	mov	r0,_bp
      000992 08               [12] 1872 	inc	r0
      000993 E6               [12] 1873 	mov	a,@r0
      000994 C0 E0            [24] 1874 	push	acc
      000996 08               [12] 1875 	inc	r0
      000997 E6               [12] 1876 	mov	a,@r0
      000998 C0 E0            [24] 1877 	push	acc
      00099A 8D 82            [24] 1878 	mov	dpl,r5
      00099C 22               [24] 1879 	ret
      00099D                       1880 00589$:
      00099D 15 81            [12] 1881 	dec	sp
      00099F 15 81            [12] 1882 	dec	sp
      0009A1 15 81            [12] 1883 	dec	sp
      0009A3 D0 00            [24] 1884 	pop	ar0
      0009A5 D0 01            [24] 1885 	pop	ar1
      0009A7 D0 02            [24] 1886 	pop	ar2
      0009A9 C0 00            [24] 1887 	push	ar0
      0009AB E5*00            [12] 1888 	mov	a,_bp
      0009AD 24 04            [12] 1889 	add	a,#0x04
      0009AF F8               [12] 1890 	mov	r0,a
      0009B0 06               [12] 1891 	inc	@r0
      0009B1 B6 00 02         [24] 1892 	cjne	@r0,#0x00,00590$
      0009B4 08               [12] 1893 	inc	r0
      0009B5 06               [12] 1894 	inc	@r0
      0009B6                       1895 00590$:
      0009B6 E5*00            [12] 1896 	mov	a,_bp
      0009B8 24 04            [12] 1897 	add	a,#0x04
      0009BA F8               [12] 1898 	mov	r0,a
      0009BB C0 01            [24] 1899 	push	ar1
      0009BD E5*00            [12] 1900 	mov	a,_bp
      0009BF 24 0B            [12] 1901 	add	a,#0x0b
      0009C1 F9               [12] 1902 	mov	r1,a
      0009C2 E6               [12] 1903 	mov	a,@r0
      0009C3 F7               [12] 1904 	mov	@r1,a
      0009C4 08               [12] 1905 	inc	r0
      0009C5 09               [12] 1906 	inc	r1
      0009C6 E6               [12] 1907 	mov	a,@r0
      0009C7 F7               [12] 1908 	mov	@r1,a
      0009C8 D0 01            [24] 1909 	pop	ar1
      0009CA D0 00            [24] 1910 	pop	ar0
      0009CC 02r09r21         [24] 1911 	ljmp	00173$
      0009CF                       1912 00238$:
                                   1913 ;	printf_large.c:718: else if (radix != 0)
      0009CF E5*00            [12] 1914 	mov	a,_bp
      0009D1 24 16            [12] 1915 	add	a,#0x16
      0009D3 F9               [12] 1916 	mov	r1,a
      0009D4 E7               [12] 1917 	mov	a,@r1
      0009D5 70 03            [24] 1918 	jnz	00591$
      0009D7 02r01r62         [24] 1919 	ljmp	00243$
      0009DA                       1920 00591$:
                                   1921 ;	printf_large.c:723: unsigned char MEM_SPACE_BUF_PP *pstore = &store[5];
      0009DA E5*00            [12] 1922 	mov	a,_bp
      0009DC 24 08            [12] 1923 	add	a,#0x08
      0009DE F9               [12] 1924 	mov	r1,a
      0009DF 87 03            [24] 1925 	mov	ar3,@r1
                                   1926 ;	printf_large.c:726: if (char_argument)
      0009E1 30*00 5C         [24] 1927 	jnb	b5,00184$
                                   1928 ;	printf_large.c:728: value.l = va_arg(ap, char);
      0009E4 E5*00            [12] 1929 	mov	a,_bp
      0009E6 24 11            [12] 1930 	add	a,#0x11
      0009E8 F9               [12] 1931 	mov	r1,a
      0009E9 C0 00            [24] 1932 	push	ar0
      0009EB E5*00            [12] 1933 	mov	a,_bp
      0009ED 24 F7            [12] 1934 	add	a,#0xf7
      0009EF F8               [12] 1935 	mov	r0,a
      0009F0 E6               [12] 1936 	mov	a,@r0
      0009F1 14               [12] 1937 	dec	a
      0009F2 FF               [12] 1938 	mov	r7,a
      0009F3 E5*00            [12] 1939 	mov	a,_bp
      0009F5 24 F7            [12] 1940 	add	a,#0xf7
      0009F7 F8               [12] 1941 	mov	r0,a
      0009F8 A6 07            [24] 1942 	mov	@r0,ar7
      0009FA A8 07            [24] 1943 	mov	r0,ar7
      0009FC 86 07            [24] 1944 	mov	ar7,@r0
      0009FE D0 00            [24] 1945 	pop	ar0
      000A00 EF               [12] 1946 	mov	a,r7
      000A01 33               [12] 1947 	rlc	a
      000A02 95 E0            [12] 1948 	subb	a,acc
      000A04 FE               [12] 1949 	mov	r6,a
      000A05 FD               [12] 1950 	mov	r5,a
      000A06 FC               [12] 1951 	mov	r4,a
      000A07 A7 07            [24] 1952 	mov	@r1,ar7
      000A09 09               [12] 1953 	inc	r1
      000A0A A7 06            [24] 1954 	mov	@r1,ar6
      000A0C 09               [12] 1955 	inc	r1
      000A0D A7 05            [24] 1956 	mov	@r1,ar5
      000A0F 09               [12] 1957 	inc	r1
      000A10 A7 04            [24] 1958 	mov	@r1,ar4
      000A12 19               [12] 1959 	dec	r1
      000A13 19               [12] 1960 	dec	r1
      000A14 19               [12] 1961 	dec	r1
                                   1962 ;	printf_large.c:729: if (!signed_argument)
      000A15 30*00 03         [24] 1963 	jnb	b4,00593$
      000A18 02r0ArD0         [24] 1964 	ljmp	00185$
      000A1B                       1965 00593$:
                                   1966 ;	printf_large.c:731: value.l &= 0xFF;
      000A1B 87 04            [24] 1967 	mov	ar4,@r1
      000A1D 09               [12] 1968 	inc	r1
      000A1E 87 05            [24] 1969 	mov	ar5,@r1
      000A20 09               [12] 1970 	inc	r1
      000A21 87 06            [24] 1971 	mov	ar6,@r1
      000A23 09               [12] 1972 	inc	r1
      000A24 87 07            [24] 1973 	mov	ar7,@r1
      000A26 19               [12] 1974 	dec	r1
      000A27 19               [12] 1975 	dec	r1
      000A28 19               [12] 1976 	dec	r1
      000A29 7D 00            [12] 1977 	mov	r5,#0x00
      000A2B 7E 00            [12] 1978 	mov	r6,#0x00
      000A2D 7F 00            [12] 1979 	mov	r7,#0x00
      000A2F A7 04            [24] 1980 	mov	@r1,ar4
      000A31 09               [12] 1981 	inc	r1
      000A32 A7 05            [24] 1982 	mov	@r1,ar5
      000A34 09               [12] 1983 	inc	r1
      000A35 A7 06            [24] 1984 	mov	@r1,ar6
      000A37 09               [12] 1985 	inc	r1
      000A38 A7 07            [24] 1986 	mov	@r1,ar7
      000A3A 19               [12] 1987 	dec	r1
      000A3B 19               [12] 1988 	dec	r1
      000A3C 19               [12] 1989 	dec	r1
      000A3D 02r0ArD0         [24] 1990 	ljmp	00185$
      000A40                       1991 00184$:
                                   1992 ;	printf_large.c:734: else if (long_argument)
      000A40 30*00 36         [24] 1993 	jnb	b6,00181$
                                   1994 ;	printf_large.c:736: value.l = va_arg(ap, long);
      000A43 E5*00            [12] 1995 	mov	a,_bp
      000A45 24 11            [12] 1996 	add	a,#0x11
      000A47 F9               [12] 1997 	mov	r1,a
      000A48 C0 00            [24] 1998 	push	ar0
      000A4A E5*00            [12] 1999 	mov	a,_bp
      000A4C 24 F7            [12] 2000 	add	a,#0xf7
      000A4E F8               [12] 2001 	mov	r0,a
      000A4F E6               [12] 2002 	mov	a,@r0
      000A50 24 FC            [12] 2003 	add	a,#0xFC
      000A52 FF               [12] 2004 	mov	r7,a
      000A53 E5*00            [12] 2005 	mov	a,_bp
      000A55 24 F7            [12] 2006 	add	a,#0xf7
      000A57 F8               [12] 2007 	mov	r0,a
      000A58 A6 07            [24] 2008 	mov	@r0,ar7
      000A5A A8 07            [24] 2009 	mov	r0,ar7
      000A5C 86 04            [24] 2010 	mov	ar4,@r0
      000A5E 08               [12] 2011 	inc	r0
      000A5F 86 05            [24] 2012 	mov	ar5,@r0
      000A61 08               [12] 2013 	inc	r0
      000A62 86 06            [24] 2014 	mov	ar6,@r0
      000A64 08               [12] 2015 	inc	r0
      000A65 86 07            [24] 2016 	mov	ar7,@r0
      000A67 D0 00            [24] 2017 	pop	ar0
      000A69 A7 04            [24] 2018 	mov	@r1,ar4
      000A6B 09               [12] 2019 	inc	r1
      000A6C A7 05            [24] 2020 	mov	@r1,ar5
      000A6E 09               [12] 2021 	inc	r1
      000A6F A7 06            [24] 2022 	mov	@r1,ar6
      000A71 09               [12] 2023 	inc	r1
      000A72 A7 07            [24] 2024 	mov	@r1,ar7
      000A74 19               [12] 2025 	dec	r1
      000A75 19               [12] 2026 	dec	r1
      000A76 19               [12] 2027 	dec	r1
      000A77 80 57            [24] 2028 	sjmp	00185$
      000A79                       2029 00181$:
                                   2030 ;	printf_large.c:740: value.l = va_arg(ap, int);
      000A79 E5*00            [12] 2031 	mov	a,_bp
      000A7B 24 11            [12] 2032 	add	a,#0x11
      000A7D F9               [12] 2033 	mov	r1,a
      000A7E C0 00            [24] 2034 	push	ar0
      000A80 E5*00            [12] 2035 	mov	a,_bp
      000A82 24 F7            [12] 2036 	add	a,#0xf7
      000A84 F8               [12] 2037 	mov	r0,a
      000A85 E6               [12] 2038 	mov	a,@r0
      000A86 24 FE            [12] 2039 	add	a,#0xFE
      000A88 FF               [12] 2040 	mov	r7,a
      000A89 E5*00            [12] 2041 	mov	a,_bp
      000A8B 24 F7            [12] 2042 	add	a,#0xf7
      000A8D F8               [12] 2043 	mov	r0,a
      000A8E A6 07            [24] 2044 	mov	@r0,ar7
      000A90 A8 07            [24] 2045 	mov	r0,ar7
      000A92 86 06            [24] 2046 	mov	ar6,@r0
      000A94 08               [12] 2047 	inc	r0
      000A95 86 07            [24] 2048 	mov	ar7,@r0
      000A97 D0 00            [24] 2049 	pop	ar0
      000A99 EF               [12] 2050 	mov	a,r7
      000A9A 33               [12] 2051 	rlc	a
      000A9B 95 E0            [12] 2052 	subb	a,acc
      000A9D FD               [12] 2053 	mov	r5,a
      000A9E FC               [12] 2054 	mov	r4,a
      000A9F A7 06            [24] 2055 	mov	@r1,ar6
      000AA1 09               [12] 2056 	inc	r1
      000AA2 A7 07            [24] 2057 	mov	@r1,ar7
      000AA4 09               [12] 2058 	inc	r1
      000AA5 A7 05            [24] 2059 	mov	@r1,ar5
      000AA7 09               [12] 2060 	inc	r1
      000AA8 A7 04            [24] 2061 	mov	@r1,ar4
      000AAA 19               [12] 2062 	dec	r1
      000AAB 19               [12] 2063 	dec	r1
      000AAC 19               [12] 2064 	dec	r1
                                   2065 ;	printf_large.c:741: if (!signed_argument)
      000AAD 20*00 20         [24] 2066 	jb	b4,00185$
                                   2067 ;	printf_large.c:743: value.l &= 0xFFFF;
      000AB0 87 04            [24] 2068 	mov	ar4,@r1
      000AB2 09               [12] 2069 	inc	r1
      000AB3 87 05            [24] 2070 	mov	ar5,@r1
      000AB5 09               [12] 2071 	inc	r1
      000AB6 87 06            [24] 2072 	mov	ar6,@r1
      000AB8 09               [12] 2073 	inc	r1
      000AB9 87 07            [24] 2074 	mov	ar7,@r1
      000ABB 19               [12] 2075 	dec	r1
      000ABC 19               [12] 2076 	dec	r1
      000ABD 19               [12] 2077 	dec	r1
      000ABE 7E 00            [12] 2078 	mov	r6,#0x00
      000AC0 7F 00            [12] 2079 	mov	r7,#0x00
      000AC2 A7 04            [24] 2080 	mov	@r1,ar4
      000AC4 09               [12] 2081 	inc	r1
      000AC5 A7 05            [24] 2082 	mov	@r1,ar5
      000AC7 09               [12] 2083 	inc	r1
      000AC8 A7 06            [24] 2084 	mov	@r1,ar6
      000ACA 09               [12] 2085 	inc	r1
      000ACB A7 07            [24] 2086 	mov	@r1,ar7
      000ACD 19               [12] 2087 	dec	r1
      000ACE 19               [12] 2088 	dec	r1
      000ACF 19               [12] 2089 	dec	r1
      000AD0                       2090 00185$:
                                   2091 ;	printf_large.c:747: if ( signed_argument )
      000AD0 30*00 44         [24] 2092 	jnb	b4,00190$
                                   2093 ;	printf_large.c:749: if (value.l < 0)
      000AD3 E5*00            [12] 2094 	mov	a,_bp
      000AD5 24 11            [12] 2095 	add	a,#0x11
      000AD7 F9               [12] 2096 	mov	r1,a
      000AD8 87 04            [24] 2097 	mov	ar4,@r1
      000ADA 09               [12] 2098 	inc	r1
      000ADB 87 05            [24] 2099 	mov	ar5,@r1
      000ADD 09               [12] 2100 	inc	r1
      000ADE 87 06            [24] 2101 	mov	ar6,@r1
      000AE0 09               [12] 2102 	inc	r1
      000AE1 87 07            [24] 2103 	mov	ar7,@r1
      000AE3 19               [12] 2104 	dec	r1
      000AE4 19               [12] 2105 	dec	r1
      000AE5 19               [12] 2106 	dec	r1
      000AE6 EF               [12] 2107 	mov	a,r7
      000AE7 30 E7 2B         [24] 2108 	jnb	acc.7,00187$
                                   2109 ;	printf_large.c:750: value.l = -value.l;
      000AEA 87 04            [24] 2110 	mov	ar4,@r1
      000AEC 09               [12] 2111 	inc	r1
      000AED 87 05            [24] 2112 	mov	ar5,@r1
      000AEF 09               [12] 2113 	inc	r1
      000AF0 87 06            [24] 2114 	mov	ar6,@r1
      000AF2 09               [12] 2115 	inc	r1
      000AF3 87 07            [24] 2116 	mov	ar7,@r1
      000AF5 19               [12] 2117 	dec	r1
      000AF6 19               [12] 2118 	dec	r1
      000AF7 19               [12] 2119 	dec	r1
      000AF8 C3               [12] 2120 	clr	c
      000AF9 E4               [12] 2121 	clr	a
      000AFA 9C               [12] 2122 	subb	a,r4
      000AFB FC               [12] 2123 	mov	r4,a
      000AFC E4               [12] 2124 	clr	a
      000AFD 9D               [12] 2125 	subb	a,r5
      000AFE FD               [12] 2126 	mov	r5,a
      000AFF E4               [12] 2127 	clr	a
      000B00 9E               [12] 2128 	subb	a,r6
      000B01 FE               [12] 2129 	mov	r6,a
      000B02 E4               [12] 2130 	clr	a
      000B03 9F               [12] 2131 	subb	a,r7
      000B04 FF               [12] 2132 	mov	r7,a
      000B05 A7 04            [24] 2133 	mov	@r1,ar4
      000B07 09               [12] 2134 	inc	r1
      000B08 A7 05            [24] 2135 	mov	@r1,ar5
      000B0A 09               [12] 2136 	inc	r1
      000B0B A7 06            [24] 2137 	mov	@r1,ar6
      000B0D 09               [12] 2138 	inc	r1
      000B0E A7 07            [24] 2139 	mov	@r1,ar7
      000B10 19               [12] 2140 	dec	r1
      000B11 19               [12] 2141 	dec	r1
      000B12 19               [12] 2142 	dec	r1
      000B13 80 02            [24] 2143 	sjmp	00190$
      000B15                       2144 00187$:
                                   2145 ;	printf_large.c:752: signed_argument = 0;
      000B15 C2*00            [12] 2146 	clr	b4
      000B17                       2147 00190$:
                                   2148 ;	printf_large.c:756: lsd = 1;
      000B17 D2*00            [12] 2149 	setb	b5
                                   2150 ;	printf_large.c:758: do {
      000B19 8B 01            [24] 2151 	mov	ar1,r3
      000B1B C0 00            [24] 2152 	push	ar0
      000B1D E5*00            [12] 2153 	mov	a,_bp
      000B1F 24 18            [12] 2154 	add	a,#0x18
      000B21 F8               [12] 2155 	mov	r0,a
      000B22 76 00            [12] 2156 	mov	@r0,#0x00
      000B24 D0 00            [24] 2157 	pop	ar0
      000B26                       2158 00194$:
                                   2159 ;	printf_large.c:759: value.byte[4] = 0;
      000B26 E5*00            [12] 2160 	mov	a,_bp
      000B28 24 11            [12] 2161 	add	a,#0x11
      000B2A 24 04            [12] 2162 	add	a,#0x04
      000B2C C0 00            [24] 2163 	push	ar0
      000B2E F8               [12] 2164 	mov	r0,a
      000B2F 76 00            [12] 2165 	mov	@r0,#0x00
      000B31 D0 00            [24] 2166 	pop	ar0
                                   2167 ;	printf_large.c:761: calculate_digit(&value, radix);
      000B33 88 06            [24] 2168 	mov	ar6,r0
      000B35 C0 02            [24] 2169 	push	ar2
      000B37 C0 01            [24] 2170 	push	ar1
      000B39 C0 00            [24] 2171 	push	ar0
      000B3B C0*00            [24] 2172 	push	bits
      000B3D 85 00 F0         [24] 2173 	mov	b,ar0
      000B40 E5*00            [12] 2174 	mov	a,_bp
      000B42 24 16            [12] 2175 	add	a,#0x16
      000B44 F8               [12] 2176 	mov	r0,a
      000B45 E6               [12] 2177 	mov	a,@r0
      000B46 C0 E0            [24] 2178 	push	acc
      000B48 8E 82            [24] 2179 	mov	dpl,r6
      000B4A 12r00rBD         [24] 2180 	lcall	_calculate_digit
      000B4D 15 81            [12] 2181 	dec	sp
      000B4F D0*00            [24] 2182 	pop	bits
      000B51 D0 00            [24] 2183 	pop	ar0
      000B53 D0 01            [24] 2184 	pop	ar1
      000B55 D0 02            [24] 2185 	pop	ar2
                                   2186 ;	printf_large.c:765: if (!lsd)
      000B57 20*00 14         [24] 2187 	jb	b5,00192$
                                   2188 ;	printf_large.c:767: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
      000B5A C0 00            [24] 2189 	push	ar0
      000B5C A8 02            [24] 2190 	mov	r0,ar2
      000B5E 86 06            [24] 2191 	mov	ar6,@r0
      000B60 D0 00            [24] 2192 	pop	ar0
      000B62 EE               [12] 2193 	mov	a,r6
      000B63 C4               [12] 2194 	swap	a
      000B64 FE               [12] 2195 	mov	r6,a
      000B65 E7               [12] 2196 	mov	a,@r1
      000B66 FD               [12] 2197 	mov	r5,a
      000B67 42 06            [12] 2198 	orl	ar6,a
      000B69 A7 06            [24] 2199 	mov	@r1,ar6
                                   2200 ;	printf_large.c:768: pstore--;
      000B6B 19               [12] 2201 	dec	r1
      000B6C 80 0A            [24] 2202 	sjmp	00193$
      000B6E                       2203 00192$:
                                   2204 ;	printf_large.c:772: *pstore = value.byte[4];
      000B6E C0 00            [24] 2205 	push	ar0
      000B70 A8 02            [24] 2206 	mov	r0,ar2
      000B72 86 06            [24] 2207 	mov	ar6,@r0
      000B74 D0 00            [24] 2208 	pop	ar0
      000B76 A7 06            [24] 2209 	mov	@r1,ar6
      000B78                       2210 00193$:
                                   2211 ;	printf_large.c:774: length++;
      000B78 C0 00            [24] 2212 	push	ar0
      000B7A E5*00            [12] 2213 	mov	a,_bp
      000B7C 24 18            [12] 2214 	add	a,#0x18
      000B7E F8               [12] 2215 	mov	r0,a
      000B7F 06               [12] 2216 	inc	@r0
      000B80 D0 00            [24] 2217 	pop	ar0
                                   2218 ;	printf_large.c:775: lsd = !lsd;
      000B82 B2*00            [12] 2219 	cpl	b5
                                   2220 ;	printf_large.c:776: } while( value.ul );
      000B84 86 04            [24] 2221 	mov	ar4,@r0
      000B86 08               [12] 2222 	inc	r0
      000B87 86 05            [24] 2223 	mov	ar5,@r0
      000B89 08               [12] 2224 	inc	r0
      000B8A 86 06            [24] 2225 	mov	ar6,@r0
      000B8C 08               [12] 2226 	inc	r0
      000B8D 86 07            [24] 2227 	mov	ar7,@r0
      000B8F 18               [12] 2228 	dec	r0
      000B90 18               [12] 2229 	dec	r0
      000B91 18               [12] 2230 	dec	r0
      000B92 EC               [12] 2231 	mov	a,r4
      000B93 4D               [12] 2232 	orl	a,r5
      000B94 4E               [12] 2233 	orl	a,r6
      000B95 4F               [12] 2234 	orl	a,r7
      000B96 70 8E            [24] 2235 	jnz	00194$
                                   2236 ;	printf_large.c:778: if (width == 0)
      000B98 89 03            [24] 2237 	mov	ar3,r1
      000B9A E5*00            [12] 2238 	mov	a,_bp
      000B9C 24 18            [12] 2239 	add	a,#0x18
      000B9E F9               [12] 2240 	mov	r1,a
      000B9F C0 00            [24] 2241 	push	ar0
      000BA1 E5*00            [12] 2242 	mov	a,_bp
      000BA3 24 07            [12] 2243 	add	a,#0x07
      000BA5 F8               [12] 2244 	mov	r0,a
      000BA6 E7               [12] 2245 	mov	a,@r1
      000BA7 F6               [12] 2246 	mov	@r0,a
      000BA8 D0 00            [24] 2247 	pop	ar0
      000BAA E5*00            [12] 2248 	mov	a,_bp
      000BAC 24 17            [12] 2249 	add	a,#0x17
      000BAE F9               [12] 2250 	mov	r1,a
      000BAF E7               [12] 2251 	mov	a,@r1
      000BB0 70 07            [24] 2252 	jnz	00198$
                                   2253 ;	printf_large.c:783: width = 1;
      000BB2 E5*00            [12] 2254 	mov	a,_bp
      000BB4 24 17            [12] 2255 	add	a,#0x17
      000BB6 F9               [12] 2256 	mov	r1,a
      000BB7 77 01            [12] 2257 	mov	@r1,#0x01
      000BB9                       2258 00198$:
                                   2259 ;	printf_large.c:787: if (!zero_padding && !left_justify)
      000BB9 30*00 03         [24] 2260 	jnb	b1,00601$
      000BBC 02r0Cr45         [24] 2261 	ljmp	00203$
      000BBF                       2262 00601$:
      000BBF 30*00 03         [24] 2263 	jnb	b0,00602$
      000BC2 02r0Cr45         [24] 2264 	ljmp	00203$
      000BC5                       2265 00602$:
                                   2266 ;	printf_large.c:789: while ( width > (unsigned char) (length+1) )
      000BC5 E5*00            [12] 2267 	mov	a,_bp
      000BC7 24 07            [12] 2268 	add	a,#0x07
      000BC9 F9               [12] 2269 	mov	r1,a
      000BCA E7               [12] 2270 	mov	a,@r1
      000BCB 04               [12] 2271 	inc	a
      000BCC FF               [12] 2272 	mov	r7,a
      000BCD E5*00            [12] 2273 	mov	a,_bp
      000BCF 24 0B            [12] 2274 	add	a,#0x0b
      000BD1 F9               [12] 2275 	mov	r1,a
      000BD2 87 05            [24] 2276 	mov	ar5,@r1
      000BD4 09               [12] 2277 	inc	r1
      000BD5 87 06            [24] 2278 	mov	ar6,@r1
      000BD7 E5*00            [12] 2279 	mov	a,_bp
      000BD9 24 17            [12] 2280 	add	a,#0x17
      000BDB F9               [12] 2281 	mov	r1,a
      000BDC 87 04            [24] 2282 	mov	ar4,@r1
      000BDE                       2283 00199$:
      000BDE C3               [12] 2284 	clr	c
      000BDF EF               [12] 2285 	mov	a,r7
      000BE0 9C               [12] 2286 	subb	a,r4
      000BE1 50 51            [24] 2287 	jnc	00333$
                                   2288 ;	printf_large.c:791: OUTPUT_CHAR( ' ', p );
      000BE3 C0 07            [24] 2289 	push	ar7
      000BE5 C0 06            [24] 2290 	push	ar6
      000BE7 C0 05            [24] 2291 	push	ar5
      000BE9 C0 04            [24] 2292 	push	ar4
      000BEB C0 03            [24] 2293 	push	ar3
      000BED C0 02            [24] 2294 	push	ar2
      000BEF C0 00            [24] 2295 	push	ar0
      000BF1 C0*00            [24] 2296 	push	bits
      000BF3 E5*00            [12] 2297 	mov	a,_bp
      000BF5 24 FB            [12] 2298 	add	a,#0xfb
      000BF7 F9               [12] 2299 	mov	r1,a
      000BF8 E7               [12] 2300 	mov	a,@r1
      000BF9 C0 E0            [24] 2301 	push	acc
      000BFB 09               [12] 2302 	inc	r1
      000BFC E7               [12] 2303 	mov	a,@r1
      000BFD C0 E0            [24] 2304 	push	acc
      000BFF 09               [12] 2305 	inc	r1
      000C00 E7               [12] 2306 	mov	a,@r1
      000C01 C0 E0            [24] 2307 	push	acc
      000C03 12r0Cr08         [24] 2308 	lcall	00604$
      000C06 80 0E            [24] 2309 	sjmp	00605$
      000C08                       2310 00604$:
      000C08 A9*00            [24] 2311 	mov	r1,_bp
      000C0A 09               [12] 2312 	inc	r1
      000C0B E7               [12] 2313 	mov	a,@r1
      000C0C C0 E0            [24] 2314 	push	acc
      000C0E 09               [12] 2315 	inc	r1
      000C0F E7               [12] 2316 	mov	a,@r1
      000C10 C0 E0            [24] 2317 	push	acc
      000C12 75 82 20         [24] 2318 	mov	dpl,#0x20
      000C15 22               [24] 2319 	ret
      000C16                       2320 00605$:
      000C16 15 81            [12] 2321 	dec	sp
      000C18 15 81            [12] 2322 	dec	sp
      000C1A 15 81            [12] 2323 	dec	sp
      000C1C D0*00            [24] 2324 	pop	bits
      000C1E D0 00            [24] 2325 	pop	ar0
      000C20 D0 02            [24] 2326 	pop	ar2
      000C22 D0 03            [24] 2327 	pop	ar3
      000C24 D0 04            [24] 2328 	pop	ar4
      000C26 D0 05            [24] 2329 	pop	ar5
      000C28 D0 06            [24] 2330 	pop	ar6
      000C2A D0 07            [24] 2331 	pop	ar7
      000C2C 0D               [12] 2332 	inc	r5
      000C2D BD 00 01         [24] 2333 	cjne	r5,#0x00,00606$
      000C30 0E               [12] 2334 	inc	r6
      000C31                       2335 00606$:
                                   2336 ;	printf_large.c:792: width--;
      000C31 1C               [12] 2337 	dec	r4
      000C32 80 AA            [24] 2338 	sjmp	00199$
      000C34                       2339 00333$:
      000C34 E5*00            [12] 2340 	mov	a,_bp
      000C36 24 0B            [12] 2341 	add	a,#0x0b
      000C38 F9               [12] 2342 	mov	r1,a
      000C39 A7 05            [24] 2343 	mov	@r1,ar5
      000C3B 09               [12] 2344 	inc	r1
      000C3C A7 06            [24] 2345 	mov	@r1,ar6
      000C3E E5*00            [12] 2346 	mov	a,_bp
      000C40 24 17            [12] 2347 	add	a,#0x17
      000C42 F9               [12] 2348 	mov	r1,a
      000C43 A7 04            [24] 2349 	mov	@r1,ar4
      000C45                       2350 00203$:
                                   2351 ;	printf_large.c:796: if (signed_argument) // this now means the original value was negative
      000C45 30*00 4D         [24] 2352 	jnb	b4,00213$
                                   2353 ;	printf_large.c:798: OUTPUT_CHAR( '-', p );
      000C48 C0 03            [24] 2354 	push	ar3
      000C4A C0 02            [24] 2355 	push	ar2
      000C4C C0 00            [24] 2356 	push	ar0
      000C4E C0*00            [24] 2357 	push	bits
      000C50 E5*00            [12] 2358 	mov	a,_bp
      000C52 24 FB            [12] 2359 	add	a,#0xfb
      000C54 F9               [12] 2360 	mov	r1,a
      000C55 E7               [12] 2361 	mov	a,@r1
      000C56 C0 E0            [24] 2362 	push	acc
      000C58 09               [12] 2363 	inc	r1
      000C59 E7               [12] 2364 	mov	a,@r1
      000C5A C0 E0            [24] 2365 	push	acc
      000C5C 09               [12] 2366 	inc	r1
      000C5D E7               [12] 2367 	mov	a,@r1
      000C5E C0 E0            [24] 2368 	push	acc
      000C60 12r0Cr65         [24] 2369 	lcall	00608$
      000C63 80 0E            [24] 2370 	sjmp	00609$
      000C65                       2371 00608$:
      000C65 A9*00            [24] 2372 	mov	r1,_bp
      000C67 09               [12] 2373 	inc	r1
      000C68 E7               [12] 2374 	mov	a,@r1
      000C69 C0 E0            [24] 2375 	push	acc
      000C6B 09               [12] 2376 	inc	r1
      000C6C E7               [12] 2377 	mov	a,@r1
      000C6D C0 E0            [24] 2378 	push	acc
      000C6F 75 82 2D         [24] 2379 	mov	dpl,#0x2D
      000C72 22               [24] 2380 	ret
      000C73                       2381 00609$:
      000C73 15 81            [12] 2382 	dec	sp
      000C75 15 81            [12] 2383 	dec	sp
      000C77 15 81            [12] 2384 	dec	sp
      000C79 D0*00            [24] 2385 	pop	bits
      000C7B D0 00            [24] 2386 	pop	ar0
      000C7D D0 02            [24] 2387 	pop	ar2
      000C7F D0 03            [24] 2388 	pop	ar3
      000C81 E5*00            [12] 2389 	mov	a,_bp
      000C83 24 0B            [12] 2390 	add	a,#0x0b
      000C85 F9               [12] 2391 	mov	r1,a
      000C86 07               [12] 2392 	inc	@r1
      000C87 B7 00 02         [24] 2393 	cjne	@r1,#0x00,00610$
      000C8A 09               [12] 2394 	inc	r1
      000C8B 07               [12] 2395 	inc	@r1
      000C8C                       2396 00610$:
                                   2397 ;	printf_large.c:800: width--;
      000C8C E5*00            [12] 2398 	mov	a,_bp
      000C8E 24 17            [12] 2399 	add	a,#0x17
      000C90 F9               [12] 2400 	mov	r1,a
      000C91 17               [12] 2401 	dec	@r1
      000C92 02r0Dr3C         [24] 2402 	ljmp	00214$
      000C95                       2403 00213$:
                                   2404 ;	printf_large.c:802: else if (length != 0)
      000C95 E5*00            [12] 2405 	mov	a,_bp
      000C97 24 07            [12] 2406 	add	a,#0x07
      000C99 F9               [12] 2407 	mov	r1,a
      000C9A E7               [12] 2408 	mov	a,@r1
      000C9B 70 03            [24] 2409 	jnz	00611$
      000C9D 02r0Dr3C         [24] 2410 	ljmp	00214$
      000CA0                       2411 00611$:
                                   2412 ;	printf_large.c:805: if (prefix_sign)
      000CA0 30*00 4C         [24] 2413 	jnb	b2,00208$
                                   2414 ;	printf_large.c:807: OUTPUT_CHAR( '+', p );
      000CA3 C0 03            [24] 2415 	push	ar3
      000CA5 C0 02            [24] 2416 	push	ar2
      000CA7 C0 00            [24] 2417 	push	ar0
      000CA9 C0*00            [24] 2418 	push	bits
      000CAB E5*00            [12] 2419 	mov	a,_bp
      000CAD 24 FB            [12] 2420 	add	a,#0xfb
      000CAF F9               [12] 2421 	mov	r1,a
      000CB0 E7               [12] 2422 	mov	a,@r1
      000CB1 C0 E0            [24] 2423 	push	acc
      000CB3 09               [12] 2424 	inc	r1
      000CB4 E7               [12] 2425 	mov	a,@r1
      000CB5 C0 E0            [24] 2426 	push	acc
      000CB7 09               [12] 2427 	inc	r1
      000CB8 E7               [12] 2428 	mov	a,@r1
      000CB9 C0 E0            [24] 2429 	push	acc
      000CBB 12r0CrC0         [24] 2430 	lcall	00613$
      000CBE 80 0E            [24] 2431 	sjmp	00614$
      000CC0                       2432 00613$:
      000CC0 A9*00            [24] 2433 	mov	r1,_bp
      000CC2 09               [12] 2434 	inc	r1
      000CC3 E7               [12] 2435 	mov	a,@r1
      000CC4 C0 E0            [24] 2436 	push	acc
      000CC6 09               [12] 2437 	inc	r1
      000CC7 E7               [12] 2438 	mov	a,@r1
      000CC8 C0 E0            [24] 2439 	push	acc
      000CCA 75 82 2B         [24] 2440 	mov	dpl,#0x2B
      000CCD 22               [24] 2441 	ret
      000CCE                       2442 00614$:
      000CCE 15 81            [12] 2443 	dec	sp
      000CD0 15 81            [12] 2444 	dec	sp
      000CD2 15 81            [12] 2445 	dec	sp
      000CD4 D0*00            [24] 2446 	pop	bits
      000CD6 D0 00            [24] 2447 	pop	ar0
      000CD8 D0 02            [24] 2448 	pop	ar2
      000CDA D0 03            [24] 2449 	pop	ar3
      000CDC E5*00            [12] 2450 	mov	a,_bp
      000CDE 24 0B            [12] 2451 	add	a,#0x0b
      000CE0 F9               [12] 2452 	mov	r1,a
      000CE1 07               [12] 2453 	inc	@r1
      000CE2 B7 00 02         [24] 2454 	cjne	@r1,#0x00,00615$
      000CE5 09               [12] 2455 	inc	r1
      000CE6 07               [12] 2456 	inc	@r1
      000CE7                       2457 00615$:
                                   2458 ;	printf_large.c:809: width--;
      000CE7 E5*00            [12] 2459 	mov	a,_bp
      000CE9 24 17            [12] 2460 	add	a,#0x17
      000CEB F9               [12] 2461 	mov	r1,a
      000CEC 17               [12] 2462 	dec	@r1
      000CED 80 4D            [24] 2463 	sjmp	00214$
      000CEF                       2464 00208$:
                                   2465 ;	printf_large.c:811: else if (prefix_space)
      000CEF 30*00 4A         [24] 2466 	jnb	b3,00214$
                                   2467 ;	printf_large.c:813: OUTPUT_CHAR( ' ', p );
      000CF2 C0 03            [24] 2468 	push	ar3
      000CF4 C0 02            [24] 2469 	push	ar2
      000CF6 C0 00            [24] 2470 	push	ar0
      000CF8 C0*00            [24] 2471 	push	bits
      000CFA E5*00            [12] 2472 	mov	a,_bp
      000CFC 24 FB            [12] 2473 	add	a,#0xfb
      000CFE F9               [12] 2474 	mov	r1,a
      000CFF E7               [12] 2475 	mov	a,@r1
      000D00 C0 E0            [24] 2476 	push	acc
      000D02 09               [12] 2477 	inc	r1
      000D03 E7               [12] 2478 	mov	a,@r1
      000D04 C0 E0            [24] 2479 	push	acc
      000D06 09               [12] 2480 	inc	r1
      000D07 E7               [12] 2481 	mov	a,@r1
      000D08 C0 E0            [24] 2482 	push	acc
      000D0A 12r0Dr0F         [24] 2483 	lcall	00617$
      000D0D 80 0E            [24] 2484 	sjmp	00618$
      000D0F                       2485 00617$:
      000D0F A9*00            [24] 2486 	mov	r1,_bp
      000D11 09               [12] 2487 	inc	r1
      000D12 E7               [12] 2488 	mov	a,@r1
      000D13 C0 E0            [24] 2489 	push	acc
      000D15 09               [12] 2490 	inc	r1
      000D16 E7               [12] 2491 	mov	a,@r1
      000D17 C0 E0            [24] 2492 	push	acc
      000D19 75 82 20         [24] 2493 	mov	dpl,#0x20
      000D1C 22               [24] 2494 	ret
      000D1D                       2495 00618$:
      000D1D 15 81            [12] 2496 	dec	sp
      000D1F 15 81            [12] 2497 	dec	sp
      000D21 15 81            [12] 2498 	dec	sp
      000D23 D0*00            [24] 2499 	pop	bits
      000D25 D0 00            [24] 2500 	pop	ar0
      000D27 D0 02            [24] 2501 	pop	ar2
      000D29 D0 03            [24] 2502 	pop	ar3
      000D2B E5*00            [12] 2503 	mov	a,_bp
      000D2D 24 0B            [12] 2504 	add	a,#0x0b
      000D2F F9               [12] 2505 	mov	r1,a
      000D30 07               [12] 2506 	inc	@r1
      000D31 B7 00 02         [24] 2507 	cjne	@r1,#0x00,00619$
      000D34 09               [12] 2508 	inc	r1
      000D35 07               [12] 2509 	inc	@r1
      000D36                       2510 00619$:
                                   2511 ;	printf_large.c:815: width--;
      000D36 E5*00            [12] 2512 	mov	a,_bp
      000D38 24 17            [12] 2513 	add	a,#0x17
      000D3A F9               [12] 2514 	mov	r1,a
      000D3B 17               [12] 2515 	dec	@r1
      000D3C                       2516 00214$:
                                   2517 ;	printf_large.c:820: if (!left_justify)
      000D3C 20*00 75         [24] 2518 	jb	b0,00222$
                                   2519 ;	printf_large.c:822: while ( width-- > length )
      000D3F E5*00            [12] 2520 	mov	a,_bp
      000D41 24 0B            [12] 2521 	add	a,#0x0b
      000D43 F9               [12] 2522 	mov	r1,a
      000D44 87 06            [24] 2523 	mov	ar6,@r1
      000D46 09               [12] 2524 	inc	r1
      000D47 87 07            [24] 2525 	mov	ar7,@r1
      000D49 E5*00            [12] 2526 	mov	a,_bp
      000D4B 24 17            [12] 2527 	add	a,#0x17
      000D4D F9               [12] 2528 	mov	r1,a
      000D4E 87 05            [24] 2529 	mov	ar5,@r1
      000D50                       2530 00215$:
      000D50 8D 04            [24] 2531 	mov	ar4,r5
      000D52 1D               [12] 2532 	dec	r5
      000D53 E5*00            [12] 2533 	mov	a,_bp
      000D55 24 07            [12] 2534 	add	a,#0x07
      000D57 F9               [12] 2535 	mov	r1,a
      000D58 C3               [12] 2536 	clr	c
      000D59 E7               [12] 2537 	mov	a,@r1
      000D5A 9C               [12] 2538 	subb	a,r4
      000D5B 40 03            [24] 2539 	jc	00621$
      000D5D 02r0DrE4         [24] 2540 	ljmp	00334$
      000D60                       2541 00621$:
                                   2542 ;	printf_large.c:824: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
      000D60 30*00 04         [24] 2543 	jnb	b1,00248$
      000D63 7C 30            [12] 2544 	mov	r4,#0x30
      000D65 80 02            [24] 2545 	sjmp	00249$
      000D67                       2546 00248$:
      000D67 7C 20            [12] 2547 	mov	r4,#0x20
      000D69                       2548 00249$:
      000D69 C0 07            [24] 2549 	push	ar7
      000D6B C0 06            [24] 2550 	push	ar6
      000D6D C0 05            [24] 2551 	push	ar5
      000D6F C0 03            [24] 2552 	push	ar3
      000D71 C0 02            [24] 2553 	push	ar2
      000D73 C0 00            [24] 2554 	push	ar0
      000D75 C0*00            [24] 2555 	push	bits
      000D77 E5*00            [12] 2556 	mov	a,_bp
      000D79 24 FB            [12] 2557 	add	a,#0xfb
      000D7B F9               [12] 2558 	mov	r1,a
      000D7C E7               [12] 2559 	mov	a,@r1
      000D7D C0 E0            [24] 2560 	push	acc
      000D7F 09               [12] 2561 	inc	r1
      000D80 E7               [12] 2562 	mov	a,@r1
      000D81 C0 E0            [24] 2563 	push	acc
      000D83 09               [12] 2564 	inc	r1
      000D84 E7               [12] 2565 	mov	a,@r1
      000D85 C0 E0            [24] 2566 	push	acc
      000D87 12r0Dr8C         [24] 2567 	lcall	00623$
      000D8A 80 0D            [24] 2568 	sjmp	00624$
      000D8C                       2569 00623$:
      000D8C A9*00            [24] 2570 	mov	r1,_bp
      000D8E 09               [12] 2571 	inc	r1
      000D8F E7               [12] 2572 	mov	a,@r1
      000D90 C0 E0            [24] 2573 	push	acc
      000D92 09               [12] 2574 	inc	r1
      000D93 E7               [12] 2575 	mov	a,@r1
      000D94 C0 E0            [24] 2576 	push	acc
      000D96 8C 82            [24] 2577 	mov	dpl,r4
      000D98 22               [24] 2578 	ret
      000D99                       2579 00624$:
      000D99 15 81            [12] 2580 	dec	sp
      000D9B 15 81            [12] 2581 	dec	sp
      000D9D 15 81            [12] 2582 	dec	sp
      000D9F D0*00            [24] 2583 	pop	bits
      000DA1 D0 00            [24] 2584 	pop	ar0
      000DA3 D0 02            [24] 2585 	pop	ar2
      000DA5 D0 03            [24] 2586 	pop	ar3
      000DA7 D0 05            [24] 2587 	pop	ar5
      000DA9 D0 06            [24] 2588 	pop	ar6
      000DAB D0 07            [24] 2589 	pop	ar7
      000DAD 0E               [12] 2590 	inc	r6
      000DAE BE 00 9F         [24] 2591 	cjne	r6,#0x00,00215$
      000DB1 0F               [12] 2592 	inc	r7
      000DB2 80 9C            [24] 2593 	sjmp	00215$
      000DB4                       2594 00222$:
                                   2595 ;	printf_large.c:830: if (width > length)
      000DB4 E5*00            [12] 2596 	mov	a,_bp
      000DB6 24 17            [12] 2597 	add	a,#0x17
      000DB8 F9               [12] 2598 	mov	r1,a
      000DB9 C0 00            [24] 2599 	push	ar0
      000DBB E5*00            [12] 2600 	mov	a,_bp
      000DBD 24 07            [12] 2601 	add	a,#0x07
      000DBF F8               [12] 2602 	mov	r0,a
      000DC0 C3               [12] 2603 	clr	c
      000DC1 E6               [12] 2604 	mov	a,@r0
      000DC2 97               [12] 2605 	subb	a,@r1
      000DC3 D0 00            [24] 2606 	pop	ar0
      000DC5 50 14            [24] 2607 	jnc	00219$
                                   2608 ;	printf_large.c:831: width -= length;
      000DC7 E5*00            [12] 2609 	mov	a,_bp
      000DC9 24 17            [12] 2610 	add	a,#0x17
      000DCB F9               [12] 2611 	mov	r1,a
      000DCC C0 00            [24] 2612 	push	ar0
      000DCE E5*00            [12] 2613 	mov	a,_bp
      000DD0 24 07            [12] 2614 	add	a,#0x07
      000DD2 F8               [12] 2615 	mov	r0,a
      000DD3 E7               [12] 2616 	mov	a,@r1
      000DD4 C3               [12] 2617 	clr	c
      000DD5 96               [12] 2618 	subb	a,@r0
      000DD6 F7               [12] 2619 	mov	@r1,a
      000DD7 D0 00            [24] 2620 	pop	ar0
      000DD9 80 1A            [24] 2621 	sjmp	00326$
      000DDB                       2622 00219$:
                                   2623 ;	printf_large.c:833: width = 0;
      000DDB E5*00            [12] 2624 	mov	a,_bp
      000DDD 24 17            [12] 2625 	add	a,#0x17
      000DDF F9               [12] 2626 	mov	r1,a
      000DE0 77 00            [12] 2627 	mov	@r1,#0x00
                                   2628 ;	printf_large.c:872: return charsOutputted;
                                   2629 ;	printf_large.c:837: while( length-- )
      000DE2 80 11            [24] 2630 	sjmp	00326$
      000DE4                       2631 00334$:
      000DE4 E5*00            [12] 2632 	mov	a,_bp
      000DE6 24 0B            [12] 2633 	add	a,#0x0b
      000DE8 F9               [12] 2634 	mov	r1,a
      000DE9 A7 06            [24] 2635 	mov	@r1,ar6
      000DEB 09               [12] 2636 	inc	r1
      000DEC A7 07            [24] 2637 	mov	@r1,ar7
      000DEE E5*00            [12] 2638 	mov	a,_bp
      000DF0 24 17            [12] 2639 	add	a,#0x17
      000DF2 F9               [12] 2640 	mov	r1,a
      000DF3 A7 05            [24] 2641 	mov	@r1,ar5
      000DF5                       2642 00326$:
      000DF5 8B 01            [24] 2643 	mov	ar1,r3
      000DF7 C0 00            [24] 2644 	push	ar0
      000DF9 E5*00            [12] 2645 	mov	a,_bp
      000DFB 24 0B            [12] 2646 	add	a,#0x0b
      000DFD F8               [12] 2647 	mov	r0,a
      000DFE 86 06            [24] 2648 	mov	ar6,@r0
      000E00 08               [12] 2649 	inc	r0
      000E01 86 07            [24] 2650 	mov	ar7,@r0
      000E03 E5*00            [12] 2651 	mov	a,_bp
      000E05 24 07            [12] 2652 	add	a,#0x07
      000E07 F8               [12] 2653 	mov	r0,a
      000E08 86 05            [24] 2654 	mov	ar5,@r0
      000E0A D0 00            [24] 2655 	pop	ar0
      000E0C                       2656 00227$:
      000E0C 8D 04            [24] 2657 	mov	ar4,r5
      000E0E 1D               [12] 2658 	dec	r5
      000E0F EC               [12] 2659 	mov	a,r4
      000E10 70 03            [24] 2660 	jnz	00627$
      000E12 02r0ErA2         [24] 2661 	ljmp	00335$
      000E15                       2662 00627$:
                                   2663 ;	printf_large.c:839: lsd = !lsd;
      000E15 B2*00            [12] 2664 	cpl	b5
                                   2665 ;	printf_large.c:840: if (!lsd)
      000E17 20*00 10         [24] 2666 	jb	b5,00225$
                                   2667 ;	printf_large.c:842: pstore++;
      000E1A 09               [12] 2668 	inc	r1
                                   2669 ;	printf_large.c:843: value.byte[4] = *pstore >> 4;
      000E1B E7               [12] 2670 	mov	a,@r1
      000E1C C4               [12] 2671 	swap	a
      000E1D 54 0F            [12] 2672 	anl	a,#0x0F
      000E1F FC               [12] 2673 	mov	r4,a
      000E20 C0 00            [24] 2674 	push	ar0
      000E22 A8 02            [24] 2675 	mov	r0,ar2
      000E24 A6 04            [24] 2676 	mov	@r0,ar4
      000E26 D0 00            [24] 2677 	pop	ar0
      000E28 80 0C            [24] 2678 	sjmp	00226$
      000E2A                       2679 00225$:
                                   2680 ;	printf_large.c:847: value.byte[4] = *pstore & 0x0F;
      000E2A 87 04            [24] 2681 	mov	ar4,@r1
      000E2C 74 0F            [12] 2682 	mov	a,#0x0F
      000E2E 5C               [12] 2683 	anl	a,r4
      000E2F C0 00            [24] 2684 	push	ar0
      000E31 A8 02            [24] 2685 	mov	r0,ar2
      000E33 F6               [12] 2686 	mov	@r0,a
      000E34 D0 00            [24] 2687 	pop	ar0
      000E36                       2688 00226$:
                                   2689 ;	printf_large.c:850: output_digit( value.byte[4], lower_case, output_char, p );
      000E36 C0 00            [24] 2690 	push	ar0
      000E38 A8 02            [24] 2691 	mov	r0,ar2
      000E3A 86 04            [24] 2692 	mov	ar4,@r0
      000E3C D0 00            [24] 2693 	pop	ar0
      000E3E C0 07            [24] 2694 	push	ar7
      000E40 C0 06            [24] 2695 	push	ar6
      000E42 C0 05            [24] 2696 	push	ar5
      000E44 C0 02            [24] 2697 	push	ar2
      000E46 C0 01            [24] 2698 	push	ar1
      000E48 C0 00            [24] 2699 	push	ar0
      000E4A C0*00            [24] 2700 	push	bits
      000E4C 85 00 F0         [24] 2701 	mov	b,ar0
      000E4F E5*00            [12] 2702 	mov	a,_bp
      000E51 24 FB            [12] 2703 	add	a,#0xfb
      000E53 F8               [12] 2704 	mov	r0,a
      000E54 E6               [12] 2705 	mov	a,@r0
      000E55 C0 E0            [24] 2706 	push	acc
      000E57 08               [12] 2707 	inc	r0
      000E58 E6               [12] 2708 	mov	a,@r0
      000E59 C0 E0            [24] 2709 	push	acc
      000E5B 08               [12] 2710 	inc	r0
      000E5C E6               [12] 2711 	mov	a,@r0
      000E5D C0 E0            [24] 2712 	push	acc
      000E5F A8 F0            [24] 2713 	mov	r0,b
      000E61 85 00 F0         [24] 2714 	mov	b,ar0
      000E64 A8*00            [24] 2715 	mov	r0,_bp
      000E66 08               [12] 2716 	inc	r0
      000E67 E6               [12] 2717 	mov	a,@r0
      000E68 C0 E0            [24] 2718 	push	acc
      000E6A 08               [12] 2719 	inc	r0
      000E6B E6               [12] 2720 	mov	a,@r0
      000E6C C0 E0            [24] 2721 	push	acc
      000E6E A8 F0            [24] 2722 	mov	r0,b
      000E70 C0 00            [24] 2723 	push	ar0
      000E72 E5*00            [12] 2724 	mov	a,_bp
      000E74 24 10            [12] 2725 	add	a,#0x10
      000E76 F8               [12] 2726 	mov	r0,a
      000E77 E6               [12] 2727 	mov	a,@r0
      000E78 24 FF            [12] 2728 	add	a,#0xff
      000E7A 92 F0            [24] 2729 	mov	b[0],c
      000E7C D0 00            [24] 2730 	pop	ar0
      000E7E 85 F0*00         [24] 2731 	mov	bits,b
      000E81 8C 82            [24] 2732 	mov	dpl,r4
      000E83 12r00r00         [24] 2733 	lcall	_output_digit
      000E86 E5 81            [12] 2734 	mov	a,sp
      000E88 24 FB            [12] 2735 	add	a,#0xfb
      000E8A F5 81            [12] 2736 	mov	sp,a
      000E8C D0*00            [24] 2737 	pop	bits
      000E8E D0 00            [24] 2738 	pop	ar0
      000E90 D0 01            [24] 2739 	pop	ar1
      000E92 D0 02            [24] 2740 	pop	ar2
      000E94 D0 05            [24] 2741 	pop	ar5
      000E96 D0 06            [24] 2742 	pop	ar6
      000E98 D0 07            [24] 2743 	pop	ar7
                                   2744 ;	printf_large.c:851: charsOutputted++;
      000E9A 0E               [12] 2745 	inc	r6
      000E9B BE 00 01         [24] 2746 	cjne	r6,#0x00,00629$
      000E9E 0F               [12] 2747 	inc	r7
      000E9F                       2748 00629$:
      000E9F 02r0Er0C         [24] 2749 	ljmp	00227$
      000EA2                       2750 00335$:
      000EA2 E5*00            [12] 2751 	mov	a,_bp
      000EA4 24 0B            [12] 2752 	add	a,#0x0b
      000EA6 F9               [12] 2753 	mov	r1,a
      000EA7 A7 06            [24] 2754 	mov	@r1,ar6
      000EA9 09               [12] 2755 	inc	r1
      000EAA A7 07            [24] 2756 	mov	@r1,ar7
                                   2757 ;	printf_large.c:856: if (left_justify)
      000EAC 20*00 03         [24] 2758 	jb	b0,00630$
      000EAF 02r01r62         [24] 2759 	ljmp	00243$
      000EB2                       2760 00630$:
                                   2761 ;	printf_large.c:858: while (width-- > 0)
      000EB2 E5*00            [12] 2762 	mov	a,_bp
      000EB4 24 17            [12] 2763 	add	a,#0x17
      000EB6 F9               [12] 2764 	mov	r1,a
      000EB7 87 05            [24] 2765 	mov	ar5,@r1
      000EB9                       2766 00230$:
      000EB9 8D 04            [24] 2767 	mov	ar4,r5
      000EBB 1D               [12] 2768 	dec	r5
      000EBC EC               [12] 2769 	mov	a,r4
      000EBD 70 03            [24] 2770 	jnz	00631$
      000EBF 02r01r62         [24] 2771 	ljmp	00243$
      000EC2                       2772 00631$:
                                   2773 ;	printf_large.c:860: OUTPUT_CHAR(' ', p);
      000EC2 C0 07            [24] 2774 	push	ar7
      000EC4 C0 06            [24] 2775 	push	ar6
      000EC6 C0 05            [24] 2776 	push	ar5
      000EC8 C0 02            [24] 2777 	push	ar2
      000ECA C0 00            [24] 2778 	push	ar0
      000ECC E5*00            [12] 2779 	mov	a,_bp
      000ECE 24 FB            [12] 2780 	add	a,#0xfb
      000ED0 F9               [12] 2781 	mov	r1,a
      000ED1 E7               [12] 2782 	mov	a,@r1
      000ED2 C0 E0            [24] 2783 	push	acc
      000ED4 09               [12] 2784 	inc	r1
      000ED5 E7               [12] 2785 	mov	a,@r1
      000ED6 C0 E0            [24] 2786 	push	acc
      000ED8 09               [12] 2787 	inc	r1
      000ED9 E7               [12] 2788 	mov	a,@r1
      000EDA C0 E0            [24] 2789 	push	acc
      000EDC 12r0ErE1         [24] 2790 	lcall	00632$
      000EDF 80 0E            [24] 2791 	sjmp	00633$
      000EE1                       2792 00632$:
      000EE1 A9*00            [24] 2793 	mov	r1,_bp
      000EE3 09               [12] 2794 	inc	r1
      000EE4 E7               [12] 2795 	mov	a,@r1
      000EE5 C0 E0            [24] 2796 	push	acc
      000EE7 09               [12] 2797 	inc	r1
      000EE8 E7               [12] 2798 	mov	a,@r1
      000EE9 C0 E0            [24] 2799 	push	acc
      000EEB 75 82 20         [24] 2800 	mov	dpl,#0x20
      000EEE 22               [24] 2801 	ret
      000EEF                       2802 00633$:
      000EEF 15 81            [12] 2803 	dec	sp
      000EF1 15 81            [12] 2804 	dec	sp
      000EF3 15 81            [12] 2805 	dec	sp
      000EF5 D0 00            [24] 2806 	pop	ar0
      000EF7 D0 02            [24] 2807 	pop	ar2
      000EF9 D0 05            [24] 2808 	pop	ar5
      000EFB D0 06            [24] 2809 	pop	ar6
      000EFD D0 07            [24] 2810 	pop	ar7
      000EFF 0E               [12] 2811 	inc	r6
      000F00 BE 00 01         [24] 2812 	cjne	r6,#0x00,00634$
      000F03 0F               [12] 2813 	inc	r7
      000F04                       2814 00634$:
      000F04 E5*00            [12] 2815 	mov	a,_bp
      000F06 24 0B            [12] 2816 	add	a,#0x0b
      000F08 F9               [12] 2817 	mov	r1,a
      000F09 A7 06            [24] 2818 	mov	@r1,ar6
      000F0B 09               [12] 2819 	inc	r1
      000F0C A7 07            [24] 2820 	mov	@r1,ar7
      000F0E 80 A9            [24] 2821 	sjmp	00230$
      000F10                       2822 00241$:
                                   2823 ;	printf_large.c:868: OUTPUT_CHAR( c, p );
      000F10 C0 02            [24] 2824 	push	ar2
      000F12 C0 00            [24] 2825 	push	ar0
      000F14 E5*00            [12] 2826 	mov	a,_bp
      000F16 24 FB            [12] 2827 	add	a,#0xfb
      000F18 F9               [12] 2828 	mov	r1,a
      000F19 E7               [12] 2829 	mov	a,@r1
      000F1A C0 E0            [24] 2830 	push	acc
      000F1C 09               [12] 2831 	inc	r1
      000F1D E7               [12] 2832 	mov	a,@r1
      000F1E C0 E0            [24] 2833 	push	acc
      000F20 09               [12] 2834 	inc	r1
      000F21 E7               [12] 2835 	mov	a,@r1
      000F22 C0 E0            [24] 2836 	push	acc
      000F24 12r0Fr29         [24] 2837 	lcall	00635$
      000F27 80 0D            [24] 2838 	sjmp	00636$
      000F29                       2839 00635$:
      000F29 A9*00            [24] 2840 	mov	r1,_bp
      000F2B 09               [12] 2841 	inc	r1
      000F2C E7               [12] 2842 	mov	a,@r1
      000F2D C0 E0            [24] 2843 	push	acc
      000F2F 09               [12] 2844 	inc	r1
      000F30 E7               [12] 2845 	mov	a,@r1
      000F31 C0 E0            [24] 2846 	push	acc
      000F33 8D 82            [24] 2847 	mov	dpl,r5
      000F35 22               [24] 2848 	ret
      000F36                       2849 00636$:
      000F36 15 81            [12] 2850 	dec	sp
      000F38 15 81            [12] 2851 	dec	sp
      000F3A 15 81            [12] 2852 	dec	sp
      000F3C D0 00            [24] 2853 	pop	ar0
      000F3E D0 02            [24] 2854 	pop	ar2
      000F40 E5*00            [12] 2855 	mov	a,_bp
      000F42 24 0B            [12] 2856 	add	a,#0x0b
      000F44 F9               [12] 2857 	mov	r1,a
      000F45 07               [12] 2858 	inc	@r1
      000F46 B7 00 02         [24] 2859 	cjne	@r1,#0x00,00637$
      000F49 09               [12] 2860 	inc	r1
      000F4A 07               [12] 2861 	inc	@r1
      000F4B                       2862 00637$:
      000F4B 02r01r62         [24] 2863 	ljmp	00243$
      000F4E                       2864 00245$:
                                   2865 ;	printf_large.c:872: return charsOutputted;
      000F4E E5*00            [12] 2866 	mov	a,_bp
      000F50 24 0B            [12] 2867 	add	a,#0x0b
      000F52 F8               [12] 2868 	mov	r0,a
      000F53 86 82            [24] 2869 	mov	dpl,@r0
      000F55 08               [12] 2870 	inc	r0
      000F56 86 83            [24] 2871 	mov	dph,@r0
      000F58 85*00 81         [24] 2872 	mov	sp,_bp
      000F5B D0*00            [24] 2873 	pop	_bp
      000F5D 22               [24] 2874 	ret
                                   2875 	.area CSEG    (CODE)
                                   2876 	.area CONST   (CODE)
      000000                       2877 ___str_0:
      000000 3C 4E 4F 20 46 4C 4F  2878 	.ascii "<NO FLOAT>"
             41 54 3E
      00000A 00                    2879 	.db 0x00
                                   2880 	.area XINIT   (CODE)
                                   2881 	.area CABS    (ABS,CODE)
