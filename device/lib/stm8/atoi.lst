                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:17:14 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module atoi
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _atoi
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area INITIALIZED
                                     21 ;--------------------------------------------------------
                                     22 ; absolute external ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DABS (ABS)
                                     25 ;--------------------------------------------------------
                                     26 ; global & static initialisations
                                     27 ;--------------------------------------------------------
                                     28 	.area HOME
                                     29 	.area GSINIT
                                     30 	.area GSFINAL
                                     31 	.area GSINIT
                                     32 ;--------------------------------------------------------
                                     33 ; Home
                                     34 ;--------------------------------------------------------
                                     35 	.area HOME
                                     36 	.area HOME
                                     37 ;--------------------------------------------------------
                                     38 ; code
                                     39 ;--------------------------------------------------------
                                     40 	.area CODE
                                     41 ;	../atoi.c: 34: int atoi(const char *nptr)
                                     42 ;	-----------------------------------------
                                     43 ;	 function atoi
                                     44 ;	-----------------------------------------
      000000                         45 _atoi:
      000000 52 0A            [ 2]   46 	sub	sp, #10
                                     47 ;	../atoi.c: 36: int ret = 0;
      000002 5F               [ 1]   48 	clrw	x
      000003 1F 02            [ 2]   49 	ldw	(0x02, sp), x
                                     50 ;	../atoi.c: 39: while (isblank (*nptr))
      000005 16 0D            [ 2]   51 	ldw	y, (0x0d, sp)
      000007 17 09            [ 2]   52 	ldw	(0x09, sp), y
      000009                         53 00101$:
      000009 1E 09            [ 2]   54 	ldw	x, (0x09, sp)
      00000B F6               [ 1]   55 	ld	a, (x)
      00000C 6B 08            [ 1]   56 	ld	(0x08, sp), a
      00000E 7B 08            [ 1]   57 	ld	a, (0x08, sp)
      000010 95               [ 1]   58 	ld	xh, a
      000011 49               [ 1]   59 	rlc	a
      000012 4F               [ 1]   60 	clr	a
      000013 A2 00            [ 1]   61 	sbc	a, #0x00
                                     62 ;	./../../include/ctype.h: 53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
      000015 9E               [ 1]   63 	ld	a, xh
      000016 A1 20            [ 1]   64 	cp	a, #0x20
      000018 27 04            [ 1]   65 	jreq	00115$
      00001A A1 09            [ 1]   66 	cp	a, #0x09
      00001C 26 07            [ 1]   67 	jrne	00131$
      00001E                         68 00115$:
                                     69 ;	../atoi.c: 40: nptr++;
      00001E 1E 09            [ 2]   70 	ldw	x, (0x09, sp)
      000020 5C               [ 2]   71 	incw	x
      000021 1F 09            [ 2]   72 	ldw	(0x09, sp), x
      000023 20 E4            [ 2]   73 	jra	00101$
      000025                         74 00131$:
      000025 16 09            [ 2]   75 	ldw	y, (0x09, sp)
      000027 17 0D            [ 2]   76 	ldw	(0x0d, sp), y
                                     77 ;	../atoi.c: 42: neg = (*nptr == '-');
      000029 1E 09            [ 2]   78 	ldw	x, (0x09, sp)
      00002B 7B 08            [ 1]   79 	ld	a, (0x08, sp)
      00002D A1 2D            [ 1]   80 	cp	a, #0x2d
      00002F 26 03            [ 1]   81 	jrne	00161$
      000031 A6 01            [ 1]   82 	ld	a, #0x01
      000033 21                      83 	.byte 0x21
      000034                         84 00161$:
      000034 4F               [ 1]   85 	clr	a
      000035                         86 00162$:
      000035 6B 01            [ 1]   87 	ld	(0x01, sp), a
                                     88 ;	../atoi.c: 44: if (*nptr == '-' || *nptr == '+')
      000037 4D               [ 1]   89 	tnz	a
      000038 26 06            [ 1]   90 	jrne	00104$
      00003A 7B 08            [ 1]   91 	ld	a, (0x08, sp)
      00003C A1 2B            [ 1]   92 	cp	a, #0x2b
      00003E 26 03            [ 1]   93 	jrne	00129$
      000040                         94 00104$:
                                     95 ;	../atoi.c: 45: nptr++;
      000040 5C               [ 2]   96 	incw	x
      000041 1F 0D            [ 2]   97 	ldw	(0x0d, sp), x
                                     98 ;	../atoi.c: 47: while (isdigit (*nptr))
      000043                         99 00129$:
      000043 1E 0D            [ 2]  100 	ldw	x, (0x0d, sp)
      000045                        101 00107$:
      000045 F6               [ 1]  102 	ld	a, (x)
      000046 6B 05            [ 1]  103 	ld	(0x05, sp), a
      000048 7B 05            [ 1]  104 	ld	a, (0x05, sp)
      00004A 49               [ 1]  105 	rlc	a
      00004B 4F               [ 1]  106 	clr	a
      00004C A2 00            [ 1]  107 	sbc	a, #0x00
      00004E 6B 04            [ 1]  108 	ld	(0x04, sp), a
      000050 16 04            [ 2]  109 	ldw	y, (0x04, sp)
                                    110 ;	./../../include/ctype.h: 62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      000052 90 9F            [ 1]  111 	ld	a, yl
      000054 A1 30            [ 1]  112 	cp	a, #0x30
      000056 25 23            [ 1]  113 	jrc	00109$
      000058 A1 39            [ 1]  114 	cp	a, #0x39
      00005A 22 1F            [ 1]  115 	jrugt	00109$
                                    116 ;	../atoi.c: 48: ret = ret * 10 + (*(nptr++) - '0');
      00005C 89               [ 2]  117 	pushw	x
      00005D 16 04            [ 2]  118 	ldw	y, (0x04, sp)
      00005F 90 89            [ 2]  119 	pushw	y
      000061 4B 0A            [ 1]  120 	push	#0x0a
      000063 4B 00            [ 1]  121 	push	#0x00
      000065 CDr00r00         [ 4]  122 	call	__mulint
      000068 5B 04            [ 2]  123 	addw	sp, #4
      00006A 1F 08            [ 2]  124 	ldw	(0x08, sp), x
      00006C 85               [ 2]  125 	popw	x
      00006D 5C               [ 2]  126 	incw	x
      00006E 16 04            [ 2]  127 	ldw	y, (0x04, sp)
      000070 72 A2 00 30      [ 2]  128 	subw	y, #0x0030
      000074 72 F9 06         [ 2]  129 	addw	y, (0x06, sp)
      000077 17 02            [ 2]  130 	ldw	(0x02, sp), y
      000079 20 CA            [ 2]  131 	jra	00107$
      00007B                        132 00109$:
                                    133 ;	../atoi.c: 50: return (neg ? -ret : ret); // Since -INT_MIN is INT_MIN in sdcc, the result value always turns out ok.
      00007B 0D 01            [ 1]  134 	tnz	(0x01, sp)
      00007D 27 05            [ 1]  135 	jreq	00120$
      00007F 1E 02            [ 2]  136 	ldw	x, (0x02, sp)
      000081 50               [ 2]  137 	negw	x
      000082 20 02            [ 2]  138 	jra	00121$
      000084                        139 00120$:
      000084 1E 02            [ 2]  140 	ldw	x, (0x02, sp)
      000086                        141 00121$:
      000086 5B 0A            [ 2]  142 	addw	sp, #10
      000088 81               [ 4]  143 	ret
                                    144 	.area CODE
                                    145 	.area INITIALIZER
                                    146 	.area CABS (ABS)
