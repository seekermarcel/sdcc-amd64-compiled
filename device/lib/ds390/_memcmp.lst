                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:27 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _memcmp
                                      7 	.optsdcc -mds390 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _memcmp_PARM_3
                                     35 	.globl _memcmp_PARM_2
                                     36 	.globl _memcmp
                                     37 ;--------------------------------------------------------
                                     38 ; special function registers
                                     39 ;--------------------------------------------------------
                                     40 ;--------------------------------------------------------
                                     41 ; special function bits
                                     42 ;--------------------------------------------------------
                                     43 ;--------------------------------------------------------
                                     44 ; overlayable register banks
                                     45 ;--------------------------------------------------------
                                     46 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         47 	.ds 8
                                     48 ;--------------------------------------------------------
                                     49 ; internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area DSEG    (DATA)
                                     52 ;--------------------------------------------------------
                                     53 ; overlayable items in internal ram 
                                     54 ;--------------------------------------------------------
                                     55 ;--------------------------------------------------------
                                     56 ; indirectly addressable internal ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area ISEG    (DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; absolute internal ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area IABS    (ABS,DATA)
                                     63 	.area IABS    (ABS,DATA)
                                     64 ;--------------------------------------------------------
                                     65 ; bit data
                                     66 ;--------------------------------------------------------
                                     67 	.area BSEG    (BIT)
                                     68 ;--------------------------------------------------------
                                     69 ; paged external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area PSEG    (PAG,XDATA)
                                     72 ;--------------------------------------------------------
                                     73 ; external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area XSEG    (XDATA)
      000000                         76 _memcmp_PARM_2:
      000000                         77 	.ds 4
      000004                         78 _memcmp_PARM_3:
      000004                         79 	.ds 2
      000006                         80 _memcmp_sloc0_1_0:
      000006                         81 	.ds 4
                                     82 ;--------------------------------------------------------
                                     83 ; absolute external ram data
                                     84 ;--------------------------------------------------------
                                     85 	.area XABS    (ABS,XDATA)
                                     86 ;--------------------------------------------------------
                                     87 ; external initialized ram data
                                     88 ;--------------------------------------------------------
                                     89 	.area XISEG   (XDATA)
                                     90 ;--------------------------------------------------------
                                     91 ; global & static initialisations
                                     92 ;--------------------------------------------------------
                                     93 	.area HOME    (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 	.area GSFINAL (CODE)
                                     96 	.area GSINIT  (CODE)
                                     97 ;--------------------------------------------------------
                                     98 ; Home
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME    (CODE)
                                    101 	.area HOME    (CODE)
                                    102 ;--------------------------------------------------------
                                    103 ; code
                                    104 ;--------------------------------------------------------
                                    105 	.area CSEG    (CODE)
                                    106 ;------------------------------------------------------------
                                    107 ;Allocation info for local variables in function 'memcmp'
                                    108 ;------------------------------------------------------------
                                    109 ;buf2                      Allocated with name '_memcmp_PARM_2'
                                    110 ;count                     Allocated with name '_memcmp_PARM_3'
                                    111 ;buf1                      Allocated to registers r2 r3 r4 r5 
                                    112 ;sloc0                     Allocated with name '_memcmp_sloc0_1_0'
                                    113 ;------------------------------------------------------------
                                    114 ;	_memcmp.c:31: int memcmp (const void * buf1, const void * buf2, size_t count)
                                    115 ;	-----------------------------------------
                                    116 ;	 function memcmp
                                    117 ;	-----------------------------------------
      000000                        118 _memcmp:
                           000002   119 	ar2 = 0x02
                           000003   120 	ar3 = 0x03
                           000004   121 	ar4 = 0x04
                           000005   122 	ar5 = 0x05
                           000006   123 	ar6 = 0x06
                           000007   124 	ar7 = 0x07
                           000000   125 	ar0 = 0x00
                           000001   126 	ar1 = 0x01
      000000 AA 82            [ 8]  127 	mov	r2,dpl
      000002 AB 83            [ 8]  128 	mov	r3,dph
      000004 AC 93            [ 8]  129 	mov	r4,dpx
      000006 AD F0            [ 8]  130 	mov	r5,b
                                    131 ;	_memcmp.c:33: if (!count)
      000008 90s00r00r04      [12]  132 	mov	dptr,#_memcmp_PARM_3
      00000C E0               [ 8]  133 	movx	a,@dptr
      00000D F5 F0            [ 8]  134 	mov	b,a
      00000F A3               [12]  135 	inc	dptr
      000010 E0               [ 8]  136 	movx	a,@dptr
      000011 45 F0            [ 8]  137 	orl	a,b
      000013 70 08            [12]  138 	jnz  00112$
      000015                        139 00122$:
                                    140 ;	_memcmp.c:34: return(0);
      000015 90 00 00 00      [12]  141 	mov  dptr,#0x0000
      000019 02s00r01r15      [16]  142 	ljmp	00107$
                                    143 ;	_memcmp.c:36: while ( --count && *((char *)buf1) == *((char *)buf2) ) {
      00001D                        144 00112$:
      00001D 90s00r00r04      [12]  145 	mov	dptr,#_memcmp_PARM_3
                                    146 ;	genAssign: resultIsFar = FALSE
      000021 E0               [ 8]  147 	movx	a,@dptr
      000022 FE               [ 4]  148 	mov	r6,a
      000023 A3               [12]  149 	inc	dptr
      000024 E0               [ 8]  150 	movx	a,@dptr
      000025 FF               [ 4]  151 	mov	r7,a
      000026                        152 00104$:
      000026 1E               [ 4]  153 	dec	r6
      000027 BE FF 01         [16]  154 	cjne	r6,#0xFF,00123$
      00002A 1F               [ 4]  155 	dec	r7
      00002B                        156 00123$:
      00002B EE               [ 4]  157 	mov	a,r6
      00002C 4F               [ 4]  158 	orl	a,r7
      00002D 70 04            [12]  159 	jnz	00124$
      00002F 02s00r00rDF      [16]  160 	ljmp	00106$
      000033                        161 00124$:
      000033 C0 06            [ 8]  162 	push	ar6
      000035 C0 07            [ 8]  163 	push	ar7
                                    164 ;	genAssign: resultIsFar = FALSE
      000037 8A 00            [ 8]  165 	mov	ar0,r2
      000039 8B 01            [ 8]  166 	mov	ar1,r3
      00003B 8C 06            [ 8]  167 	mov	ar6,r4
      00003D 8D 07            [ 8]  168 	mov	ar7,r5
      00003F 88 82            [ 8]  169 	mov	dpl,r0
      000041 89 83            [ 8]  170 	mov	dph,r1
      000043 8E 93            [ 8]  171 	mov	dpx,r6
      000045 8F F0            [ 8]  172 	mov	b,r7
      000047 12s00r00r00      [16]  173 	lcall	__gptrget
      00004B FE               [ 4]  174 	mov	r6,a
      00004C 90s00r00r00      [12]  175 	mov	dptr,#_memcmp_PARM_2
                                    176 ;	genAssign: resultIsFar = TRUE
      000050 75 86 21         [12]  177 	mov	dps,#0x21
      000053 90s00r00r06      [12]  178 	mov	dptr,#_memcmp_sloc0_1_0
      000057 E0               [ 8]  179 	movx	a,@dptr
      000058 F0               [ 8]  180 	movx	@dptr,a
      000059 A3               [12]  181 	inc	dptr
      00005A A3               [12]  182 	inc	dptr
      00005B E0               [ 8]  183 	movx	a,@dptr
      00005C F0               [ 8]  184 	movx	@dptr,a
      00005D A3               [12]  185 	inc	dptr
      00005E A3               [12]  186 	inc	dptr
      00005F E0               [ 8]  187 	movx	a,@dptr
      000060 F0               [ 8]  188 	movx	@dptr,a
      000061 A3               [12]  189 	inc	dptr
      000062 A3               [12]  190 	inc	dptr
      000063 E0               [ 8]  191 	movx	a,@dptr
      000064 F0               [ 8]  192 	movx	@dptr,a
      000065 75 86 01         [12]  193 	mov     dps, #1
      000068 90s00r00r06      [12]  194 	mov     dptr, #_memcmp_sloc0_1_0
      00006C E0               [ 8]  195 	movx	a,@dptr
      00006D F5 82            [ 8]  196 	mov	dpl,a
      00006F A3               [12]  197 	inc	dptr
      000070 E0               [ 8]  198 	movx	a,@dptr
      000071 F5 83            [ 8]  199 	mov	dph,a
      000073 A3               [12]  200 	inc	dptr
      000074 E0               [ 8]  201 	movx	a,@dptr
      000075 F5 93            [ 8]  202 	mov	dpx,a
      000077 A3               [12]  203 	inc	dptr
      000078 E0               [ 8]  204 	movx	a,@dptr
      000079 F5 F0            [ 8]  205 	mov	b,a
      00007B 75 86 00         [12]  206 	mov	dps,#0
      00007E 12s00r00r00      [16]  207 	lcall	__gptrget
      000082 FF               [ 4]  208 	mov	r7,a
      000083 EE               [ 4]  209 	mov	a,r6
      000084 B5 07 02         [16]  210 	cjne	a,ar7,00125$
      000087 80 06            [12]  211 	sjmp	00126$
      000089                        212 00125$:
      000089 D0 07            [ 8]  213 	pop	ar7
      00008B D0 06            [ 8]  214 	pop	ar6
      00008D 80 50            [12]  215 	sjmp 00106$
      00008F                        216 00126$:
      00008F D0 07            [ 8]  217 	pop	ar7
      000091 D0 06            [ 8]  218 	pop	ar6
                                    219 ;	_memcmp.c:37: buf1 = (char *)buf1 + 1;
      000093 C0 06            [ 8]  220 	push	ar6
      000095 C0 07            [ 8]  221 	push	ar7
                                    222 ;	genAssign: resultIsFar = FALSE
      000097 8A 00            [ 8]  223 	mov	ar0,r2
      000099 8B 01            [ 8]  224 	mov	ar1,r3
      00009B 8C 06            [ 8]  225 	mov	ar6,r4
      00009D 8D 07            [ 8]  226 	mov	ar7,r5
      00009F 08               [ 4]  227 	inc	r0
      0000A0 B8 00 05         [16]  228 	cjne	r0,#0x00,00127$
      0000A3 09               [ 4]  229 	inc	r1
      0000A4 B9 00 01         [16]  230 	cjne	r1,#0x00,00127$
      0000A7 0E               [ 4]  231 	inc	r6
      0000A8                        232 00127$:
      0000A8 88 02            [ 8]  233 	mov	ar2,r0
      0000AA 89 03            [ 8]  234 	mov	ar3,r1
      0000AC 8E 04            [ 8]  235 	mov	ar4,r6
      0000AE 8F 05            [ 8]  236 	mov	ar5,r7
                                    237 ;	_memcmp.c:38: buf2 = (char *)buf2 + 1;
      0000B0 90s00r00r06      [12]  238 	mov	dptr,#_memcmp_sloc0_1_0
                                    239 ;	genAssign: resultIsFar = FALSE
      0000B4 E0               [ 8]  240 	movx	a,@dptr
      0000B5 FE               [ 4]  241 	mov	r6,a
      0000B6 A3               [12]  242 	inc	dptr
      0000B7 E0               [ 8]  243 	movx	a,@dptr
      0000B8 FF               [ 4]  244 	mov	r7,a
      0000B9 A3               [12]  245 	inc	dptr
      0000BA E0               [ 8]  246 	movx	a,@dptr
      0000BB F8               [ 4]  247 	mov	r0,a
      0000BC A3               [12]  248 	inc	dptr
      0000BD E0               [ 8]  249 	movx	a,@dptr
      0000BE F9               [ 4]  250 	mov	r1,a
      0000BF 0E               [ 4]  251 	inc	r6
      0000C0 BE 00 05         [16]  252 	cjne	r6,#0x00,00128$
      0000C3 0F               [ 4]  253 	inc	r7
      0000C4 BF 00 01         [16]  254 	cjne	r7,#0x00,00128$
      0000C7 08               [ 4]  255 	inc	r0
      0000C8                        256 00128$:
      0000C8 90s00r00r00      [12]  257 	mov	dptr,#_memcmp_PARM_2
      0000CC EE               [ 4]  258 	mov	a,r6
      0000CD F0               [ 8]  259 	movx	@dptr,a
      0000CE A3               [12]  260 	inc	dptr
      0000CF EF               [ 4]  261 	mov	a,r7
      0000D0 F0               [ 8]  262 	movx	@dptr,a
      0000D1 A3               [12]  263 	inc	dptr
      0000D2 E8               [ 4]  264 	mov	a,r0
      0000D3 F0               [ 8]  265 	movx	@dptr,a
      0000D4 A3               [12]  266 	inc	dptr
      0000D5 E9               [ 4]  267 	mov	a,r1
      0000D6 F0               [ 8]  268 	movx	@dptr,a
      0000D7 D0 07            [ 8]  269 	pop	ar7
      0000D9 D0 06            [ 8]  270 	pop	ar6
      0000DB 02s00r00r26      [16]  271 	ljmp	00104$
      0000DF                        272 00106$:
                                    273 ;	_memcmp.c:41: return( *((unsigned char *)buf1) - *((unsigned char *)buf2) );
                                    274 ;	genAssign: resultIsFar = FALSE
      0000DF 8A 82            [ 8]  275 	mov	dpl,r2
      0000E1 8B 83            [ 8]  276 	mov	dph,r3
      0000E3 8C 93            [ 8]  277 	mov	dpx,r4
      0000E5 8D F0            [ 8]  278 	mov	b,r5
      0000E7 12s00r00r00      [16]  279 	lcall	__gptrget
      0000EB FA               [ 4]  280 	mov	r2,a
      0000EC 7B 00            [ 8]  281 	mov	r3,#0x00
      0000EE 90s00r00r00      [12]  282 	mov	dptr,#_memcmp_PARM_2
                                    283 ;	genAssign: resultIsFar = FALSE
      0000F2 E0               [ 8]  284 	movx	a,@dptr
      0000F3 FC               [ 4]  285 	mov	r4,a
      0000F4 A3               [12]  286 	inc	dptr
      0000F5 E0               [ 8]  287 	movx	a,@dptr
      0000F6 FD               [ 4]  288 	mov	r5,a
      0000F7 A3               [12]  289 	inc	dptr
      0000F8 E0               [ 8]  290 	movx	a,@dptr
      0000F9 FE               [ 4]  291 	mov	r6,a
      0000FA A3               [12]  292 	inc	dptr
      0000FB E0               [ 8]  293 	movx	a,@dptr
      0000FC FF               [ 4]  294 	mov	r7,a
      0000FD 8C 82            [ 8]  295 	mov	dpl,r4
      0000FF 8D 83            [ 8]  296 	mov	dph,r5
      000101 8E 93            [ 8]  297 	mov	dpx,r6
      000103 8F F0            [ 8]  298 	mov	b,r7
      000105 12s00r00r00      [16]  299 	lcall	__gptrget
      000109 FC               [ 4]  300 	mov	r4,a
      00010A 7D 00            [ 8]  301 	mov	r5,#0x00
      00010C C3               [ 4]  302 	clr	c
      00010D EA               [ 4]  303 	mov	a,r2
      00010E 9C               [ 4]  304 	subb	a,r4
      00010F F5 82            [ 8]  305 	mov	dpl,a
      000111 EB               [ 4]  306 	mov	a,r3
      000112 9D               [ 4]  307 	subb	a,r5
      000113 F5 83            [ 8]  308 	mov	dph,a
      000115                        309 00107$:
      000115 22               [16]  310 	ret
                                    311 	.area CSEG    (CODE)
                                    312 	.area CONST   (CODE)
                                    313 	.area XINIT   (CODE)
                                    314 	.area CABS    (ABS,CODE)
