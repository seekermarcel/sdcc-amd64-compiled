                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:41 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module time
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl ___day
                                     13 	.globl ___month
                                     14 	.globl _RtcRead
                                     15 	.globl _sprintf
                                     16 	.globl _time
                                     17 	.globl _asctime
                                     18 	.globl _ctime
                                     19 	.globl _localtime
                                     20 	.globl _gmtime
                                     21 	.globl _mktime
                                     22 ;--------------------------------------------------------
                                     23 ; special function registers
                                     24 ;--------------------------------------------------------
                                     25 	.area RSEG    (ABS,DATA)
      000000                         26 	.org 0x0000
                                     27 ;--------------------------------------------------------
                                     28 ; special function bits
                                     29 ;--------------------------------------------------------
                                     30 	.area RSEG    (ABS,DATA)
      000000                         31 	.org 0x0000
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable register banks
                                     34 ;--------------------------------------------------------
                                     35 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         36 	.ds 8
                                     37 ;--------------------------------------------------------
                                     38 ; internal ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area DSEG    (DATA)
      000000                         41 _time_now_1_24:
      000000                         42 	.ds 12
      00000C                         43 _ascTimeBuffer:
      00000C                         44 	.ds 32
      00002C                         45 _asctime_timeptr_1_29:
      00002C                         46 	.ds 3
      00002F                         47 _asctime_sloc0_1_0:
      00002F                         48 	.ds 2
      000031                         49 _asctime_sloc1_1_0:
      000031                         50 	.ds 2
      000033                         51 _asctime_sloc2_1_0:
      000033                         52 	.ds 2
      000035                         53 _asctime_sloc3_1_0:
      000035                         54 	.ds 2
      000037                         55 _lastTime:
      000037                         56 	.ds 12
      000043                         57 _gmtime_epoch_1_36:
      000043                         58 	.ds 4
      000047                         59 _gmtime_days_1_36:
      000047                         60 	.ds 4
      00004B                         61 _gmtime_sloc0_1_0:
      00004B                         62 	.ds 4
      00004F                         63 _mktime_timeptr_1_45:
      00004F                         64 	.ds 3
      000052                         65 _mktime_year_1_46:
      000052                         66 	.ds 2
      000054                         67 _mktime_month_1_46:
      000054                         68 	.ds 2
      000056                         69 _mktime_i_1_46:
      000056                         70 	.ds 2
      000058                         71 _mktime_seconds_1_46:
      000058                         72 	.ds 4
      00005C                         73 _mktime_sloc0_1_0:
      00005C                         74 	.ds 4
                                     75 ;--------------------------------------------------------
                                     76 ; overlayable items in internal ram 
                                     77 ;--------------------------------------------------------
                                     78 	.area	OSEG    (OVR,DATA)
                                     79 	.area	OSEG    (OVR,DATA)
                                     80 ;--------------------------------------------------------
                                     81 ; indirectly addressable internal ram data
                                     82 ;--------------------------------------------------------
                                     83 	.area ISEG    (DATA)
                                     84 ;--------------------------------------------------------
                                     85 ; absolute internal ram data
                                     86 ;--------------------------------------------------------
                                     87 	.area IABS    (ABS,DATA)
                                     88 	.area IABS    (ABS,DATA)
                                     89 ;--------------------------------------------------------
                                     90 ; bit data
                                     91 ;--------------------------------------------------------
                                     92 	.area BSEG    (BIT)
                                     93 ;--------------------------------------------------------
                                     94 ; paged external ram data
                                     95 ;--------------------------------------------------------
                                     96 	.area PSEG    (PAG,XDATA)
                                     97 ;--------------------------------------------------------
                                     98 ; external ram data
                                     99 ;--------------------------------------------------------
                                    100 	.area XSEG    (XDATA)
                                    101 ;--------------------------------------------------------
                                    102 ; absolute external ram data
                                    103 ;--------------------------------------------------------
                                    104 	.area XABS    (ABS,XDATA)
                                    105 ;--------------------------------------------------------
                                    106 ; external initialized ram data
                                    107 ;--------------------------------------------------------
                                    108 	.area XISEG   (XDATA)
                                    109 	.area HOME    (CODE)
                                    110 	.area GSINIT0 (CODE)
                                    111 	.area GSINIT1 (CODE)
                                    112 	.area GSINIT2 (CODE)
                                    113 	.area GSINIT3 (CODE)
                                    114 	.area GSINIT4 (CODE)
                                    115 	.area GSINIT5 (CODE)
                                    116 	.area GSINIT  (CODE)
                                    117 	.area GSFINAL (CODE)
                                    118 	.area CSEG    (CODE)
                                    119 ;--------------------------------------------------------
                                    120 ; global & static initialisations
                                    121 ;--------------------------------------------------------
                                    122 	.area HOME    (CODE)
                                    123 	.area GSINIT  (CODE)
                                    124 	.area GSFINAL (CODE)
                                    125 	.area GSINIT  (CODE)
                                    126 ;--------------------------------------------------------
                                    127 ; Home
                                    128 ;--------------------------------------------------------
                                    129 	.area HOME    (CODE)
                                    130 	.area HOME    (CODE)
                                    131 ;--------------------------------------------------------
                                    132 ; code
                                    133 ;--------------------------------------------------------
                                    134 	.area CSEG    (CODE)
                                    135 ;------------------------------------------------------------
                                    136 ;Allocation info for local variables in function 'RtcRead'
                                    137 ;------------------------------------------------------------
                                    138 ;timeptr                   Allocated to registers 
                                    139 ;------------------------------------------------------------
                                    140 ;	time.c:42: unsigned char RtcRead(struct tm *timeptr) {
                                    141 ;	-----------------------------------------
                                    142 ;	 function RtcRead
                                    143 ;	-----------------------------------------
      000000                        144 _RtcRead:
                           000007   145 	ar7 = 0x07
                           000006   146 	ar6 = 0x06
                           000005   147 	ar5 = 0x05
                           000004   148 	ar4 = 0x04
                           000003   149 	ar3 = 0x03
                           000002   150 	ar2 = 0x02
                           000001   151 	ar1 = 0x01
                           000000   152 	ar0 = 0x00
                                    153 ;	time.c:45: return 0;
      000000 75 82 00         [24]  154 	mov	dpl,#0x00
      000003 22               [24]  155 	ret
                                    156 ;------------------------------------------------------------
                                    157 ;Allocation info for local variables in function 'time'
                                    158 ;------------------------------------------------------------
                                    159 ;timeptr                   Allocated to registers r5 r6 r7 
                                    160 ;now                       Allocated with name '_time_now_1_24'
                                    161 ;t                         Allocated to registers r1 r2 r3 r4 
                                    162 ;------------------------------------------------------------
                                    163 ;	time.c:50: time_t time(time_t *timeptr) {
                                    164 ;	-----------------------------------------
                                    165 ;	 function time
                                    166 ;	-----------------------------------------
      000004                        167 _time:
      000004 AD 82            [24]  168 	mov	r5,dpl
      000006 AE 83            [24]  169 	mov	r6,dph
      000008 AF F0            [24]  170 	mov	r7,b
                                    171 ;	time.c:52: time_t t=(time_t) -1;
      00000A 79 FF            [12]  172 	mov	r1,#0xFF
      00000C 7A FF            [12]  173 	mov	r2,#0xFF
      00000E 7B FF            [12]  174 	mov	r3,#0xFF
      000010 7C FF            [12]  175 	mov	r4,#0xFF
                                    176 ;	time.c:54: if (RtcRead(&now)) {
      000012 90r00r00         [24]  177 	mov	dptr,#_time_now_1_24
      000015 75 F0 40         [24]  178 	mov	b,#0x40
      000018 C0 07            [24]  179 	push	ar7
      00001A C0 06            [24]  180 	push	ar6
      00001C C0 05            [24]  181 	push	ar5
      00001E C0 04            [24]  182 	push	ar4
      000020 C0 03            [24]  183 	push	ar3
      000022 C0 02            [24]  184 	push	ar2
      000024 C0 01            [24]  185 	push	ar1
      000026 12r00r00         [24]  186 	lcall	_RtcRead
      000029 E5 82            [12]  187 	mov	a,dpl
      00002B D0 01            [24]  188 	pop	ar1
      00002D D0 02            [24]  189 	pop	ar2
      00002F D0 03            [24]  190 	pop	ar3
      000031 D0 04            [24]  191 	pop	ar4
      000033 D0 05            [24]  192 	pop	ar5
      000035 D0 06            [24]  193 	pop	ar6
      000037 D0 07            [24]  194 	pop	ar7
      000039 60 1C            [24]  195 	jz	00102$
                                    196 ;	time.c:55: t=mktime(&now);
      00003B 90r00r00         [24]  197 	mov	dptr,#_time_now_1_24
      00003E 75 F0 40         [24]  198 	mov	b,#0x40
      000041 C0 07            [24]  199 	push	ar7
      000043 C0 06            [24]  200 	push	ar6
      000045 C0 05            [24]  201 	push	ar5
      000047 12r04rC4         [24]  202 	lcall	_mktime
      00004A A9 82            [24]  203 	mov	r1,dpl
      00004C AA 83            [24]  204 	mov	r2,dph
      00004E AB F0            [24]  205 	mov	r3,b
      000050 FC               [12]  206 	mov	r4,a
      000051 D0 05            [24]  207 	pop	ar5
      000053 D0 06            [24]  208 	pop	ar6
      000055 D0 07            [24]  209 	pop	ar7
      000057                        210 00102$:
                                    211 ;	time.c:57: if (timeptr) {
      000057 ED               [12]  212 	mov	a,r5
      000058 4E               [12]  213 	orl	a,r6
      000059 60 19            [24]  214 	jz	00104$
                                    215 ;	time.c:58: *timeptr=t;
      00005B 8D 82            [24]  216 	mov	dpl,r5
      00005D 8E 83            [24]  217 	mov	dph,r6
      00005F 8F F0            [24]  218 	mov	b,r7
      000061 E9               [12]  219 	mov	a,r1
      000062 12r00r00         [24]  220 	lcall	__gptrput
      000065 A3               [24]  221 	inc	dptr
      000066 EA               [12]  222 	mov	a,r2
      000067 12r00r00         [24]  223 	lcall	__gptrput
      00006A A3               [24]  224 	inc	dptr
      00006B EB               [12]  225 	mov	a,r3
      00006C 12r00r00         [24]  226 	lcall	__gptrput
      00006F A3               [24]  227 	inc	dptr
      000070 EC               [12]  228 	mov	a,r4
      000071 12r00r00         [24]  229 	lcall	__gptrput
      000074                        230 00104$:
                                    231 ;	time.c:60: return t;
      000074 89 82            [24]  232 	mov	dpl,r1
      000076 8A 83            [24]  233 	mov	dph,r2
      000078 8B F0            [24]  234 	mov	b,r3
      00007A EC               [12]  235 	mov	a,r4
      00007B 22               [24]  236 	ret
                                    237 ;------------------------------------------------------------
                                    238 ;Allocation info for local variables in function 'CheckTime'
                                    239 ;------------------------------------------------------------
                                    240 ;timeptr                   Allocated to registers r5 r6 r7 
                                    241 ;------------------------------------------------------------
                                    242 ;	time.c:73: static void CheckTime(struct tm *timeptr) {
                                    243 ;	-----------------------------------------
                                    244 ;	 function CheckTime
                                    245 ;	-----------------------------------------
      00007C                        246 _CheckTime:
                                    247 ;	time.c:84: if (timeptr->tm_sec>59) timeptr->tm_sec=59;
      00007C AD 82            [24]  248 	mov	r5,dpl
      00007E AE 83            [24]  249 	mov	r6,dph
      000080 AF F0            [24]  250 	mov	r7,b
      000082 12r00r00         [24]  251 	lcall	__gptrget
      000085 FC               [12]  252 	mov  r4,a
      000086 24 C4            [12]  253 	add	a,#0xff - 0x3B
      000088 50 0B            [24]  254 	jnc	00102$
      00008A 8D 82            [24]  255 	mov	dpl,r5
      00008C 8E 83            [24]  256 	mov	dph,r6
      00008E 8F F0            [24]  257 	mov	b,r7
      000090 74 3B            [12]  258 	mov	a,#0x3B
      000092 12r00r00         [24]  259 	lcall	__gptrput
      000095                        260 00102$:
                                    261 ;	time.c:85: if (timeptr->tm_min>59) timeptr->tm_min=59;
      000095 74 01            [12]  262 	mov	a,#0x01
      000097 2D               [12]  263 	add	a,r5
      000098 FA               [12]  264 	mov	r2,a
      000099 E4               [12]  265 	clr	a
      00009A 3E               [12]  266 	addc	a,r6
      00009B FB               [12]  267 	mov	r3,a
      00009C 8F 04            [24]  268 	mov	ar4,r7
      00009E 8A 82            [24]  269 	mov	dpl,r2
      0000A0 8B 83            [24]  270 	mov	dph,r3
      0000A2 8C F0            [24]  271 	mov	b,r4
      0000A4 12r00r00         [24]  272 	lcall	__gptrget
      0000A7 F9               [12]  273 	mov  r1,a
      0000A8 24 C4            [12]  274 	add	a,#0xff - 0x3B
      0000AA 50 0B            [24]  275 	jnc	00104$
      0000AC 8A 82            [24]  276 	mov	dpl,r2
      0000AE 8B 83            [24]  277 	mov	dph,r3
      0000B0 8C F0            [24]  278 	mov	b,r4
      0000B2 74 3B            [12]  279 	mov	a,#0x3B
      0000B4 12r00r00         [24]  280 	lcall	__gptrput
      0000B7                        281 00104$:
                                    282 ;	time.c:86: if (timeptr->tm_hour>23) timeptr->tm_hour=23;
      0000B7 74 02            [12]  283 	mov	a,#0x02
      0000B9 2D               [12]  284 	add	a,r5
      0000BA FA               [12]  285 	mov	r2,a
      0000BB E4               [12]  286 	clr	a
      0000BC 3E               [12]  287 	addc	a,r6
      0000BD FB               [12]  288 	mov	r3,a
      0000BE 8F 04            [24]  289 	mov	ar4,r7
      0000C0 8A 82            [24]  290 	mov	dpl,r2
      0000C2 8B 83            [24]  291 	mov	dph,r3
      0000C4 8C F0            [24]  292 	mov	b,r4
      0000C6 12r00r00         [24]  293 	lcall	__gptrget
      0000C9 F9               [12]  294 	mov  r1,a
      0000CA 24 E8            [12]  295 	add	a,#0xff - 0x17
      0000CC 50 0B            [24]  296 	jnc	00106$
      0000CE 8A 82            [24]  297 	mov	dpl,r2
      0000D0 8B 83            [24]  298 	mov	dph,r3
      0000D2 8C F0            [24]  299 	mov	b,r4
      0000D4 74 17            [12]  300 	mov	a,#0x17
      0000D6 12r00r00         [24]  301 	lcall	__gptrput
      0000D9                        302 00106$:
                                    303 ;	time.c:87: if (timeptr->tm_wday>6) timeptr->tm_wday=6;
      0000D9 74 07            [12]  304 	mov	a,#0x07
      0000DB 2D               [12]  305 	add	a,r5
      0000DC FA               [12]  306 	mov	r2,a
      0000DD E4               [12]  307 	clr	a
      0000DE 3E               [12]  308 	addc	a,r6
      0000DF FB               [12]  309 	mov	r3,a
      0000E0 8F 04            [24]  310 	mov	ar4,r7
      0000E2 8A 82            [24]  311 	mov	dpl,r2
      0000E4 8B 83            [24]  312 	mov	dph,r3
      0000E6 8C F0            [24]  313 	mov	b,r4
      0000E8 12r00r00         [24]  314 	lcall	__gptrget
      0000EB F9               [12]  315 	mov  r1,a
      0000EC 24 F9            [12]  316 	add	a,#0xff - 0x06
      0000EE 50 0B            [24]  317 	jnc	00108$
      0000F0 8A 82            [24]  318 	mov	dpl,r2
      0000F2 8B 83            [24]  319 	mov	dph,r3
      0000F4 8C F0            [24]  320 	mov	b,r4
      0000F6 74 06            [12]  321 	mov	a,#0x06
      0000F8 12r00r00         [24]  322 	lcall	__gptrput
      0000FB                        323 00108$:
                                    324 ;	time.c:88: if (timeptr->tm_mday<1) timeptr->tm_mday=1;
      0000FB 74 03            [12]  325 	mov	a,#0x03
      0000FD 2D               [12]  326 	add	a,r5
      0000FE FA               [12]  327 	mov	r2,a
      0000FF E4               [12]  328 	clr	a
      000100 3E               [12]  329 	addc	a,r6
      000101 FB               [12]  330 	mov	r3,a
      000102 8F 04            [24]  331 	mov	ar4,r7
      000104 8A 82            [24]  332 	mov	dpl,r2
      000106 8B 83            [24]  333 	mov	dph,r3
      000108 8C F0            [24]  334 	mov	b,r4
      00010A 12r00r00         [24]  335 	lcall	__gptrget
      00010D F9               [12]  336 	mov	r1,a
      00010E B9 01 00         [24]  337 	cjne	r1,#0x01,00148$
      000111                        338 00148$:
      000111 50 0D            [24]  339 	jnc	00112$
      000113 8A 82            [24]  340 	mov	dpl,r2
      000115 8B 83            [24]  341 	mov	dph,r3
      000117 8C F0            [24]  342 	mov	b,r4
      000119 74 01            [12]  343 	mov	a,#0x01
      00011B 12r00r00         [24]  344 	lcall	__gptrput
      00011E 80 10            [24]  345 	sjmp	00113$
      000120                        346 00112$:
                                    347 ;	time.c:89: else if (timeptr->tm_mday>31) timeptr->tm_mday=31;
      000120 E9               [12]  348 	mov	a,r1
      000121 24 E0            [12]  349 	add	a,#0xff - 0x1F
      000123 50 0B            [24]  350 	jnc	00113$
      000125 8A 82            [24]  351 	mov	dpl,r2
      000127 8B 83            [24]  352 	mov	dph,r3
      000129 8C F0            [24]  353 	mov	b,r4
      00012B 74 1F            [12]  354 	mov	a,#0x1F
      00012D 12r00r00         [24]  355 	lcall	__gptrput
      000130                        356 00113$:
                                    357 ;	time.c:90: if (timeptr->tm_mon>11) timeptr->tm_mon=11;
      000130 74 04            [12]  358 	mov	a,#0x04
      000132 2D               [12]  359 	add	a,r5
      000133 FA               [12]  360 	mov	r2,a
      000134 E4               [12]  361 	clr	a
      000135 3E               [12]  362 	addc	a,r6
      000136 FB               [12]  363 	mov	r3,a
      000137 8F 04            [24]  364 	mov	ar4,r7
      000139 8A 82            [24]  365 	mov	dpl,r2
      00013B 8B 83            [24]  366 	mov	dph,r3
      00013D 8C F0            [24]  367 	mov	b,r4
      00013F 12r00r00         [24]  368 	lcall	__gptrget
      000142 F9               [12]  369 	mov  r1,a
      000143 24 F4            [12]  370 	add	a,#0xff - 0x0B
      000145 50 0B            [24]  371 	jnc	00115$
      000147 8A 82            [24]  372 	mov	dpl,r2
      000149 8B 83            [24]  373 	mov	dph,r3
      00014B 8C F0            [24]  374 	mov	b,r4
      00014D 74 0B            [12]  375 	mov	a,#0x0B
      00014F 12r00r00         [24]  376 	lcall	__gptrput
      000152                        377 00115$:
                                    378 ;	time.c:91: if (timeptr->tm_year<0) timeptr->tm_year=0;
      000152 74 05            [12]  379 	mov	a,#0x05
      000154 2D               [12]  380 	add	a,r5
      000155 FD               [12]  381 	mov	r5,a
      000156 E4               [12]  382 	clr	a
      000157 3E               [12]  383 	addc	a,r6
      000158 FE               [12]  384 	mov	r6,a
      000159 8D 82            [24]  385 	mov	dpl,r5
      00015B 8E 83            [24]  386 	mov	dph,r6
      00015D 8F F0            [24]  387 	mov	b,r7
      00015F 12r00r00         [24]  388 	lcall	__gptrget
      000162 FB               [12]  389 	mov	r3,a
      000163 A3               [24]  390 	inc	dptr
      000164 12r00r00         [24]  391 	lcall	__gptrget
      000167 FC               [12]  392 	mov	r4,a
      000168 30 E7 0E         [24]  393 	jnb	acc.7,00118$
      00016B 8D 82            [24]  394 	mov	dpl,r5
      00016D 8E 83            [24]  395 	mov	dph,r6
      00016F 8F F0            [24]  396 	mov	b,r7
      000171 E4               [12]  397 	clr	a
      000172 12r00r00         [24]  398 	lcall	__gptrput
      000175 A3               [24]  399 	inc	dptr
      000176 02r00r00         [24]  400 	ljmp	__gptrput
      000179                        401 00118$:
      000179 22               [24]  402 	ret
                                    403 ;------------------------------------------------------------
                                    404 ;Allocation info for local variables in function 'asctime'
                                    405 ;------------------------------------------------------------
                                    406 ;timeptr                   Allocated with name '_asctime_timeptr_1_29'
                                    407 ;sloc0                     Allocated with name '_asctime_sloc0_1_0'
                                    408 ;sloc1                     Allocated with name '_asctime_sloc1_1_0'
                                    409 ;sloc2                     Allocated with name '_asctime_sloc2_1_0'
                                    410 ;sloc3                     Allocated with name '_asctime_sloc3_1_0'
                                    411 ;------------------------------------------------------------
                                    412 ;	time.c:95: char *asctime(struct tm *timeptr) {
                                    413 ;	-----------------------------------------
                                    414 ;	 function asctime
                                    415 ;	-----------------------------------------
      00017A                        416 _asctime:
                                    417 ;	time.c:96: CheckTime(timeptr);
      00017A 85 82*2C         [24]  418 	mov	_asctime_timeptr_1_29,dpl
      00017D 85 83*2D         [24]  419 	mov	(_asctime_timeptr_1_29 + 1),dph
      000180 85 F0*2E         [24]  420 	mov	(_asctime_timeptr_1_29 + 2),b
      000183 12r00r7C         [24]  421 	lcall	_CheckTime
                                    422 ;	time.c:100: timeptr->tm_year+1900);
      000186 74 05            [12]  423 	mov	a,#0x05
      000188 25*2C            [12]  424 	add	a,_asctime_timeptr_1_29
      00018A FA               [12]  425 	mov	r2,a
      00018B E4               [12]  426 	clr	a
      00018C 35*2D            [12]  427 	addc	a,(_asctime_timeptr_1_29 + 1)
      00018E FB               [12]  428 	mov	r3,a
      00018F AC*2E            [24]  429 	mov	r4,(_asctime_timeptr_1_29 + 2)
      000191 8A 82            [24]  430 	mov	dpl,r2
      000193 8B 83            [24]  431 	mov	dph,r3
      000195 8C F0            [24]  432 	mov	b,r4
      000197 12r00r00         [24]  433 	lcall	__gptrget
      00019A FA               [12]  434 	mov	r2,a
      00019B A3               [24]  435 	inc	dptr
      00019C 12r00r00         [24]  436 	lcall	__gptrget
      00019F FB               [12]  437 	mov	r3,a
      0001A0 74 6C            [12]  438 	mov	a,#0x6C
      0001A2 2A               [12]  439 	add	a,r2
      0001A3 FA               [12]  440 	mov	r2,a
      0001A4 74 07            [12]  441 	mov	a,#0x07
      0001A6 3B               [12]  442 	addc	a,r3
      0001A7 FB               [12]  443 	mov	r3,a
                                    444 ;	time.c:99: timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec, 
      0001A8 85*2C 82         [24]  445 	mov	dpl,_asctime_timeptr_1_29
      0001AB 85*2D 83         [24]  446 	mov	dph,(_asctime_timeptr_1_29 + 1)
      0001AE 85*2E F0         [24]  447 	mov	b,(_asctime_timeptr_1_29 + 2)
      0001B1 12r00r00         [24]  448 	lcall	__gptrget
      0001B4 FC               [12]  449 	mov	r4,a
      0001B5 8C*35            [24]  450 	mov	_asctime_sloc3_1_0,r4
      0001B7 75*36 00         [24]  451 	mov	(_asctime_sloc3_1_0 + 1),#0x00
      0001BA 74 01            [12]  452 	mov	a,#0x01
      0001BC 25*2C            [12]  453 	add	a,_asctime_timeptr_1_29
      0001BE F8               [12]  454 	mov	r0,a
      0001BF E4               [12]  455 	clr	a
      0001C0 35*2D            [12]  456 	addc	a,(_asctime_timeptr_1_29 + 1)
      0001C2 FE               [12]  457 	mov	r6,a
      0001C3 AF*2E            [24]  458 	mov	r7,(_asctime_timeptr_1_29 + 2)
      0001C5 88 82            [24]  459 	mov	dpl,r0
      0001C7 8E 83            [24]  460 	mov	dph,r6
      0001C9 8F F0            [24]  461 	mov	b,r7
      0001CB 12r00r00         [24]  462 	lcall	__gptrget
      0001CE F8               [12]  463 	mov	r0,a
      0001CF 88*2F            [24]  464 	mov	_asctime_sloc0_1_0,r0
      0001D1 75*30 00         [24]  465 	mov	(_asctime_sloc0_1_0 + 1),#0x00
      0001D4 74 02            [12]  466 	mov	a,#0x02
      0001D6 25*2C            [12]  467 	add	a,_asctime_timeptr_1_29
      0001D8 FD               [12]  468 	mov	r5,a
      0001D9 E4               [12]  469 	clr	a
      0001DA 35*2D            [12]  470 	addc	a,(_asctime_timeptr_1_29 + 1)
      0001DC FE               [12]  471 	mov	r6,a
      0001DD AF*2E            [24]  472 	mov	r7,(_asctime_timeptr_1_29 + 2)
      0001DF 8D 82            [24]  473 	mov	dpl,r5
      0001E1 8E 83            [24]  474 	mov	dph,r6
      0001E3 8F F0            [24]  475 	mov	b,r7
      0001E5 12r00r00         [24]  476 	lcall	__gptrget
      0001E8 FD               [12]  477 	mov	r5,a
      0001E9 8D*31            [24]  478 	mov	_asctime_sloc1_1_0,r5
      0001EB 75*32 00         [24]  479 	mov	(_asctime_sloc1_1_0 + 1),#0x00
                                    480 ;	time.c:98: __day[timeptr->tm_wday], __month[timeptr->tm_mon], timeptr->tm_mday,
      0001EE 74 03            [12]  481 	mov	a,#0x03
      0001F0 25*2C            [12]  482 	add	a,_asctime_timeptr_1_29
      0001F2 F8               [12]  483 	mov	r0,a
      0001F3 E4               [12]  484 	clr	a
      0001F4 35*2D            [12]  485 	addc	a,(_asctime_timeptr_1_29 + 1)
      0001F6 FE               [12]  486 	mov	r6,a
      0001F7 AF*2E            [24]  487 	mov	r7,(_asctime_timeptr_1_29 + 2)
      0001F9 88 82            [24]  488 	mov	dpl,r0
      0001FB 8E 83            [24]  489 	mov	dph,r6
      0001FD 8F F0            [24]  490 	mov	b,r7
      0001FF 12r00r00         [24]  491 	lcall	__gptrget
      000202 F8               [12]  492 	mov	r0,a
      000203 88*33            [24]  493 	mov	_asctime_sloc2_1_0,r0
      000205 75*34 00         [24]  494 	mov	(_asctime_sloc2_1_0 + 1),#0x00
      000208 74 04            [12]  495 	mov	a,#0x04
      00020A 25*2C            [12]  496 	add	a,_asctime_timeptr_1_29
      00020C FD               [12]  497 	mov	r5,a
      00020D E4               [12]  498 	clr	a
      00020E 35*2D            [12]  499 	addc	a,(_asctime_timeptr_1_29 + 1)
      000210 FE               [12]  500 	mov	r6,a
      000211 AF*2E            [24]  501 	mov	r7,(_asctime_timeptr_1_29 + 2)
      000213 8D 82            [24]  502 	mov	dpl,r5
      000215 8E 83            [24]  503 	mov	dph,r6
      000217 8F F0            [24]  504 	mov	b,r7
      000219 12r00r00         [24]  505 	lcall	__gptrget
      00021C 75 F0 02         [24]  506 	mov	b,#0x02
      00021F A4               [48]  507 	mul	ab
      000220 24r0C            [12]  508 	add	a,#___month
      000222 F5 82            [12]  509 	mov	dpl,a
      000224 74s00            [12]  510 	mov	a,#(___month >> 8)
      000226 35 F0            [12]  511 	addc	a,b
      000228 F5 83            [12]  512 	mov	dph,a
      00022A E4               [12]  513 	clr	a
      00022B 93               [24]  514 	movc	a,@a+dptr
      00022C FE               [12]  515 	mov	r6,a
      00022D A3               [24]  516 	inc	dptr
      00022E E4               [12]  517 	clr	a
      00022F 93               [24]  518 	movc	a,@a+dptr
      000230 FF               [12]  519 	mov	r7,a
      000231 7D 80            [12]  520 	mov	r5,#0x80
      000233 74 07            [12]  521 	mov	a,#0x07
      000235 25*2C            [12]  522 	add	a,_asctime_timeptr_1_29
      000237 F8               [12]  523 	mov	r0,a
      000238 E4               [12]  524 	clr	a
      000239 35*2D            [12]  525 	addc	a,(_asctime_timeptr_1_29 + 1)
      00023B F9               [12]  526 	mov	r1,a
      00023C AC*2E            [24]  527 	mov	r4,(_asctime_timeptr_1_29 + 2)
      00023E 88 82            [24]  528 	mov	dpl,r0
      000240 89 83            [24]  529 	mov	dph,r1
      000242 8C F0            [24]  530 	mov	b,r4
      000244 12r00r00         [24]  531 	lcall	__gptrget
      000247 75 F0 02         [24]  532 	mov	b,#0x02
      00024A A4               [48]  533 	mul	ab
      00024B 24r24            [12]  534 	add	a,#___day
      00024D F5 82            [12]  535 	mov	dpl,a
      00024F 74s00            [12]  536 	mov	a,#(___day >> 8)
      000251 35 F0            [12]  537 	addc	a,b
      000253 F5 83            [12]  538 	mov	dph,a
      000255 E4               [12]  539 	clr	a
      000256 93               [24]  540 	movc	a,@a+dptr
      000257 F9               [12]  541 	mov	r1,a
      000258 A3               [24]  542 	inc	dptr
      000259 E4               [12]  543 	clr	a
      00025A 93               [24]  544 	movc	a,@a+dptr
      00025B F8               [12]  545 	mov	r0,a
      00025C 7C 80            [12]  546 	mov	r4,#0x80
                                    547 ;	time.c:97: sprintf (ascTimeBuffer, "%s %s %2d %02d:%02d:%02d %04d\n",
      00025E C0 02            [24]  548 	push	ar2
      000260 C0 03            [24]  549 	push	ar3
      000262 C0*35            [24]  550 	push	_asctime_sloc3_1_0
      000264 C0*36            [24]  551 	push	(_asctime_sloc3_1_0 + 1)
      000266 C0*2F            [24]  552 	push	_asctime_sloc0_1_0
      000268 C0*30            [24]  553 	push	(_asctime_sloc0_1_0 + 1)
      00026A C0*31            [24]  554 	push	_asctime_sloc1_1_0
      00026C C0*32            [24]  555 	push	(_asctime_sloc1_1_0 + 1)
      00026E C0*33            [24]  556 	push	_asctime_sloc2_1_0
      000270 C0*34            [24]  557 	push	(_asctime_sloc2_1_0 + 1)
      000272 C0 06            [24]  558 	push	ar6
      000274 C0 07            [24]  559 	push	ar7
      000276 C0 05            [24]  560 	push	ar5
      000278 C0 01            [24]  561 	push	ar1
      00027A C0 00            [24]  562 	push	ar0
      00027C C0 04            [24]  563 	push	ar4
      00027E 74r32            [12]  564 	mov	a,#___str_0
      000280 C0 E0            [24]  565 	push	acc
      000282 74s00            [12]  566 	mov	a,#(___str_0 >> 8)
      000284 C0 E0            [24]  567 	push	acc
      000286 ED               [12]  568 	mov	a,r5
      000287 C0 E0            [24]  569 	push	acc
      000289 74r0C            [12]  570 	mov	a,#_ascTimeBuffer
      00028B C0 E0            [24]  571 	push	acc
      00028D 74s00            [12]  572 	mov	a,#(_ascTimeBuffer >> 8)
      00028F C0 E0            [24]  573 	push	acc
      000291 74 40            [12]  574 	mov	a,#0x40
      000293 C0 E0            [24]  575 	push	acc
      000295 12r00r00         [24]  576 	lcall	_sprintf
      000298 E5 81            [12]  577 	mov	a,sp
      00029A 24 EA            [12]  578 	add	a,#0xea
      00029C F5 81            [12]  579 	mov	sp,a
                                    580 ;	time.c:101: return ascTimeBuffer;
      00029E 90r00r0C         [24]  581 	mov	dptr,#_ascTimeBuffer
      0002A1 75 F0 40         [24]  582 	mov	b,#0x40
      0002A4 22               [24]  583 	ret
                                    584 ;------------------------------------------------------------
                                    585 ;Allocation info for local variables in function 'ctime'
                                    586 ;------------------------------------------------------------
                                    587 ;timep                     Allocated to registers r5 r6 r7 
                                    588 ;------------------------------------------------------------
                                    589 ;	time.c:104: char *ctime(time_t *timep) {
                                    590 ;	-----------------------------------------
                                    591 ;	 function ctime
                                    592 ;	-----------------------------------------
      0002A5                        593 _ctime:
                                    594 ;	time.c:105: return asctime(localtime(timep));
      0002A5 12r02rAB         [24]  595 	lcall	_localtime
      0002A8 02r01r7A         [24]  596 	ljmp	_asctime
                                    597 ;------------------------------------------------------------
                                    598 ;Allocation info for local variables in function 'localtime'
                                    599 ;------------------------------------------------------------
                                    600 ;timep                     Allocated to registers r5 r6 r7 
                                    601 ;------------------------------------------------------------
                                    602 ;	time.c:121: struct tm *localtime(time_t *timep) {
                                    603 ;	-----------------------------------------
                                    604 ;	 function localtime
                                    605 ;	-----------------------------------------
      0002AB                        606 _localtime:
                                    607 ;	time.c:122: return gmtime(timep);
      0002AB 02r02rAE         [24]  608 	ljmp	_gmtime
                                    609 ;------------------------------------------------------------
                                    610 ;Allocation info for local variables in function 'gmtime'
                                    611 ;------------------------------------------------------------
                                    612 ;timep                     Allocated to registers r5 r6 r7 
                                    613 ;epoch                     Allocated with name '_gmtime_epoch_1_36'
                                    614 ;year                      Allocated to registers r2 r3 
                                    615 ;month                     Allocated to registers r5 
                                    616 ;monthLength               Allocated to registers r4 
                                    617 ;days                      Allocated with name '_gmtime_days_1_36'
                                    618 ;sloc0                     Allocated with name '_gmtime_sloc0_1_0'
                                    619 ;------------------------------------------------------------
                                    620 ;	time.c:125: struct tm *gmtime(time_t *timep) {
                                    621 ;	-----------------------------------------
                                    622 ;	 function gmtime
                                    623 ;	-----------------------------------------
      0002AE                        624 _gmtime:
                                    625 ;	time.c:126: unsigned long epoch=*timep;
      0002AE 12r00r00         [24]  626 	lcall	__gptrget
      0002B1 F5*43            [12]  627 	mov	_gmtime_epoch_1_36,a
      0002B3 A3               [24]  628 	inc	dptr
      0002B4 12r00r00         [24]  629 	lcall	__gptrget
      0002B7 F5*44            [12]  630 	mov	(_gmtime_epoch_1_36 + 1),a
      0002B9 A3               [24]  631 	inc	dptr
      0002BA 12r00r00         [24]  632 	lcall	__gptrget
      0002BD F5*45            [12]  633 	mov	(_gmtime_epoch_1_36 + 2),a
      0002BF A3               [24]  634 	inc	dptr
      0002C0 12r00r00         [24]  635 	lcall	__gptrget
      0002C3 F5*46            [12]  636 	mov	(_gmtime_epoch_1_36 + 3),a
                                    637 ;	time.c:131: lastTime.tm_sec=epoch%60;
      0002C5 75*00 3C         [24]  638 	mov	__modulong_PARM_2,#0x3C
      0002C8 E4               [12]  639 	clr	a
      0002C9 F5*01            [12]  640 	mov	(__modulong_PARM_2 + 1),a
      0002CB F5*02            [12]  641 	mov	(__modulong_PARM_2 + 2),a
      0002CD F5*03            [12]  642 	mov	(__modulong_PARM_2 + 3),a
      0002CF 85*43 82         [24]  643 	mov	dpl,_gmtime_epoch_1_36
      0002D2 85*44 83         [24]  644 	mov	dph,(_gmtime_epoch_1_36 + 1)
      0002D5 85*45 F0         [24]  645 	mov	b,(_gmtime_epoch_1_36 + 2)
      0002D8 E5*46            [12]  646 	mov	a,(_gmtime_epoch_1_36 + 3)
      0002DA 12r00r00         [24]  647 	lcall	__modulong
      0002DD AA 82            [24]  648 	mov	r2,dpl
      0002DF 8A*37            [24]  649 	mov	_lastTime,r2
                                    650 ;	time.c:132: epoch/=60; // now it is minutes
      0002E1 75*00 3C         [24]  651 	mov	__divulong_PARM_2,#0x3C
      0002E4 E4               [12]  652 	clr	a
      0002E5 F5*01            [12]  653 	mov	(__divulong_PARM_2 + 1),a
      0002E7 F5*02            [12]  654 	mov	(__divulong_PARM_2 + 2),a
      0002E9 F5*03            [12]  655 	mov	(__divulong_PARM_2 + 3),a
      0002EB 85*43 82         [24]  656 	mov	dpl,_gmtime_epoch_1_36
      0002EE 85*44 83         [24]  657 	mov	dph,(_gmtime_epoch_1_36 + 1)
      0002F1 85*45 F0         [24]  658 	mov	b,(_gmtime_epoch_1_36 + 2)
      0002F4 E5*46            [12]  659 	mov	a,(_gmtime_epoch_1_36 + 3)
      0002F6 12r00r00         [24]  660 	lcall	__divulong
      0002F9 85 82*43         [24]  661 	mov	_gmtime_epoch_1_36,dpl
      0002FC 85 83*44         [24]  662 	mov	(_gmtime_epoch_1_36 + 1),dph
      0002FF 85 F0*45         [24]  663 	mov	(_gmtime_epoch_1_36 + 2),b
      000302 F5*46            [12]  664 	mov	(_gmtime_epoch_1_36 + 3),a
                                    665 ;	time.c:133: lastTime.tm_min=epoch%60;
      000304 75*00 3C         [24]  666 	mov	__modulong_PARM_2,#0x3C
      000307 E4               [12]  667 	clr	a
      000308 F5*01            [12]  668 	mov	(__modulong_PARM_2 + 1),a
      00030A F5*02            [12]  669 	mov	(__modulong_PARM_2 + 2),a
      00030C F5*03            [12]  670 	mov	(__modulong_PARM_2 + 3),a
      00030E 85*43 82         [24]  671 	mov	dpl,_gmtime_epoch_1_36
      000311 85*44 83         [24]  672 	mov	dph,(_gmtime_epoch_1_36 + 1)
      000314 85*45 F0         [24]  673 	mov	b,(_gmtime_epoch_1_36 + 2)
      000317 E5*46            [12]  674 	mov	a,(_gmtime_epoch_1_36 + 3)
      000319 12r00r00         [24]  675 	lcall	__modulong
      00031C AC 82            [24]  676 	mov	r4,dpl
      00031E 8C*38            [24]  677 	mov	(_lastTime + 0x0001),r4
                                    678 ;	time.c:134: epoch/=60; // now it is hours
      000320 75*00 3C         [24]  679 	mov	__divulong_PARM_2,#0x3C
      000323 E4               [12]  680 	clr	a
      000324 F5*01            [12]  681 	mov	(__divulong_PARM_2 + 1),a
      000326 F5*02            [12]  682 	mov	(__divulong_PARM_2 + 2),a
      000328 F5*03            [12]  683 	mov	(__divulong_PARM_2 + 3),a
      00032A 85*43 82         [24]  684 	mov	dpl,_gmtime_epoch_1_36
      00032D 85*44 83         [24]  685 	mov	dph,(_gmtime_epoch_1_36 + 1)
      000330 85*45 F0         [24]  686 	mov	b,(_gmtime_epoch_1_36 + 2)
      000333 E5*46            [12]  687 	mov	a,(_gmtime_epoch_1_36 + 3)
      000335 12r00r00         [24]  688 	lcall	__divulong
      000338 85 82*43         [24]  689 	mov	_gmtime_epoch_1_36,dpl
      00033B 85 83*44         [24]  690 	mov	(_gmtime_epoch_1_36 + 1),dph
      00033E 85 F0*45         [24]  691 	mov	(_gmtime_epoch_1_36 + 2),b
      000341 F5*46            [12]  692 	mov	(_gmtime_epoch_1_36 + 3),a
                                    693 ;	time.c:135: lastTime.tm_hour=epoch%24;
      000343 75*00 18         [24]  694 	mov	__modulong_PARM_2,#0x18
      000346 E4               [12]  695 	clr	a
      000347 F5*01            [12]  696 	mov	(__modulong_PARM_2 + 1),a
      000349 F5*02            [12]  697 	mov	(__modulong_PARM_2 + 2),a
      00034B F5*03            [12]  698 	mov	(__modulong_PARM_2 + 3),a
      00034D 85*43 82         [24]  699 	mov	dpl,_gmtime_epoch_1_36
      000350 85*44 83         [24]  700 	mov	dph,(_gmtime_epoch_1_36 + 1)
      000353 85*45 F0         [24]  701 	mov	b,(_gmtime_epoch_1_36 + 2)
      000356 E5*46            [12]  702 	mov	a,(_gmtime_epoch_1_36 + 3)
      000358 12r00r00         [24]  703 	lcall	__modulong
      00035B AC 82            [24]  704 	mov	r4,dpl
      00035D 8C*39            [24]  705 	mov	(_lastTime + 0x0002),r4
                                    706 ;	time.c:136: epoch/=24; // now it is days
      00035F 75*00 18         [24]  707 	mov	__divulong_PARM_2,#0x18
      000362 E4               [12]  708 	clr	a
      000363 F5*01            [12]  709 	mov	(__divulong_PARM_2 + 1),a
      000365 F5*02            [12]  710 	mov	(__divulong_PARM_2 + 2),a
      000367 F5*03            [12]  711 	mov	(__divulong_PARM_2 + 3),a
      000369 85*43 82         [24]  712 	mov	dpl,_gmtime_epoch_1_36
      00036C 85*44 83         [24]  713 	mov	dph,(_gmtime_epoch_1_36 + 1)
      00036F 85*45 F0         [24]  714 	mov	b,(_gmtime_epoch_1_36 + 2)
      000372 E5*46            [12]  715 	mov	a,(_gmtime_epoch_1_36 + 3)
      000374 12r00r00         [24]  716 	lcall	__divulong
      000377 85 82*43         [24]  717 	mov	_gmtime_epoch_1_36,dpl
      00037A 85 83*44         [24]  718 	mov	(_gmtime_epoch_1_36 + 1),dph
      00037D 85 F0*45         [24]  719 	mov	(_gmtime_epoch_1_36 + 2),b
      000380 F5*46            [12]  720 	mov	(_gmtime_epoch_1_36 + 3),a
                                    721 ;	time.c:137: lastTime.tm_wday=(epoch+4)%7;
      000382 74 04            [12]  722 	mov	a,#0x04
      000384 25*43            [12]  723 	add	a,_gmtime_epoch_1_36
      000386 FC               [12]  724 	mov	r4,a
      000387 E4               [12]  725 	clr	a
      000388 35*44            [12]  726 	addc	a,(_gmtime_epoch_1_36 + 1)
      00038A FD               [12]  727 	mov	r5,a
      00038B E4               [12]  728 	clr	a
      00038C 35*45            [12]  729 	addc	a,(_gmtime_epoch_1_36 + 2)
      00038E FE               [12]  730 	mov	r6,a
      00038F E4               [12]  731 	clr	a
      000390 35*46            [12]  732 	addc	a,(_gmtime_epoch_1_36 + 3)
      000392 FF               [12]  733 	mov	r7,a
      000393 75*00 07         [24]  734 	mov	__modulong_PARM_2,#0x07
      000396 E4               [12]  735 	clr	a
      000397 F5*01            [12]  736 	mov	(__modulong_PARM_2 + 1),a
      000399 F5*02            [12]  737 	mov	(__modulong_PARM_2 + 2),a
      00039B F5*03            [12]  738 	mov	(__modulong_PARM_2 + 3),a
      00039D 8C 82            [24]  739 	mov	dpl,r4
      00039F 8D 83            [24]  740 	mov	dph,r5
      0003A1 8E F0            [24]  741 	mov	b,r6
      0003A3 EF               [12]  742 	mov	a,r7
      0003A4 12r00r00         [24]  743 	lcall	__modulong
      0003A7 AC 82            [24]  744 	mov	r4,dpl
      0003A9 AD 83            [24]  745 	mov	r5,dph
      0003AB AE F0            [24]  746 	mov	r6,b
      0003AD FF               [12]  747 	mov	r7,a
      0003AE 8C*3E            [24]  748 	mov	(_lastTime + 0x0007),r4
                                    749 ;	time.c:140: days=0;
      0003B0 E4               [12]  750 	clr	a
      0003B1 F5*47            [12]  751 	mov	_gmtime_days_1_36,a
      0003B3 F5*48            [12]  752 	mov	(_gmtime_days_1_36 + 1),a
      0003B5 F5*49            [12]  753 	mov	(_gmtime_days_1_36 + 2),a
      0003B7 F5*4A            [12]  754 	mov	(_gmtime_days_1_36 + 3),a
                                    755 ;	time.c:141: while((days += (LEAP_YEAR(year) ? 366 : 365)) <= epoch) {
      0003B9 7A B2            [12]  756 	mov	r2,#0xB2
      0003BB 7B 07            [12]  757 	mov	r3,#0x07
      0003BD                        758 00101$:
      0003BD 74 03            [12]  759 	mov	a,#0x03
      0003BF 5A               [12]  760 	anl	a,r2
      0003C0 FE               [12]  761 	mov	r6,a
      0003C1 7F 00            [12]  762 	mov	r7,#0x00
      0003C3 4F               [12]  763 	orl	a,r7
      0003C4 70 06            [24]  764 	jnz	00118$
      0003C6 7E 6E            [12]  765 	mov	r6,#0x6E
      0003C8 7F 01            [12]  766 	mov	r7,#0x01
      0003CA 80 04            [24]  767 	sjmp	00119$
      0003CC                        768 00118$:
      0003CC 7E 6D            [12]  769 	mov	r6,#0x6D
      0003CE 7F 01            [12]  770 	mov	r7,#0x01
      0003D0                        771 00119$:
      0003D0 EF               [12]  772 	mov	a,r7
      0003D1 33               [12]  773 	rlc	a
      0003D2 95 E0            [12]  774 	subb	a,acc
      0003D4 FD               [12]  775 	mov	r5,a
      0003D5 FC               [12]  776 	mov	r4,a
      0003D6 EE               [12]  777 	mov	a,r6
      0003D7 25*47            [12]  778 	add	a,_gmtime_days_1_36
      0003D9 FE               [12]  779 	mov	r6,a
      0003DA EF               [12]  780 	mov	a,r7
      0003DB 35*48            [12]  781 	addc	a,(_gmtime_days_1_36 + 1)
      0003DD FF               [12]  782 	mov	r7,a
      0003DE ED               [12]  783 	mov	a,r5
      0003DF 35*49            [12]  784 	addc	a,(_gmtime_days_1_36 + 2)
      0003E1 FD               [12]  785 	mov	r5,a
      0003E2 EC               [12]  786 	mov	a,r4
      0003E3 35*4A            [12]  787 	addc	a,(_gmtime_days_1_36 + 3)
      0003E5 FC               [12]  788 	mov	r4,a
      0003E6 8E*47            [24]  789 	mov	_gmtime_days_1_36,r6
      0003E8 8F*48            [24]  790 	mov	(_gmtime_days_1_36 + 1),r7
      0003EA 8D*49            [24]  791 	mov	(_gmtime_days_1_36 + 2),r5
      0003EC 8C*4A            [24]  792 	mov	(_gmtime_days_1_36 + 3),r4
      0003EE C3               [12]  793 	clr	c
      0003EF E5*43            [12]  794 	mov	a,_gmtime_epoch_1_36
      0003F1 9E               [12]  795 	subb	a,r6
      0003F2 E5*44            [12]  796 	mov	a,(_gmtime_epoch_1_36 + 1)
      0003F4 9F               [12]  797 	subb	a,r7
      0003F5 E5*45            [12]  798 	mov	a,(_gmtime_epoch_1_36 + 2)
      0003F7 9D               [12]  799 	subb	a,r5
      0003F8 E5*46            [12]  800 	mov	a,(_gmtime_epoch_1_36 + 3)
      0003FA 9C               [12]  801 	subb	a,r4
      0003FB 40 07            [24]  802 	jc	00103$
                                    803 ;	time.c:142: year++;
      0003FD 0A               [12]  804 	inc	r2
      0003FE BA 00 BC         [24]  805 	cjne	r2,#0x00,00101$
      000401 0B               [12]  806 	inc	r3
      000402 80 B9            [24]  807 	sjmp	00101$
      000404                        808 00103$:
                                    809 ;	time.c:144: lastTime.tm_year=year-1900;
      000404 EA               [12]  810 	mov	a,r2
      000405 24 94            [12]  811 	add	a,#0x94
      000407 FE               [12]  812 	mov	r6,a
      000408 EB               [12]  813 	mov	a,r3
      000409 34 F8            [12]  814 	addc	a,#0xF8
      00040B FF               [12]  815 	mov	r7,a
      00040C 8E*3C            [24]  816 	mov	((_lastTime + 0x0005) + 0),r6
      00040E 8F*3D            [24]  817 	mov	((_lastTime + 0x0005) + 1),r7
                                    818 ;	time.c:146: days -= LEAP_YEAR(year) ? 366 : 365;
      000410 74 03            [12]  819 	mov	a,#0x03
      000412 5A               [12]  820 	anl	a,r2
      000413 FE               [12]  821 	mov	r6,a
      000414 7F 00            [12]  822 	mov	r7,#0x00
      000416 4F               [12]  823 	orl	a,r7
      000417 70 06            [24]  824 	jnz	00120$
      000419 7C 6E            [12]  825 	mov	r4,#0x6E
      00041B 7D 01            [12]  826 	mov	r5,#0x01
      00041D 80 04            [24]  827 	sjmp	00121$
      00041F                        828 00120$:
      00041F 7C 6D            [12]  829 	mov	r4,#0x6D
      000421 7D 01            [12]  830 	mov	r5,#0x01
      000423                        831 00121$:
      000423 ED               [12]  832 	mov	a,r5
      000424 33               [12]  833 	rlc	a
      000425 95 E0            [12]  834 	subb	a,acc
      000427 FB               [12]  835 	mov	r3,a
      000428 FA               [12]  836 	mov	r2,a
      000429 E5*47            [12]  837 	mov	a,_gmtime_days_1_36
      00042B C3               [12]  838 	clr	c
      00042C 9C               [12]  839 	subb	a,r4
      00042D F5*47            [12]  840 	mov	_gmtime_days_1_36,a
      00042F E5*48            [12]  841 	mov	a,(_gmtime_days_1_36 + 1)
      000431 9D               [12]  842 	subb	a,r5
      000432 F5*48            [12]  843 	mov	(_gmtime_days_1_36 + 1),a
      000434 E5*49            [12]  844 	mov	a,(_gmtime_days_1_36 + 2)
      000436 9B               [12]  845 	subb	a,r3
      000437 F5*49            [12]  846 	mov	(_gmtime_days_1_36 + 2),a
      000439 E5*4A            [12]  847 	mov	a,(_gmtime_days_1_36 + 3)
      00043B 9A               [12]  848 	subb	a,r2
      00043C F5*4A            [12]  849 	mov	(_gmtime_days_1_36 + 3),a
                                    850 ;	time.c:147: epoch -= days; // now it is days in this year, starting at 0
      00043E E5*43            [12]  851 	mov	a,_gmtime_epoch_1_36
      000440 C3               [12]  852 	clr	c
      000441 95*47            [12]  853 	subb	a,_gmtime_days_1_36
      000443 F5*43            [12]  854 	mov	_gmtime_epoch_1_36,a
      000445 E5*44            [12]  855 	mov	a,(_gmtime_epoch_1_36 + 1)
      000447 95*48            [12]  856 	subb	a,(_gmtime_days_1_36 + 1)
      000449 F5*44            [12]  857 	mov	(_gmtime_epoch_1_36 + 1),a
      00044B E5*45            [12]  858 	mov	a,(_gmtime_epoch_1_36 + 2)
      00044D 95*49            [12]  859 	subb	a,(_gmtime_days_1_36 + 2)
      00044F F5*45            [12]  860 	mov	(_gmtime_epoch_1_36 + 2),a
      000451 E5*46            [12]  861 	mov	a,(_gmtime_epoch_1_36 + 3)
      000453 95*4A            [12]  862 	subb	a,(_gmtime_days_1_36 + 3)
      000455 F5*46            [12]  863 	mov	(_gmtime_epoch_1_36 + 3),a
                                    864 ;	time.c:148: lastTime.tm_yday=epoch;
      000457 AC*43            [24]  865 	mov	r4,_gmtime_epoch_1_36
      000459 AD*44            [24]  866 	mov	r5,(_gmtime_epoch_1_36 + 1)
      00045B 8C*3F            [24]  867 	mov	((_lastTime + 0x0008) + 0),r4
      00045D 8D*40            [24]  868 	mov	((_lastTime + 0x0008) + 1),r5
                                    869 ;	time.c:153: for (month=0; month<12; month++) {
      00045F 7D 00            [12]  870 	mov	r5,#0x00
      000461                        871 00114$:
                                    872 ;	time.c:154: if (month==1) { // februari
      000461 BD 01 0C         [24]  873 	cjne	r5,#0x01,00108$
                                    874 ;	time.c:155: if (LEAP_YEAR(year)) {
      000464 EE               [12]  875 	mov	a,r6
      000465 4F               [12]  876 	orl	a,r7
      000466 70 04            [24]  877 	jnz	00105$
                                    878 ;	time.c:156: monthLength=29;
      000468 7C 1D            [12]  879 	mov	r4,#0x1D
      00046A 80 0A            [24]  880 	sjmp	00109$
      00046C                        881 00105$:
                                    882 ;	time.c:158: monthLength=28;
      00046C 7C 1C            [12]  883 	mov	r4,#0x1C
      00046E 80 06            [24]  884 	sjmp	00109$
      000470                        885 00108$:
                                    886 ;	time.c:161: monthLength = monthDays[month];
      000470 ED               [12]  887 	mov	a,r5
      000471 90r00r00         [24]  888 	mov	dptr,#_monthDays
      000474 93               [24]  889 	movc	a,@a+dptr
      000475 FC               [12]  890 	mov	r4,a
      000476                        891 00109$:
                                    892 ;	time.c:164: if (epoch>=monthLength) {
      000476 8C*4B            [24]  893 	mov	_gmtime_sloc0_1_0,r4
      000478 75*4C 00         [24]  894 	mov	(_gmtime_sloc0_1_0 + 1),#0x00
      00047B 75*4D 00         [24]  895 	mov	(_gmtime_sloc0_1_0 + 2),#0x00
      00047E 75*4E 00         [24]  896 	mov	(_gmtime_sloc0_1_0 + 3),#0x00
      000481 C3               [12]  897 	clr	c
      000482 E5*43            [12]  898 	mov	a,_gmtime_epoch_1_36
      000484 95*4B            [12]  899 	subb	a,_gmtime_sloc0_1_0
      000486 E5*44            [12]  900 	mov	a,(_gmtime_epoch_1_36 + 1)
      000488 95*4C            [12]  901 	subb	a,(_gmtime_sloc0_1_0 + 1)
      00048A E5*45            [12]  902 	mov	a,(_gmtime_epoch_1_36 + 2)
      00048C 95*4D            [12]  903 	subb	a,(_gmtime_sloc0_1_0 + 2)
      00048E E5*46            [12]  904 	mov	a,(_gmtime_epoch_1_36 + 3)
      000490 95*4E            [12]  905 	subb	a,(_gmtime_sloc0_1_0 + 3)
      000492 40 1F            [24]  906 	jc	00113$
                                    907 ;	time.c:165: epoch-=monthLength;
      000494 E5*43            [12]  908 	mov	a,_gmtime_epoch_1_36
      000496 C3               [12]  909 	clr	c
      000497 95*4B            [12]  910 	subb	a,_gmtime_sloc0_1_0
      000499 F5*43            [12]  911 	mov	_gmtime_epoch_1_36,a
      00049B E5*44            [12]  912 	mov	a,(_gmtime_epoch_1_36 + 1)
      00049D 95*4C            [12]  913 	subb	a,(_gmtime_sloc0_1_0 + 1)
      00049F F5*44            [12]  914 	mov	(_gmtime_epoch_1_36 + 1),a
      0004A1 E5*45            [12]  915 	mov	a,(_gmtime_epoch_1_36 + 2)
      0004A3 95*4D            [12]  916 	subb	a,(_gmtime_sloc0_1_0 + 2)
      0004A5 F5*45            [12]  917 	mov	(_gmtime_epoch_1_36 + 2),a
      0004A7 E5*46            [12]  918 	mov	a,(_gmtime_epoch_1_36 + 3)
      0004A9 95*4E            [12]  919 	subb	a,(_gmtime_sloc0_1_0 + 3)
      0004AB F5*46            [12]  920 	mov	(_gmtime_epoch_1_36 + 3),a
                                    921 ;	time.c:153: for (month=0; month<12; month++) {
      0004AD 0D               [12]  922 	inc	r5
      0004AE BD 0C 00         [24]  923 	cjne	r5,#0x0C,00156$
      0004B1                        924 00156$:
      0004B1 40 AE            [24]  925 	jc	00114$
      0004B3                        926 00113$:
                                    927 ;	time.c:170: lastTime.tm_mon=month;
      0004B3 8D*3B            [24]  928 	mov	(_lastTime + 0x0004),r5
                                    929 ;	time.c:171: lastTime.tm_mday=epoch+1;
      0004B5 E5*43            [12]  930 	mov	a,_gmtime_epoch_1_36
      0004B7 04               [12]  931 	inc	a
      0004B8 F5*3A            [12]  932 	mov	(_lastTime + 0x0003),a
                                    933 ;	time.c:173: lastTime.tm_isdst=0;
      0004BA 75*41 00         [24]  934 	mov	(_lastTime + 0x000a),#0x00
                                    935 ;	time.c:175: return &lastTime;
      0004BD 90r00r37         [24]  936 	mov	dptr,#_lastTime
      0004C0 75 F0 40         [24]  937 	mov	b,#0x40
      0004C3 22               [24]  938 	ret
                                    939 ;------------------------------------------------------------
                                    940 ;Allocation info for local variables in function 'mktime'
                                    941 ;------------------------------------------------------------
                                    942 ;timeptr                   Allocated with name '_mktime_timeptr_1_45'
                                    943 ;year                      Allocated with name '_mktime_year_1_46'
                                    944 ;month                     Allocated with name '_mktime_month_1_46'
                                    945 ;i                         Allocated with name '_mktime_i_1_46'
                                    946 ;seconds                   Allocated with name '_mktime_seconds_1_46'
                                    947 ;sloc0                     Allocated with name '_mktime_sloc0_1_0'
                                    948 ;------------------------------------------------------------
                                    949 ;	time.c:179: time_t mktime(struct tm *timeptr) {
                                    950 ;	-----------------------------------------
                                    951 ;	 function mktime
                                    952 ;	-----------------------------------------
      0004C4                        953 _mktime:
      0004C4 85 82*4F         [24]  954 	mov	_mktime_timeptr_1_45,dpl
      0004C7 85 83*50         [24]  955 	mov	(_mktime_timeptr_1_45 + 1),dph
      0004CA 85 F0*51         [24]  956 	mov	(_mktime_timeptr_1_45 + 2),b
                                    957 ;	time.c:180: int year=timeptr->tm_year+1900, month=timeptr->tm_mon, i;
      0004CD 74 05            [12]  958 	mov	a,#0x05
      0004CF 25*4F            [12]  959 	add	a,_mktime_timeptr_1_45
      0004D1 FA               [12]  960 	mov	r2,a
      0004D2 E4               [12]  961 	clr	a
      0004D3 35*50            [12]  962 	addc	a,(_mktime_timeptr_1_45 + 1)
      0004D5 FB               [12]  963 	mov	r3,a
      0004D6 AC*51            [24]  964 	mov	r4,(_mktime_timeptr_1_45 + 2)
      0004D8 8A 82            [24]  965 	mov	dpl,r2
      0004DA 8B 83            [24]  966 	mov	dph,r3
      0004DC 8C F0            [24]  967 	mov	b,r4
      0004DE 12r00r00         [24]  968 	lcall	__gptrget
      0004E1 FA               [12]  969 	mov	r2,a
      0004E2 A3               [24]  970 	inc	dptr
      0004E3 12r00r00         [24]  971 	lcall	__gptrget
      0004E6 FB               [12]  972 	mov	r3,a
      0004E7 74 6C            [12]  973 	mov	a,#0x6C
      0004E9 2A               [12]  974 	add	a,r2
      0004EA F5*52            [12]  975 	mov	_mktime_year_1_46,a
      0004EC 74 07            [12]  976 	mov	a,#0x07
      0004EE 3B               [12]  977 	addc	a,r3
      0004EF F5*53            [12]  978 	mov	(_mktime_year_1_46 + 1),a
      0004F1 74 04            [12]  979 	mov	a,#0x04
      0004F3 25*4F            [12]  980 	add	a,_mktime_timeptr_1_45
      0004F5 F8               [12]  981 	mov	r0,a
      0004F6 E4               [12]  982 	clr	a
      0004F7 35*50            [12]  983 	addc	a,(_mktime_timeptr_1_45 + 1)
      0004F9 F9               [12]  984 	mov	r1,a
      0004FA AA*51            [24]  985 	mov	r2,(_mktime_timeptr_1_45 + 2)
      0004FC 88 82            [24]  986 	mov	dpl,r0
      0004FE 89 83            [24]  987 	mov	dph,r1
      000500 8A F0            [24]  988 	mov	b,r2
      000502 12r00r00         [24]  989 	lcall	__gptrget
      000505 F8               [12]  990 	mov	r0,a
      000506 88*54            [24]  991 	mov	_mktime_month_1_46,r0
      000508 75*55 00         [24]  992 	mov	(_mktime_month_1_46 + 1),#0x00
                                    993 ;	time.c:183: CheckTime(timeptr);
      00050B 85*4F 82         [24]  994 	mov	dpl,_mktime_timeptr_1_45
      00050E 85*50 83         [24]  995 	mov	dph,(_mktime_timeptr_1_45 + 1)
      000511 85*51 F0         [24]  996 	mov	b,(_mktime_timeptr_1_45 + 2)
      000514 12r00r7C         [24]  997 	lcall	_CheckTime
                                    998 ;	time.c:186: seconds= (year-1970)*(60*60*24L*365);
      000517 E5*52            [12]  999 	mov	a,_mktime_year_1_46
      000519 24 4E            [12] 1000 	add	a,#0x4E
      00051B F9               [12] 1001 	mov	r1,a
      00051C E5*53            [12] 1002 	mov	a,(_mktime_year_1_46 + 1)
      00051E 34 F8            [12] 1003 	addc	a,#0xF8
      000520 FA               [12] 1004 	mov	r2,a
      000521 89*00            [24] 1005 	mov	__mullong_PARM_2,r1
      000523 EA               [12] 1006 	mov	a,r2
      000524 F5*01            [12] 1007 	mov	(__mullong_PARM_2 + 1),a
      000526 33               [12] 1008 	rlc	a
      000527 95 E0            [12] 1009 	subb	a,acc
      000529 F5*02            [12] 1010 	mov	(__mullong_PARM_2 + 2),a
      00052B F5*03            [12] 1011 	mov	(__mullong_PARM_2 + 3),a
      00052D 90 33 80         [24] 1012 	mov	dptr,#0x3380
      000530 75 F0 E1         [24] 1013 	mov	b,#0xE1
      000533 74 01            [12] 1014 	mov	a,#0x01
      000535 12r00r00         [24] 1015 	lcall	__mullong
      000538 85 82*58         [24] 1016 	mov	_mktime_seconds_1_46,dpl
      00053B 85 83*59         [24] 1017 	mov	(_mktime_seconds_1_46 + 1),dph
      00053E 85 F0*5A         [24] 1018 	mov	(_mktime_seconds_1_46 + 2),b
      000541 F5*5B            [12] 1019 	mov	(_mktime_seconds_1_46 + 3),a
                                   1020 ;	time.c:189: for (i=1970; i<year; i++) {
      000543 85*58*5C         [24] 1021 	mov	_mktime_sloc0_1_0,_mktime_seconds_1_46
      000546 85*59*5D         [24] 1022 	mov	(_mktime_sloc0_1_0 + 1),(_mktime_seconds_1_46 + 1)
      000549 85*5A*5E         [24] 1023 	mov	(_mktime_sloc0_1_0 + 2),(_mktime_seconds_1_46 + 2)
      00054C 85*5B*5F         [24] 1024 	mov	(_mktime_sloc0_1_0 + 3),(_mktime_seconds_1_46 + 3)
      00054F 7E B2            [12] 1025 	mov	r6,#0xB2
      000551 7F 07            [12] 1026 	mov	r7,#0x07
      000553                       1027 00110$:
      000553 C3               [12] 1028 	clr	c
      000554 EE               [12] 1029 	mov	a,r6
      000555 95*52            [12] 1030 	subb	a,_mktime_year_1_46
      000557 EF               [12] 1031 	mov	a,r7
      000558 64 80            [12] 1032 	xrl	a,#0x80
      00055A 85*53 F0         [24] 1033 	mov	b,(_mktime_year_1_46 + 1)
      00055D 63 F0 80         [24] 1034 	xrl	b,#0x80
      000560 95 F0            [12] 1035 	subb	a,b
      000562 50 3C            [24] 1036 	jnc	00124$
                                   1037 ;	time.c:190: if (LEAP_YEAR(i)) {
      000564 75*00 04         [24] 1038 	mov	__modsint_PARM_2,#0x04
      000567 75*01 00         [24] 1039 	mov	(__modsint_PARM_2 + 1),#0x00
      00056A 8E 82            [24] 1040 	mov	dpl,r6
      00056C 8F 83            [24] 1041 	mov	dph,r7
      00056E C0 07            [24] 1042 	push	ar7
      000570 C0 06            [24] 1043 	push	ar6
      000572 12r00r00         [24] 1044 	lcall	__modsint
      000575 E5 82            [12] 1045 	mov	a,dpl
      000577 85 83 F0         [24] 1046 	mov	b,dph
      00057A D0 06            [24] 1047 	pop	ar6
      00057C D0 07            [24] 1048 	pop	ar7
      00057E 45 F0            [12] 1049 	orl	a,b
      000580 70 17            [24] 1050 	jnz	00111$
                                   1051 ;	time.c:191: seconds+= 60*60*24L;
      000582 74 80            [12] 1052 	mov	a,#0x80
      000584 25*5C            [12] 1053 	add	a,_mktime_sloc0_1_0
      000586 F5*5C            [12] 1054 	mov	_mktime_sloc0_1_0,a
      000588 74 51            [12] 1055 	mov	a,#0x51
      00058A 35*5D            [12] 1056 	addc	a,(_mktime_sloc0_1_0 + 1)
      00058C F5*5D            [12] 1057 	mov	(_mktime_sloc0_1_0 + 1),a
      00058E 74 01            [12] 1058 	mov	a,#0x01
      000590 35*5E            [12] 1059 	addc	a,(_mktime_sloc0_1_0 + 2)
      000592 F5*5E            [12] 1060 	mov	(_mktime_sloc0_1_0 + 2),a
      000594 E4               [12] 1061 	clr	a
      000595 35*5F            [12] 1062 	addc	a,(_mktime_sloc0_1_0 + 3)
      000597 F5*5F            [12] 1063 	mov	(_mktime_sloc0_1_0 + 3),a
      000599                       1064 00111$:
                                   1065 ;	time.c:189: for (i=1970; i<year; i++) {
      000599 0E               [12] 1066 	inc	r6
      00059A BE 00 B6         [24] 1067 	cjne	r6,#0x00,00110$
      00059D 0F               [12] 1068 	inc	r7
      00059E 80 B3            [24] 1069 	sjmp	00110$
      0005A0                       1070 00124$:
      0005A0 85*5C*58         [24] 1071 	mov	_mktime_seconds_1_46,_mktime_sloc0_1_0
      0005A3 85*5D*59         [24] 1072 	mov	(_mktime_seconds_1_46 + 1),(_mktime_sloc0_1_0 + 1)
      0005A6 85*5E*5A         [24] 1073 	mov	(_mktime_seconds_1_46 + 2),(_mktime_sloc0_1_0 + 2)
      0005A9 85*5F*5B         [24] 1074 	mov	(_mktime_seconds_1_46 + 3),(_mktime_sloc0_1_0 + 3)
                                   1075 ;	time.c:196: for (i=0; i<month; i++) {
      0005AC 75*00 04         [24] 1076 	mov	__modsint_PARM_2,#0x04
      0005AF 75*01 00         [24] 1077 	mov	(__modsint_PARM_2 + 1),#0x00
      0005B2 85*52 82         [24] 1078 	mov	dpl,_mktime_year_1_46
      0005B5 85*53 83         [24] 1079 	mov	dph,(_mktime_year_1_46 + 1)
      0005B8 12r00r00         [24] 1080 	lcall	__modsint
      0005BB AE 82            [24] 1081 	mov	r6,dpl
      0005BD AF 83            [24] 1082 	mov	r7,dph
      0005BF E4               [12] 1083 	clr	a
      0005C0 F5*56            [12] 1084 	mov	_mktime_i_1_46,a
      0005C2 F5*57            [12] 1085 	mov	(_mktime_i_1_46 + 1),a
      0005C4                       1086 00113$:
      0005C4 C3               [12] 1087 	clr	c
      0005C5 E5*56            [12] 1088 	mov	a,_mktime_i_1_46
      0005C7 95*54            [12] 1089 	subb	a,_mktime_month_1_46
      0005C9 E5*57            [12] 1090 	mov	a,(_mktime_i_1_46 + 1)
      0005CB 64 80            [12] 1091 	xrl	a,#0x80
      0005CD 85*55 F0         [24] 1092 	mov	b,(_mktime_month_1_46 + 1)
      0005D0 63 F0 80         [24] 1093 	xrl	b,#0x80
      0005D3 95 F0            [12] 1094 	subb	a,b
      0005D5 40 03            [24] 1095 	jc	00143$
      0005D7 02r06r56         [24] 1096 	ljmp	00108$
      0005DA                       1097 00143$:
                                   1098 ;	time.c:197: if (i==1 && LEAP_YEAR(year)) { 
      0005DA 74 01            [12] 1099 	mov	a,#0x01
      0005DC B5*56 06         [24] 1100 	cjne	a,_mktime_i_1_46,00144$
      0005DF E4               [12] 1101 	clr	a
      0005E0 B5*57 02         [24] 1102 	cjne	a,(_mktime_i_1_46 + 1),00144$
      0005E3 80 02            [24] 1103 	sjmp	00145$
      0005E5                       1104 00144$:
      0005E5 80 1D            [24] 1105 	sjmp	00105$
      0005E7                       1106 00145$:
      0005E7 EE               [12] 1107 	mov	a,r6
      0005E8 4F               [12] 1108 	orl	a,r7
      0005E9 70 19            [24] 1109 	jnz	00105$
                                   1110 ;	time.c:198: seconds+= 60*60*24L*29;
      0005EB 74 80            [12] 1111 	mov	a,#0x80
      0005ED 25*58            [12] 1112 	add	a,_mktime_seconds_1_46
      0005EF F5*58            [12] 1113 	mov	_mktime_seconds_1_46,a
      0005F1 74 3B            [12] 1114 	mov	a,#0x3B
      0005F3 35*59            [12] 1115 	addc	a,(_mktime_seconds_1_46 + 1)
      0005F5 F5*59            [12] 1116 	mov	(_mktime_seconds_1_46 + 1),a
      0005F7 74 26            [12] 1117 	mov	a,#0x26
      0005F9 35*5A            [12] 1118 	addc	a,(_mktime_seconds_1_46 + 2)
      0005FB F5*5A            [12] 1119 	mov	(_mktime_seconds_1_46 + 2),a
      0005FD E4               [12] 1120 	clr	a
      0005FE 35*5B            [12] 1121 	addc	a,(_mktime_seconds_1_46 + 3)
      000600 F5*5B            [12] 1122 	mov	(_mktime_seconds_1_46 + 3),a
      000602 80 47            [24] 1123 	sjmp	00114$
      000604                       1124 00105$:
                                   1125 ;	time.c:200: seconds+= 60*60*24L*monthDays[i];
      000604 E5*56            [12] 1126 	mov	a,_mktime_i_1_46
      000606 24r00            [12] 1127 	add	a,#_monthDays
      000608 F5 82            [12] 1128 	mov	dpl,a
      00060A E5*57            [12] 1129 	mov	a,(_mktime_i_1_46 + 1)
      00060C 34s00            [12] 1130 	addc	a,#(_monthDays >> 8)
      00060E F5 83            [12] 1131 	mov	dph,a
      000610 E4               [12] 1132 	clr	a
      000611 93               [24] 1133 	movc	a,@a+dptr
      000612 FD               [12] 1134 	mov	r5,a
      000613 8D*00            [24] 1135 	mov	__mullong_PARM_2,r5
      000615 33               [12] 1136 	rlc	a
      000616 95 E0            [12] 1137 	subb	a,acc
      000618 F5*01            [12] 1138 	mov	(__mullong_PARM_2 + 1),a
      00061A F5*02            [12] 1139 	mov	(__mullong_PARM_2 + 2),a
      00061C F5*03            [12] 1140 	mov	(__mullong_PARM_2 + 3),a
      00061E 90 51 80         [24] 1141 	mov	dptr,#0x5180
      000621 75 F0 01         [24] 1142 	mov	b,#0x01
      000624 E4               [12] 1143 	clr	a
      000625 C0 07            [24] 1144 	push	ar7
      000627 C0 06            [24] 1145 	push	ar6
      000629 12r00r00         [24] 1146 	lcall	__mullong
      00062C AA 82            [24] 1147 	mov	r2,dpl
      00062E AB 83            [24] 1148 	mov	r3,dph
      000630 AC F0            [24] 1149 	mov	r4,b
      000632 FD               [12] 1150 	mov	r5,a
      000633 D0 06            [24] 1151 	pop	ar6
      000635 D0 07            [24] 1152 	pop	ar7
      000637 EA               [12] 1153 	mov	a,r2
      000638 25*58            [12] 1154 	add	a,_mktime_seconds_1_46
      00063A F5*58            [12] 1155 	mov	_mktime_seconds_1_46,a
      00063C EB               [12] 1156 	mov	a,r3
      00063D 35*59            [12] 1157 	addc	a,(_mktime_seconds_1_46 + 1)
      00063F F5*59            [12] 1158 	mov	(_mktime_seconds_1_46 + 1),a
      000641 EC               [12] 1159 	mov	a,r4
      000642 35*5A            [12] 1160 	addc	a,(_mktime_seconds_1_46 + 2)
      000644 F5*5A            [12] 1161 	mov	(_mktime_seconds_1_46 + 2),a
      000646 ED               [12] 1162 	mov	a,r5
      000647 35*5B            [12] 1163 	addc	a,(_mktime_seconds_1_46 + 3)
      000649 F5*5B            [12] 1164 	mov	(_mktime_seconds_1_46 + 3),a
      00064B                       1165 00114$:
                                   1166 ;	time.c:196: for (i=0; i<month; i++) {
      00064B 05*56            [12] 1167 	inc	_mktime_i_1_46
      00064D E4               [12] 1168 	clr	a
      00064E B5*56 02         [24] 1169 	cjne	a,_mktime_i_1_46,00147$
      000651 05*57            [12] 1170 	inc	(_mktime_i_1_46 + 1)
      000653                       1171 00147$:
      000653 02r05rC4         [24] 1172 	ljmp	00113$
      000656                       1173 00108$:
                                   1174 ;	time.c:204: seconds+= (timeptr->tm_mday-1)*60*60*24L;
      000656 74 03            [12] 1175 	mov	a,#0x03
      000658 25*4F            [12] 1176 	add	a,_mktime_timeptr_1_45
      00065A FD               [12] 1177 	mov	r5,a
      00065B E4               [12] 1178 	clr	a
      00065C 35*50            [12] 1179 	addc	a,(_mktime_timeptr_1_45 + 1)
      00065E FE               [12] 1180 	mov	r6,a
      00065F AF*51            [24] 1181 	mov	r7,(_mktime_timeptr_1_45 + 2)
      000661 8D 82            [24] 1182 	mov	dpl,r5
      000663 8E 83            [24] 1183 	mov	dph,r6
      000665 8F F0            [24] 1184 	mov	b,r7
      000667 12r00r00         [24] 1185 	lcall	__gptrget
      00066A FD               [12] 1186 	mov	r5,a
      00066B 7F 00            [12] 1187 	mov	r7,#0x00
      00066D 1D               [12] 1188 	dec	r5
      00066E BD FF 01         [24] 1189 	cjne	r5,#0xFF,00148$
      000671 1F               [12] 1190 	dec	r7
      000672                       1191 00148$:
      000672 8D*00            [24] 1192 	mov	__mullong_PARM_2,r5
      000674 EF               [12] 1193 	mov	a,r7
      000675 F5*01            [12] 1194 	mov	(__mullong_PARM_2 + 1),a
      000677 33               [12] 1195 	rlc	a
      000678 95 E0            [12] 1196 	subb	a,acc
      00067A F5*02            [12] 1197 	mov	(__mullong_PARM_2 + 2),a
      00067C F5*03            [12] 1198 	mov	(__mullong_PARM_2 + 3),a
      00067E 90 51 80         [24] 1199 	mov	dptr,#0x5180
      000681 75 F0 01         [24] 1200 	mov	b,#0x01
      000684 E4               [12] 1201 	clr	a
      000685 12r00r00         [24] 1202 	lcall	__mullong
      000688 AC 82            [24] 1203 	mov	r4,dpl
      00068A AD 83            [24] 1204 	mov	r5,dph
      00068C AE F0            [24] 1205 	mov	r6,b
      00068E FF               [12] 1206 	mov	r7,a
      00068F EC               [12] 1207 	mov	a,r4
      000690 25*58            [12] 1208 	add	a,_mktime_seconds_1_46
      000692 F5*58            [12] 1209 	mov	_mktime_seconds_1_46,a
      000694 ED               [12] 1210 	mov	a,r5
      000695 35*59            [12] 1211 	addc	a,(_mktime_seconds_1_46 + 1)
      000697 F5*59            [12] 1212 	mov	(_mktime_seconds_1_46 + 1),a
      000699 EE               [12] 1213 	mov	a,r6
      00069A 35*5A            [12] 1214 	addc	a,(_mktime_seconds_1_46 + 2)
      00069C F5*5A            [12] 1215 	mov	(_mktime_seconds_1_46 + 2),a
      00069E EF               [12] 1216 	mov	a,r7
      00069F 35*5B            [12] 1217 	addc	a,(_mktime_seconds_1_46 + 3)
      0006A1 F5*5B            [12] 1218 	mov	(_mktime_seconds_1_46 + 3),a
                                   1219 ;	time.c:205: seconds+= timeptr->tm_hour*60*60L;
      0006A3 74 02            [12] 1220 	mov	a,#0x02
      0006A5 25*4F            [12] 1221 	add	a,_mktime_timeptr_1_45
      0006A7 FD               [12] 1222 	mov	r5,a
      0006A8 E4               [12] 1223 	clr	a
      0006A9 35*50            [12] 1224 	addc	a,(_mktime_timeptr_1_45 + 1)
      0006AB FE               [12] 1225 	mov	r6,a
      0006AC AF*51            [24] 1226 	mov	r7,(_mktime_timeptr_1_45 + 2)
      0006AE 8D 82            [24] 1227 	mov	dpl,r5
      0006B0 8E 83            [24] 1228 	mov	dph,r6
      0006B2 8F F0            [24] 1229 	mov	b,r7
      0006B4 12r00r00         [24] 1230 	lcall	__gptrget
      0006B7 FD               [12] 1231 	mov	r5,a
      0006B8 8D*00            [24] 1232 	mov	__mullong_PARM_2,r5
      0006BA 75*01 00         [24] 1233 	mov	(__mullong_PARM_2 + 1),#0x00
      0006BD 75*02 00         [24] 1234 	mov	(__mullong_PARM_2 + 2),#0x00
      0006C0 75*03 00         [24] 1235 	mov	(__mullong_PARM_2 + 3),#0x00
      0006C3 90 0E 10         [24] 1236 	mov	dptr,#0x0E10
      0006C6 E4               [12] 1237 	clr	a
      0006C7 F5 F0            [12] 1238 	mov	b,a
      0006C9 12r00r00         [24] 1239 	lcall	__mullong
      0006CC AC 82            [24] 1240 	mov	r4,dpl
      0006CE AD 83            [24] 1241 	mov	r5,dph
      0006D0 AE F0            [24] 1242 	mov	r6,b
      0006D2 FF               [12] 1243 	mov	r7,a
      0006D3 EC               [12] 1244 	mov	a,r4
      0006D4 25*58            [12] 1245 	add	a,_mktime_seconds_1_46
      0006D6 F5*58            [12] 1246 	mov	_mktime_seconds_1_46,a
      0006D8 ED               [12] 1247 	mov	a,r5
      0006D9 35*59            [12] 1248 	addc	a,(_mktime_seconds_1_46 + 1)
      0006DB F5*59            [12] 1249 	mov	(_mktime_seconds_1_46 + 1),a
      0006DD EE               [12] 1250 	mov	a,r6
      0006DE 35*5A            [12] 1251 	addc	a,(_mktime_seconds_1_46 + 2)
      0006E0 F5*5A            [12] 1252 	mov	(_mktime_seconds_1_46 + 2),a
      0006E2 EF               [12] 1253 	mov	a,r7
      0006E3 35*5B            [12] 1254 	addc	a,(_mktime_seconds_1_46 + 3)
      0006E5 F5*5B            [12] 1255 	mov	(_mktime_seconds_1_46 + 3),a
                                   1256 ;	time.c:206: seconds+= timeptr->tm_min*60;
      0006E7 74 01            [12] 1257 	mov	a,#0x01
      0006E9 25*4F            [12] 1258 	add	a,_mktime_timeptr_1_45
      0006EB FD               [12] 1259 	mov	r5,a
      0006EC E4               [12] 1260 	clr	a
      0006ED 35*50            [12] 1261 	addc	a,(_mktime_timeptr_1_45 + 1)
      0006EF FE               [12] 1262 	mov	r6,a
      0006F0 AF*51            [24] 1263 	mov	r7,(_mktime_timeptr_1_45 + 2)
      0006F2 8D 82            [24] 1264 	mov	dpl,r5
      0006F4 8E 83            [24] 1265 	mov	dph,r6
      0006F6 8F F0            [24] 1266 	mov	b,r7
      0006F8 12r00r00         [24] 1267 	lcall	__gptrget
      0006FB 75 F0 3C         [24] 1268 	mov	b,#0x3C
      0006FE A4               [48] 1269 	mul	ab
      0006FF FD               [12] 1270 	mov	r5,a
      000700 E5 F0            [12] 1271 	mov	a,b
      000702 FF               [12] 1272 	mov	r7,a
      000703 33               [12] 1273 	rlc	a
      000704 95 E0            [12] 1274 	subb	a,acc
      000706 FE               [12] 1275 	mov	r6,a
      000707 FC               [12] 1276 	mov	r4,a
      000708 ED               [12] 1277 	mov	a,r5
      000709 25*58            [12] 1278 	add	a,_mktime_seconds_1_46
      00070B F5*58            [12] 1279 	mov	_mktime_seconds_1_46,a
      00070D EF               [12] 1280 	mov	a,r7
      00070E 35*59            [12] 1281 	addc	a,(_mktime_seconds_1_46 + 1)
      000710 F5*59            [12] 1282 	mov	(_mktime_seconds_1_46 + 1),a
      000712 EE               [12] 1283 	mov	a,r6
      000713 35*5A            [12] 1284 	addc	a,(_mktime_seconds_1_46 + 2)
      000715 F5*5A            [12] 1285 	mov	(_mktime_seconds_1_46 + 2),a
      000717 EC               [12] 1286 	mov	a,r4
      000718 35*5B            [12] 1287 	addc	a,(_mktime_seconds_1_46 + 3)
      00071A F5*5B            [12] 1288 	mov	(_mktime_seconds_1_46 + 3),a
                                   1289 ;	time.c:207: seconds+= timeptr->tm_sec;
      00071C 85*4F 82         [24] 1290 	mov	dpl,_mktime_timeptr_1_45
      00071F 85*50 83         [24] 1291 	mov	dph,(_mktime_timeptr_1_45 + 1)
      000722 85*51 F0         [24] 1292 	mov	b,(_mktime_timeptr_1_45 + 2)
      000725 12r00r00         [24] 1293 	lcall	__gptrget
      000728 FF               [12] 1294 	mov	r7,a
      000729 E4               [12] 1295 	clr	a
      00072A FE               [12] 1296 	mov	r6,a
      00072B 33               [12] 1297 	rlc	a
      00072C 95 E0            [12] 1298 	subb	a,acc
      00072E FD               [12] 1299 	mov	r5,a
      00072F FC               [12] 1300 	mov	r4,a
      000730 EF               [12] 1301 	mov	a,r7
      000731 25*58            [12] 1302 	add	a,_mktime_seconds_1_46
      000733 F5*58            [12] 1303 	mov	_mktime_seconds_1_46,a
      000735 EE               [12] 1304 	mov	a,r6
      000736 35*59            [12] 1305 	addc	a,(_mktime_seconds_1_46 + 1)
      000738 F5*59            [12] 1306 	mov	(_mktime_seconds_1_46 + 1),a
      00073A ED               [12] 1307 	mov	a,r5
      00073B 35*5A            [12] 1308 	addc	a,(_mktime_seconds_1_46 + 2)
      00073D F5*5A            [12] 1309 	mov	(_mktime_seconds_1_46 + 2),a
      00073F EC               [12] 1310 	mov	a,r4
      000740 35*5B            [12] 1311 	addc	a,(_mktime_seconds_1_46 + 3)
                                   1312 ;	time.c:208: return seconds;
      000742 F5*5B            [12] 1313 	mov	(_mktime_seconds_1_46 + 3),a
      000744 85*58 82         [24] 1314 	mov	dpl,_mktime_seconds_1_46
      000747 85*59 83         [24] 1315 	mov	dph,(_mktime_seconds_1_46 + 1)
      00074A 85*5A F0         [24] 1316 	mov	b,(_mktime_seconds_1_46 + 2)
      00074D 22               [24] 1317 	ret
                                   1318 	.area CSEG    (CODE)
                                   1319 	.area CONST   (CODE)
      000000                       1320 _monthDays:
      000000 1F                    1321 	.db #0x1F	;  31
      000001 1C                    1322 	.db #0x1C	;  28
      000002 1F                    1323 	.db #0x1F	;  31
      000003 1E                    1324 	.db #0x1E	;  30
      000004 1F                    1325 	.db #0x1F	;  31
      000005 1E                    1326 	.db #0x1E	;  30
      000006 1F                    1327 	.db #0x1F	;  31
      000007 1F                    1328 	.db #0x1F	;  31
      000008 1E                    1329 	.db #0x1E	;  30
      000009 1F                    1330 	.db #0x1F	;  31
      00000A 1E                    1331 	.db #0x1E	;  30
      00000B 1F                    1332 	.db #0x1F	;  31
      00000C                       1333 ___month:
      00000Cr51s00                 1334 	.byte __str_1, (__str_1 >> 8)
      00000Er55s00                 1335 	.byte __str_2, (__str_2 >> 8)
      000010r59s00                 1336 	.byte __str_3, (__str_3 >> 8)
      000012r5Ds00                 1337 	.byte __str_4, (__str_4 >> 8)
      000014r61s00                 1338 	.byte __str_5, (__str_5 >> 8)
      000016r65s00                 1339 	.byte __str_6, (__str_6 >> 8)
      000018r69s00                 1340 	.byte __str_7, (__str_7 >> 8)
      00001Ar6Ds00                 1341 	.byte __str_8, (__str_8 >> 8)
      00001Cr71s00                 1342 	.byte __str_9, (__str_9 >> 8)
      00001Er75s00                 1343 	.byte __str_10, (__str_10 >> 8)
      000020r79s00                 1344 	.byte __str_11, (__str_11 >> 8)
      000022r7Ds00                 1345 	.byte __str_12, (__str_12 >> 8)
      000024                       1346 ___day:
      000024r81s00                 1347 	.byte __str_13, (__str_13 >> 8)
      000026r85s00                 1348 	.byte __str_14, (__str_14 >> 8)
      000028r89s00                 1349 	.byte __str_15, (__str_15 >> 8)
      00002Ar8Ds00                 1350 	.byte __str_16, (__str_16 >> 8)
      00002Cr91s00                 1351 	.byte __str_17, (__str_17 >> 8)
      00002Er95s00                 1352 	.byte __str_18, (__str_18 >> 8)
      000030r99s00                 1353 	.byte __str_19, (__str_19 >> 8)
      000032                       1354 ___str_0:
      000032 25 73 20 25 73 20 25  1355 	.ascii "%s %s %2d %02d:%02d:%02d %04d"
             32 64 20 25 30 32 64
             3A 25 30 32 64 3A 25
             30 32 64 20 25 30 34
             64
      00004F 0A                    1356 	.db 0x0A
      000050 00                    1357 	.db 0x00
      000051                       1358 __str_1:
      000051 4A 61 6E              1359 	.ascii "Jan"
      000054 00                    1360 	.db 0x00
      000055                       1361 __str_2:
      000055 46 65 62              1362 	.ascii "Feb"
      000058 00                    1363 	.db 0x00
      000059                       1364 __str_3:
      000059 4D 61 72              1365 	.ascii "Mar"
      00005C 00                    1366 	.db 0x00
      00005D                       1367 __str_4:
      00005D 41 70 72              1368 	.ascii "Apr"
      000060 00                    1369 	.db 0x00
      000061                       1370 __str_5:
      000061 4D 61 79              1371 	.ascii "May"
      000064 00                    1372 	.db 0x00
      000065                       1373 __str_6:
      000065 4A 75 6E              1374 	.ascii "Jun"
      000068 00                    1375 	.db 0x00
      000069                       1376 __str_7:
      000069 4A 75 6C              1377 	.ascii "Jul"
      00006C 00                    1378 	.db 0x00
      00006D                       1379 __str_8:
      00006D 41 75 67              1380 	.ascii "Aug"
      000070 00                    1381 	.db 0x00
      000071                       1382 __str_9:
      000071 53 65 70              1383 	.ascii "Sep"
      000074 00                    1384 	.db 0x00
      000075                       1385 __str_10:
      000075 4F 63 74              1386 	.ascii "Oct"
      000078 00                    1387 	.db 0x00
      000079                       1388 __str_11:
      000079 4E 6F 76              1389 	.ascii "Nov"
      00007C 00                    1390 	.db 0x00
      00007D                       1391 __str_12:
      00007D 44 65 63              1392 	.ascii "Dec"
      000080 00                    1393 	.db 0x00
      000081                       1394 __str_13:
      000081 53 75 6E              1395 	.ascii "Sun"
      000084 00                    1396 	.db 0x00
      000085                       1397 __str_14:
      000085 4D 6F 6E              1398 	.ascii "Mon"
      000088 00                    1399 	.db 0x00
      000089                       1400 __str_15:
      000089 54 75 65              1401 	.ascii "Tue"
      00008C 00                    1402 	.db 0x00
      00008D                       1403 __str_16:
      00008D 57 65 64              1404 	.ascii "Wed"
      000090 00                    1405 	.db 0x00
      000091                       1406 __str_17:
      000091 54 68 75              1407 	.ascii "Thu"
      000094 00                    1408 	.db 0x00
      000095                       1409 __str_18:
      000095 46 72 69              1410 	.ascii "Fri"
      000098 00                    1411 	.db 0x00
      000099                       1412 __str_19:
      000099 53 61 74              1413 	.ascii "Sat"
      00009C 00                    1414 	.db 0x00
                                   1415 	.area XINIT   (CODE)
                                   1416 	.area CABS    (ABS,CODE)
