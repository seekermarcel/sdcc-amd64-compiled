                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:26 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _strncat
                                      7 	.optsdcc -mds390 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _strncat_PARM_3
                                     35 	.globl _strncat_PARM_2
                                     36 	.globl _strncat
                                     37 ;--------------------------------------------------------
                                     38 ; special function registers
                                     39 ;--------------------------------------------------------
                                     40 ;--------------------------------------------------------
                                     41 ; special function bits
                                     42 ;--------------------------------------------------------
                                     43 ;--------------------------------------------------------
                                     44 ; overlayable register banks
                                     45 ;--------------------------------------------------------
                                     46 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         47 	.ds 8
                                     48 ;--------------------------------------------------------
                                     49 ; internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area DSEG    (DATA)
                                     52 ;--------------------------------------------------------
                                     53 ; overlayable items in internal ram 
                                     54 ;--------------------------------------------------------
                                     55 ;--------------------------------------------------------
                                     56 ; indirectly addressable internal ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area ISEG    (DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; absolute internal ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area IABS    (ABS,DATA)
                                     63 	.area IABS    (ABS,DATA)
                                     64 ;--------------------------------------------------------
                                     65 ; bit data
                                     66 ;--------------------------------------------------------
                                     67 	.area BSEG    (BIT)
                                     68 ;--------------------------------------------------------
                                     69 ; paged external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area PSEG    (PAG,XDATA)
                                     72 ;--------------------------------------------------------
                                     73 ; external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area XSEG    (XDATA)
      000000                         76 _strncat_PARM_2:
      000000                         77 	.ds 4
      000004                         78 _strncat_PARM_3:
      000004                         79 	.ds 2
      000006                         80 _strncat_front_1_22:
      000006                         81 	.ds 4
      00000A                         82 _strncat_start_1_23:
      00000A                         83 	.ds 4
      00000E                         84 _strncat_sloc0_1_0:
      00000E                         85 	.ds 4
                                     86 ;--------------------------------------------------------
                                     87 ; absolute external ram data
                                     88 ;--------------------------------------------------------
                                     89 	.area XABS    (ABS,XDATA)
                                     90 ;--------------------------------------------------------
                                     91 ; external initialized ram data
                                     92 ;--------------------------------------------------------
                                     93 	.area XISEG   (XDATA)
                                     94 ;--------------------------------------------------------
                                     95 ; global & static initialisations
                                     96 ;--------------------------------------------------------
                                     97 	.area HOME    (CODE)
                                     98 	.area GSINIT  (CODE)
                                     99 	.area GSFINAL (CODE)
                                    100 	.area GSINIT  (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; Home
                                    103 ;--------------------------------------------------------
                                    104 	.area HOME    (CODE)
                                    105 	.area HOME    (CODE)
                                    106 ;--------------------------------------------------------
                                    107 ; code
                                    108 ;--------------------------------------------------------
                                    109 	.area CSEG    (CODE)
                                    110 ;------------------------------------------------------------
                                    111 ;Allocation info for local variables in function 'strncat'
                                    112 ;------------------------------------------------------------
                                    113 ;back                      Allocated with name '_strncat_PARM_2'
                                    114 ;count                     Allocated with name '_strncat_PARM_3'
                                    115 ;front                     Allocated with name '_strncat_front_1_22'
                                    116 ;start                     Allocated with name '_strncat_start_1_23'
                                    117 ;sloc0                     Allocated with name '_strncat_sloc0_1_0'
                                    118 ;sloc1                     Allocated with name '_strncat_sloc1_1_0'
                                    119 ;------------------------------------------------------------
                                    120 ;	_strncat.c:31: char * strncat ( char * front, const char * back, size_t count )
                                    121 ;	-----------------------------------------
                                    122 ;	 function strncat
                                    123 ;	-----------------------------------------
      000000                        124 _strncat:
                           000002   125 	ar2 = 0x02
                           000003   126 	ar3 = 0x03
                           000004   127 	ar4 = 0x04
                           000005   128 	ar5 = 0x05
                           000006   129 	ar6 = 0x06
                           000007   130 	ar7 = 0x07
                           000000   131 	ar0 = 0x00
                           000001   132 	ar1 = 0x01
      000000 75 86 01         [12]  133 	mov     dps, #1
      000003 90s00r00r06      [12]  134 	mov     dptr, #_strncat_front_1_22
      000007 E5 82            [ 8]  135 	mov	a,dpl
      000009 F0               [ 8]  136 	movx	@dptr,a
      00000A A3               [12]  137 	inc	dptr
      00000B E5 83            [ 8]  138 	mov	a,dph
      00000D F0               [ 8]  139 	movx	@dptr,a
      00000E A3               [12]  140 	inc	dptr
      00000F E5 93            [ 8]  141 	mov	a,dpx
      000011 F0               [ 8]  142 	movx	@dptr,a
      000012 A3               [12]  143 	inc	dptr
      000013 E5 F0            [ 8]  144 	mov	a,b
      000015 F0               [ 8]  145 	movx	@dptr,a
      000016 75 86 00         [12]  146 	mov	dps,#0
                                    147 ;	_strncat.c:33: char *start = front;
      000019 90s00r00r06      [12]  148 	mov	dptr,#_strncat_front_1_22
                                    149 ;	genAssign: resultIsFar = TRUE
      00001D 75 86 21         [12]  150 	mov	dps,#0x21
      000020 90s00r00r0A      [12]  151 	mov	dptr,#_strncat_start_1_23
      000024 E0               [ 8]  152 	movx	a,@dptr
      000025 F0               [ 8]  153 	movx	@dptr,a
      000026 A3               [12]  154 	inc	dptr
      000027 A3               [12]  155 	inc	dptr
      000028 E0               [ 8]  156 	movx	a,@dptr
      000029 F0               [ 8]  157 	movx	@dptr,a
      00002A A3               [12]  158 	inc	dptr
      00002B A3               [12]  159 	inc	dptr
      00002C E0               [ 8]  160 	movx	a,@dptr
      00002D F0               [ 8]  161 	movx	@dptr,a
      00002E A3               [12]  162 	inc	dptr
      00002F A3               [12]  163 	inc	dptr
      000030 E0               [ 8]  164 	movx	a,@dptr
      000031 F0               [ 8]  165 	movx	@dptr,a
      000032 75 86 00         [12]  166 	mov	dps,#0
                                    167 ;	_strncat.c:35: while (*front++);
      000035 90s00r00r06      [12]  168 	mov	dptr,#_strncat_front_1_22
                                    169 ;	genAssign: resultIsFar = FALSE
      000039 E0               [ 8]  170 	movx	a,@dptr
      00003A FA               [ 4]  171 	mov	r2,a
      00003B A3               [12]  172 	inc	dptr
      00003C E0               [ 8]  173 	movx	a,@dptr
      00003D FB               [ 4]  174 	mov	r3,a
      00003E A3               [12]  175 	inc	dptr
      00003F E0               [ 8]  176 	movx	a,@dptr
      000040 FC               [ 4]  177 	mov	r4,a
      000041 A3               [12]  178 	inc	dptr
      000042 E0               [ 8]  179 	movx	a,@dptr
      000043 FD               [ 4]  180 	mov	r5,a
      000044                        181 00101$:
      000044 8A 82            [ 8]  182 	mov	dpl,r2
      000046 8B 83            [ 8]  183 	mov	dph,r3
      000048 8C 93            [ 8]  184 	mov	dpx,r4
      00004A 8D F0            [ 8]  185 	mov	b,r5
      00004C 12s00r00r00      [16]  186 	lcall	__gptrget
      000050 FE               [ 4]  187 	mov	r6,a
      000051 A3               [12]  188 	inc	dptr
      000052 AA 82            [ 8]  189 	mov	r2,dpl
      000054 AB 83            [ 8]  190 	mov	r3,dph
      000056 AC 93            [ 8]  191 	mov	r4,dpx
      000058 AD F0            [ 8]  192 	mov	r5,b
      00005A EE               [ 4]  193 	mov	a,r6
      00005B 70 E7            [12]  194 	jnz  00101$
      00005D                        195 00127$:
                                    196 ;	_strncat.c:37: front--;
      00005D EA               [ 4]  197 	mov	a,r2
      00005E 24 FF            [ 8]  198 	add	a,#0xFF
      000060 FE               [ 4]  199 	mov	r6,a
      000061 EB               [ 4]  200 	mov	a,r3
      000062 34 FF            [ 8]  201 	addc	a,#0xFF
      000064 FF               [ 4]  202 	mov	r7,a
      000065 EC               [ 4]  203 	mov	a,r4
      000066 34 FF            [ 8]  204 	addc	a,#0xFF
      000068 F8               [ 4]  205 	mov	r0,a
      000069 8D 01            [ 8]  206 	mov	ar1,r5
                                    207 ;	genAssign: resultIsFar = TRUE
      00006B 90s00r00r06      [12]  208 	mov	dptr,#_strncat_front_1_22
      00006F EE               [ 4]  209 	mov	a,r6
      000070 F0               [ 8]  210 	movx	@dptr,a
      000071 A3               [12]  211 	inc	dptr
      000072 EF               [ 4]  212 	mov	a,r7
      000073 F0               [ 8]  213 	movx	@dptr,a
      000074 A3               [12]  214 	inc	dptr
      000075 E8               [ 4]  215 	mov	a,r0
      000076 F0               [ 8]  216 	movx	@dptr,a
      000077 A3               [12]  217 	inc	dptr
      000078 E9               [ 4]  218 	mov	a,r1
      000079 F0               [ 8]  219 	movx	@dptr,a
                                    220 ;	_strncat.c:39: while (count--)
      00007A 90s00r00r00      [12]  221 	mov	dptr,#_strncat_PARM_2
                                    222 ;	genAssign: resultIsFar = FALSE
      00007E E0               [ 8]  223 	movx	a,@dptr
      00007F FE               [ 4]  224 	mov	r6,a
      000080 A3               [12]  225 	inc	dptr
      000081 E0               [ 8]  226 	movx	a,@dptr
      000082 FF               [ 4]  227 	mov	r7,a
      000083 A3               [12]  228 	inc	dptr
      000084 E0               [ 8]  229 	movx	a,@dptr
      000085 F8               [ 4]  230 	mov	r0,a
      000086 A3               [12]  231 	inc	dptr
      000087 E0               [ 8]  232 	movx	a,@dptr
      000088 F9               [ 4]  233 	mov	r1,a
      000089 90s00r00r06      [12]  234 	mov	dptr,#_strncat_front_1_22
                                    235 ;	genAssign: resultIsFar = TRUE
      00008D 75 86 21         [12]  236 	mov	dps,#0x21
      000090 90s00r00r0E      [12]  237 	mov	dptr,#_strncat_sloc0_1_0
      000094 E0               [ 8]  238 	movx	a,@dptr
      000095 F0               [ 8]  239 	movx	@dptr,a
      000096 A3               [12]  240 	inc	dptr
      000097 A3               [12]  241 	inc	dptr
      000098 E0               [ 8]  242 	movx	a,@dptr
      000099 F0               [ 8]  243 	movx	@dptr,a
      00009A A3               [12]  244 	inc	dptr
      00009B A3               [12]  245 	inc	dptr
      00009C E0               [ 8]  246 	movx	a,@dptr
      00009D F0               [ 8]  247 	movx	@dptr,a
      00009E A3               [12]  248 	inc	dptr
      00009F A3               [12]  249 	inc	dptr
      0000A0 E0               [ 8]  250 	movx	a,@dptr
      0000A1 F0               [ 8]  251 	movx	@dptr,a
      0000A2 75 86 00         [12]  252 	mov	dps,#0
      0000A5 90s00r00r04      [12]  253 	mov	dptr,#_strncat_PARM_3
                                    254 ;	genAssign: resultIsFar = FALSE
      0000A9 E0               [ 8]  255 	movx	a,@dptr
      0000AA FC               [ 4]  256 	mov	r4,a
      0000AB A3               [12]  257 	inc	dptr
      0000AC E0               [ 8]  258 	movx	a,@dptr
      0000AD FD               [ 4]  259 	mov	r5,a
      0000AE                        260 00106$:
                                    261 ;	genAssign: resultIsFar = FALSE
      0000AE 8C 02            [ 8]  262 	mov	ar2,r4
      0000B0 8D 03            [ 8]  263 	mov	ar3,r5
      0000B2 1C               [ 4]  264 	dec	r4
      0000B3 BC FF 01         [16]  265 	cjne	r4,#0xFF,00128$
      0000B6 1D               [ 4]  266 	dec	r5
      0000B7                        267 00128$:
      0000B7 EA               [ 4]  268 	mov	a,r2
      0000B8 4B               [ 4]  269 	orl	a,r3
      0000B9 70 04            [12]  270 	jnz	00129$
      0000BB 02s00r01r42      [16]  271 	ljmp	00108$
      0000BF                        272 00129$:
                                    273 ;	_strncat.c:40: if (!(*front++ = *back++))
      0000BF 8E 82            [ 8]  274 	mov	dpl,r6
      0000C1 8F 83            [ 8]  275 	mov	dph,r7
      0000C3 88 93            [ 8]  276 	mov	dpx,r0
      0000C5 89 F0            [ 8]  277 	mov	b,r1
      0000C7 12s00r00r00      [16]  278 	lcall	__gptrget
      0000CB FA               [ 4]  279 	mov	r2,a
      0000CC A3               [12]  280 	inc	dptr
      0000CD AE 82            [ 8]  281 	mov	r6,dpl
      0000CF AF 83            [ 8]  282 	mov	r7,dph
      0000D1 A8 93            [ 8]  283 	mov	r0,dpx
      0000D3 A9 F0            [ 8]  284 	mov	r1,b
      0000D5 90s00r00r0E      [12]  285 	mov	dptr,#_strncat_sloc0_1_0
      0000D9 E0               [ 8]  286 	movx	a,@dptr
      0000DA C0 E0            [ 8]  287 	push	acc
      0000DC A3               [12]  288 	inc	dptr
      0000DD E0               [ 8]  289 	movx	a,@dptr
      0000DE C0 E0            [ 8]  290 	push	acc
      0000E0 A3               [12]  291 	inc	dptr
      0000E1 E0               [ 8]  292 	movx	a,@dptr
      0000E2 C0 E0            [ 8]  293 	push	acc
      0000E4 A3               [12]  294 	inc	dptr
      0000E5 E0               [ 8]  295 	movx	a,@dptr
      0000E6 F5 F0            [ 8]  296 	mov	b,a
      0000E8 D0 93            [ 8]  297 	pop	dpx
      0000EA D0 83            [ 8]  298 	pop	dph
      0000EC D0 82            [ 8]  299 	pop	dpl
      0000EE EA               [ 4]  300 	mov	a,r2
      0000EF 12s00r00r00      [16]  301 	lcall	__gptrput
      0000F3 90s00r00r0E      [12]  302 	mov	dptr,#_strncat_sloc0_1_0
      0000F7 E0               [ 8]  303 	movx	a,@dptr
      0000F8 24 01            [ 8]  304 	add	a,#0x01
      0000FA F0               [ 8]  305 	movx	@dptr,a
      0000FB A3               [12]  306 	inc	dptr
      0000FC E0               [ 8]  307 	movx	a,@dptr
      0000FD 34 00            [ 8]  308 	addc	a,#0x00
      0000FF F0               [ 8]  309 	movx	@dptr,a
      000100 A3               [12]  310 	inc	dptr
      000101 E0               [ 8]  311 	movx	a,@dptr
      000102 34 00            [ 8]  312 	addc	a,#0x00
      000104 F0               [ 8]  313 	movx	@dptr,a
      000105 A3               [12]  314 	inc	dptr
      000106 E0               [ 8]  315 	movx	a,@dptr
      000107 F0               [ 8]  316 	movx	@dptr,a
      000108 90s00r00r0E      [12]  317 	mov	dptr,#_strncat_sloc0_1_0
                                    318 ;	genAssign: resultIsFar = TRUE
      00010C 75 86 21         [12]  319 	mov	dps,#0x21
      00010F 90s00r00r06      [12]  320 	mov	dptr,#_strncat_front_1_22
      000113 E0               [ 8]  321 	movx	a,@dptr
      000114 F0               [ 8]  322 	movx	@dptr,a
      000115 A3               [12]  323 	inc	dptr
      000116 A3               [12]  324 	inc	dptr
      000117 E0               [ 8]  325 	movx	a,@dptr
      000118 F0               [ 8]  326 	movx	@dptr,a
      000119 A3               [12]  327 	inc	dptr
      00011A A3               [12]  328 	inc	dptr
      00011B E0               [ 8]  329 	movx	a,@dptr
      00011C F0               [ 8]  330 	movx	@dptr,a
      00011D A3               [12]  331 	inc	dptr
      00011E A3               [12]  332 	inc	dptr
      00011F E0               [ 8]  333 	movx	a,@dptr
      000120 F0               [ 8]  334 	movx	@dptr,a
      000121 75 86 00         [12]  335 	mov	dps,#0
      000124 EA               [ 4]  336 	mov	a,r2
      000125 70 87            [12]  337 	jnz  00106$
      000127                        338 00130$:
                                    339 ;	_strncat.c:41: return(start);
      000127 75 86 01         [12]  340 	mov     dps, #1
      00012A 90s00r00r0A      [12]  341 	mov     dptr, #_strncat_start_1_23
      00012E E0               [ 8]  342 	movx	a,@dptr
      00012F F5 82            [ 8]  343 	mov	dpl,a
      000131 A3               [12]  344 	inc	dptr
      000132 E0               [ 8]  345 	movx	a,@dptr
      000133 F5 83            [ 8]  346 	mov	dph,a
      000135 A3               [12]  347 	inc	dptr
      000136 E0               [ 8]  348 	movx	a,@dptr
      000137 F5 93            [ 8]  349 	mov	dpx,a
      000139 A3               [12]  350 	inc	dptr
      00013A E0               [ 8]  351 	movx	a,@dptr
      00013B F5 F0            [ 8]  352 	mov	b,a
      00013D 75 86 00         [12]  353 	mov	dps,#0
      000140 80 37            [12]  354 	sjmp 00109$
      000142                        355 00108$:
                                    356 ;	_strncat.c:43: *front = '\0';
      000142 90s00r00r06      [12]  357 	mov	dptr,#_strncat_front_1_22
      000146 E0               [ 8]  358 	movx	a,@dptr
      000147 C0 E0            [ 8]  359 	push	acc
      000149 A3               [12]  360 	inc	dptr
      00014A E0               [ 8]  361 	movx	a,@dptr
      00014B C0 E0            [ 8]  362 	push	acc
      00014D A3               [12]  363 	inc	dptr
      00014E E0               [ 8]  364 	movx	a,@dptr
      00014F C0 E0            [ 8]  365 	push	acc
      000151 A3               [12]  366 	inc	dptr
      000152 E0               [ 8]  367 	movx	a,@dptr
      000153 F5 F0            [ 8]  368 	mov	b,a
      000155 D0 93            [ 8]  369 	pop	dpx
      000157 D0 83            [ 8]  370 	pop	dph
      000159 D0 82            [ 8]  371 	pop	dpl
      00015B E4               [ 4]  372 	clr	a
      00015C 12s00r00r00      [16]  373 	lcall	__gptrput
                                    374 ;	_strncat.c:44: return(start);
      000160 75 86 01         [12]  375 	mov     dps, #1
      000163 90s00r00r0A      [12]  376 	mov     dptr, #_strncat_start_1_23
      000167 E0               [ 8]  377 	movx	a,@dptr
      000168 F5 82            [ 8]  378 	mov	dpl,a
      00016A A3               [12]  379 	inc	dptr
      00016B E0               [ 8]  380 	movx	a,@dptr
      00016C F5 83            [ 8]  381 	mov	dph,a
      00016E A3               [12]  382 	inc	dptr
      00016F E0               [ 8]  383 	movx	a,@dptr
      000170 F5 93            [ 8]  384 	mov	dpx,a
      000172 A3               [12]  385 	inc	dptr
      000173 E0               [ 8]  386 	movx	a,@dptr
      000174 F5 F0            [ 8]  387 	mov	b,a
      000176 75 86 00         [12]  388 	mov	dps,#0
      000179                        389 00109$:
      000179 22               [16]  390 	ret
                                    391 	.area CSEG    (CODE)
                                    392 	.area CONST   (CODE)
                                    393 	.area XINIT   (CODE)
                                    394 	.area CABS    (ABS,CODE)
