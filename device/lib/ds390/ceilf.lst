                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:26 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module ceilf
                                      7 	.optsdcc -mds390 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _ceilf
                                     35 ;--------------------------------------------------------
                                     36 ; special function registers
                                     37 ;--------------------------------------------------------
                                     38 ;--------------------------------------------------------
                                     39 ; special function bits
                                     40 ;--------------------------------------------------------
                                     41 ;--------------------------------------------------------
                                     42 ; overlayable register banks
                                     43 ;--------------------------------------------------------
                                     44 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         45 	.ds 8
                                     46 ;--------------------------------------------------------
                                     47 ; internal ram data
                                     48 ;--------------------------------------------------------
                                     49 	.area DSEG    (DATA)
                                     50 ;--------------------------------------------------------
                                     51 ; overlayable items in internal ram 
                                     52 ;--------------------------------------------------------
                                     53 ;--------------------------------------------------------
                                     54 ; indirectly addressable internal ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area ISEG    (DATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute internal ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area IABS    (ABS,DATA)
                                     61 	.area IABS    (ABS,DATA)
                                     62 ;--------------------------------------------------------
                                     63 ; bit data
                                     64 ;--------------------------------------------------------
                                     65 	.area BSEG    (BIT)
                                     66 ;--------------------------------------------------------
                                     67 ; paged external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area PSEG    (PAG,XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XSEG    (XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; absolute external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XABS    (ABS,XDATA)
                                     78 ;--------------------------------------------------------
                                     79 ; external initialized ram data
                                     80 ;--------------------------------------------------------
                                     81 	.area XISEG   (XDATA)
                                     82 ;--------------------------------------------------------
                                     83 ; global & static initialisations
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area GSINIT  (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; Home
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area HOME    (CODE)
                                     94 ;--------------------------------------------------------
                                     95 ; code
                                     96 ;--------------------------------------------------------
                                     97 	.area CSEG    (CODE)
                                     98 ;------------------------------------------------------------
                                     99 ;Allocation info for local variables in function 'ceilf'
                                    100 ;------------------------------------------------------------
                                    101 ;x                         Allocated to stack - _bp +1
                                    102 ;r                         Allocated to registers r6 r7 r0 r1 
                                    103 ;------------------------------------------------------------
                                    104 ;	ceilf.c:33: float ceilf(float x) _FLOAT_FUNC_REENTRANT
                                    105 ;	-----------------------------------------
                                    106 ;	 function ceilf
                                    107 ;	-----------------------------------------
      000000                        108 _ceilf:
                           000002   109 	ar2 = 0x02
                           000003   110 	ar3 = 0x03
                           000004   111 	ar4 = 0x04
                           000005   112 	ar5 = 0x05
                           000006   113 	ar6 = 0x06
                           000007   114 	ar7 = 0x07
                           000000   115 	ar0 = 0x00
                           000001   116 	ar1 = 0x01
      000000 C0*00            [ 8]  117 	push	_bpx
      000002 C0*01            [ 8]  118 	push	_bpx+1
      000004 85 81*00         [12]  119 	mov	_bpx,sp
      000007 85 9B*01         [12]  120 	mov	_bpx+1,esp
      00000A 53*01 03         [12]  121 	anl	_bpx+1,#3
      00000D C0 E0            [ 8]  122 	push	acc
      00000F C0 E0            [ 8]  123 	push	acc
      000011 C0 E0            [ 8]  124 	push	acc
      000013 C0 E0            [ 8]  125 	push	acc
      000015 75 95 40         [12]  126 	mov	dpx1,#0x40
      000018 85*01 85         [12]  127 	mov	dph1,_bpx+1
      00001B 85*00 84         [12]  128 	mov	dpl1,_bpx
      00001E 75 86 01         [12]  129 	mov	dps,#1
      000021 A3               [12]  130 	inc	dptr
      000022 75 86 01         [12]  131 	mov	dps, #1
      000025 E5 82            [ 8]  132 	mov	a,dpl
      000027 F0               [ 8]  133 	movx	@dptr,a
      000028 A3               [12]  134 	inc	dptr
      000029 E5 83            [ 8]  135 	mov	a,dph
      00002B F0               [ 8]  136 	movx	@dptr,a
      00002C A3               [12]  137 	inc	dptr
      00002D E5 93            [ 8]  138 	mov	a,dpx
      00002F F0               [ 8]  139 	movx	@dptr,a
      000030 A3               [12]  140 	inc	dptr
      000031 E5 F0            [ 8]  141 	mov	a,b
      000033 F0               [ 8]  142 	movx	@dptr,a
      000034 75 86 00         [12]  143 	mov	dps,#0
                                    144 ;	ceilf.c:36: r=x;
      000037 75 95 40         [12]  145 	mov	dpx1,#0x40
      00003A 85*01 85         [12]  146 	mov	dph1,_bpx+1
      00003D 85*00 84         [12]  147 	mov	dpl1,_bpx
      000040 75 86 01         [12]  148 	mov	dps,#1
      000043 A3               [12]  149 	inc	dptr
      000044 75 86 01         [12]  150 	mov	dps, #1
      000047 E0               [ 8]  151 	movx	a,@dptr
      000048 F5 82            [ 8]  152 	mov	dpl,a
      00004A A3               [12]  153 	inc	dptr
      00004B E0               [ 8]  154 	movx	a,@dptr
      00004C F5 83            [ 8]  155 	mov	dph,a
      00004E A3               [12]  156 	inc	dptr
      00004F E0               [ 8]  157 	movx	a,@dptr
      000050 F5 93            [ 8]  158 	mov	dpx,a
      000052 A3               [12]  159 	inc	dptr
      000053 E0               [ 8]  160 	movx	a,@dptr
      000054 F5 F0            [ 8]  161 	mov	b,a
      000056 75 86 00         [12]  162 	mov	dps,#0
      000059 12s00r00r00      [16]  163 	lcall	___fs2slong
      00005D AE 82            [ 8]  164 	mov	r6,dpl
      00005F AF 83            [ 8]  165 	mov	r7,dph
      000061 A8 93            [ 8]  166 	mov	r0,dpx
      000063 A9 F0            [ 8]  167 	mov	r1,b
                                    168 ;	genAssign: resultIsFar = TRUE
                                    169 ;	ceilf.c:37: if (r<0)
      000065 E9               [ 4]  170 	mov	a,r1
      000066 30 E7 10         [12]  171 	jnb  acc[7],00102$
      000069                        172 00114$:
                                    173 ;	ceilf.c:38: return r;
      000069 8E 82            [ 8]  174 	mov	dpl,r6
      00006B 8F 83            [ 8]  175 	mov	dph,r7
      00006D 88 93            [ 8]  176 	mov	dpx,r0
      00006F 89 F0            [ 8]  177 	mov	b,r1
      000071 12s00r00r00      [16]  178 	lcall	___slong2fs
      000075 02s00r01r05      [16]  179 	ljmp	00104$
      000079                        180 00102$:
                                    181 ;	ceilf.c:40: return (r+((r<x)?1:0));
      000079 C0 06            [ 8]  182 	push	ar6
      00007B C0 07            [ 8]  183 	push	ar7
      00007D C0 00            [ 8]  184 	push	ar0
      00007F C0 01            [ 8]  185 	push	ar1
      000081 8E 82            [ 8]  186 	mov	dpl,r6
      000083 8F 83            [ 8]  187 	mov	dph,r7
      000085 88 93            [ 8]  188 	mov	dpx,r0
      000087 89 F0            [ 8]  189 	mov	b,r1
      000089 12s00r00r00      [16]  190 	lcall	___slong2fs
      00008D AA 82            [ 8]  191 	mov	r2,dpl
      00008F AB 83            [ 8]  192 	mov	r3,dph
      000091 AC 93            [ 8]  193 	mov	r4,dpx
      000093 AD F0            [ 8]  194 	mov	r5,b
      000095 D0 01            [ 8]  195 	pop	ar1
      000097 D0 00            [ 8]  196 	pop	ar0
      000099 D0 07            [ 8]  197 	pop	ar7
      00009B D0 06            [ 8]  198 	pop	ar6
      00009D 75 93 40         [12]  199 	mov	dpx,#0x40
      0000A0 85*01 83         [12]  200 	mov	dph,_bpx+1
      0000A3 85*00 82         [12]  201 	mov	dpl,_bpx
      0000A6 A3               [12]  202 	inc	dptr
                                    203 ;	genAssign: resultIsFar = TRUE
      0000A7 75 86 21         [12]  204 	mov	dps,#0x21
      0000AA 90s00r00r00      [12]  205 	mov	dptr,#___fslt_PARM_2
      0000AE E0               [ 8]  206 	movx	a,@dptr
      0000AF F0               [ 8]  207 	movx	@dptr,a
      0000B0 A3               [12]  208 	inc	dptr
      0000B1 A3               [12]  209 	inc	dptr
      0000B2 E0               [ 8]  210 	movx	a,@dptr
      0000B3 F0               [ 8]  211 	movx	@dptr,a
      0000B4 A3               [12]  212 	inc	dptr
      0000B5 A3               [12]  213 	inc	dptr
      0000B6 E0               [ 8]  214 	movx	a,@dptr
      0000B7 F0               [ 8]  215 	movx	@dptr,a
      0000B8 A3               [12]  216 	inc	dptr
      0000B9 A3               [12]  217 	inc	dptr
      0000BA E0               [ 8]  218 	movx	a,@dptr
      0000BB F0               [ 8]  219 	movx	@dptr,a
      0000BC 75 86 00         [12]  220 	mov	dps,#0
      0000BF C0 06            [ 8]  221 	push	ar6
      0000C1 C0 07            [ 8]  222 	push	ar7
      0000C3 C0 00            [ 8]  223 	push	ar0
      0000C5 C0 01            [ 8]  224 	push	ar1
      0000C7 8A 82            [ 8]  225 	mov	dpl,r2
      0000C9 8B 83            [ 8]  226 	mov	dph,r3
      0000CB 8C 93            [ 8]  227 	mov	dpx,r4
      0000CD 8D F0            [ 8]  228 	mov	b,r5
      0000CF 12s00r00r00      [16]  229 	lcall	___fslt
      0000D3 D0 01            [ 8]  230 	pop	ar1
      0000D5 D0 00            [ 8]  231 	pop	ar0
      0000D7 D0 07            [ 8]  232 	pop	ar7
      0000D9 D0 06            [ 8]  233 	pop	ar6
      0000DB E5 82            [ 8]  234 	mov	a,dpl
      0000DD 60 04            [12]  235 	jz  00106$
      0000DF                        236 00115$:
                                    237 ;	genAssign: resultIsFar = FALSE
      0000DF 7A 01            [ 8]  238 	mov	r2,#0x01
      0000E1 80 02            [12]  239 	sjmp 00107$
      0000E3                        240 00106$:
                                    241 ;	genAssign: resultIsFar = FALSE
      0000E3 7A 00            [ 8]  242 	mov	r2,#0x00
      0000E5                        243 00107$:
      0000E5 7B 00            [ 8]  244 	mov	r3,#0x00
      0000E7 EB               [ 4]  245 	mov	a,r3
      0000E8 33               [ 4]  246 	rlc	a
      0000E9 95 E0            [ 8]  247 	subb	a,acc
      0000EB FC               [ 4]  248 	mov	r4,a
      0000EC FD               [ 4]  249 	mov	r5,a
      0000ED EA               [ 4]  250 	mov	a,r2
      0000EE 2E               [ 4]  251 	add	a,r6
      0000EF FE               [ 4]  252 	mov	r6,a
      0000F0 EB               [ 4]  253 	mov	a,r3
      0000F1 3F               [ 4]  254 	addc	a,r7
      0000F2 FF               [ 4]  255 	mov	r7,a
      0000F3 EC               [ 4]  256 	mov	a,r4
      0000F4 38               [ 4]  257 	addc	a,r0
      0000F5 F8               [ 4]  258 	mov	r0,a
      0000F6 ED               [ 4]  259 	mov	a,r5
      0000F7 39               [ 4]  260 	addc	a,r1
      0000F8 F9               [ 4]  261 	mov	r1,a
      0000F9 8E 82            [ 8]  262 	mov	dpl,r6
      0000FB 8F 83            [ 8]  263 	mov	dph,r7
      0000FD 88 93            [ 8]  264 	mov	dpx,r0
      0000FF 89 F0            [ 8]  265 	mov	b,r1
      000101 12s00r00r00      [16]  266 	lcall	___slong2fs
      000105                        267 00104$:
      000105 85*00 81         [12]  268 	mov	sp,_bpx
      000108 85*01 9B         [12]  269 	mov	esp,_bpx+1
      00010B D0*01            [ 8]  270 	pop	_bpx+1
      00010D D0*00            [ 8]  271 	pop	_bpx
      00010F 22               [16]  272 	ret
                                    273 	.area CSEG    (CODE)
                                    274 	.area CONST   (CODE)
                                    275 	.area XINIT   (CODE)
                                    276 	.area CABS    (ABS,CODE)
