                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:10:36 2022
                              5 ;--------------------------------------------------------
                              6 	.cs08
                              7 	.module acosf
                              8 	.optsdcc -ms08
                              9 	
                             10 	.area HOME    (CODE)
                             11 	.area GSINIT0 (CODE)
                             12 	.area GSINIT  (CODE)
                             13 	.area GSFINAL (CODE)
                             14 	.area CSEG    (CODE)
                             15 	.area XINIT   (CODE)
                             16 	.area CONST   (CODE)
                             17 	.area DSEG    (PAG)
                             18 	.area OSEG    (PAG, OVR)
                             19 	.area XSEG
                             20 	.area XISEG
                             21 ;--------------------------------------------------------
                             22 ; Public variables in this module
                             23 ;--------------------------------------------------------
                             24 	.globl _asincosf
                             25 	.globl _acosf
                             26 ;--------------------------------------------------------
                             27 ; ram data
                             28 ;--------------------------------------------------------
                             29 	.area DSEG    (PAG)
                             30 ;--------------------------------------------------------
                             31 ; overlayable items in ram 
                             32 ;--------------------------------------------------------
                             33 ;--------------------------------------------------------
                             34 ; absolute ram data
                             35 ;--------------------------------------------------------
                             36 	.area IABS    (ABS)
                             37 	.area IABS    (ABS)
                             38 ;--------------------------------------------------------
                             39 ; absolute external ram data
                             40 ;--------------------------------------------------------
                             41 	.area XABS    (ABS)
                             42 ;--------------------------------------------------------
                             43 ; external initialized ram data
                             44 ;--------------------------------------------------------
                             45 	.area XISEG
                             46 ;--------------------------------------------------------
                             47 ; extended address mode data
                             48 ;--------------------------------------------------------
                             49 	.area XSEG
                             50 ;--------------------------------------------------------
                             51 ; global & static initialisations
                             52 ;--------------------------------------------------------
                             53 	.area HOME    (CODE)
                             54 	.area GSINIT  (CODE)
                             55 	.area GSFINAL (CODE)
                             56 	.area GSINIT  (CODE)
                             57 ;--------------------------------------------------------
                             58 ; Home
                             59 ;--------------------------------------------------------
                             60 	.area HOME    (CODE)
                             61 	.area HOME    (CODE)
                             62 ;--------------------------------------------------------
                             63 ; code
                             64 ;--------------------------------------------------------
                             65 	.area CSEG    (CODE)
                             66 ;------------------------------------------------------------
                             67 ;Allocation info for local variables in function 'acosf'
                             68 ;------------------------------------------------------------
                             69 ;x                         Allocated to stack - sp -2
                             70 ;sloc0                     Allocated to stack - sp -8
                             71 ;------------------------------------------------------------
                             72 ;../acosf.c:36: float acosf(float x) _FLOAT_FUNC_REENTRANT
                             73 ;	-----------------------------------------
                             74 ;	 function acosf
                             75 ;	-----------------------------------------
                             76 ;	Register assignment is optimal.
                             77 ;	Stack space usage: 4 bytes.
   0000                      78 _acosf:
   0000 A7 FC         [ 2]   79 	ais	#-4
                             80 ;../acosf.c:38: if (x == 1.0) return 0.0;
   0002 95            [ 2]   81 	tsx
   0003 E6 06         [ 3]   82 	lda	6,x
   0005 C7r00r00      [ 4]   83 	sta	___fseq_PARM_1
   0008 E6 07         [ 3]   84 	lda	7,x
   000A C7r00r01      [ 4]   85 	sta	(___fseq_PARM_1 + 1)
   000D E6 08         [ 3]   86 	lda	8,x
   000F C7r00r02      [ 4]   87 	sta	(___fseq_PARM_1 + 2)
   0012 E6 09         [ 3]   88 	lda	9,x
   0014 C7r00r03      [ 4]   89 	sta	(___fseq_PARM_1 + 3)
   0017 45 3F 80      [ 3]   90 	ldhx	#0x3F80
   001A 96r00r00      [ 5]   91 	sthx	___fseq_PARM_2
   001D 8C            [ 1]   92 	clrh
   001E 5F            [ 1]   93 	clrx
   001F 96r00r02      [ 5]   94 	sthx	(___fseq_PARM_2 + 2)
   0022 CDr00r00      [ 6]   95 	jsr	___fseq
   0025 4D            [ 1]   96 	tsta
   0026 27 09         [ 3]   97 	beq	00108$
   0028 4F            [ 1]   98 	clra
   0029 97            [ 1]   99 	tax
   002A B7*00         [ 3]  100 	sta	*___SDCC_hc08_ret2
   002C B7*00         [ 3]  101 	sta	*___SDCC_hc08_ret3
   002E CCr00rB6      [ 4]  102 	jmp	00110$
   0031                     103 00108$:
                            104 ;../acosf.c:39: else if (x ==-1.0) return PI;
   0031 95            [ 2]  105 	tsx
   0032 E6 06         [ 3]  106 	lda	6,x
   0034 C7r00r00      [ 4]  107 	sta	___fseq_PARM_1
   0037 E6 07         [ 3]  108 	lda	7,x
   0039 C7r00r01      [ 4]  109 	sta	(___fseq_PARM_1 + 1)
   003C E6 08         [ 3]  110 	lda	8,x
   003E C7r00r02      [ 4]  111 	sta	(___fseq_PARM_1 + 2)
   0041 E6 09         [ 3]  112 	lda	9,x
   0043 C7r00r03      [ 4]  113 	sta	(___fseq_PARM_1 + 3)
   0046 45 BF 80      [ 3]  114 	ldhx	#0xBF80
   0049 96r00r00      [ 5]  115 	sthx	___fseq_PARM_2
   004C 8C            [ 1]  116 	clrh
   004D 5F            [ 1]  117 	clrx
   004E 96r00r02      [ 5]  118 	sthx	(___fseq_PARM_2 + 2)
   0051 CDr00r00      [ 6]  119 	jsr	___fseq
   0054 4D            [ 1]  120 	tsta
   0055 27 0C         [ 3]  121 	beq	00105$
   0057 A6 DB         [ 2]  122 	lda	#0xDB
   0059 AE 0F         [ 2]  123 	ldx	#0x0F
   005B 6E 49*00      [ 4]  124 	mov	#0x49,*___SDCC_hc08_ret2
   005E 6E 40*00      [ 4]  125 	mov	#0x40,*___SDCC_hc08_ret3
   0061 20 53         [ 3]  126 	bra	00110$
   0063                     127 00105$:
                            128 ;../acosf.c:40: else if (x == 0.0) return HALF_PI;
   0063 95            [ 2]  129 	tsx
   0064 E6 06         [ 3]  130 	lda	6,x
   0066 A4 7F         [ 2]  131 	and	#0x7F
   0068 EA 07         [ 3]  132 	ora	7,x
   006A EA 08         [ 3]  133 	ora	8,x
   006C EA 09         [ 3]  134 	ora	9,x
   006E 26 0C         [ 3]  135 	bne	00102$
   0070 A6 DB         [ 2]  136 	lda	#0xDB
   0072 AE 0F         [ 2]  137 	ldx	#0x0F
   0074 6E C9*00      [ 4]  138 	mov	#0xC9,*___SDCC_hc08_ret2
   0077 6E 3F*00      [ 4]  139 	mov	#0x3F,*___SDCC_hc08_ret3
   007A 20 3A         [ 3]  140 	bra	00110$
   007C                     141 00102$:
                            142 ;../acosf.c:41: else               return asincosf(x, true);
   007C 95            [ 2]  143 	tsx
   007D E6 06         [ 3]  144 	lda	6,x
   007F C7r00r00      [ 4]  145 	sta	_asincosf_PARM_1
   0082 E6 07         [ 3]  146 	lda	7,x
   0084 C7r00r01      [ 4]  147 	sta	(_asincosf_PARM_1 + 1)
   0087 E6 08         [ 3]  148 	lda	8,x
   0089 C7r00r02      [ 4]  149 	sta	(_asincosf_PARM_1 + 2)
   008C E6 09         [ 3]  150 	lda	9,x
   008E C7r00r03      [ 4]  151 	sta	(_asincosf_PARM_1 + 3)
   0091 A6 01         [ 2]  152 	lda	#0x01
   0093 C7r00r00      [ 4]  153 	sta	_asincosf_PARM_2
   0096 CDr00r00      [ 6]  154 	jsr	_asincosf
   0099 9E E7 04      [ 4]  155 	sta	4,s
   009C 9E EF 03      [ 4]  156 	stx	3,s
   009F B6*00         [ 3]  157 	lda	*___SDCC_hc08_ret2
   00A1 9E E7 02      [ 4]  158 	sta	2,s
   00A4 B6*00         [ 3]  159 	lda	*___SDCC_hc08_ret3
   00A6 9E E7 01      [ 4]  160 	sta	1,s
   00A9 95            [ 2]  161 	tsx
   00AA F6            [ 3]  162 	lda	,x
   00AB B7*00         [ 3]  163 	sta	*___SDCC_hc08_ret3
   00AD E6 01         [ 3]  164 	lda	1,x
   00AF B7*00         [ 3]  165 	sta	*___SDCC_hc08_ret2
   00B1 EE 02         [ 3]  166 	ldx	2,x
   00B3 9E E6 04      [ 4]  167 	lda	4,s
   00B6                     168 00110$:
   00B6 A7 04         [ 2]  169 	ais	#4
   00B8 81            [ 6]  170 	rts
                            171 	.area CSEG    (CODE)
                            172 	.area CONST   (CODE)
                            173 	.area XINIT   (CODE)
                            174 	.area CABS    (ABS,CODE)
