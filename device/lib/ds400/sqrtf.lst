                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:29 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module sqrtf
                                      7 	.optsdcc -mds400 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _ldexpf
                                     35 	.globl _frexpf
                                     36 	.globl _sqrtf
                                     37 ;--------------------------------------------------------
                                     38 ; special function registers
                                     39 ;--------------------------------------------------------
                                     40 ;--------------------------------------------------------
                                     41 ; special function bits
                                     42 ;--------------------------------------------------------
                                     43 ;--------------------------------------------------------
                                     44 ; overlayable register banks
                                     45 ;--------------------------------------------------------
                                     46 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         47 	.ds 8
                                     48 	.area REG_BANK_3	(REL,OVR,DATA)
      000000                         49 	.ds 8
                                     50 ;--------------------------------------------------------
                                     51 ; internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area DSEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; overlayable items in internal ram 
                                     56 ;--------------------------------------------------------
                                     57 ;--------------------------------------------------------
                                     58 ; indirectly addressable internal ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area ISEG    (DATA)
                                     61 ;--------------------------------------------------------
                                     62 ; absolute internal ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area IABS    (ABS,DATA)
                                     65 	.area IABS    (ABS,DATA)
                                     66 ;--------------------------------------------------------
                                     67 ; bit data
                                     68 ;--------------------------------------------------------
                                     69 	.area BSEG    (BIT)
                                     70 ;--------------------------------------------------------
                                     71 ; paged external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area PSEG    (PAG,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XSEG    (XDATA)
                                     78 ;--------------------------------------------------------
                                     79 ; absolute external ram data
                                     80 ;--------------------------------------------------------
                                     81 	.area XABS    (ABS,XDATA)
                                     82 ;--------------------------------------------------------
                                     83 ; external initialized ram data
                                     84 ;--------------------------------------------------------
                                     85 	.area XISEG   (XDATA)
                                     86 ;--------------------------------------------------------
                                     87 ; global & static initialisations
                                     88 ;--------------------------------------------------------
                                     89 	.area HOME    (CODE)
                                     90 	.area GSINIT  (CODE)
                                     91 	.area GSFINAL (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 ;--------------------------------------------------------
                                     94 ; Home
                                     95 ;--------------------------------------------------------
                                     96 	.area HOME    (CODE)
                                     97 	.area HOME    (CODE)
                                     98 ;--------------------------------------------------------
                                     99 ; code
                                    100 ;--------------------------------------------------------
                                    101 	.area CSEG    (CODE)
                                    102 ;------------------------------------------------------------
                                    103 ;Allocation info for local variables in function 'sqrtf'
                                    104 ;------------------------------------------------------------
                                    105 ;x                         Allocated to registers r2 r3 r4 r5 
                                    106 ;f                         Allocated to stack - _bp +5
                                    107 ;y                         Allocated to registers r6 r7 r0 r1 
                                    108 ;n                         Allocated to stack - _bp +9
                                    109 ;sloc0                     Allocated to stack - _bp +1
                                    110 ;------------------------------------------------------------
                                    111 ;	sqrtf.c:37: float sqrtf(float x) _FLOAT_FUNC_REENTRANT
                                    112 ;	-----------------------------------------
                                    113 ;	 function sqrtf
                                    114 ;	-----------------------------------------
      000000                        115 _sqrtf:
                           000002   116 	ar2 = 0x02
                           000003   117 	ar3 = 0x03
                           000004   118 	ar4 = 0x04
                           000005   119 	ar5 = 0x05
                           000006   120 	ar6 = 0x06
                           000007   121 	ar7 = 0x07
                           000000   122 	ar0 = 0x00
                           000001   123 	ar1 = 0x01
      000000 C0*00            [ 8]  124 	push	_bpx
      000002 C0*01            [ 8]  125 	push	_bpx+1
      000004 85 81*00         [12]  126 	mov	_bpx,sp
      000007 85 9B*01         [12]  127 	mov	_bpx+1,esp
      00000A 53*01 03         [12]  128 	anl	_bpx+1,#3
      00000D 43*01 DC         [12]  129 	orl	_bpx+1,#0xDC
      000010 E5 81            [ 8]  130 	mov	a,sp
      000012 24 0A            [ 8]  131 	add	a,#0x0A
      000014 F5 81            [ 8]  132 	mov	sp,a
      000016 E5 9B            [ 8]  133 	mov	a,esp
      000018 54 03            [ 8]  134 	anl	a,#3
      00001A 44 DC            [ 8]  135 	orl	a,#0xDC
      00001C 34 00            [ 8]  136 	addc	a,#0x00
      00001E F5 9B            [ 8]  137 	mov	esp,a
      000020 AA 82            [ 8]  138 	mov	r2,dpl
      000022 AB 83            [ 8]  139 	mov	r3,dph
      000024 AC 93            [ 8]  140 	mov	r4,dpx
      000026 AD F0            [ 8]  141 	mov	r5,b
                                    142 ;	sqrtf.c:42: if (x==0.0) return x;
      000028 8A F0            [ 8]  143 	mov	b,r2
      00002A EB               [ 4]  144 	mov	a,r3
      00002B 42 F0            [ 8]  145 	orl	b,a
      00002D EC               [ 4]  146 	mov	a,r4
      00002E 42 F0            [ 8]  147 	orl	b,a
      000030 ED               [ 4]  148 	mov	a,r5
      000031 54 7F            [ 8]  149 	anl	a,#0x7F
      000033 45 F0            [ 8]  150 	orl	a,b
      000035 70 0C            [12]  151 	jnz  00107$
      000037                        152 00125$:
      000037 8A 82            [ 8]  153 	mov	dpl,r2
      000039 8B 83            [ 8]  154 	mov	dph,r3
      00003B 8C 93            [ 8]  155 	mov	dpx,r4
      00003D 8D F0            [ 8]  156 	mov	b,r5
      00003F 02s00r03r5C      [16]  157 	ljmp	00111$
      000043                        158 00107$:
                                    159 ;	sqrtf.c:43: else if (x==1.0) return 1.0;
                                    160 ;	genAssign: resultIsFar = TRUE
      000043 90s00r00r00      [12]  161 	mov	dptr,#___fseq_PARM_2
      000047 E4               [ 4]  162 	clr	a
      000048 F0               [ 8]  163 	movx	@dptr,a
      000049 A3               [12]  164 	inc	dptr
      00004A E4               [ 4]  165 	clr	a
      00004B F0               [ 8]  166 	movx	@dptr,a
      00004C A3               [12]  167 	inc	dptr
      00004D 74 80            [ 8]  168 	mov	a,#0x80
      00004F F0               [ 8]  169 	movx	@dptr,a
      000050 A3               [12]  170 	inc	dptr
      000051 74 3F            [ 8]  171 	mov	a,#0x3F
      000053 F0               [ 8]  172 	movx	@dptr,a
      000054 C0 02            [ 8]  173 	push	ar2
      000056 C0 03            [ 8]  174 	push	ar3
      000058 C0 04            [ 8]  175 	push	ar4
      00005A C0 05            [ 8]  176 	push	ar5
      00005C 8A 82            [ 8]  177 	mov	dpl,r2
      00005E 8B 83            [ 8]  178 	mov	dph,r3
      000060 8C 93            [ 8]  179 	mov	dpx,r4
      000062 8D F0            [ 8]  180 	mov	b,r5
      000064 12s00r00r00      [16]  181 	lcall	___fseq
      000068 D0 05            [ 8]  182 	pop	ar5
      00006A D0 04            [ 8]  183 	pop	ar4
      00006C D0 03            [ 8]  184 	pop	ar3
      00006E D0 02            [ 8]  185 	pop	ar2
      000070 E5 82            [ 8]  186 	mov	a,dpl
      000072 60 0E            [12]  187 	jz  00104$
      000074                        188 00126$:
      000074 90 00 00 00      [12]  189 	mov  dptr,#0x0000
      000078 75 93 80         [12]  190 	mov	dpx,#0x80
      00007B 75 F0 3F         [12]  191 	mov	b,#0x3F
      00007E 02s00r03r5C      [16]  192 	ljmp	00111$
      000082                        193 00104$:
                                    194 ;	sqrtf.c:44: else if (x<0.0)
                                    195 ;	genAssign: resultIsFar = TRUE
      000082 90s00r00r00      [12]  196 	mov	dptr,#___fslt_PARM_2
      000086 E4               [ 4]  197 	clr	a
      000087 F0               [ 8]  198 	movx	@dptr,a
      000088 A3               [12]  199 	inc	dptr
      000089 F0               [ 8]  200 	movx	@dptr,a
      00008A A3               [12]  201 	inc	dptr
      00008B F0               [ 8]  202 	movx	@dptr,a
      00008C A3               [12]  203 	inc	dptr
      00008D F0               [ 8]  204 	movx	@dptr,a
      00008E C0 02            [ 8]  205 	push	ar2
      000090 C0 03            [ 8]  206 	push	ar3
      000092 C0 04            [ 8]  207 	push	ar4
      000094 C0 05            [ 8]  208 	push	ar5
      000096 8A 82            [ 8]  209 	mov	dpl,r2
      000098 8B 83            [ 8]  210 	mov	dph,r3
      00009A 8C 93            [ 8]  211 	mov	dpx,r4
      00009C 8D F0            [ 8]  212 	mov	b,r5
      00009E 12s00r00r00      [16]  213 	lcall	___fslt
      0000A2 D0 05            [ 8]  214 	pop	ar5
      0000A4 D0 04            [ 8]  215 	pop	ar4
      0000A6 D0 03            [ 8]  216 	pop	ar3
      0000A8 D0 02            [ 8]  217 	pop	ar2
      0000AA E5 82            [ 8]  218 	mov	a,dpl
      0000AC 60 15            [12]  219 	jz  00108$
      0000AE                        220 00127$:
                                    221 ;	sqrtf.c:46: errno=EDOM;
                                    222 ;	genAssign: resultIsFar = TRUE
      0000AE 90s00r00r00      [12]  223 	mov	dptr,#_errno
      0000B2 74 21            [ 8]  224 	mov	a,#0x21
      0000B4 F0               [ 8]  225 	movx	@dptr,a
      0000B5 E4               [ 4]  226 	clr	a
      0000B6 A3               [12]  227 	inc	dptr
      0000B7 F0               [ 8]  228 	movx	@dptr,a
                                    229 ;	sqrtf.c:47: return 0.0;
      0000B8 90 00 00 00      [12]  230 	mov  dptr,#0x0000
      0000BC 75 F0 00         [12]  231 	mov	b,#0x00
      0000BF 02s00r03r5C      [16]  232 	ljmp	00111$
      0000C3                        233 00108$:
                                    234 ;	sqrtf.c:49: f=frexpf(x, &n);
      0000C3 E5*00            [ 8]  235 	mov	a,_bpx
      0000C5 24 09            [ 8]  236 	add	a,#0x09
      0000C7 F5 F0            [ 8]  237 	mov	b,a
      0000C9 E4               [ 4]  238 	clr	a
      0000CA 35*01            [ 8]  239 	addc	a,_bpx+1
      0000CC AE F0            [ 8]  240 	mov	r6,b
      0000CE FF               [ 4]  241 	mov	r7,a
      0000CF 78 FF            [ 8]  242 	mov	r0,#0xFF
      0000D1 90s00r00r00      [12]  243 	mov	dptr,#_frexpf_PARM_2
      0000D5 EE               [ 4]  244 	mov	a,r6
      0000D6 F0               [ 8]  245 	movx	@dptr,a
      0000D7 A3               [12]  246 	inc	dptr
      0000D8 EF               [ 4]  247 	mov	a,r7
      0000D9 F0               [ 8]  248 	movx	@dptr,a
      0000DA A3               [12]  249 	inc	dptr
      0000DB E8               [ 4]  250 	mov	a,r0
      0000DC F0               [ 8]  251 	movx	@dptr,a
      0000DD A3               [12]  252 	inc	dptr
      0000DE E4               [ 4]  253 	clr	a
      0000DF F0               [ 8]  254 	movx	@dptr,a
      0000E0 8A 82            [ 8]  255 	mov	dpl,r2
      0000E2 8B 83            [ 8]  256 	mov	dph,r3
      0000E4 8C 93            [ 8]  257 	mov	dpx,r4
      0000E6 8D F0            [ 8]  258 	mov	b,r5
      0000E8 12s00r00r00      [16]  259 	lcall	_frexpf
      0000EC AA 82            [ 8]  260 	mov	r2,dpl
      0000EE AB 83            [ 8]  261 	mov	r3,dph
      0000F0 AC 93            [ 8]  262 	mov	r4,dpx
      0000F2 AD F0            [ 8]  263 	mov	r5,b
                                    264 ;	genAssign: resultIsFar = TRUE
      0000F4 E5*00            [ 8]  265 	mov	a,_bpx
      0000F6 C3               [ 4]  266 	clr	c
      0000F7 94 FB            [ 8]  267 	subb	a,#0xFB
      0000F9 F5 82            [ 8]  268 	mov	dpl,a
      0000FB E5*01            [ 8]  269 	mov	a,_bpx+1
      0000FD 94 FF            [ 8]  270 	subb	a,#0xFF
      0000FF F5 83            [ 8]  271 	mov	dph,a
      000101 75 93 FF         [12]  272 	mov	dpx,#0xFF
      000104 EA               [ 4]  273 	mov	a,r2
      000105 F0               [ 8]  274 	movx	@dptr,a
      000106 A3               [12]  275 	inc	dptr
      000107 EB               [ 4]  276 	mov	a,r3
      000108 F0               [ 8]  277 	movx	@dptr,a
      000109 A3               [12]  278 	inc	dptr
      00010A EC               [ 4]  279 	mov	a,r4
      00010B F0               [ 8]  280 	movx	@dptr,a
      00010C A3               [12]  281 	inc	dptr
      00010D ED               [ 4]  282 	mov	a,r5
      00010E F0               [ 8]  283 	movx	@dptr,a
                                    284 ;	sqrtf.c:50: y=0.41731+0.59016*f; /*Educated guess*/
      00010F E5*00            [ 8]  285 	mov	a,_bpx
      000111 C3               [ 4]  286 	clr	c
      000112 94 FB            [ 8]  287 	subb	a,#0xFB
      000114 F5 82            [ 8]  288 	mov	dpl,a
      000116 E5*01            [ 8]  289 	mov	a,_bpx+1
      000118 94 FF            [ 8]  290 	subb	a,#0xFF
      00011A F5 83            [ 8]  291 	mov	dph,a
      00011C 75 93 FF         [12]  292 	mov	dpx,#0xFF
                                    293 ;	genAssign: resultIsFar = TRUE
      00011F 75 86 21         [12]  294 	mov	dps,#0x21
      000122 90s00r00r00      [12]  295 	mov	dptr,#___fsmul_PARM_2
      000126 E0               [ 8]  296 	movx	a,@dptr
      000127 F0               [ 8]  297 	movx	@dptr,a
      000128 A3               [12]  298 	inc	dptr
      000129 A3               [12]  299 	inc	dptr
      00012A E0               [ 8]  300 	movx	a,@dptr
      00012B F0               [ 8]  301 	movx	@dptr,a
      00012C A3               [12]  302 	inc	dptr
      00012D A3               [12]  303 	inc	dptr
      00012E E0               [ 8]  304 	movx	a,@dptr
      00012F F0               [ 8]  305 	movx	@dptr,a
      000130 A3               [12]  306 	inc	dptr
      000131 A3               [12]  307 	inc	dptr
      000132 E0               [ 8]  308 	movx	a,@dptr
      000133 F0               [ 8]  309 	movx	@dptr,a
      000134 75 86 00         [12]  310 	mov	dps,#0
      000137 90 17 14 BA      [12]  311 	mov	dptr,#0x1714BA
      00013B 75 F0 3F         [12]  312 	mov	b,#0x3F
      00013E 12s00r00r00      [16]  313 	lcall	___fsmul
      000142 AE 82            [ 8]  314 	mov	r6,dpl
      000144 AF 83            [ 8]  315 	mov	r7,dph
      000146 A8 93            [ 8]  316 	mov	r0,dpx
      000148 A9 F0            [ 8]  317 	mov	r1,b
                                    318 ;	genAssign: resultIsFar = TRUE
      00014A 90s00r00r00      [12]  319 	mov	dptr,#___fsadd_PARM_2
      00014E 74 A8            [ 8]  320 	mov	a,#0xA8
      000150 F0               [ 8]  321 	movx	@dptr,a
      000151 A3               [12]  322 	inc	dptr
      000152 74 A9            [ 8]  323 	mov	a,#0xA9
      000154 F0               [ 8]  324 	movx	@dptr,a
      000155 A3               [12]  325 	inc	dptr
      000156 74 D5            [ 8]  326 	mov	a,#0xD5
      000158 F0               [ 8]  327 	movx	@dptr,a
      000159 A3               [12]  328 	inc	dptr
      00015A 74 3E            [ 8]  329 	mov	a,#0x3E
      00015C F0               [ 8]  330 	movx	@dptr,a
      00015D 8E 82            [ 8]  331 	mov	dpl,r6
      00015F 8F 83            [ 8]  332 	mov	dph,r7
      000161 88 93            [ 8]  333 	mov	dpx,r0
      000163 89 F0            [ 8]  334 	mov	b,r1
      000165 12s00r00r00      [16]  335 	lcall	___fsadd
      000169 AE 82            [ 8]  336 	mov	r6,dpl
      00016B AF 83            [ 8]  337 	mov	r7,dph
      00016D A8 93            [ 8]  338 	mov	r0,dpx
      00016F A9 F0            [ 8]  339 	mov	r1,b
                                    340 ;	genAssign: resultIsFar = TRUE
                                    341 ;	sqrtf.c:52: y+=f/y;
                                    342 ;	genAssign: resultIsFar = TRUE
      000171 90s00r00r00      [12]  343 	mov	dptr,#___fsdiv_PARM_2
      000175 EE               [ 4]  344 	mov	a,r6
      000176 F0               [ 8]  345 	movx	@dptr,a
      000177 A3               [12]  346 	inc	dptr
      000178 EF               [ 4]  347 	mov	a,r7
      000179 F0               [ 8]  348 	movx	@dptr,a
      00017A A3               [12]  349 	inc	dptr
      00017B E8               [ 4]  350 	mov	a,r0
      00017C F0               [ 8]  351 	movx	@dptr,a
      00017D A3               [12]  352 	inc	dptr
      00017E E9               [ 4]  353 	mov	a,r1
      00017F F0               [ 8]  354 	movx	@dptr,a
      000180 C0 06            [ 8]  355 	push	ar6
      000182 C0 07            [ 8]  356 	push	ar7
      000184 C0 00            [ 8]  357 	push	ar0
      000186 C0 01            [ 8]  358 	push	ar1
      000188 E5*00            [ 8]  359 	mov	a,_bpx
      00018A C3               [ 4]  360 	clr	c
      00018B 94 FB            [ 8]  361 	subb	a,#0xFB
      00018D F5 84            [ 8]  362 	mov	dpl1,a
      00018F E5*01            [ 8]  363 	mov	a,_bpx+1
      000191 94 FF            [ 8]  364 	subb	a,#0xFF
      000193 F5 85            [ 8]  365 	mov	dph1,a
      000195 75 95 FF         [12]  366 	mov	dpx1,#0xFF
      000198 05 86            [ 8]  367 	inc	dps
      00019A E0               [ 8]  368 	movx	a,@dptr
      00019B F5 82            [ 8]  369 	mov	dpl,a
      00019D A3               [12]  370 	inc	dptr
      00019E E0               [ 8]  371 	movx	a,@dptr
      00019F F5 83            [ 8]  372 	mov	dph,a
      0001A1 A3               [12]  373 	inc	dptr
      0001A2 E0               [ 8]  374 	movx	a,@dptr
      0001A3 F5 93            [ 8]  375 	mov	dpx,a
      0001A5 A3               [12]  376 	inc	dptr
      0001A6 E0               [ 8]  377 	movx	a,@dptr
      0001A7 F5 F0            [ 8]  378 	mov	b,a
      0001A9 75 86 00         [12]  379 	mov	dps,#0
      0001AC 12s00r00r00      [16]  380 	lcall	___fsdiv
      0001B0 AA 82            [ 8]  381 	mov	r2,dpl
      0001B2 AB 83            [ 8]  382 	mov	r3,dph
      0001B4 AC 93            [ 8]  383 	mov	r4,dpx
      0001B6 AD F0            [ 8]  384 	mov	r5,b
      0001B8 D0 01            [ 8]  385 	pop	ar1
      0001BA D0 00            [ 8]  386 	pop	ar0
      0001BC D0 07            [ 8]  387 	pop	ar7
      0001BE D0 06            [ 8]  388 	pop	ar6
                                    389 ;	genAssign: resultIsFar = TRUE
      0001C0 90s00r00r00      [12]  390 	mov	dptr,#___fsadd_PARM_2
      0001C4 EA               [ 4]  391 	mov	a,r2
      0001C5 F0               [ 8]  392 	movx	@dptr,a
      0001C6 A3               [12]  393 	inc	dptr
      0001C7 EB               [ 4]  394 	mov	a,r3
      0001C8 F0               [ 8]  395 	movx	@dptr,a
      0001C9 A3               [12]  396 	inc	dptr
      0001CA EC               [ 4]  397 	mov	a,r4
      0001CB F0               [ 8]  398 	movx	@dptr,a
      0001CC A3               [12]  399 	inc	dptr
      0001CD ED               [ 4]  400 	mov	a,r5
      0001CE F0               [ 8]  401 	movx	@dptr,a
      0001CF 8E 82            [ 8]  402 	mov	dpl,r6
      0001D1 8F 83            [ 8]  403 	mov	dph,r7
      0001D3 88 93            [ 8]  404 	mov	dpx,r0
      0001D5 89 F0            [ 8]  405 	mov	b,r1
      0001D7 12s00r00r00      [16]  406 	lcall	___fsadd
      0001DB AA 82            [ 8]  407 	mov	r2,dpl
      0001DD AB 83            [ 8]  408 	mov	r3,dph
      0001DF AC 93            [ 8]  409 	mov	r4,dpx
      0001E1 AD F0            [ 8]  410 	mov	r5,b
                                    411 ;	genAssign: resultIsFar = TRUE
      0001E3 8A 06            [ 8]  412 	mov	ar6,r2
      0001E5 8B 07            [ 8]  413 	mov	ar7,r3
      0001E7 8C 00            [ 8]  414 	mov	ar0,r4
      0001E9 8D 01            [ 8]  415 	mov	ar1,r5
                                    416 ;	sqrtf.c:53: y=ldexpf(y, -2) + f/y; /*Faster version of 0.25 * y + f/y*/
                                    417 ;	genAssign: resultIsFar = TRUE
      0001EB 90s00r00r00      [12]  418 	mov	dptr,#_ldexpf_PARM_2
      0001EF 74 FE            [ 8]  419 	mov	a,#0xFE
      0001F1 F0               [ 8]  420 	movx	@dptr,a
      0001F2 A3               [12]  421 	inc	dptr
      0001F3 74 FF            [ 8]  422 	mov	a,#0xFF
      0001F5 F0               [ 8]  423 	movx	@dptr,a
      0001F6 C0 06            [ 8]  424 	push	ar6
      0001F8 C0 07            [ 8]  425 	push	ar7
      0001FA C0 00            [ 8]  426 	push	ar0
      0001FC C0 01            [ 8]  427 	push	ar1
      0001FE 8E 82            [ 8]  428 	mov	dpl,r6
      000200 8F 83            [ 8]  429 	mov	dph,r7
      000202 88 93            [ 8]  430 	mov	dpx,r0
      000204 89 F0            [ 8]  431 	mov	b,r1
      000206 12s00r00r00      [16]  432 	lcall	_ldexpf
      00020A 75 95 FF         [12]  433 	mov	dpx1,#0xFF
      00020D 85*01 85         [12]  434 	mov	dph1,_bpx+1
      000210 85*00 84         [12]  435 	mov	dpl1,_bpx
      000213 75 86 01         [12]  436 	mov     dps,#1
      000216 A3               [12]  437 	inc	dptr
      000217 E5 82            [ 8]  438 	mov	a,dpl
      000219 F0               [ 8]  439 	movx	@dptr,a
      00021A A3               [12]  440 	inc	dptr
      00021B E5 83            [ 8]  441 	mov	a,dph
      00021D F0               [ 8]  442 	movx	@dptr,a
      00021E A3               [12]  443 	inc	dptr
      00021F E5 93            [ 8]  444 	mov	a,dpx
      000221 F0               [ 8]  445 	movx	@dptr,a
      000222 A3               [12]  446 	inc	dptr
      000223 E5 F0            [ 8]  447 	mov	a,b
      000225 F0               [ 8]  448 	movx	@dptr,a
      000226 75 86 00         [12]  449 	mov	dps,#0
      000229 D0 01            [ 8]  450 	pop	ar1
      00022B D0 00            [ 8]  451 	pop	ar0
      00022D D0 07            [ 8]  452 	pop	ar7
      00022F D0 06            [ 8]  453 	pop	ar6
                                    454 ;	genAssign: resultIsFar = TRUE
      000231 90s00r00r00      [12]  455 	mov	dptr,#___fsdiv_PARM_2
      000235 EE               [ 4]  456 	mov	a,r6
      000236 F0               [ 8]  457 	movx	@dptr,a
      000237 A3               [12]  458 	inc	dptr
      000238 EF               [ 4]  459 	mov	a,r7
      000239 F0               [ 8]  460 	movx	@dptr,a
      00023A A3               [12]  461 	inc	dptr
      00023B E8               [ 4]  462 	mov	a,r0
      00023C F0               [ 8]  463 	movx	@dptr,a
      00023D A3               [12]  464 	inc	dptr
      00023E E9               [ 4]  465 	mov	a,r1
      00023F F0               [ 8]  466 	movx	@dptr,a
      000240 E5*00            [ 8]  467 	mov	a,_bpx
      000242 C3               [ 4]  468 	clr	c
      000243 94 FB            [ 8]  469 	subb	a,#0xFB
      000245 F5 84            [ 8]  470 	mov	dpl1,a
      000247 E5*01            [ 8]  471 	mov	a,_bpx+1
      000249 94 FF            [ 8]  472 	subb	a,#0xFF
      00024B F5 85            [ 8]  473 	mov	dph1,a
      00024D 75 95 FF         [12]  474 	mov	dpx1,#0xFF
      000250 05 86            [ 8]  475 	inc	dps
      000252 E0               [ 8]  476 	movx	a,@dptr
      000253 F5 82            [ 8]  477 	mov	dpl,a
      000255 A3               [12]  478 	inc	dptr
      000256 E0               [ 8]  479 	movx	a,@dptr
      000257 F5 83            [ 8]  480 	mov	dph,a
      000259 A3               [12]  481 	inc	dptr
      00025A E0               [ 8]  482 	movx	a,@dptr
      00025B F5 93            [ 8]  483 	mov	dpx,a
      00025D A3               [12]  484 	inc	dptr
      00025E E0               [ 8]  485 	movx	a,@dptr
      00025F F5 F0            [ 8]  486 	mov	b,a
      000261 75 86 00         [12]  487 	mov	dps,#0
      000264 12s00r00r00      [16]  488 	lcall	___fsdiv
      000268 AA 82            [ 8]  489 	mov	r2,dpl
      00026A AB 83            [ 8]  490 	mov	r3,dph
      00026C AC 93            [ 8]  491 	mov	r4,dpx
      00026E AD F0            [ 8]  492 	mov	r5,b
                                    493 ;	genAssign: resultIsFar = TRUE
      000270 90s00r00r00      [12]  494 	mov	dptr,#___fsadd_PARM_2
      000274 EA               [ 4]  495 	mov	a,r2
      000275 F0               [ 8]  496 	movx	@dptr,a
      000276 A3               [12]  497 	inc	dptr
      000277 EB               [ 4]  498 	mov	a,r3
      000278 F0               [ 8]  499 	movx	@dptr,a
      000279 A3               [12]  500 	inc	dptr
      00027A EC               [ 4]  501 	mov	a,r4
      00027B F0               [ 8]  502 	movx	@dptr,a
      00027C A3               [12]  503 	inc	dptr
      00027D ED               [ 4]  504 	mov	a,r5
      00027E F0               [ 8]  505 	movx	@dptr,a
      00027F 75 95 FF         [12]  506 	mov	dpx1,#0xFF
      000282 85*01 85         [12]  507 	mov	dph1,_bpx+1
      000285 85*00 84         [12]  508 	mov	dpl1,_bpx
      000288 75 86 01         [12]  509 	mov     dps,#1
      00028B A3               [12]  510 	inc	dptr
      00028C E0               [ 8]  511 	movx	a,@dptr
      00028D F5 82            [ 8]  512 	mov	dpl,a
      00028F A3               [12]  513 	inc	dptr
      000290 E0               [ 8]  514 	movx	a,@dptr
      000291 F5 83            [ 8]  515 	mov	dph,a
      000293 A3               [12]  516 	inc	dptr
      000294 E0               [ 8]  517 	movx	a,@dptr
      000295 F5 93            [ 8]  518 	mov	dpx,a
      000297 A3               [12]  519 	inc	dptr
      000298 E0               [ 8]  520 	movx	a,@dptr
      000299 F5 F0            [ 8]  521 	mov	b,a
      00029B 75 86 00         [12]  522 	mov	dps,#0
      00029E 12s00r00r00      [16]  523 	lcall	___fsadd
      0002A2 AA 82            [ 8]  524 	mov	r2,dpl
      0002A4 AB 83            [ 8]  525 	mov	r3,dph
      0002A6 AC 93            [ 8]  526 	mov	r4,dpx
      0002A8 AD F0            [ 8]  527 	mov	r5,b
                                    528 ;	genAssign: resultIsFar = TRUE
      0002AA 8A 06            [ 8]  529 	mov	ar6,r2
      0002AC 8B 07            [ 8]  530 	mov	ar7,r3
      0002AE 8C 00            [ 8]  531 	mov	ar0,r4
      0002B0 8D 01            [ 8]  532 	mov	ar1,r5
                                    533 ;	sqrtf.c:55: if (n&1)
      0002B2 E5*00            [ 8]  534 	mov	a,_bpx
      0002B4 C3               [ 4]  535 	clr	c
      0002B5 94 F7            [ 8]  536 	subb	a,#0xF7
      0002B7 F5 82            [ 8]  537 	mov	dpl,a
      0002B9 E5*01            [ 8]  538 	mov	a,_bpx+1
      0002BB 94 FF            [ 8]  539 	subb	a,#0xFF
      0002BD F5 83            [ 8]  540 	mov	dph,a
      0002BF 75 93 FF         [12]  541 	mov	dpx,#0xFF
      0002C2 E0               [ 8]  542 	movx	a,@dptr
      0002C3 30 E0 43         [12]  543 	jnb  acc[0],00110$
      0002C6                        544 00128$:
                                    545 ;	sqrtf.c:57: y*=0.7071067812;
                                    546 ;	genAssign: resultIsFar = TRUE
      0002C6 90s00r00r00      [12]  547 	mov	dptr,#___fsmul_PARM_2
      0002CA EE               [ 4]  548 	mov	a,r6
      0002CB F0               [ 8]  549 	movx	@dptr,a
      0002CC A3               [12]  550 	inc	dptr
      0002CD EF               [ 4]  551 	mov	a,r7
      0002CE F0               [ 8]  552 	movx	@dptr,a
      0002CF A3               [12]  553 	inc	dptr
      0002D0 E8               [ 4]  554 	mov	a,r0
      0002D1 F0               [ 8]  555 	movx	@dptr,a
      0002D2 A3               [12]  556 	inc	dptr
      0002D3 E9               [ 4]  557 	mov	a,r1
      0002D4 F0               [ 8]  558 	movx	@dptr,a
      0002D5 90 35 04 F3      [12]  559 	mov	dptr,#0x3504F3
      0002D9 75 F0 3F         [12]  560 	mov	b,#0x3F
      0002DC 12s00r00r00      [16]  561 	lcall	___fsmul
      0002E0 AA 82            [ 8]  562 	mov	r2,dpl
      0002E2 AB 83            [ 8]  563 	mov	r3,dph
      0002E4 AC 93            [ 8]  564 	mov	r4,dpx
      0002E6 AD F0            [ 8]  565 	mov	r5,b
                                    566 ;	genAssign: resultIsFar = TRUE
      0002E8 8A 06            [ 8]  567 	mov	ar6,r2
      0002EA 8B 07            [ 8]  568 	mov	ar7,r3
      0002EC 8C 00            [ 8]  569 	mov	ar0,r4
      0002EE 8D 01            [ 8]  570 	mov	ar1,r5
                                    571 ;	sqrtf.c:58: ++n;
      0002F0 E5*00            [ 8]  572 	mov	a,_bpx
      0002F2 C3               [ 4]  573 	clr	c
      0002F3 94 F7            [ 8]  574 	subb	a,#0xF7
      0002F5 F5 82            [ 8]  575 	mov	dpl,a
      0002F7 E5*01            [ 8]  576 	mov	a,_bpx+1
      0002F9 94 FF            [ 8]  577 	subb	a,#0xFF
      0002FB F5 83            [ 8]  578 	mov	dph,a
      0002FD 75 93 FF         [12]  579 	mov	dpx,#0xFF
      000300 E0               [ 8]  580 	movx	a,@dptr
      000301 24 01            [ 8]  581 	add	a,#0x01
      000303 F0               [ 8]  582 	movx	@dptr,a
      000304 A3               [12]  583 	inc	dptr
      000305 E0               [ 8]  584 	movx	a,@dptr
      000306 34 00            [ 8]  585 	addc	a,#0x00
      000308 F0               [ 8]  586 	movx	@dptr,a
      000309                        587 00110$:
                                    588 ;	sqrtf.c:60: return ldexpf(y, n/2);
                                    589 ;	genAssign: resultIsFar = TRUE
      000309 90s00r00r00      [12]  590 	mov	dptr,#__divsint_PARM_2
      00030D 74 02            [ 8]  591 	mov	a,#0x02
      00030F F0               [ 8]  592 	movx	@dptr,a
      000310 E4               [ 4]  593 	clr	a
      000311 A3               [12]  594 	inc	dptr
      000312 F0               [ 8]  595 	movx	@dptr,a
      000313 C0 06            [ 8]  596 	push	ar6
      000315 C0 07            [ 8]  597 	push	ar7
      000317 C0 00            [ 8]  598 	push	ar0
      000319 C0 01            [ 8]  599 	push	ar1
      00031B E5*00            [ 8]  600 	mov	a,_bpx
      00031D C3               [ 4]  601 	clr	c
      00031E 94 F7            [ 8]  602 	subb	a,#0xF7
      000320 F5 84            [ 8]  603 	mov	dpl1,a
      000322 E5*01            [ 8]  604 	mov	a,_bpx+1
      000324 94 FF            [ 8]  605 	subb	a,#0xFF
      000326 F5 85            [ 8]  606 	mov	dph1,a
      000328 75 95 FF         [12]  607 	mov	dpx1,#0xFF
      00032B 05 86            [ 8]  608 	inc	dps
      00032D E0               [ 8]  609 	movx	a,@dptr
      00032E F5 82            [ 8]  610 	mov	dpl,a
      000330 A3               [12]  611 	inc	dptr
      000331 E0               [ 8]  612 	movx	a,@dptr
      000332 F5 83            [ 8]  613 	mov	dph,a
      000334 75 86 00         [12]  614 	mov	dps,#0
      000337 12s00r00r00      [16]  615 	lcall	__divsint
      00033B AA 82            [ 8]  616 	mov	r2,dpl
      00033D AB 83            [ 8]  617 	mov	r3,dph
      00033F D0 01            [ 8]  618 	pop	ar1
      000341 D0 00            [ 8]  619 	pop	ar0
      000343 D0 07            [ 8]  620 	pop	ar7
      000345 D0 06            [ 8]  621 	pop	ar6
                                    622 ;	genAssign: resultIsFar = TRUE
      000347 90s00r00r00      [12]  623 	mov	dptr,#_ldexpf_PARM_2
      00034B EA               [ 4]  624 	mov	a,r2
      00034C F0               [ 8]  625 	movx	@dptr,a
      00034D A3               [12]  626 	inc	dptr
      00034E EB               [ 4]  627 	mov	a,r3
      00034F F0               [ 8]  628 	movx	@dptr,a
      000350 8E 82            [ 8]  629 	mov	dpl,r6
      000352 8F 83            [ 8]  630 	mov	dph,r7
      000354 88 93            [ 8]  631 	mov	dpx,r0
      000356 89 F0            [ 8]  632 	mov	b,r1
      000358 12s00r00r00      [16]  633 	lcall	_ldexpf
      00035C                        634 00111$:
      00035C 85*00 81         [12]  635 	mov	sp,_bpx
      00035F 85*01 9B         [12]  636 	mov	esp,_bpx+1
      000362 D0*01            [ 8]  637 	pop	_bpx+1
      000364 D0*00            [ 8]  638 	pop	_bpx
      000366 22               [16]  639 	ret
                                    640 	.area CSEG    (CODE)
                                    641 	.area CONST   (CODE)
                                    642 	.area XINIT   (CODE)
                                    643 	.area CABS    (ABS,CODE)
