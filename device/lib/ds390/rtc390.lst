                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:28 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module rtc390
                                      7 	.optsdcc -mds390 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _rtcMagic
                                     35 	.globl _RtcRead
                                     36 	.globl _RtcWrite
                                     37 ;--------------------------------------------------------
                                     38 ; special function registers
                                     39 ;--------------------------------------------------------
                           000080    40 _P4	=	0x0080
                           000081    41 _SP	=	0x0081
                           000082    42 _DPL	=	0x0082
                           000083    43 _DPH	=	0x0083
                           000084    44 _DPL1	=	0x0084
                           000085    45 _DPH1	=	0x0085
                           000086    46 _DPS	=	0x0086
                           000087    47 _PCON	=	0x0087
                           000088    48 _TCON	=	0x0088
                           000089    49 _TMOD	=	0x0089
                           00008A    50 _TL0	=	0x008a
                           00008B    51 _TL1	=	0x008b
                           00008C    52 _TH0	=	0x008c
                           00008D    53 _TH1	=	0x008d
                           00008E    54 _CKCON	=	0x008e
                           000090    55 _P1	=	0x0090
                           000091    56 _EXIF	=	0x0091
                           000092    57 _P4CNT	=	0x0092
                           000093    58 _DPX	=	0x0093
                           000095    59 _DPX1	=	0x0095
                           000098    60 _SCON0	=	0x0098
                           000099    61 _SBUF0	=	0x0099
                           00009B    62 _ESP	=	0x009b
                           00009C    63 _AP	=	0x009c
                           00009D    64 _ACON	=	0x009d
                           0000A0    65 _P2	=	0x00a0
                           0000A1    66 _P5	=	0x00a1
                           0000A2    67 _P5CNT	=	0x00a2
                           0000A8    68 _IE	=	0x00a8
                           0000B0    69 _P3	=	0x00b0
                           0000B8    70 _IP	=	0x00b8
                           0000C0    71 _SCON1	=	0x00c0
                           0000C1    72 _SBUF1	=	0x00c1
                           0000C4    73 _PMR	=	0x00c4
                           0000C6    74 _MCON	=	0x00c6
                           0000C7    75 _TA	=	0x00c7
                           0000C8    76 _T2CON	=	0x00c8
                           0000C9    77 _T2MOD	=	0x00c9
                           0000CA    78 _RCAP2L	=	0x00ca
                           0000CA    79 _RTL2	=	0x00ca
                           0000CB    80 _RCAP2H	=	0x00cb
                           0000CB    81 _RTH2	=	0x00cb
                           0000CC    82 _TL2	=	0x00cc
                           0000CD    83 _TH2	=	0x00cd
                           0000D0    84 _PSW	=	0x00d0
                           0000D1    85 _MCNT0	=	0x00d1
                           0000D2    86 _MCNT1	=	0x00d2
                           0000D3    87 _MA	=	0x00d3
                           0000D4    88 _MB	=	0x00d4
                           0000D5    89 _MC	=	0x00d5
                           0000D8    90 _WDCON	=	0x00d8
                           0000E0    91 _ACC	=	0x00e0
                           0000E8    92 _EIE	=	0x00e8
                           0000EA    93 _MXAX	=	0x00ea
                           0000F0    94 _B	=	0x00f0
                           0000F8    95 _EIP	=	0x00f8
                           008C8A    96 _TMR0	=	0x8c8a
                           008D8B    97 _TMR1	=	0x8d8b
                           00CDCC    98 _TMR2	=	0xcdcc
                           00CBCA    99 _RCAP2	=	0xcbca
                                    100 ;--------------------------------------------------------
                                    101 ; special function bits
                                    102 ;--------------------------------------------------------
                           000088   103 _IT0	=	0x0088
                           000089   104 _IE0	=	0x0089
                           00008A   105 _IT1	=	0x008a
                           00008B   106 _IE1	=	0x008b
                           00008C   107 _TR0	=	0x008c
                           00008D   108 _TF0	=	0x008d
                           00008E   109 _TR1	=	0x008e
                           00008F   110 _TF1	=	0x008f
                           000090   111 _T2	=	0x0090
                           000091   112 _T2EX	=	0x0091
                           000092   113 _RXD1	=	0x0092
                           000093   114 _TXD1	=	0x0093
                           000094   115 _INT2	=	0x0094
                           000095   116 _INT3	=	0x0095
                           000096   117 _INT4	=	0x0096
                           000097   118 _INT5	=	0x0097
                           000098   119 _RI_0	=	0x0098
                           000099   120 _TI_0	=	0x0099
                           00009A   121 _RB8_0	=	0x009a
                           00009B   122 _TB8_0	=	0x009b
                           00009C   123 _REN_0	=	0x009c
                           00009D   124 _SM2_0	=	0x009d
                           00009E   125 _SM1_0	=	0x009e
                           00009F   126 _SM0_0	=	0x009f
                           00009F   127 _FE_0	=	0x009f
                           0000A8   128 _EX0	=	0x00a8
                           0000A9   129 _ET0	=	0x00a9
                           0000AA   130 _EX1	=	0x00aa
                           0000AB   131 _ET1	=	0x00ab
                           0000AC   132 _ES0	=	0x00ac
                           0000AD   133 _ET2	=	0x00ad
                           0000AE   134 _ES1	=	0x00ae
                           0000AF   135 _EA	=	0x00af
                           0000B0   136 _RXD0	=	0x00b0
                           0000B1   137 _TXD0	=	0x00b1
                           0000B2   138 _INT0	=	0x00b2
                           0000B3   139 _INT1	=	0x00b3
                           0000B4   140 _T0	=	0x00b4
                           0000B5   141 _T1	=	0x00b5
                           0000B6   142 _WR	=	0x00b6
                           0000B7   143 _RD	=	0x00b7
                           0000B8   144 _PX0	=	0x00b8
                           0000B9   145 _PT0	=	0x00b9
                           0000BA   146 _PX1	=	0x00ba
                           0000BB   147 _PT1	=	0x00bb
                           0000BC   148 _PS0	=	0x00bc
                           0000BD   149 _PT2	=	0x00bd
                           0000BE   150 _PS1	=	0x00be
                           0000C0   151 _RI_1	=	0x00c0
                           0000C1   152 _TI_1	=	0x00c1
                           0000C2   153 _RB8_1	=	0x00c2
                           0000C3   154 _TB8_1	=	0x00c3
                           0000C4   155 _REN_1	=	0x00c4
                           0000C5   156 _SM2_1	=	0x00c5
                           0000C6   157 _SM1_1	=	0x00c6
                           0000C7   158 _SM0_1	=	0x00c7
                           0000C7   159 _FE_1	=	0x00c7
                           0000C8   160 _CP_RL	=	0x00c8
                           0000C9   161 _C_T	=	0x00c9
                           0000CA   162 _TR2	=	0x00ca
                           0000CB   163 _EXEN2	=	0x00cb
                           0000CC   164 _TCLK	=	0x00cc
                           0000CD   165 _RCLK	=	0x00cd
                           0000CE   166 _EXF2	=	0x00ce
                           0000CF   167 _TF2	=	0x00cf
                           0000D0   168 _P	=	0x00d0
                           0000D1   169 _F1	=	0x00d1
                           0000D2   170 _OV	=	0x00d2
                           0000D3   171 _RS0	=	0x00d3
                           0000D4   172 _RS1	=	0x00d4
                           0000D5   173 _F0	=	0x00d5
                           0000D6   174 _AC	=	0x00d6
                           0000D7   175 _CY	=	0x00d7
                           0000D8   176 _RWT	=	0x00d8
                           0000D9   177 _EWT	=	0x00d9
                           0000DA   178 _WDRF	=	0x00da
                           0000DB   179 _WDIF	=	0x00db
                           0000DC   180 _PFI	=	0x00dc
                           0000DD   181 _EPFI	=	0x00dd
                           0000DE   182 _POR	=	0x00de
                           0000DF   183 _SMOD_1	=	0x00df
                           0000E8   184 _EX2	=	0x00e8
                           0000E9   185 _EX3	=	0x00e9
                           0000EA   186 _EX4	=	0x00ea
                           0000EB   187 _EX5	=	0x00eb
                           0000EC   188 _EWDI	=	0x00ec
                           0000ED   189 _C1IE	=	0x00ed
                           0000EE   190 _C0IE	=	0x00ee
                           0000EF   191 _CANBIE	=	0x00ef
                           0000F8   192 _PX2	=	0x00f8
                           0000F9   193 _PX3	=	0x00f9
                           0000FA   194 _PX4	=	0x00fa
                           0000FB   195 _PX5	=	0x00fb
                           0000FC   196 _PWDI	=	0x00fc
                           0000FD   197 _C1IP	=	0x00fd
                           0000FE   198 _C0IP	=	0x00fe
                           0000FF   199 _CANBIP	=	0x00ff
                                    200 ;--------------------------------------------------------
                                    201 ; overlayable register banks
                                    202 ;--------------------------------------------------------
                                    203 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        204 	.ds 8
                                    205 ;--------------------------------------------------------
                                    206 ; internal ram data
                                    207 ;--------------------------------------------------------
                                    208 	.area DSEG    (DATA)
                                    209 ;--------------------------------------------------------
                                    210 ; overlayable items in internal ram 
                                    211 ;--------------------------------------------------------
                                    212 ;--------------------------------------------------------
                                    213 ; indirectly addressable internal ram data
                                    214 ;--------------------------------------------------------
                                    215 	.area ISEG    (DATA)
                                    216 ;--------------------------------------------------------
                                    217 ; absolute internal ram data
                                    218 ;--------------------------------------------------------
                                    219 	.area IABS    (ABS,DATA)
                                    220 	.area IABS    (ABS,DATA)
                                    221 ;--------------------------------------------------------
                                    222 ; bit data
                                    223 ;--------------------------------------------------------
                                    224 	.area BSEG    (BIT)
                                    225 ;--------------------------------------------------------
                                    226 ; paged external ram data
                                    227 ;--------------------------------------------------------
                                    228 	.area PSEG    (PAG,XDATA)
                                    229 ;--------------------------------------------------------
                                    230 ; external ram data
                                    231 ;--------------------------------------------------------
                                    232 	.area XSEG    (XDATA)
                           310000   233 _rtc	=	0x310000
      000000                        234 _RtcRead_rtcDate_1_83:
      000000                        235 	.ds 4
      000004                        236 _RtcRead_rtcBytes_1_84:
      000004                        237 	.ds 8
      00000C                        238 _RtcWrite_rtcBytes_1_90:
      00000C                        239 	.ds 8
                                    240 ;--------------------------------------------------------
                                    241 ; absolute external ram data
                                    242 ;--------------------------------------------------------
                                    243 	.area XABS    (ABS,XDATA)
                                    244 ;--------------------------------------------------------
                                    245 ; external initialized ram data
                                    246 ;--------------------------------------------------------
                                    247 	.area XISEG   (XDATA)
                                    248 ;--------------------------------------------------------
                                    249 ; global & static initialisations
                                    250 ;--------------------------------------------------------
                                    251 	.area HOME    (CODE)
                                    252 	.area GSINIT  (CODE)
                                    253 	.area GSFINAL (CODE)
                                    254 	.area GSINIT  (CODE)
                                    255 ;--------------------------------------------------------
                                    256 ; Home
                                    257 ;--------------------------------------------------------
                                    258 	.area HOME    (CODE)
                                    259 	.area HOME    (CODE)
                                    260 ;--------------------------------------------------------
                                    261 ; code
                                    262 ;--------------------------------------------------------
                                    263 	.area CSEG    (CODE)
                                    264 ;------------------------------------------------------------
                                    265 ;Allocation info for local variables in function 'RtcSync'
                                    266 ;------------------------------------------------------------
                                    267 ;dummy                     Allocated to registers 
                                    268 ;byte                      Allocated to registers 
                                    269 ;bitMask                   Allocated to registers r3 
                                    270 ;------------------------------------------------------------
                                    271 ;	rtc390.c:47: static void RtcSync(void) {
                                    272 ;	-----------------------------------------
                                    273 ;	 function RtcSync
                                    274 ;	-----------------------------------------
      000000                        275 _RtcSync:
                           000002   276 	ar2 = 0x02
                           000003   277 	ar3 = 0x03
                           000004   278 	ar4 = 0x04
                           000005   279 	ar5 = 0x05
                           000006   280 	ar6 = 0x06
                           000007   281 	ar7 = 0x07
                           000000   282 	ar0 = 0x00
                           000001   283 	ar1 = 0x01
                                    284 ;	rtc390.c:51: dummy=rtc;
      000000 90 31 00 00      [12]  285 	mov	dptr,#_rtc
      000004 E0               [ 8]  286 	movx	a,@dptr
                                    287 ;	rtc390.c:54: for (byte=0; byte<8; byte++) {
                                    288 ;	genAssign: resultIsFar = FALSE
      000005 7A 00            [ 8]  289 	mov	r2,#0x00
      000007                        290 00105$:
                                    291 ;	rtc390.c:55: for (bitMask=0x01; bitMask; bitMask<<=1) {
                                    292 ;	genAssign: resultIsFar = TRUE
      000007 7B 01            [ 8]  293 	mov	r3,#0x01
      000009 EA               [ 4]  294 	mov	a,r2
      00000A 24r00            [ 8]  295 	add	a,#_rtcMagic
      00000C F5 84            [ 8]  296 	mov	dpl1,a
      00000E E4               [ 4]  297 	clr	a
      00000F 34s00            [ 8]  298 	addc	a,#(_rtcMagic >> 8)
      000011 F5 85            [ 8]  299 	mov	dph1,a
      000013 E4               [ 4]  300 	clr	a
      000014 34s00            [ 8]  301 	addc	a,#(_rtcMagic >> 16)
      000016 F5 95            [ 8]  302 	mov	dpx1,a
      000018                        303 00103$:
                                    304 ;	rtc390.c:56: rtc = (rtcMagic[byte]&bitMask) ? 0xff : 0x00;
      000018 05 86            [ 8]  305 	inc	dps
      00001A E4               [ 4]  306 	clr	a
      00001B 93               [12]  307 	movc	a,@a+dptr
      00001C FF               [ 4]  308 	mov	r7,a
      00001D 75 86 00         [12]  309 	mov	dps,#0
      000020 EB               [ 4]  310 	mov	a,r3
      000021 5F               [ 4]  311 	anl	a,r7
      000022 60 04            [12]  312 	jz  00109$
      000024                        313 00124$:
                                    314 ;	genAssign: resultIsFar = FALSE
      000024 7F FF            [ 8]  315 	mov	r7,#0xFF
      000026 80 02            [12]  316 	sjmp 00110$
      000028                        317 00109$:
                                    318 ;	genAssign: resultIsFar = FALSE
      000028 7F 00            [ 8]  319 	mov	r7,#0x00
      00002A                        320 00110$:
                                    321 ;	genAssign: resultIsFar = TRUE
      00002A 90 31 00 00      [12]  322 	mov	dptr,#_rtc
      00002E EF               [ 4]  323 	mov	a,r7
      00002F F0               [ 8]  324 	movx	@dptr,a
                                    325 ;	rtc390.c:55: for (bitMask=0x01; bitMask; bitMask<<=1) {
      000030 EB               [ 4]  326 	mov	a,r3
      000031 25 E0            [ 8]  327 	add	a,acc
      000033 FF               [ 4]  328 	mov	r7,a
                                    329 ;	genAssign: resultIsFar = TRUE
      000034 8F 03            [ 8]  330 	mov	ar3,r7
      000036 EB               [ 4]  331 	mov	a,r3
      000037 70 DF            [12]  332 	jnz  00103$
      000039                        333 00125$:
                                    334 ;	rtc390.c:54: for (byte=0; byte<8; byte++) {
      000039 0A               [ 4]  335 	inc	r2
      00003A BA 08 00         [16]  336 	cjne	r2,#0x08,00126$
      00003D                        337 00126$:
      00003D 40 C8            [12]  338 	jc   00105$
      00003F                        339 00127$:
      00003F                        340 00107$:
      00003F 22               [16]  341 	ret
                                    342 ;------------------------------------------------------------
                                    343 ;Allocation info for local variables in function 'RtcRead'
                                    344 ;------------------------------------------------------------
                                    345 ;rtcDate                   Allocated with name '_RtcRead_rtcDate_1_83'
                                    346 ;rtcBytes                  Allocated with name '_RtcRead_rtcBytes_1_84'
                                    347 ;byte                      Allocated to registers 
                                    348 ;bitMask                   Allocated to registers r3 
                                    349 ;------------------------------------------------------------
                                    350 ;	rtc390.c:61: unsigned char RtcRead(struct tm *rtcDate) {
                                    351 ;	-----------------------------------------
                                    352 ;	 function RtcRead
                                    353 ;	-----------------------------------------
      000040                        354 _RtcRead:
      000040 75 86 01         [12]  355 	mov     dps, #1
      000043 90s00r00r00      [12]  356 	mov     dptr, #_RtcRead_rtcDate_1_83
      000047 E5 82            [ 8]  357 	mov	a,dpl
      000049 F0               [ 8]  358 	movx	@dptr,a
      00004A A3               [12]  359 	inc	dptr
      00004B E5 83            [ 8]  360 	mov	a,dph
      00004D F0               [ 8]  361 	movx	@dptr,a
      00004E A3               [12]  362 	inc	dptr
      00004F E5 93            [ 8]  363 	mov	a,dpx
      000051 F0               [ 8]  364 	movx	@dptr,a
      000052 A3               [12]  365 	inc	dptr
      000053 E5 F0            [ 8]  366 	mov	a,b
      000055 F0               [ 8]  367 	movx	@dptr,a
      000056 75 86 00         [12]  368 	mov	dps,#0
                                    369 ;	rtc390.c:65: RtcSync();
      000059 12s00r00r00      [16]  370 	lcall	_RtcSync
                                    371 ;	rtc390.c:67: for (byte=0; byte<8; byte++) {
                                    372 ;	genAssign: resultIsFar = FALSE
      00005D 7E 00            [ 8]  373 	mov	r6,#0x00
      00005F                        374 00110$:
                                    375 ;	rtc390.c:68: rtcBytes[byte]=0;
      00005F EE               [ 4]  376 	mov	a,r6
      000060 24r04            [ 8]  377 	add	a,#_RtcRead_rtcBytes_1_84
      000062 F5 82            [ 8]  378 	mov	dpl,a
      000064 E4               [ 4]  379 	clr	a
      000065 34s00            [ 8]  380 	addc	a,#(_RtcRead_rtcBytes_1_84 >> 8)
      000067 F5 83            [ 8]  381 	mov	dph,a
      000069 E4               [ 4]  382 	clr	a
      00006A 34s00            [ 8]  383 	addc	a,#(_RtcRead_rtcBytes_1_84 >> 16)
      00006C F5 93            [ 8]  384 	mov	dpx,a
      00006E E4               [ 4]  385 	clr	a
      00006F F0               [ 8]  386 	movx	@dptr,a
                                    387 ;	rtc390.c:69: for (bitMask=0x01; bitMask; bitMask<<=1) {
                                    388 ;	genAssign: resultIsFar = FALSE
      000070 7B 01            [ 8]  389 	mov	r3,#0x01
      000072                        390 00108$:
                                    391 ;	rtc390.c:70: if (rtc&1) {
      000072 90 31 00 00      [12]  392 	mov	dptr,#_rtc
      000076 E0               [ 8]  393 	movx	a,@dptr
      000077 30 E0 20         [12]  394 	jnb  acc[0],00109$
      00007A                        395 00133$:
                                    396 ;	rtc390.c:71: rtcBytes[byte]|=bitMask;
      00007A EE               [ 4]  397 	mov	a,r6
      00007B 24r04            [ 8]  398 	add	a,#_RtcRead_rtcBytes_1_84
      00007D F5 84            [ 8]  399 	mov	dpl1,a
      00007F E4               [ 4]  400 	clr	a
      000080 34s00            [ 8]  401 	addc	a,#(_RtcRead_rtcBytes_1_84 >> 8)
      000082 F5 85            [ 8]  402 	mov	dph1,a
      000084 E4               [ 4]  403 	clr	a
      000085 34s00            [ 8]  404 	addc	a,#(_RtcRead_rtcBytes_1_84 >> 16)
      000087 F5 95            [ 8]  405 	mov	dpx1,a
      000089 05 86            [ 8]  406 	inc	dps
      00008B E0               [ 8]  407 	movx	a,@dptr
      00008C FA               [ 4]  408 	mov	r2,a
      00008D 75 86 00         [12]  409 	mov	dps,#0
      000090 EB               [ 4]  410 	mov	a,r3
      000091 42 02            [ 8]  411 	orl	ar2,a
      000093 EA               [ 4]  412 	mov	a,r2
      000094 05 86            [ 8]  413 	inc	dps
      000096 F0               [ 8]  414 	movx	@dptr,a
      000097 75 86 00         [12]  415 	mov	dps,#0
                                    416 ;	rtc390.c:87: return 1;
                                    417 ;	rtc390.c:71: rtcBytes[byte]|=bitMask;
      00009A                        418 00109$:
                                    419 ;	rtc390.c:69: for (bitMask=0x01; bitMask; bitMask<<=1) {
      00009A EB               [ 4]  420 	mov	a,r3
      00009B 25 E0            [ 8]  421 	add	a,acc
      00009D FF               [ 4]  422 	mov	r7,a
                                    423 ;	genAssign: resultIsFar = FALSE
      00009E 8F 03            [ 8]  424 	mov	ar3,r7
      0000A0 EB               [ 4]  425 	mov	a,r3
      0000A1 70 CF            [12]  426 	jnz  00108$
      0000A3                        427 00134$:
                                    428 ;	rtc390.c:67: for (byte=0; byte<8; byte++) {
      0000A3 0E               [ 4]  429 	inc	r6
      0000A4 BE 08 00         [16]  430 	cjne	r6,#0x08,00135$
      0000A7                        431 00135$:
      0000A7 40 B6            [12]  432 	jc   00110$
      0000A9                        433 00136$:
                                    434 ;	rtc390.c:75: rtcDate->tm_year=BCDtoINT(rtcBytes[7])+100; // year since 1900
      0000A9 90s00r00r00      [12]  435 	mov	dptr,#_RtcRead_rtcDate_1_83
      0000AD E0               [ 8]  436 	movx	a,@dptr
      0000AE 24 05            [ 8]  437 	add	a,#0x05
      0000B0 FE               [ 4]  438 	mov	r6,a
      0000B1 A3               [12]  439 	inc	dptr
      0000B2 E0               [ 8]  440 	movx	a,@dptr
      0000B3 34 00            [ 8]  441 	addc	a,#0x00
      0000B5 FF               [ 4]  442 	mov	r7,a
      0000B6 A3               [12]  443 	inc	dptr
      0000B7 E0               [ 8]  444 	movx	a,@dptr
      0000B8 34 00            [ 8]  445 	addc	a,#0x00
      0000BA F8               [ 4]  446 	mov	r0,a
      0000BB A3               [12]  447 	inc	dptr
      0000BC E0               [ 8]  448 	movx	a,@dptr
      0000BD F9               [ 4]  449 	mov	r1,a
      0000BE 90s00r00r0B      [12]  450 	mov	dptr,#(_RtcRead_rtcBytes_1_84 + 0x000007)
      0000C2 E0               [ 8]  451 	movx	a,@dptr
      0000C3 FA               [ 4]  452 	mov	r2,a
      0000C4 74 0F            [ 8]  453 	mov	a,#0x0F
      0000C6 5A               [ 4]  454 	anl	a,r2
      0000C7 FB               [ 4]  455 	mov	r3,a
      0000C8 7C 00            [ 8]  456 	mov	r4,#0x00
      0000CA EA               [ 4]  457 	mov	a,r2
      0000CB C4               [ 4]  458 	swap	a
      0000CC 54 0F            [ 8]  459 	anl	a,#0x0F
      0000CE FA               [ 4]  460 	mov	r2,a
      0000CF 75 F0 0A         [12]  461 	mov	b,#0x0A
      0000D2 EA               [ 4]  462 	mov	a,r2
      0000D3 A4               [20]  463 	mul	ab
      0000D4 FA               [ 4]  464 	mov	r2,a
      0000D5 AD F0            [ 8]  465 	mov	r5,b
      0000D7 2B               [ 4]  466 	add	a,r3
      0000D8 FB               [ 4]  467 	mov	r3,a
      0000D9 ED               [ 4]  468 	mov	a,r5
      0000DA 3C               [ 4]  469 	addc	a,r4
      0000DB FC               [ 4]  470 	mov	r4,a
      0000DC 74 64            [ 8]  471 	mov	a,#0x64
      0000DE 2B               [ 4]  472 	add	a,r3
      0000DF FB               [ 4]  473 	mov	r3,a
      0000E0 E4               [ 4]  474 	clr	a
      0000E1 3C               [ 4]  475 	addc	a,r4
      0000E2 FC               [ 4]  476 	mov	r4,a
      0000E3 8E 82            [ 8]  477 	mov	dpl,r6
      0000E5 8F 83            [ 8]  478 	mov	dph,r7
      0000E7 88 93            [ 8]  479 	mov	dpx,r0
      0000E9 89 F0            [ 8]  480 	mov	b,r1
      0000EB 8B 9C            [ 8]  481 	mov	acc1, r3
      0000ED EC               [ 4]  482 	mov	a,r4
      0000EE 12s00r00r00      [16]  483 	lcall	__gptrputWord
                                    484 ;	rtc390.c:76: rtcDate->tm_mon=BCDtoINT(rtcBytes[6])-1; // jan=0
      0000F2 90s00r00r00      [12]  485 	mov	dptr,#_RtcRead_rtcDate_1_83
      0000F6 E0               [ 8]  486 	movx	a,@dptr
      0000F7 24 04            [ 8]  487 	add	a,#0x04
      0000F9 FA               [ 4]  488 	mov	r2,a
      0000FA A3               [12]  489 	inc	dptr
      0000FB E0               [ 8]  490 	movx	a,@dptr
      0000FC 34 00            [ 8]  491 	addc	a,#0x00
      0000FE FB               [ 4]  492 	mov	r3,a
      0000FF A3               [12]  493 	inc	dptr
      000100 E0               [ 8]  494 	movx	a,@dptr
      000101 34 00            [ 8]  495 	addc	a,#0x00
      000103 FC               [ 4]  496 	mov	r4,a
      000104 A3               [12]  497 	inc	dptr
      000105 E0               [ 8]  498 	movx	a,@dptr
      000106 FD               [ 4]  499 	mov	r5,a
      000107 90s00r00r0A      [12]  500 	mov	dptr,#(_RtcRead_rtcBytes_1_84 + 0x000006)
      00010B E0               [ 8]  501 	movx	a,@dptr
      00010C FE               [ 4]  502 	mov	r6,a
      00010D 74 0F            [ 8]  503 	mov	a,#0x0F
      00010F 5E               [ 4]  504 	anl	a,r6
      000110 FF               [ 4]  505 	mov	r7,a
      000111 EE               [ 4]  506 	mov	a,r6
      000112 C4               [ 4]  507 	swap	a
      000113 54 0F            [ 8]  508 	anl	a,#0x0F
      000115 FE               [ 4]  509 	mov	r6,a
      000116 75 F0 0A         [12]  510 	mov	b,#0x0A
      000119 EE               [ 4]  511 	mov	a,r6
      00011A A4               [20]  512 	mul	ab
      00011B FE               [ 4]  513 	mov  r6,a
      00011C 2F               [ 4]  514 	add	a,r7
      00011D FF               [ 4]  515 	mov	r7,a
      00011E 1F               [ 4]  516 	dec	r7
      00011F 8A 82            [ 8]  517 	mov	dpl,r2
      000121 8B 83            [ 8]  518 	mov	dph,r3
      000123 8C 93            [ 8]  519 	mov	dpx,r4
      000125 8D F0            [ 8]  520 	mov	b,r5
      000127 EF               [ 4]  521 	mov	a,r7
      000128 12s00r00r00      [16]  522 	lcall	__gptrput
                                    523 ;	rtc390.c:77: rtcDate->tm_mday=BCDtoINT(rtcBytes[5]);
      00012C 90s00r00r00      [12]  524 	mov	dptr,#_RtcRead_rtcDate_1_83
      000130 E0               [ 8]  525 	movx	a,@dptr
      000131 24 03            [ 8]  526 	add	a,#0x03
      000133 FA               [ 4]  527 	mov	r2,a
      000134 A3               [12]  528 	inc	dptr
      000135 E0               [ 8]  529 	movx	a,@dptr
      000136 34 00            [ 8]  530 	addc	a,#0x00
      000138 FB               [ 4]  531 	mov	r3,a
      000139 A3               [12]  532 	inc	dptr
      00013A E0               [ 8]  533 	movx	a,@dptr
      00013B 34 00            [ 8]  534 	addc	a,#0x00
      00013D FC               [ 4]  535 	mov	r4,a
      00013E A3               [12]  536 	inc	dptr
      00013F E0               [ 8]  537 	movx	a,@dptr
      000140 FD               [ 4]  538 	mov	r5,a
      000141 90s00r00r09      [12]  539 	mov	dptr,#(_RtcRead_rtcBytes_1_84 + 0x000005)
      000145 E0               [ 8]  540 	movx	a,@dptr
      000146 FE               [ 4]  541 	mov	r6,a
      000147 74 0F            [ 8]  542 	mov	a,#0x0F
      000149 5E               [ 4]  543 	anl	a,r6
      00014A FF               [ 4]  544 	mov	r7,a
      00014B EE               [ 4]  545 	mov	a,r6
      00014C C4               [ 4]  546 	swap	a
      00014D 54 0F            [ 8]  547 	anl	a,#0x0F
      00014F FE               [ 4]  548 	mov	r6,a
      000150 75 F0 0A         [12]  549 	mov	b,#0x0A
      000153 EE               [ 4]  550 	mov	a,r6
      000154 A4               [20]  551 	mul	ab
      000155 FE               [ 4]  552 	mov  r6,a
      000156 2F               [ 4]  553 	add	a,r7
      000157 FF               [ 4]  554 	mov	r7,a
      000158 8A 82            [ 8]  555 	mov	dpl,r2
      00015A 8B 83            [ 8]  556 	mov	dph,r3
      00015C 8C 93            [ 8]  557 	mov	dpx,r4
      00015E 8D F0            [ 8]  558 	mov	b,r5
      000160 EF               [ 4]  559 	mov	a,r7
      000161 12s00r00r00      [16]  560 	lcall	__gptrput
                                    561 ;	rtc390.c:78: rtcDate->tm_wday=(rtcBytes[4]&0x07)-1; // monday=0?
      000165 90s00r00r00      [12]  562 	mov	dptr,#_RtcRead_rtcDate_1_83
      000169 E0               [ 8]  563 	movx	a,@dptr
      00016A 24 07            [ 8]  564 	add	a,#0x07
      00016C FA               [ 4]  565 	mov	r2,a
      00016D A3               [12]  566 	inc	dptr
      00016E E0               [ 8]  567 	movx	a,@dptr
      00016F 34 00            [ 8]  568 	addc	a,#0x00
      000171 FB               [ 4]  569 	mov	r3,a
      000172 A3               [12]  570 	inc	dptr
      000173 E0               [ 8]  571 	movx	a,@dptr
      000174 34 00            [ 8]  572 	addc	a,#0x00
      000176 FC               [ 4]  573 	mov	r4,a
      000177 A3               [12]  574 	inc	dptr
      000178 E0               [ 8]  575 	movx	a,@dptr
      000179 FD               [ 4]  576 	mov	r5,a
      00017A 90s00r00r08      [12]  577 	mov	dptr,#(_RtcRead_rtcBytes_1_84 + 0x000004)
      00017E E0               [ 8]  578 	movx	a,@dptr
      00017F FE               [ 4]  579 	mov	r6,a
      000180 53 06 07         [12]  580 	anl	ar6,#0x07
      000183 1E               [ 4]  581 	dec	r6
      000184 8A 82            [ 8]  582 	mov	dpl,r2
      000186 8B 83            [ 8]  583 	mov	dph,r3
      000188 8C 93            [ 8]  584 	mov	dpx,r4
      00018A 8D F0            [ 8]  585 	mov	b,r5
      00018C EE               [ 4]  586 	mov	a,r6
      00018D 12s00r00r00      [16]  587 	lcall	__gptrput
                                    588 ;	rtc390.c:79: rtcDate->tm_hour=BCDtoINT(rtcBytes[3]);
      000191 90s00r00r00      [12]  589 	mov	dptr,#_RtcRead_rtcDate_1_83
      000195 E0               [ 8]  590 	movx	a,@dptr
      000196 24 02            [ 8]  591 	add	a,#0x02
      000198 FA               [ 4]  592 	mov	r2,a
      000199 A3               [12]  593 	inc	dptr
      00019A E0               [ 8]  594 	movx	a,@dptr
      00019B 34 00            [ 8]  595 	addc	a,#0x00
      00019D FB               [ 4]  596 	mov	r3,a
      00019E A3               [12]  597 	inc	dptr
      00019F E0               [ 8]  598 	movx	a,@dptr
      0001A0 34 00            [ 8]  599 	addc	a,#0x00
      0001A2 FC               [ 4]  600 	mov	r4,a
      0001A3 A3               [12]  601 	inc	dptr
      0001A4 E0               [ 8]  602 	movx	a,@dptr
      0001A5 FD               [ 4]  603 	mov	r5,a
      0001A6 90s00r00r07      [12]  604 	mov	dptr,#(_RtcRead_rtcBytes_1_84 + 0x000003)
      0001AA E0               [ 8]  605 	movx	a,@dptr
      0001AB FE               [ 4]  606 	mov	r6,a
      0001AC 74 0F            [ 8]  607 	mov	a,#0x0F
      0001AE 5E               [ 4]  608 	anl	a,r6
      0001AF FF               [ 4]  609 	mov	r7,a
      0001B0 EE               [ 4]  610 	mov	a,r6
      0001B1 C4               [ 4]  611 	swap	a
      0001B2 54 0F            [ 8]  612 	anl	a,#0x0F
      0001B4 FE               [ 4]  613 	mov	r6,a
      0001B5 75 F0 0A         [12]  614 	mov	b,#0x0A
      0001B8 EE               [ 4]  615 	mov	a,r6
      0001B9 A4               [20]  616 	mul	ab
      0001BA FE               [ 4]  617 	mov  r6,a
      0001BB 2F               [ 4]  618 	add	a,r7
      0001BC FF               [ 4]  619 	mov	r7,a
      0001BD 8A 82            [ 8]  620 	mov	dpl,r2
      0001BF 8B 83            [ 8]  621 	mov	dph,r3
      0001C1 8C 93            [ 8]  622 	mov	dpx,r4
      0001C3 8D F0            [ 8]  623 	mov	b,r5
      0001C5 EF               [ 4]  624 	mov	a,r7
      0001C6 12s00r00r00      [16]  625 	lcall	__gptrput
                                    626 ;	rtc390.c:80: rtcDate->tm_min=BCDtoINT(rtcBytes[2]);
      0001CA 90s00r00r00      [12]  627 	mov	dptr,#_RtcRead_rtcDate_1_83
      0001CE E0               [ 8]  628 	movx	a,@dptr
      0001CF 24 01            [ 8]  629 	add	a,#0x01
      0001D1 FA               [ 4]  630 	mov	r2,a
      0001D2 A3               [12]  631 	inc	dptr
      0001D3 E0               [ 8]  632 	movx	a,@dptr
      0001D4 34 00            [ 8]  633 	addc	a,#0x00
      0001D6 FB               [ 4]  634 	mov	r3,a
      0001D7 A3               [12]  635 	inc	dptr
      0001D8 E0               [ 8]  636 	movx	a,@dptr
      0001D9 34 00            [ 8]  637 	addc	a,#0x00
      0001DB FC               [ 4]  638 	mov	r4,a
      0001DC A3               [12]  639 	inc	dptr
      0001DD E0               [ 8]  640 	movx	a,@dptr
      0001DE FD               [ 4]  641 	mov	r5,a
      0001DF 90s00r00r06      [12]  642 	mov	dptr,#(_RtcRead_rtcBytes_1_84 + 0x000002)
      0001E3 E0               [ 8]  643 	movx	a,@dptr
      0001E4 FE               [ 4]  644 	mov	r6,a
      0001E5 74 0F            [ 8]  645 	mov	a,#0x0F
      0001E7 5E               [ 4]  646 	anl	a,r6
      0001E8 FF               [ 4]  647 	mov	r7,a
      0001E9 EE               [ 4]  648 	mov	a,r6
      0001EA C4               [ 4]  649 	swap	a
      0001EB 54 0F            [ 8]  650 	anl	a,#0x0F
      0001ED FE               [ 4]  651 	mov	r6,a
      0001EE 75 F0 0A         [12]  652 	mov	b,#0x0A
      0001F1 EE               [ 4]  653 	mov	a,r6
      0001F2 A4               [20]  654 	mul	ab
      0001F3 FE               [ 4]  655 	mov  r6,a
      0001F4 2F               [ 4]  656 	add	a,r7
      0001F5 FF               [ 4]  657 	mov	r7,a
      0001F6 8A 82            [ 8]  658 	mov	dpl,r2
      0001F8 8B 83            [ 8]  659 	mov	dph,r3
      0001FA 8C 93            [ 8]  660 	mov	dpx,r4
      0001FC 8D F0            [ 8]  661 	mov	b,r5
      0001FE EF               [ 4]  662 	mov	a,r7
      0001FF 12s00r00r00      [16]  663 	lcall	__gptrput
                                    664 ;	rtc390.c:81: rtcDate->tm_sec=BCDtoINT(rtcBytes[1]);
      000203 90s00r00r05      [12]  665 	mov	dptr,#(_RtcRead_rtcBytes_1_84 + 0x000001)
      000207 E0               [ 8]  666 	movx	a,@dptr
      000208 FA               [ 4]  667 	mov	r2,a
      000209 74 0F            [ 8]  668 	mov	a,#0x0F
      00020B 5A               [ 4]  669 	anl	a,r2
      00020C FB               [ 4]  670 	mov	r3,a
      00020D EA               [ 4]  671 	mov	a,r2
      00020E C4               [ 4]  672 	swap	a
      00020F 54 0F            [ 8]  673 	anl	a,#0x0F
      000211 FA               [ 4]  674 	mov	r2,a
      000212 75 F0 0A         [12]  675 	mov	b,#0x0A
      000215 EA               [ 4]  676 	mov	a,r2
      000216 A4               [20]  677 	mul	ab
      000217 FA               [ 4]  678 	mov  r2,a
      000218 2B               [ 4]  679 	add	a,r3
      000219 FB               [ 4]  680 	mov	r3,a
      00021A 90s00r00r00      [12]  681 	mov	dptr,#_RtcRead_rtcDate_1_83
      00021E E0               [ 8]  682 	movx	a,@dptr
      00021F C0 E0            [ 8]  683 	push	acc
      000221 A3               [12]  684 	inc	dptr
      000222 E0               [ 8]  685 	movx	a,@dptr
      000223 C0 E0            [ 8]  686 	push	acc
      000225 A3               [12]  687 	inc	dptr
      000226 E0               [ 8]  688 	movx	a,@dptr
      000227 C0 E0            [ 8]  689 	push	acc
      000229 A3               [12]  690 	inc	dptr
      00022A E0               [ 8]  691 	movx	a,@dptr
      00022B F5 F0            [ 8]  692 	mov	b,a
      00022D D0 93            [ 8]  693 	pop	dpx
      00022F D0 83            [ 8]  694 	pop	dph
      000231 D0 82            [ 8]  695 	pop	dpl
      000233 EB               [ 4]  696 	mov	a,r3
      000234 12s00r00r00      [16]  697 	lcall	__gptrput
                                    698 ;	rtc390.c:82: rtcDate->tm_hundredth=BCDtoINT(rtcBytes[0]);
      000238 90s00r00r00      [12]  699 	mov	dptr,#_RtcRead_rtcDate_1_83
      00023C E0               [ 8]  700 	movx	a,@dptr
      00023D 24 0B            [ 8]  701 	add	a,#0x0B
      00023F FA               [ 4]  702 	mov	r2,a
      000240 A3               [12]  703 	inc	dptr
      000241 E0               [ 8]  704 	movx	a,@dptr
      000242 34 00            [ 8]  705 	addc	a,#0x00
      000244 FB               [ 4]  706 	mov	r3,a
      000245 A3               [12]  707 	inc	dptr
      000246 E0               [ 8]  708 	movx	a,@dptr
      000247 34 00            [ 8]  709 	addc	a,#0x00
      000249 FC               [ 4]  710 	mov	r4,a
      00024A A3               [12]  711 	inc	dptr
      00024B E0               [ 8]  712 	movx	a,@dptr
      00024C FD               [ 4]  713 	mov	r5,a
      00024D 90s00r00r04      [12]  714 	mov	dptr,#_RtcRead_rtcBytes_1_84
      000251 E0               [ 8]  715 	movx	a,@dptr
      000252 FE               [ 4]  716 	mov	r6,a
      000253 74 0F            [ 8]  717 	mov	a,#0x0F
      000255 5E               [ 4]  718 	anl	a,r6
      000256 FF               [ 4]  719 	mov	r7,a
      000257 EE               [ 4]  720 	mov	a,r6
      000258 C4               [ 4]  721 	swap	a
      000259 54 0F            [ 8]  722 	anl	a,#0x0F
      00025B FE               [ 4]  723 	mov	r6,a
      00025C 75 F0 0A         [12]  724 	mov	b,#0x0A
      00025F EE               [ 4]  725 	mov	a,r6
      000260 A4               [20]  726 	mul	ab
      000261 FE               [ 4]  727 	mov  r6,a
      000262 2F               [ 4]  728 	add	a,r7
      000263 FF               [ 4]  729 	mov	r7,a
      000264 8A 82            [ 8]  730 	mov	dpl,r2
      000266 8B 83            [ 8]  731 	mov	dph,r3
      000268 8C 93            [ 8]  732 	mov	dpx,r4
      00026A 8D F0            [ 8]  733 	mov	b,r5
      00026C EF               [ 4]  734 	mov	a,r7
      00026D 12s00r00r00      [16]  735 	lcall	__gptrput
                                    736 ;	rtc390.c:83: if ((rtcBytes[4]&0x30) || (rtcBytes[3]&0x80)) {
      000271 90s00r00r08      [12]  737 	mov	dptr,#(_RtcRead_rtcBytes_1_84 + 0x000004)
      000275 E0               [ 8]  738 	movx	a,@dptr
      000276 FA               [ 4]  739 	mov  r2,a
      000277 54 30            [ 8]  740 	anl	a,#0x30
      000279 60 02            [12]  741 	jz   00138$
      00027B                        742 00137$:
      00027B 80 09            [12]  743 	sjmp 00105$
      00027D                        744 00138$:
      00027D 90s00r00r07      [12]  745 	mov	dptr,#(_RtcRead_rtcBytes_1_84 + 0x000003)
      000281 E0               [ 8]  746 	movx	a,@dptr
      000282 FA               [ 4]  747 	mov  r2,a
      000283 30 E7 04         [12]  748 	jnb  acc[7],00106$
      000286                        749 00139$:
      000286                        750 00105$:
                                    751 ;	rtc390.c:85: return 0;
      000286 75 82 00         [12]  752 	mov	dpl,#0x00
                                    753 ;	rtc390.c:87: return 1;
      000289 22               [16]  754 	ret
      00028A                        755 00106$:
      00028A 75 82 01         [12]  756 	mov     dpl,#0x01
      00028D                        757 00112$:
      00028D 22               [16]  758 	ret
                                    759 ;------------------------------------------------------------
                                    760 ;Allocation info for local variables in function 'RtcWrite'
                                    761 ;------------------------------------------------------------
                                    762 ;rtcDate                   Allocated to registers r2 r3 r4 r5 
                                    763 ;rtcBytes                  Allocated with name '_RtcWrite_rtcBytes_1_90'
                                    764 ;byte                      Allocated to registers 
                                    765 ;bitMask                   Allocated to registers r3 
                                    766 ;------------------------------------------------------------
                                    767 ;	rtc390.c:90: void RtcWrite(struct tm *rtcDate) {
                                    768 ;	-----------------------------------------
                                    769 ;	 function RtcWrite
                                    770 ;	-----------------------------------------
      00028E                        771 _RtcWrite:
      00028E AA 82            [ 8]  772 	mov	r2,dpl
      000290 AB 83            [ 8]  773 	mov	r3,dph
      000292 AC 93            [ 8]  774 	mov	r4,dpx
      000294 AD F0            [ 8]  775 	mov	r5,b
                                    776 ;	rtc390.c:94: rtcBytes[7]=INTtoBCD(rtcDate->tm_year%100);
      000296 74 05            [ 8]  777 	mov	a,#0x05
      000298 2A               [ 4]  778 	add	a,r2
      000299 FE               [ 4]  779 	mov	r6,a
      00029A E4               [ 4]  780 	clr	a
      00029B 3B               [ 4]  781 	addc	a,r3
      00029C FF               [ 4]  782 	mov	r7,a
      00029D E4               [ 4]  783 	clr	a
      00029E 3C               [ 4]  784 	addc	a,r4
      00029F F8               [ 4]  785 	mov	r0,a
      0002A0 8D 01            [ 8]  786 	mov	ar1,r5
      0002A2 8E 82            [ 8]  787 	mov	dpl,r6
      0002A4 8F 83            [ 8]  788 	mov	dph,r7
      0002A6 88 93            [ 8]  789 	mov	dpx,r0
      0002A8 89 F0            [ 8]  790 	mov	b,r1
      0002AA 12s00r00r00      [16]  791 	lcall	__gptrgetWord
      0002AE FE               [ 4]  792 	mov	r6,a
      0002AF AF 9C            [ 8]  793 	mov	r7,acc1
                                    794 ;	genAssign: resultIsFar = TRUE
      0002B1 90s00r00r00      [12]  795 	mov	dptr,#__modsint_PARM_2
      0002B5 74 64            [ 8]  796 	mov	a,#0x64
      0002B7 F0               [ 8]  797 	movx	@dptr,a
      0002B8 E4               [ 4]  798 	clr	a
      0002B9 A3               [12]  799 	inc	dptr
      0002BA F0               [ 8]  800 	movx	@dptr,a
      0002BB C0 02            [ 8]  801 	push	ar2
      0002BD C0 03            [ 8]  802 	push	ar3
      0002BF C0 04            [ 8]  803 	push	ar4
      0002C1 C0 05            [ 8]  804 	push	ar5
      0002C3 8E 82            [ 8]  805 	mov	dpl,r6
      0002C5 8F 83            [ 8]  806 	mov	dph,r7
      0002C7 12s00r00r00      [16]  807 	lcall	__modsint
      0002CB AE 82            [ 8]  808 	mov	r6,dpl
      0002CD AF 83            [ 8]  809 	mov	r7,dph
      0002CF D0 05            [ 8]  810 	pop	ar5
      0002D1 D0 04            [ 8]  811 	pop	ar4
      0002D3 D0 03            [ 8]  812 	pop	ar3
      0002D5 D0 02            [ 8]  813 	pop	ar2
                                    814 ;	genAssign: resultIsFar = TRUE
      0002D7 90s00r00r00      [12]  815 	mov	dptr,#__modsint_PARM_2
      0002DB 74 0A            [ 8]  816 	mov	a,#0x0A
      0002DD F0               [ 8]  817 	movx	@dptr,a
      0002DE E4               [ 4]  818 	clr	a
      0002DF A3               [12]  819 	inc	dptr
      0002E0 F0               [ 8]  820 	movx	@dptr,a
      0002E1 C0 02            [ 8]  821 	push	ar2
      0002E3 C0 03            [ 8]  822 	push	ar3
      0002E5 C0 04            [ 8]  823 	push	ar4
      0002E7 C0 05            [ 8]  824 	push	ar5
      0002E9 C0 06            [ 8]  825 	push	ar6
      0002EB C0 07            [ 8]  826 	push	ar7
      0002ED 8E 82            [ 8]  827 	mov	dpl,r6
      0002EF 8F 83            [ 8]  828 	mov	dph,r7
      0002F1 12s00r00r00      [16]  829 	lcall	__modsint
      0002F5 D0 07            [ 8]  830 	pop	ar7
      0002F7 D0 06            [ 8]  831 	pop	ar6
      0002F9 D0 05            [ 8]  832 	pop	ar5
      0002FB D0 04            [ 8]  833 	pop	ar4
      0002FD D0 03            [ 8]  834 	pop	ar3
      0002FF D0 02            [ 8]  835 	pop	ar2
      000301 A8 82            [ 8]  836 	mov	r0,dpl
                                    837 ;	genAssign: resultIsFar = TRUE
      000303 90s00r00r00      [12]  838 	mov	dptr,#__divsint_PARM_2
      000307 74 0A            [ 8]  839 	mov	a,#0x0A
      000309 F0               [ 8]  840 	movx	@dptr,a
      00030A E4               [ 4]  841 	clr	a
      00030B A3               [12]  842 	inc	dptr
      00030C F0               [ 8]  843 	movx	@dptr,a
      00030D C0 02            [ 8]  844 	push	ar2
      00030F C0 03            [ 8]  845 	push	ar3
      000311 C0 04            [ 8]  846 	push	ar4
      000313 C0 05            [ 8]  847 	push	ar5
      000315 C0 00            [ 8]  848 	push	ar0
      000317 8E 82            [ 8]  849 	mov	dpl,r6
      000319 8F 83            [ 8]  850 	mov	dph,r7
      00031B 12s00r00r00      [16]  851 	lcall	__divsint
      00031F D0 00            [ 8]  852 	pop	ar0
      000321 D0 05            [ 8]  853 	pop	ar5
      000323 D0 04            [ 8]  854 	pop	ar4
      000325 D0 03            [ 8]  855 	pop	ar3
      000327 D0 02            [ 8]  856 	pop	ar2
      000329 AE 82            [ 8]  857 	mov	r6,dpl
      00032B EE               [ 4]  858 	mov	a,r6
      00032C C4               [ 4]  859 	swap	a
      00032D 54 F0            [ 8]  860 	anl	a,#0xF0
      00032F FE               [ 4]  861 	mov  r6,a
      000330 28               [ 4]  862 	add	a,r0
      000331 F8               [ 4]  863 	mov  r0,a
      000332 90s00r00r13      [12]  864 	mov  dptr,#(_RtcWrite_rtcBytes_1_90 + 0x000007)
      000336 F0               [ 8]  865 	movx @dptr,a
                                    866 ;	rtc390.c:95: rtcBytes[6]=INTtoBCD(rtcDate->tm_mon)+1;
      000337 74 04            [ 8]  867 	mov	a,#0x04
      000339 2A               [ 4]  868 	add	a,r2
      00033A FE               [ 4]  869 	mov	r6,a
      00033B E4               [ 4]  870 	clr	a
      00033C 3B               [ 4]  871 	addc	a,r3
      00033D FF               [ 4]  872 	mov	r7,a
      00033E E4               [ 4]  873 	clr	a
      00033F 3C               [ 4]  874 	addc	a,r4
      000340 F8               [ 4]  875 	mov	r0,a
      000341 8D 01            [ 8]  876 	mov	ar1,r5
      000343 8E 82            [ 8]  877 	mov	dpl,r6
      000345 8F 83            [ 8]  878 	mov	dph,r7
      000347 88 93            [ 8]  879 	mov	dpx,r0
      000349 89 F0            [ 8]  880 	mov	b,r1
      00034B 12s00r00r00      [16]  881 	lcall	__gptrget
      00034F FE               [ 4]  882 	mov  r6,a
      000350 75 F0 0A         [12]  883 	mov	b,#0x0A
      000353 84               [20]  884 	div	ab
      000354 AF F0            [ 8]  885 	mov	r7,b
      000356 EE               [ 4]  886 	mov	a,r6
      000357 75 F0 0A         [12]  887 	mov	b,#0x0A
      00035A 84               [20]  888 	div	ab
      00035B FE               [ 4]  889 	mov  r6,a
      00035C C4               [ 4]  890 	swap	a
      00035D 54 F0            [ 8]  891 	anl	a,#0xF0
      00035F FE               [ 4]  892 	mov  r6,a
      000360 2F               [ 4]  893 	add	a,r7
      000361 04               [ 4]  894 	inc  a
      000362 FF               [ 4]  895 	mov  r7,a
      000363 90s00r00r12      [12]  896 	mov	dptr,#(_RtcWrite_rtcBytes_1_90 + 0x000006)
      000367 EF               [ 4]  897 	mov	a,r7
      000368 F0               [ 8]  898 	movx	@dptr,a
                                    899 ;	rtc390.c:96: rtcBytes[5]=INTtoBCD(rtcDate->tm_mday);
      000369 74 03            [ 8]  900 	mov	a,#0x03
      00036B 2A               [ 4]  901 	add	a,r2
      00036C FE               [ 4]  902 	mov	r6,a
      00036D E4               [ 4]  903 	clr	a
      00036E 3B               [ 4]  904 	addc	a,r3
      00036F FF               [ 4]  905 	mov	r7,a
      000370 E4               [ 4]  906 	clr	a
      000371 3C               [ 4]  907 	addc	a,r4
      000372 F8               [ 4]  908 	mov	r0,a
      000373 8D 01            [ 8]  909 	mov	ar1,r5
      000375 8E 82            [ 8]  910 	mov	dpl,r6
      000377 8F 83            [ 8]  911 	mov	dph,r7
      000379 88 93            [ 8]  912 	mov	dpx,r0
      00037B 89 F0            [ 8]  913 	mov	b,r1
      00037D 12s00r00r00      [16]  914 	lcall	__gptrget
      000381 FE               [ 4]  915 	mov  r6,a
      000382 75 F0 0A         [12]  916 	mov	b,#0x0A
      000385 84               [20]  917 	div	ab
      000386 AF F0            [ 8]  918 	mov	r7,b
      000388 EE               [ 4]  919 	mov	a,r6
      000389 75 F0 0A         [12]  920 	mov	b,#0x0A
      00038C 84               [20]  921 	div	ab
      00038D FE               [ 4]  922 	mov  r6,a
      00038E C4               [ 4]  923 	swap	a
      00038F 54 F0            [ 8]  924 	anl	a,#0xF0
      000391 FE               [ 4]  925 	mov  r6,a
      000392 2F               [ 4]  926 	add	a,r7
      000393 FF               [ 4]  927 	mov  r7,a
      000394 90s00r00r11      [12]  928 	mov  dptr,#(_RtcWrite_rtcBytes_1_90 + 0x000005)
      000398 F0               [ 8]  929 	movx @dptr,a
                                    930 ;	rtc390.c:97: rtcBytes[4]=(INTtoBCD(rtcDate->tm_wday)+1)&0x07; //set 24h  mode
      000399 74 07            [ 8]  931 	mov	a,#0x07
      00039B 2A               [ 4]  932 	add	a,r2
      00039C FE               [ 4]  933 	mov	r6,a
      00039D E4               [ 4]  934 	clr	a
      00039E 3B               [ 4]  935 	addc	a,r3
      00039F FF               [ 4]  936 	mov	r7,a
      0003A0 E4               [ 4]  937 	clr	a
      0003A1 3C               [ 4]  938 	addc	a,r4
      0003A2 F8               [ 4]  939 	mov	r0,a
      0003A3 8D 01            [ 8]  940 	mov	ar1,r5
      0003A5 8E 82            [ 8]  941 	mov	dpl,r6
      0003A7 8F 83            [ 8]  942 	mov	dph,r7
      0003A9 88 93            [ 8]  943 	mov	dpx,r0
      0003AB 89 F0            [ 8]  944 	mov	b,r1
      0003AD 12s00r00r00      [16]  945 	lcall	__gptrget
      0003B1 FE               [ 4]  946 	mov  r6,a
      0003B2 75 F0 0A         [12]  947 	mov	b,#0x0A
      0003B5 84               [20]  948 	div	ab
      0003B6 AF F0            [ 8]  949 	mov	r7,b
      0003B8 EE               [ 4]  950 	mov	a,r6
      0003B9 75 F0 0A         [12]  951 	mov	b,#0x0A
      0003BC 84               [20]  952 	div	ab
      0003BD FE               [ 4]  953 	mov  r6,a
      0003BE C4               [ 4]  954 	swap	a
      0003BF 54 F0            [ 8]  955 	anl	a,#0xF0
      0003C1 FE               [ 4]  956 	mov  r6,a
      0003C2 2F               [ 4]  957 	add	a,r7
      0003C3 04               [ 4]  958 	inc  a
      0003C4 FF               [ 4]  959 	mov  r7,a
      0003C5 53 07 07         [12]  960 	anl	ar7,#0x07
      0003C8 90s00r00r10      [12]  961 	mov	dptr,#(_RtcWrite_rtcBytes_1_90 + 0x000004)
      0003CC EF               [ 4]  962 	mov	a,r7
      0003CD F0               [ 8]  963 	movx	@dptr,a
                                    964 ;	rtc390.c:98: rtcBytes[3]=INTtoBCD(rtcDate->tm_hour)&0x3f; // oscilator on, reset on
      0003CE 74 02            [ 8]  965 	mov	a,#0x02
      0003D0 2A               [ 4]  966 	add	a,r2
      0003D1 FE               [ 4]  967 	mov	r6,a
      0003D2 E4               [ 4]  968 	clr	a
      0003D3 3B               [ 4]  969 	addc	a,r3
      0003D4 FF               [ 4]  970 	mov	r7,a
      0003D5 E4               [ 4]  971 	clr	a
      0003D6 3C               [ 4]  972 	addc	a,r4
      0003D7 F8               [ 4]  973 	mov	r0,a
      0003D8 8D 01            [ 8]  974 	mov	ar1,r5
      0003DA 8E 82            [ 8]  975 	mov	dpl,r6
      0003DC 8F 83            [ 8]  976 	mov	dph,r7
      0003DE 88 93            [ 8]  977 	mov	dpx,r0
      0003E0 89 F0            [ 8]  978 	mov	b,r1
      0003E2 12s00r00r00      [16]  979 	lcall	__gptrget
      0003E6 FE               [ 4]  980 	mov  r6,a
      0003E7 75 F0 0A         [12]  981 	mov	b,#0x0A
      0003EA 84               [20]  982 	div	ab
      0003EB AF F0            [ 8]  983 	mov	r7,b
      0003ED EE               [ 4]  984 	mov	a,r6
      0003EE 75 F0 0A         [12]  985 	mov	b,#0x0A
      0003F1 84               [20]  986 	div	ab
      0003F2 FE               [ 4]  987 	mov  r6,a
      0003F3 C4               [ 4]  988 	swap	a
      0003F4 54 F0            [ 8]  989 	anl	a,#0xF0
      0003F6 FE               [ 4]  990 	mov  r6,a
      0003F7 2F               [ 4]  991 	add	a,r7
      0003F8 FF               [ 4]  992 	mov	r7,a
      0003F9 53 07 3F         [12]  993 	anl	ar7,#0x3F
      0003FC 90s00r00r0F      [12]  994 	mov	dptr,#(_RtcWrite_rtcBytes_1_90 + 0x000003)
      000400 EF               [ 4]  995 	mov	a,r7
      000401 F0               [ 8]  996 	movx	@dptr,a
                                    997 ;	rtc390.c:99: rtcBytes[2]=INTtoBCD(rtcDate->tm_min);
      000402 74 01            [ 8]  998 	mov	a,#0x01
      000404 2A               [ 4]  999 	add	a,r2
      000405 FE               [ 4] 1000 	mov	r6,a
      000406 E4               [ 4] 1001 	clr	a
      000407 3B               [ 4] 1002 	addc	a,r3
      000408 FF               [ 4] 1003 	mov	r7,a
      000409 E4               [ 4] 1004 	clr	a
      00040A 3C               [ 4] 1005 	addc	a,r4
      00040B F8               [ 4] 1006 	mov	r0,a
      00040C 8D 01            [ 8] 1007 	mov	ar1,r5
      00040E 8E 82            [ 8] 1008 	mov	dpl,r6
      000410 8F 83            [ 8] 1009 	mov	dph,r7
      000412 88 93            [ 8] 1010 	mov	dpx,r0
      000414 89 F0            [ 8] 1011 	mov	b,r1
      000416 12s00r00r00      [16] 1012 	lcall	__gptrget
      00041A FE               [ 4] 1013 	mov  r6,a
      00041B 75 F0 0A         [12] 1014 	mov	b,#0x0A
      00041E 84               [20] 1015 	div	ab
      00041F AF F0            [ 8] 1016 	mov	r7,b
      000421 EE               [ 4] 1017 	mov	a,r6
      000422 75 F0 0A         [12] 1018 	mov	b,#0x0A
      000425 84               [20] 1019 	div	ab
      000426 FE               [ 4] 1020 	mov  r6,a
      000427 C4               [ 4] 1021 	swap	a
      000428 54 F0            [ 8] 1022 	anl	a,#0xF0
      00042A FE               [ 4] 1023 	mov  r6,a
      00042B 2F               [ 4] 1024 	add	a,r7
      00042C FF               [ 4] 1025 	mov  r7,a
      00042D 90s00r00r0E      [12] 1026 	mov  dptr,#(_RtcWrite_rtcBytes_1_90 + 0x000002)
      000431 F0               [ 8] 1027 	movx @dptr,a
                                   1028 ;	rtc390.c:100: rtcBytes[1]=INTtoBCD(rtcDate->tm_sec);
      000432 8A 82            [ 8] 1029 	mov	dpl,r2
      000434 8B 83            [ 8] 1030 	mov	dph,r3
      000436 8C 93            [ 8] 1031 	mov	dpx,r4
      000438 8D F0            [ 8] 1032 	mov	b,r5
      00043A 12s00r00r00      [16] 1033 	lcall	__gptrget
      00043E FA               [ 4] 1034 	mov  r2,a
      00043F 75 F0 0A         [12] 1035 	mov	b,#0x0A
      000442 84               [20] 1036 	div	ab
      000443 AB F0            [ 8] 1037 	mov	r3,b
      000445 EA               [ 4] 1038 	mov	a,r2
      000446 75 F0 0A         [12] 1039 	mov	b,#0x0A
      000449 84               [20] 1040 	div	ab
      00044A FA               [ 4] 1041 	mov  r2,a
      00044B C4               [ 4] 1042 	swap	a
      00044C 54 F0            [ 8] 1043 	anl	a,#0xF0
      00044E FA               [ 4] 1044 	mov  r2,a
      00044F 2B               [ 4] 1045 	add	a,r3
      000450 FB               [ 4] 1046 	mov  r3,a
      000451 90s00r00r0D      [12] 1047 	mov  dptr,#(_RtcWrite_rtcBytes_1_90 + 0x000001)
      000455 F0               [ 8] 1048 	movx @dptr,a
                                   1049 ;	rtc390.c:102: rtcBytes[0]=0;
      000456 90s00r00r0C      [12] 1050 	mov	dptr,#_RtcWrite_rtcBytes_1_90
      00045A E4               [ 4] 1051 	clr	a
      00045B F0               [ 8] 1052 	movx	@dptr,a
                                   1053 ;	rtc390.c:104: RtcSync();
      00045C 12s00r00r00      [16] 1054 	lcall	_RtcSync
                                   1055 ;	rtc390.c:106: for (byte=0; byte<8; byte++) {
                                   1056 ;	genAssign: resultIsFar = FALSE
      000460 7A 00            [ 8] 1057 	mov	r2,#0x00
      000462                       1058 00105$:
                                   1059 ;	rtc390.c:107: for (bitMask=0x01; bitMask; bitMask<<=1) {
                                   1060 ;	genAssign: resultIsFar = TRUE
      000462 7B 01            [ 8] 1061 	mov	r3,#0x01
      000464 EA               [ 4] 1062 	mov	a,r2
      000465 24r0C            [ 8] 1063 	add	a,#_RtcWrite_rtcBytes_1_90
      000467 F5 84            [ 8] 1064 	mov	dpl1,a
      000469 E4               [ 4] 1065 	clr	a
      00046A 34s00            [ 8] 1066 	addc	a,#(_RtcWrite_rtcBytes_1_90 >> 8)
      00046C F5 85            [ 8] 1067 	mov	dph1,a
      00046E E4               [ 4] 1068 	clr	a
      00046F 34s00            [ 8] 1069 	addc	a,#(_RtcWrite_rtcBytes_1_90 >> 16)
      000471 F5 95            [ 8] 1070 	mov	dpx1,a
      000473                       1071 00103$:
                                   1072 ;	rtc390.c:108: rtc = (rtcBytes[byte]&bitMask) ? 0xff : 0x00;
      000473 05 86            [ 8] 1073 	inc	dps
      000475 E0               [ 8] 1074 	movx	a,@dptr
      000476 FF               [ 4] 1075 	mov	r7,a
      000477 75 86 00         [12] 1076 	mov	dps,#0
      00047A EB               [ 4] 1077 	mov	a,r3
      00047B 5F               [ 4] 1078 	anl	a,r7
      00047C 60 04            [12] 1079 	jz  00109$
      00047E                       1080 00124$:
                                   1081 ;	genAssign: resultIsFar = FALSE
      00047E 7F FF            [ 8] 1082 	mov	r7,#0xFF
      000480 80 02            [12] 1083 	sjmp 00110$
      000482                       1084 00109$:
                                   1085 ;	genAssign: resultIsFar = FALSE
      000482 7F 00            [ 8] 1086 	mov	r7,#0x00
      000484                       1087 00110$:
                                   1088 ;	genAssign: resultIsFar = TRUE
      000484 90 31 00 00      [12] 1089 	mov	dptr,#_rtc
      000488 EF               [ 4] 1090 	mov	a,r7
      000489 F0               [ 8] 1091 	movx	@dptr,a
                                   1092 ;	rtc390.c:107: for (bitMask=0x01; bitMask; bitMask<<=1) {
      00048A EB               [ 4] 1093 	mov	a,r3
      00048B 25 E0            [ 8] 1094 	add	a,acc
      00048D FF               [ 4] 1095 	mov	r7,a
                                   1096 ;	genAssign: resultIsFar = TRUE
      00048E 8F 03            [ 8] 1097 	mov	ar3,r7
      000490 EB               [ 4] 1098 	mov	a,r3
      000491 70 E0            [12] 1099 	jnz  00103$
      000493                       1100 00125$:
                                   1101 ;	rtc390.c:106: for (byte=0; byte<8; byte++) {
      000493 0A               [ 4] 1102 	inc	r2
      000494 BA 08 00         [16] 1103 	cjne	r2,#0x08,00126$
      000497                       1104 00126$:
      000497 40 C9            [12] 1105 	jc   00105$
      000499                       1106 00127$:
      000499                       1107 00107$:
      000499 22               [16] 1108 	ret
                                   1109 	.area CSEG    (CODE)
                                   1110 	.area CONST   (CODE)
      000000                       1111 _rtcMagic:
      000000 C5                    1112 	.db #0xC5	; 197
      000001 3A                    1113 	.db #0x3A	; 58
      000002 A3                    1114 	.db #0xA3	; 163
      000003 5C                    1115 	.db #0x5C	; 92
      000004 C5                    1116 	.db #0xC5	; 197
      000005 3A                    1117 	.db #0x3A	; 58
      000006 A3                    1118 	.db #0xA3	; 163
      000007 5C                    1119 	.db #0x5C	; 92
                                   1120 	.area XINIT   (CODE)
                                   1121 	.area CABS    (ABS,CODE)
