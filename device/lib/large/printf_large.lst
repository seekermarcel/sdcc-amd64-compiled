                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:47 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module printf_large
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _strlen
                                     13 	.globl __print_format_PARM_4
                                     14 	.globl __print_format_PARM_3
                                     15 	.globl __print_format_PARM_2
                                     16 	.globl __print_format
                                     17 ;--------------------------------------------------------
                                     18 ; special function registers
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; special function bits
                                     24 ;--------------------------------------------------------
                                     25 	.area RSEG    (ABS,DATA)
      000000                         26 	.org 0x0000
                                     27 ;--------------------------------------------------------
                                     28 ; overlayable register banks
                                     29 ;--------------------------------------------------------
                                     30 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         31 	.ds 8
                                     32 ;--------------------------------------------------------
                                     33 ; internal ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area DSEG    (DATA)
      000000                         36 __print_format_sloc0_1_0:
      000000                         37 	.ds 1
      000001                         38 __print_format_sloc1_1_0:
      000001                         39 	.ds 3
      000004                         40 __print_format_sloc2_1_0:
      000004                         41 	.ds 2
                                     42 ;--------------------------------------------------------
                                     43 ; overlayable items in internal ram 
                                     44 ;--------------------------------------------------------
                                     45 	.area	OSEG    (OVR,DATA)
      000000                         46 _calculate_digit_i_1_63:
      000000                         47 	.ds 1
                                     48 ;--------------------------------------------------------
                                     49 ; indirectly addressable internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area ISEG    (DATA)
                                     52 ;--------------------------------------------------------
                                     53 ; absolute internal ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area IABS    (ABS,DATA)
                                     56 	.area IABS    (ABS,DATA)
                                     57 ;--------------------------------------------------------
                                     58 ; bit data
                                     59 ;--------------------------------------------------------
                                     60 	.area BSEG    (BIT)
      000000                         61 _lower_case:
      000000                         62 	.ds 1
      000001                         63 __print_format_left_justify_1_67:
      000001                         64 	.ds 1
      000002                         65 __print_format_zero_padding_1_67:
      000002                         66 	.ds 1
      000003                         67 __print_format_prefix_sign_1_67:
      000003                         68 	.ds 1
      000004                         69 __print_format_prefix_space_1_67:
      000004                         70 	.ds 1
      000005                         71 __print_format_signed_argument_1_67:
      000005                         72 	.ds 1
      000006                         73 __print_format_char_argument_1_67:
      000006                         74 	.ds 1
      000007                         75 __print_format_long_argument_1_67:
      000007                         76 	.ds 1
      000008                         77 __print_format_float_argument_1_67:
      000008                         78 	.ds 1
      000009                         79 __print_format_lsd_1_67:
      000009                         80 	.ds 1
                                     81 ;--------------------------------------------------------
                                     82 ; paged external ram data
                                     83 ;--------------------------------------------------------
                                     84 	.area PSEG    (PAG,XDATA)
                                     85 ;--------------------------------------------------------
                                     86 ; external ram data
                                     87 ;--------------------------------------------------------
                                     88 	.area XSEG    (XDATA)
      000000                         89 _output_char:
      000000                         90 	.ds 2
      000002                         91 _p:
      000002                         92 	.ds 3
      000005                         93 _value:
      000005                         94 	.ds 5
      00000A                         95 _charsOutputted:
      00000A                         96 	.ds 2
      00000C                         97 __output_char_c_1_55:
      00000C                         98 	.ds 1
      00000D                         99 _output_digit_n_1_57:
      00000D                        100 	.ds 1
      00000E                        101 _output_2digits_b_1_60:
      00000E                        102 	.ds 1
      00000F                        103 _calculate_digit_radix_1_62:
      00000F                        104 	.ds 1
      000010                        105 __print_format_PARM_2:
      000010                        106 	.ds 3
      000013                        107 __print_format_PARM_3:
      000013                        108 	.ds 3
      000016                        109 __print_format_PARM_4:
      000016                        110 	.ds 1
      000017                        111 __print_format_pfn_1_66:
      000017                        112 	.ds 2
      000019                        113 __print_format_radix_1_67:
      000019                        114 	.ds 1
      00001A                        115 __print_format_width_1_67:
      00001A                        116 	.ds 1
      00001B                        117 __print_format_decimals_1_67:
      00001B                        118 	.ds 1
      00001C                        119 __print_format_length_1_67:
      00001C                        120 	.ds 1
      00001D                        121 __print_format_c_1_67:
      00001D                        122 	.ds 1
      00001E                        123 __print_format_store_4_88:
      00001E                        124 	.ds 6
      000024                        125 __print_format_pstore_4_88:
      000024                        126 	.ds 2
                                    127 ;--------------------------------------------------------
                                    128 ; absolute external ram data
                                    129 ;--------------------------------------------------------
                                    130 	.area XABS    (ABS,XDATA)
                                    131 ;--------------------------------------------------------
                                    132 ; external initialized ram data
                                    133 ;--------------------------------------------------------
                                    134 	.area XISEG   (XDATA)
                                    135 	.area HOME    (CODE)
                                    136 	.area GSINIT0 (CODE)
                                    137 	.area GSINIT1 (CODE)
                                    138 	.area GSINIT2 (CODE)
                                    139 	.area GSINIT3 (CODE)
                                    140 	.area GSINIT4 (CODE)
                                    141 	.area GSINIT5 (CODE)
                                    142 	.area GSINIT  (CODE)
                                    143 	.area GSFINAL (CODE)
                                    144 	.area CSEG    (CODE)
                                    145 ;--------------------------------------------------------
                                    146 ; global & static initialisations
                                    147 ;--------------------------------------------------------
                                    148 	.area HOME    (CODE)
                                    149 	.area GSINIT  (CODE)
                                    150 	.area GSFINAL (CODE)
                                    151 	.area GSINIT  (CODE)
                                    152 ;--------------------------------------------------------
                                    153 ; Home
                                    154 ;--------------------------------------------------------
                                    155 	.area HOME    (CODE)
                                    156 	.area HOME    (CODE)
                                    157 ;--------------------------------------------------------
                                    158 ; code
                                    159 ;--------------------------------------------------------
                                    160 	.area CSEG    (CODE)
                                    161 ;------------------------------------------------------------
                                    162 ;Allocation info for local variables in function '_output_char'
                                    163 ;------------------------------------------------------------
                                    164 ;c                         Allocated with name '__output_char_c_1_55'
                                    165 ;------------------------------------------------------------
                                    166 ;	printf_large.c:105: _output_char (unsigned char c)
                                    167 ;	-----------------------------------------
                                    168 ;	 function _output_char
                                    169 ;	-----------------------------------------
      000000                        170 __output_char:
                           000007   171 	ar7 = 0x07
                           000006   172 	ar6 = 0x06
                           000005   173 	ar5 = 0x05
                           000004   174 	ar4 = 0x04
                           000003   175 	ar3 = 0x03
                           000002   176 	ar2 = 0x02
                           000001   177 	ar1 = 0x01
                           000000   178 	ar0 = 0x00
      000000 E5 82            [12]  179 	mov	a,dpl
      000002 90r00r0C         [24]  180 	mov	dptr,#__output_char_c_1_55
      000005 F0               [24]  181 	movx	@dptr,a
                                    182 ;	printf_large.c:107: output_char( c, p );
      000006 E0               [24]  183 	movx	a,@dptr
      000007 FF               [12]  184 	mov	r7,a
      000008 90r00r02         [24]  185 	mov	dptr,#_p
      00000B E0               [24]  186 	movx	a,@dptr
      00000C C0 E0            [24]  187 	push	acc
      00000E A3               [24]  188 	inc	dptr
      00000F E0               [24]  189 	movx	a,@dptr
      000010 C0 E0            [24]  190 	push	acc
      000012 A3               [24]  191 	inc	dptr
      000013 E0               [24]  192 	movx	a,@dptr
      000014 C0 E0            [24]  193 	push	acc
      000016 12r00r1B         [24]  194 	lcall	00103$
      000019 80 0D            [24]  195 	sjmp	00104$
      00001B                        196 00103$:
      00001B 90r00r00         [24]  197 	mov	dptr,#_output_char
      00001E E0               [24]  198 	movx	a,@dptr
      00001F C0 E0            [24]  199 	push	acc
      000021 A3               [24]  200 	inc	dptr
      000022 E0               [24]  201 	movx	a,@dptr
      000023 C0 E0            [24]  202 	push	acc
      000025 8F 82            [24]  203 	mov	dpl,r7
      000027 22               [24]  204 	ret
      000028                        205 00104$:
      000028 15 81            [12]  206 	dec	sp
      00002A 15 81            [12]  207 	dec	sp
      00002C 15 81            [12]  208 	dec	sp
                                    209 ;	printf_large.c:108: charsOutputted++;
      00002E 90r00r0A         [24]  210 	mov	dptr,#_charsOutputted
      000031 E0               [24]  211 	movx	a,@dptr
      000032 24 01            [12]  212 	add	a,#0x01
      000034 F0               [24]  213 	movx	@dptr,a
      000035 A3               [24]  214 	inc	dptr
      000036 E0               [24]  215 	movx	a,@dptr
      000037 34 00            [12]  216 	addc	a,#0x00
      000039 F0               [24]  217 	movx	@dptr,a
      00003A 22               [24]  218 	ret
                                    219 ;------------------------------------------------------------
                                    220 ;Allocation info for local variables in function 'output_digit'
                                    221 ;------------------------------------------------------------
                                    222 ;c                         Allocated to registers r7 
                                    223 ;n                         Allocated with name '_output_digit_n_1_57'
                                    224 ;------------------------------------------------------------
                                    225 ;	printf_large.c:130: output_digit (unsigned char n)
                                    226 ;	-----------------------------------------
                                    227 ;	 function output_digit
                                    228 ;	-----------------------------------------
      00003B                        229 _output_digit:
      00003B E5 82            [12]  230 	mov	a,dpl
      00003D 90r00r0D         [24]  231 	mov	dptr,#_output_digit_n_1_57
      000040 F0               [24]  232 	movx	@dptr,a
                                    233 ;	printf_large.c:132: register unsigned char c = n + (unsigned char)'0';
      000041 E0               [24]  234 	movx	a,@dptr
                                    235 ;	printf_large.c:134: if (c > (unsigned char)'9')
      000042 24 30            [12]  236 	add	a,#0x30
      000044 FF               [12]  237 	mov	r7,a
      000045 24 C6            [12]  238 	add	a,#0xff - 0x39
      000047 50 0A            [24]  239 	jnc	00104$
                                    240 ;	printf_large.c:136: c += (unsigned char)('A' - '0' - 10);
      000049 74 07            [12]  241 	mov	a,#0x07
      00004B 2F               [12]  242 	add	a,r7
      00004C FF               [12]  243 	mov	r7,a
                                    244 ;	printf_large.c:137: if (lower_case)
      00004D 30*00 03         [24]  245 	jnb	_lower_case,00104$
                                    246 ;	printf_large.c:138: c = tolower(c);
      000050 43 07 20         [24]  247 	orl	ar7,#0x20
      000053                        248 00104$:
                                    249 ;	printf_large.c:140: _output_char( c );
      000053 8F 82            [24]  250 	mov	dpl,r7
      000055 02r00r00         [24]  251 	ljmp	__output_char
                                    252 ;------------------------------------------------------------
                                    253 ;Allocation info for local variables in function 'output_2digits'
                                    254 ;------------------------------------------------------------
                                    255 ;b                         Allocated with name '_output_2digits_b_1_60'
                                    256 ;------------------------------------------------------------
                                    257 ;	printf_large.c:157: output_2digits (unsigned char b)
                                    258 ;	-----------------------------------------
                                    259 ;	 function output_2digits
                                    260 ;	-----------------------------------------
      000058                        261 _output_2digits:
      000058 E5 82            [12]  262 	mov	a,dpl
      00005A 90r00r0E         [24]  263 	mov	dptr,#_output_2digits_b_1_60
      00005D F0               [24]  264 	movx	@dptr,a
                                    265 ;	printf_large.c:159: output_digit( b>>4   );
      00005E E0               [24]  266 	movx	a,@dptr
      00005F FF               [12]  267 	mov	r7,a
      000060 C4               [12]  268 	swap	a
      000061 54 0F            [12]  269 	anl	a,#0x0F
      000063 F5 82            [12]  270 	mov	dpl,a
      000065 C0 07            [24]  271 	push	ar7
      000067 12r00r3B         [24]  272 	lcall	_output_digit
      00006A D0 07            [24]  273 	pop	ar7
                                    274 ;	printf_large.c:160: output_digit( b&0x0F );
      00006C 53 07 0F         [24]  275 	anl	ar7,#0x0F
      00006F 8F 82            [24]  276 	mov	dpl,r7
      000071 02r00r3B         [24]  277 	ljmp	_output_digit
                                    278 ;------------------------------------------------------------
                                    279 ;Allocation info for local variables in function 'calculate_digit'
                                    280 ;------------------------------------------------------------
                                    281 ;radix                     Allocated with name '_calculate_digit_radix_1_62'
                                    282 ;ul                        Allocated to registers r4 r5 r6 r7 
                                    283 ;b4                        Allocated to registers r3 
                                    284 ;i                         Allocated with name '_calculate_digit_i_1_63'
                                    285 ;------------------------------------------------------------
                                    286 ;	printf_large.c:189: calculate_digit (unsigned char radix)
                                    287 ;	-----------------------------------------
                                    288 ;	 function calculate_digit
                                    289 ;	-----------------------------------------
      000074                        290 _calculate_digit:
      000074 E5 82            [12]  291 	mov	a,dpl
      000076 90r00r0F         [24]  292 	mov	dptr,#_calculate_digit_radix_1_62
      000079 F0               [24]  293 	movx	@dptr,a
                                    294 ;	printf_large.c:191: register unsigned long ul = value.ul;
      00007A 90r00r05         [24]  295 	mov	dptr,#_value
      00007D E0               [24]  296 	movx	a,@dptr
      00007E FC               [12]  297 	mov	r4,a
      00007F A3               [24]  298 	inc	dptr
      000080 E0               [24]  299 	movx	a,@dptr
      000081 FD               [12]  300 	mov	r5,a
      000082 A3               [24]  301 	inc	dptr
      000083 E0               [24]  302 	movx	a,@dptr
      000084 FE               [12]  303 	mov	r6,a
      000085 A3               [24]  304 	inc	dptr
      000086 E0               [24]  305 	movx	a,@dptr
      000087 FF               [12]  306 	mov	r7,a
                                    307 ;	printf_large.c:192: register unsigned char b4 = value.byte[4];
      000088 90r00r09         [24]  308 	mov	dptr,#(_value + 0x0004)
      00008B E0               [24]  309 	movx	a,@dptr
      00008C FB               [12]  310 	mov	r3,a
                                    311 ;	printf_large.c:193: register unsigned char i = 32;
      00008D 75*00 20         [24]  312 	mov	_calculate_digit_i_1_63,#0x20
                                    313 ;	printf_large.c:195: do
      000090 90r00r0F         [24]  314 	mov	dptr,#_calculate_digit_radix_1_62
      000093 E0               [24]  315 	movx	a,@dptr
      000094 F9               [12]  316 	mov	r1,a
      000095                        317 00103$:
                                    318 ;	printf_large.c:197: b4 = (b4 << 1);
      000095 EB               [12]  319 	mov	a,r3
      000096 2B               [12]  320 	add	a,r3
      000097 FB               [12]  321 	mov	r3,a
                                    322 ;	printf_large.c:198: b4 |= (ul >> 31) & 0x01;
      000098 EF               [12]  323 	mov	a,r7
      000099 23               [12]  324 	rl	a
      00009A 54 01            [12]  325 	anl	a,#0x01
      00009C F8               [12]  326 	mov	r0,a
      00009D 8B 02            [24]  327 	mov	ar2,r3
      00009F 4A               [12]  328 	orl	a,r2
      0000A0 FB               [12]  329 	mov	r3,a
                                    330 ;	printf_large.c:199: ul <<= 1;
      0000A1 EC               [12]  331 	mov	a,r4
      0000A2 2C               [12]  332 	add	a,r4
      0000A3 FC               [12]  333 	mov	r4,a
      0000A4 ED               [12]  334 	mov	a,r5
      0000A5 33               [12]  335 	rlc	a
      0000A6 FD               [12]  336 	mov	r5,a
      0000A7 EE               [12]  337 	mov	a,r6
      0000A8 33               [12]  338 	rlc	a
      0000A9 FE               [12]  339 	mov	r6,a
      0000AA EF               [12]  340 	mov	a,r7
      0000AB 33               [12]  341 	rlc	a
      0000AC FF               [12]  342 	mov	r7,a
                                    343 ;	printf_large.c:201: if (radix <= b4 )
      0000AD C3               [12]  344 	clr	c
      0000AE EB               [12]  345 	mov	a,r3
      0000AF 99               [12]  346 	subb	a,r1
      0000B0 40 07            [24]  347 	jc	00104$
                                    348 ;	printf_large.c:203: b4 -= radix;
      0000B2 EB               [12]  349 	mov	a,r3
      0000B3 C3               [12]  350 	clr	c
      0000B4 99               [12]  351 	subb	a,r1
      0000B5 FB               [12]  352 	mov	r3,a
                                    353 ;	printf_large.c:204: ul |= 1;
      0000B6 43 04 01         [24]  354 	orl	ar4,#0x01
      0000B9                        355 00104$:
                                    356 ;	printf_large.c:206: } while (--i);
      0000B9 E5*00            [12]  357 	mov	a,_calculate_digit_i_1_63
      0000BB 14               [12]  358 	dec	a
      0000BC FA               [12]  359 	mov	r2,a
      0000BD 8A*00            [24]  360 	mov	_calculate_digit_i_1_63,r2
      0000BF 70 D4            [24]  361 	jnz	00103$
                                    362 ;	printf_large.c:207: value.ul = ul;
      0000C1 90r00r05         [24]  363 	mov	dptr,#_value
      0000C4 EC               [12]  364 	mov	a,r4
      0000C5 F0               [24]  365 	movx	@dptr,a
      0000C6 ED               [12]  366 	mov	a,r5
      0000C7 A3               [24]  367 	inc	dptr
      0000C8 F0               [24]  368 	movx	@dptr,a
      0000C9 EE               [12]  369 	mov	a,r6
      0000CA A3               [24]  370 	inc	dptr
      0000CB F0               [24]  371 	movx	@dptr,a
      0000CC EF               [12]  372 	mov	a,r7
      0000CD A3               [24]  373 	inc	dptr
      0000CE F0               [24]  374 	movx	@dptr,a
                                    375 ;	printf_large.c:208: value.byte[4] = b4;
      0000CF 90r00r09         [24]  376 	mov	dptr,#(_value + 0x0004)
      0000D2 EB               [12]  377 	mov	a,r3
      0000D3 F0               [24]  378 	movx	@dptr,a
      0000D4 22               [24]  379 	ret
                                    380 ;------------------------------------------------------------
                                    381 ;Allocation info for local variables in function '_print_format'
                                    382 ;------------------------------------------------------------
                                    383 ;sloc0                     Allocated with name '__print_format_sloc0_1_0'
                                    384 ;sloc1                     Allocated with name '__print_format_sloc1_1_0'
                                    385 ;sloc2                     Allocated with name '__print_format_sloc2_1_0'
                                    386 ;pvoid                     Allocated with name '__print_format_PARM_2'
                                    387 ;format                    Allocated with name '__print_format_PARM_3'
                                    388 ;ap                        Allocated with name '__print_format_PARM_4'
                                    389 ;pfn                       Allocated with name '__print_format_pfn_1_66'
                                    390 ;radix                     Allocated with name '__print_format_radix_1_67'
                                    391 ;width                     Allocated with name '__print_format_width_1_67'
                                    392 ;decimals                  Allocated with name '__print_format_decimals_1_67'
                                    393 ;length                    Allocated with name '__print_format_length_1_67'
                                    394 ;c                         Allocated with name '__print_format_c_1_67'
                                    395 ;memtype                   Allocated with name '__print_format_memtype_5_84'
                                    396 ;store                     Allocated with name '__print_format_store_4_88'
                                    397 ;pstore                    Allocated with name '__print_format_pstore_4_88'
                                    398 ;------------------------------------------------------------
                                    399 ;	printf_large.c:434: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                                    400 ;	-----------------------------------------
                                    401 ;	 function _print_format
                                    402 ;	-----------------------------------------
      0000D5                        403 __print_format:
      0000D5 AF 83            [24]  404 	mov	r7,dph
      0000D7 E5 82            [12]  405 	mov	a,dpl
      0000D9 90r00r17         [24]  406 	mov	dptr,#__print_format_pfn_1_66
      0000DC F0               [24]  407 	movx	@dptr,a
      0000DD EF               [12]  408 	mov	a,r7
      0000DE A3               [24]  409 	inc	dptr
      0000DF F0               [24]  410 	movx	@dptr,a
                                    411 ;	printf_large.c:461: output_char = pfn;
      0000E0 90r00r17         [24]  412 	mov	dptr,#__print_format_pfn_1_66
      0000E3 E0               [24]  413 	movx	a,@dptr
      0000E4 FE               [12]  414 	mov	r6,a
      0000E5 A3               [24]  415 	inc	dptr
      0000E6 E0               [24]  416 	movx	a,@dptr
      0000E7 FF               [12]  417 	mov	r7,a
      0000E8 90r00r00         [24]  418 	mov	dptr,#_output_char
      0000EB EE               [12]  419 	mov	a,r6
      0000EC F0               [24]  420 	movx	@dptr,a
      0000ED EF               [12]  421 	mov	a,r7
      0000EE A3               [24]  422 	inc	dptr
      0000EF F0               [24]  423 	movx	@dptr,a
                                    424 ;	printf_large.c:462: p = pvoid;
      0000F0 90r00r10         [24]  425 	mov	dptr,#__print_format_PARM_2
      0000F3 E0               [24]  426 	movx	a,@dptr
      0000F4 FD               [12]  427 	mov	r5,a
      0000F5 A3               [24]  428 	inc	dptr
      0000F6 E0               [24]  429 	movx	a,@dptr
      0000F7 FE               [12]  430 	mov	r6,a
      0000F8 A3               [24]  431 	inc	dptr
      0000F9 E0               [24]  432 	movx	a,@dptr
      0000FA FF               [12]  433 	mov	r7,a
      0000FB 90r00r02         [24]  434 	mov	dptr,#_p
      0000FE ED               [12]  435 	mov	a,r5
      0000FF F0               [24]  436 	movx	@dptr,a
      000100 EE               [12]  437 	mov	a,r6
      000101 A3               [24]  438 	inc	dptr
      000102 F0               [24]  439 	movx	@dptr,a
      000103 EF               [12]  440 	mov	a,r7
      000104 A3               [24]  441 	inc	dptr
      000105 F0               [24]  442 	movx	@dptr,a
                                    443 ;	printf_large.c:466: charsOutputted = 0;
      000106 90r00r0A         [24]  444 	mov	dptr,#_charsOutputted
      000109 E4               [12]  445 	clr	a
      00010A F0               [24]  446 	movx	@dptr,a
      00010B A3               [24]  447 	inc	dptr
      00010C F0               [24]  448 	movx	@dptr,a
                                    449 ;	printf_large.c:475: while( c=*format++ )
      00010D                        450 00243$:
      00010D 90r00r13         [24]  451 	mov	dptr,#__print_format_PARM_3
      000110 E0               [24]  452 	movx	a,@dptr
      000111 FD               [12]  453 	mov	r5,a
      000112 A3               [24]  454 	inc	dptr
      000113 E0               [24]  455 	movx	a,@dptr
      000114 FE               [12]  456 	mov	r6,a
      000115 A3               [24]  457 	inc	dptr
      000116 E0               [24]  458 	movx	a,@dptr
      000117 FF               [12]  459 	mov	r7,a
      000118 8D 82            [24]  460 	mov	dpl,r5
      00011A 8E 83            [24]  461 	mov	dph,r6
      00011C 8F F0            [24]  462 	mov	b,r7
      00011E 12r00r00         [24]  463 	lcall	__gptrget
      000121 FC               [12]  464 	mov	r4,a
      000122 90r00r13         [24]  465 	mov	dptr,#__print_format_PARM_3
      000125 74 01            [12]  466 	mov	a,#0x01
      000127 2D               [12]  467 	add	a,r5
      000128 F0               [24]  468 	movx	@dptr,a
      000129 E4               [12]  469 	clr	a
      00012A 3E               [12]  470 	addc	a,r6
      00012B A3               [24]  471 	inc	dptr
      00012C F0               [24]  472 	movx	@dptr,a
      00012D EF               [12]  473 	mov	a,r7
      00012E A3               [24]  474 	inc	dptr
      00012F F0               [24]  475 	movx	@dptr,a
      000130 EC               [12]  476 	mov	a,r4
      000131 70 03            [24]  477 	jnz	00500$
      000133 02r07rAB         [24]  478 	ljmp	00245$
      000136                        479 00500$:
                                    480 ;	printf_large.c:477: if ( c=='%' )
      000136 BC 25 02         [24]  481 	cjne	r4,#0x25,00501$
      000139 80 03            [24]  482 	sjmp	00502$
      00013B                        483 00501$:
      00013B 02r07rA3         [24]  484 	ljmp	00241$
      00013E                        485 00502$:
                                    486 ;	printf_large.c:479: left_justify    = 0;
      00013E C2*01            [12]  487 	clr	__print_format_left_justify_1_67
                                    488 ;	printf_large.c:480: zero_padding    = 0;
      000140 C2*02            [12]  489 	clr	__print_format_zero_padding_1_67
                                    490 ;	printf_large.c:481: prefix_sign     = 0;
      000142 C2*03            [12]  491 	clr	__print_format_prefix_sign_1_67
                                    492 ;	printf_large.c:482: prefix_space    = 0;
      000144 C2*04            [12]  493 	clr	__print_format_prefix_space_1_67
                                    494 ;	printf_large.c:483: signed_argument = 0;
      000146 C2*05            [12]  495 	clr	__print_format_signed_argument_1_67
                                    496 ;	printf_large.c:484: char_argument   = 0;
      000148 C2*06            [12]  497 	clr	__print_format_char_argument_1_67
                                    498 ;	printf_large.c:485: long_argument   = 0;
      00014A C2*07            [12]  499 	clr	__print_format_long_argument_1_67
                                    500 ;	printf_large.c:486: float_argument  = 0;
      00014C C2*08            [12]  501 	clr	__print_format_float_argument_1_67
                                    502 ;	printf_large.c:487: radix           = 0;
      00014E 90r00r19         [24]  503 	mov	dptr,#__print_format_radix_1_67
      000151 E4               [12]  504 	clr	a
      000152 F0               [24]  505 	movx	@dptr,a
                                    506 ;	printf_large.c:488: width           = 0;
      000153 90r00r1A         [24]  507 	mov	dptr,#__print_format_width_1_67
      000156 F0               [24]  508 	movx	@dptr,a
                                    509 ;	printf_large.c:489: decimals        = -1;
      000157 90r00r1B         [24]  510 	mov	dptr,#__print_format_decimals_1_67
      00015A 14               [12]  511 	dec	a
      00015B F0               [24]  512 	movx	@dptr,a
                                    513 ;	printf_large.c:491: get_conversion_spec:
      00015C 90r00r13         [24]  514 	mov	dptr,#__print_format_PARM_3
      00015F E0               [24]  515 	movx	a,@dptr
      000160 FD               [12]  516 	mov	r5,a
      000161 A3               [24]  517 	inc	dptr
      000162 E0               [24]  518 	movx	a,@dptr
      000163 FE               [12]  519 	mov	r6,a
      000164 A3               [24]  520 	inc	dptr
      000165 E0               [24]  521 	movx	a,@dptr
      000166 FF               [12]  522 	mov	r7,a
      000167                        523 00101$:
                                    524 ;	printf_large.c:493: c = *format++;
      000167 8D 82            [24]  525 	mov	dpl,r5
      000169 8E 83            [24]  526 	mov	dph,r6
      00016B 8F F0            [24]  527 	mov	b,r7
      00016D 12r00r00         [24]  528 	lcall	__gptrget
      000170 FB               [12]  529 	mov	r3,a
      000171 A3               [24]  530 	inc	dptr
      000172 AD 82            [24]  531 	mov	r5,dpl
      000174 AE 83            [24]  532 	mov	r6,dph
      000176 90r00r13         [24]  533 	mov	dptr,#__print_format_PARM_3
      000179 ED               [12]  534 	mov	a,r5
      00017A F0               [24]  535 	movx	@dptr,a
      00017B EE               [12]  536 	mov	a,r6
      00017C A3               [24]  537 	inc	dptr
      00017D F0               [24]  538 	movx	@dptr,a
      00017E EF               [12]  539 	mov	a,r7
      00017F A3               [24]  540 	inc	dptr
      000180 F0               [24]  541 	movx	@dptr,a
      000181 90r00r1D         [24]  542 	mov	dptr,#__print_format_c_1_67
      000184 EB               [12]  543 	mov	a,r3
      000185 F0               [24]  544 	movx	@dptr,a
                                    545 ;	printf_large.c:495: if (c=='%')
      000186 BB 25 08         [24]  546 	cjne	r3,#0x25,00103$
                                    547 ;	printf_large.c:497: OUTPUT_CHAR(c, p);
      000189 8B 82            [24]  548 	mov	dpl,r3
      00018B 12r00r00         [24]  549 	lcall	__output_char
                                    550 ;	printf_large.c:498: continue;
      00018E 02r01r0D         [24]  551 	ljmp	00243$
      000191                        552 00103$:
                                    553 ;	printf_large.c:501: if (isdigit(c))
      000191 8B 02            [24]  554 	mov	ar2,r3
      000193 BA 30 00         [24]  555 	cjne	r2,#0x30,00505$
      000196                        556 00505$:
      000196 40 3A            [24]  557 	jc	00110$
      000198 EA               [12]  558 	mov	a,r2
      000199 24 C6            [12]  559 	add	a,#0xff - 0x39
      00019B 40 35            [24]  560 	jc	00110$
                                    561 ;	printf_large.c:503: if (decimals==-1)
      00019D 90r00r1B         [24]  562 	mov	dptr,#__print_format_decimals_1_67
      0001A0 E0               [24]  563 	movx	a,@dptr
      0001A1 FA               [12]  564 	mov	r2,a
      0001A2 BA FF 1F         [24]  565 	cjne	r2,#0xFF,00107$
                                    566 ;	printf_large.c:505: width = 10*width + c - '0';
      0001A5 C0 05            [24]  567 	push	ar5
      0001A7 C0 06            [24]  568 	push	ar6
      0001A9 C0 07            [24]  569 	push	ar7
      0001AB 90r00r1A         [24]  570 	mov	dptr,#__print_format_width_1_67
      0001AE E0               [24]  571 	movx	a,@dptr
      0001AF 75 F0 0A         [24]  572 	mov	b,#0x0A
      0001B2 A4               [48]  573 	mul	ab
      0001B3 2B               [12]  574 	add	a,r3
      0001B4 24 D0            [12]  575 	add	a,#0xD0
      0001B6 F0               [24]  576 	movx	@dptr,a
                                    577 ;	printf_large.c:506: if (width == 0)
      0001B7 D0 07            [24]  578 	pop	ar7
      0001B9 D0 06            [24]  579 	pop	ar6
      0001BB D0 05            [24]  580 	pop	ar5
      0001BD E0               [24]  581 	movx	a,@dptr
      0001BE 70 A7            [24]  582 	jnz	00101$
                                    583 ;	printf_large.c:509: zero_padding = 1;
      0001C0 D2*02            [12]  584 	setb	__print_format_zero_padding_1_67
      0001C2 80 A3            [24]  585 	sjmp	00101$
      0001C4                        586 00107$:
                                    587 ;	printf_large.c:514: decimals = 10*decimals + c - '0';
      0001C4 EA               [12]  588 	mov	a,r2
      0001C5 75 F0 0A         [24]  589 	mov	b,#0x0A
      0001C8 A4               [48]  590 	mul	ab
      0001C9 2B               [12]  591 	add	a,r3
      0001CA 24 D0            [12]  592 	add	a,#0xD0
      0001CC 90r00r1B         [24]  593 	mov	dptr,#__print_format_decimals_1_67
      0001CF F0               [24]  594 	movx	@dptr,a
                                    595 ;	printf_large.c:516: goto get_conversion_spec;
      0001D0 80 95            [24]  596 	sjmp	00101$
      0001D2                        597 00110$:
                                    598 ;	printf_large.c:519: if (c=='.')
      0001D2 90r00r1D         [24]  599 	mov	dptr,#__print_format_c_1_67
      0001D5 E0               [24]  600 	movx	a,@dptr
      0001D6 FB               [12]  601 	mov	r3,a
      0001D7 BB 2E 15         [24]  602 	cjne	r3,#0x2E,00115$
                                    603 ;	printf_large.c:521: if (decimals==-1)
      0001DA 90r00r1B         [24]  604 	mov	dptr,#__print_format_decimals_1_67
      0001DD E0               [24]  605 	movx	a,@dptr
      0001DE FA               [12]  606 	mov	r2,a
      0001DF BA FF 02         [24]  607 	cjne	r2,#0xFF,00513$
      0001E2 80 03            [24]  608 	sjmp	00514$
      0001E4                        609 00513$:
      0001E4 02r01r67         [24]  610 	ljmp	00101$
      0001E7                        611 00514$:
                                    612 ;	printf_large.c:522: decimals=0;
      0001E7 90r00r1B         [24]  613 	mov	dptr,#__print_format_decimals_1_67
      0001EA E4               [12]  614 	clr	a
      0001EB F0               [24]  615 	movx	@dptr,a
                                    616 ;	printf_large.c:525: goto get_conversion_spec;
      0001EC 02r01r67         [24]  617 	ljmp	00101$
      0001EF                        618 00115$:
                                    619 ;	printf_large.c:528: if (islower(c))
      0001EF 8B 02            [24]  620 	mov	ar2,r3
      0001F1 BA 61 00         [24]  621 	cjne	r2,#0x61,00515$
      0001F4                        622 00515$:
      0001F4 40 10            [24]  623 	jc	00117$
      0001F6 EA               [12]  624 	mov	a,r2
      0001F7 24 85            [12]  625 	add	a,#0xff - 0x7A
      0001F9 40 0B            [24]  626 	jc	00117$
                                    627 ;	printf_large.c:530: c = toupper(c);
      0001FB 90r00r1D         [24]  628 	mov	dptr,#__print_format_c_1_67
      0001FE 74 DF            [12]  629 	mov	a,#0xDF
      000200 5B               [12]  630 	anl	a,r3
      000201 F0               [24]  631 	movx	@dptr,a
                                    632 ;	printf_large.c:531: lower_case = 1;
      000202 D2*00            [12]  633 	setb	_lower_case
      000204 80 02            [24]  634 	sjmp	00118$
      000206                        635 00117$:
                                    636 ;	printf_large.c:534: lower_case = 0;
      000206 C2*00            [12]  637 	clr	_lower_case
      000208                        638 00118$:
                                    639 ;	printf_large.c:536: switch( c )
      000208 90r00r1D         [24]  640 	mov	dptr,#__print_format_c_1_67
      00020B E0               [24]  641 	movx	a,@dptr
      00020C FB               [12]  642 	mov	r3,a
      00020D BB 20 02         [24]  643 	cjne	r3,#0x20,00518$
      000210 80 6D            [24]  644 	sjmp	00122$
      000212                        645 00518$:
      000212 BB 2B 02         [24]  646 	cjne	r3,#0x2B,00519$
      000215 80 63            [24]  647 	sjmp	00121$
      000217                        648 00519$:
      000217 BB 2D 02         [24]  649 	cjne	r3,#0x2D,00520$
      00021A 80 59            [24]  650 	sjmp	00120$
      00021C                        651 00520$:
      00021C BB 42 02         [24]  652 	cjne	r3,#0x42,00521$
      00021F 80 63            [24]  653 	sjmp	00123$
      000221                        654 00521$:
      000221 BB 43 02         [24]  655 	cjne	r3,#0x43,00522$
      000224 80 68            [24]  656 	sjmp	00129$
      000226                        657 00522$:
      000226 BB 44 03         [24]  658 	cjne	r3,#0x44,00523$
      000229 02r04r51         [24]  659 	ljmp	00166$
      00022C                        660 00523$:
      00022C BB 46 03         [24]  661 	cjne	r3,#0x46,00524$
      00022F 02r04r73         [24]  662 	ljmp	00170$
      000232                        663 00524$:
      000232 BB 48 03         [24]  664 	cjne	r3,#0x48,00525$
      000235 02r01r67         [24]  665 	ljmp	00101$
      000238                        666 00525$:
      000238 BB 49 03         [24]  667 	cjne	r3,#0x49,00526$
      00023B 02r04r51         [24]  668 	ljmp	00166$
      00023E                        669 00526$:
      00023E BB 4A 03         [24]  670 	cjne	r3,#0x4A,00527$
      000241 02r01r67         [24]  671 	ljmp	00101$
      000244                        672 00527$:
      000244 BB 4C 02         [24]  673 	cjne	r3,#0x4C,00528$
      000247 80 40            [24]  674 	sjmp	00128$
      000249                        675 00528$:
      000249 BB 4F 03         [24]  676 	cjne	r3,#0x4F,00529$
      00024C 02r04r5B         [24]  677 	ljmp	00167$
      00024F                        678 00529$:
      00024F BB 50 03         [24]  679 	cjne	r3,#0x50,00530$
      000252 02r03rC0         [24]  680 	ljmp	00152$
      000255                        681 00530$:
      000255 BB 53 02         [24]  682 	cjne	r3,#0x53,00531$
      000258 80 6A            [24]  683 	sjmp	00133$
      00025A                        684 00531$:
      00025A BB 54 03         [24]  685 	cjne	r3,#0x54,00532$
      00025D 02r01r67         [24]  686 	ljmp	00101$
      000260                        687 00532$:
      000260 BB 55 03         [24]  688 	cjne	r3,#0x55,00533$
      000263 02r04r63         [24]  689 	ljmp	00168$
      000266                        690 00533$:
      000266 BB 58 03         [24]  691 	cjne	r3,#0x58,00534$
      000269 02r04r6B         [24]  692 	ljmp	00169$
      00026C                        693 00534$:
      00026C BB 5A 03         [24]  694 	cjne	r3,#0x5A,00535$
      00026F 02r01r67         [24]  695 	ljmp	00101$
      000272                        696 00535$:
      000272 02r04r77         [24]  697 	ljmp	00171$
                                    698 ;	printf_large.c:538: case '-':
      000275                        699 00120$:
                                    700 ;	printf_large.c:539: left_justify = 1;
      000275 D2*01            [12]  701 	setb	__print_format_left_justify_1_67
                                    702 ;	printf_large.c:540: goto get_conversion_spec;
      000277 02r01r67         [24]  703 	ljmp	00101$
                                    704 ;	printf_large.c:541: case '+':
      00027A                        705 00121$:
                                    706 ;	printf_large.c:542: prefix_sign = 1;
      00027A D2*03            [12]  707 	setb	__print_format_prefix_sign_1_67
                                    708 ;	printf_large.c:543: goto get_conversion_spec;
      00027C 02r01r67         [24]  709 	ljmp	00101$
                                    710 ;	printf_large.c:544: case ' ':
      00027F                        711 00122$:
                                    712 ;	printf_large.c:545: prefix_space = 1;
      00027F D2*04            [12]  713 	setb	__print_format_prefix_space_1_67
                                    714 ;	printf_large.c:546: goto get_conversion_spec;
      000281 02r01r67         [24]  715 	ljmp	00101$
                                    716 ;	printf_large.c:547: case 'B': /* byte */
      000284                        717 00123$:
                                    718 ;	printf_large.c:548: char_argument = 1;
      000284 D2*06            [12]  719 	setb	__print_format_char_argument_1_67
                                    720 ;	printf_large.c:549: goto get_conversion_spec;
      000286 02r01r67         [24]  721 	ljmp	00101$
                                    722 ;	printf_large.c:556: case 'L': /* long */
      000289                        723 00128$:
                                    724 ;	printf_large.c:557: long_argument = 1;
      000289 D2*07            [12]  725 	setb	__print_format_long_argument_1_67
                                    726 ;	printf_large.c:558: goto get_conversion_spec;
      00028B 02r01r67         [24]  727 	ljmp	00101$
                                    728 ;	printf_large.c:560: case 'C':
      00028E                        729 00129$:
                                    730 ;	printf_large.c:561: if( char_argument )
      00028E 30*06 11         [24]  731 	jnb	__print_format_char_argument_1_67,00131$
                                    732 ;	printf_large.c:562: c = va_arg(ap,char);
      000291 90r00r16         [24]  733 	mov	dptr,#__print_format_PARM_4
      000294 E0               [24]  734 	movx	a,@dptr
      000295 FF               [12]  735 	mov	r7,a
      000296 1F               [12]  736 	dec	r7
      000297 EF               [12]  737 	mov	a,r7
      000298 F0               [24]  738 	movx	@dptr,a
      000299 8F 01            [24]  739 	mov	ar1,r7
      00029B 90r00r1D         [24]  740 	mov	dptr,#__print_format_c_1_67
      00029E E7               [12]  741 	mov	a,@r1
      00029F F0               [24]  742 	movx	@dptr,a
      0002A0 80 16            [24]  743 	sjmp	00132$
      0002A2                        744 00131$:
                                    745 ;	printf_large.c:564: c = va_arg(ap,int);
      0002A2 90r00r16         [24]  746 	mov	dptr,#__print_format_PARM_4
      0002A5 E0               [24]  747 	movx	a,@dptr
      0002A6 FF               [12]  748 	mov	r7,a
      0002A7 1F               [12]  749 	dec	r7
      0002A8 1F               [12]  750 	dec	r7
      0002A9 EF               [12]  751 	mov	a,r7
      0002AA F0               [24]  752 	movx	@dptr,a
      0002AB 8F 01            [24]  753 	mov	ar1,r7
      0002AD 87 06            [24]  754 	mov	ar6,@r1
      0002AF 09               [12]  755 	inc	r1
      0002B0 87 07            [24]  756 	mov	ar7,@r1
      0002B2 19               [12]  757 	dec	r1
      0002B3 90r00r1D         [24]  758 	mov	dptr,#__print_format_c_1_67
      0002B6 EE               [12]  759 	mov	a,r6
      0002B7 F0               [24]  760 	movx	@dptr,a
      0002B8                        761 00132$:
                                    762 ;	printf_large.c:565: OUTPUT_CHAR( c, p );
      0002B8 90r00r1D         [24]  763 	mov	dptr,#__print_format_c_1_67
      0002BB E0               [24]  764 	movx	a,@dptr
      0002BC F5 82            [12]  765 	mov	dpl,a
      0002BE 12r00r00         [24]  766 	lcall	__output_char
                                    767 ;	printf_large.c:566: break;
      0002C1 02r04r83         [24]  768 	ljmp	00172$
                                    769 ;	printf_large.c:568: case 'S':
      0002C4                        770 00133$:
                                    771 ;	printf_large.c:569: PTR = va_arg(ap,ptr_t);
      0002C4 90r00r16         [24]  772 	mov	dptr,#__print_format_PARM_4
      0002C7 E0               [24]  773 	movx	a,@dptr
      0002C8 FF               [12]  774 	mov	r7,a
      0002C9 1F               [12]  775 	dec	r7
      0002CA 1F               [12]  776 	dec	r7
      0002CB 1F               [12]  777 	dec	r7
      0002CC EF               [12]  778 	mov	a,r7
      0002CD F0               [24]  779 	movx	@dptr,a
      0002CE 8F 01            [24]  780 	mov	ar1,r7
      0002D0 87 05            [24]  781 	mov	ar5,@r1
      0002D2 09               [12]  782 	inc	r1
      0002D3 87 06            [24]  783 	mov	ar6,@r1
      0002D5 09               [12]  784 	inc	r1
      0002D6 87 07            [24]  785 	mov	ar7,@r1
      0002D8 19               [12]  786 	dec	r1
      0002D9 19               [12]  787 	dec	r1
      0002DA 90r00r05         [24]  788 	mov	dptr,#_value
      0002DD ED               [12]  789 	mov	a,r5
      0002DE F0               [24]  790 	movx	@dptr,a
      0002DF EE               [12]  791 	mov	a,r6
      0002E0 A3               [24]  792 	inc	dptr
      0002E1 F0               [24]  793 	movx	@dptr,a
      0002E2 EF               [12]  794 	mov	a,r7
      0002E3 A3               [24]  795 	inc	dptr
      0002E4 F0               [24]  796 	movx	@dptr,a
                                    797 ;	printf_large.c:582: length = strlen(PTR);
      0002E5 8D 82            [24]  798 	mov	dpl,r5
      0002E7 8E 83            [24]  799 	mov	dph,r6
      0002E9 8F F0            [24]  800 	mov	b,r7
      0002EB 12r00r00         [24]  801 	lcall	_strlen
      0002EE AE 82            [24]  802 	mov	r6,dpl
                                    803 ;	printf_large.c:584: if ( decimals == -1 )
      0002F0 90r00r1B         [24]  804 	mov	dptr,#__print_format_decimals_1_67
      0002F3 E0               [24]  805 	movx	a,@dptr
      0002F4 FF               [12]  806 	mov	r7,a
      0002F5 BF FF 05         [24]  807 	cjne	r7,#0xFF,00135$
                                    808 ;	printf_large.c:586: decimals = length;
      0002F8 90r00r1B         [24]  809 	mov	dptr,#__print_format_decimals_1_67
      0002FB EE               [12]  810 	mov	a,r6
      0002FC F0               [24]  811 	movx	@dptr,a
      0002FD                        812 00135$:
                                    813 ;	printf_large.c:588: if ( ( !left_justify ) && (length < width) )
      0002FD 20*01 2E         [24]  814 	jb	__print_format_left_justify_1_67,00289$
      000300 90r00r1A         [24]  815 	mov	dptr,#__print_format_width_1_67
      000303 E0               [24]  816 	movx	a,@dptr
      000304 FF               [12]  817 	mov	r7,a
      000305 C3               [12]  818 	clr	c
      000306 EE               [12]  819 	mov	a,r6
      000307 9F               [12]  820 	subb	a,r7
      000308 50 24            [24]  821 	jnc	00289$
                                    822 ;	printf_large.c:590: width -= length;
      00030A 90r00r1A         [24]  823 	mov	dptr,#__print_format_width_1_67
      00030D EF               [12]  824 	mov	a,r7
      00030E C3               [12]  825 	clr	c
      00030F 9E               [12]  826 	subb	a,r6
      000310 F0               [24]  827 	movx	@dptr,a
                                    828 ;	printf_large.c:591: while( width-- != 0 )
      000311 E0               [24]  829 	movx	a,@dptr
      000312 FF               [12]  830 	mov	r7,a
      000313                        831 00136$:
      000313 8F 05            [24]  832 	mov	ar5,r7
      000315 1F               [12]  833 	dec	r7
      000316 ED               [12]  834 	mov	a,r5
      000317 60 10            [24]  835 	jz	00329$
                                    836 ;	printf_large.c:593: OUTPUT_CHAR( ' ', p );
      000319 75 82 20         [24]  837 	mov	dpl,#0x20
      00031C C0 07            [24]  838 	push	ar7
      00031E C0 06            [24]  839 	push	ar6
      000320 12r00r00         [24]  840 	lcall	__output_char
      000323 D0 06            [24]  841 	pop	ar6
      000325 D0 07            [24]  842 	pop	ar7
                                    843 ;	printf_large.c:597: while ( (c = *PTR)  && (decimals-- > 0))
      000327 80 EA            [24]  844 	sjmp	00136$
      000329                        845 00329$:
      000329 90r00r1A         [24]  846 	mov	dptr,#__print_format_width_1_67
      00032C EF               [12]  847 	mov	a,r7
      00032D F0               [24]  848 	movx	@dptr,a
      00032E                        849 00289$:
      00032E 90r00r1B         [24]  850 	mov	dptr,#__print_format_decimals_1_67
      000331 E0               [24]  851 	movx	a,@dptr
      000332 FF               [12]  852 	mov	r7,a
      000333                        853 00143$:
      000333 C0 06            [24]  854 	push	ar6
      000335 90r00r05         [24]  855 	mov	dptr,#_value
      000338 E0               [24]  856 	movx	a,@dptr
      000339 FA               [12]  857 	mov	r2,a
      00033A A3               [24]  858 	inc	dptr
      00033B E0               [24]  859 	movx	a,@dptr
      00033C FD               [12]  860 	mov	r5,a
      00033D A3               [24]  861 	inc	dptr
      00033E E0               [24]  862 	movx	a,@dptr
      00033F FE               [12]  863 	mov	r6,a
      000340 8A 82            [24]  864 	mov	dpl,r2
      000342 8D 83            [24]  865 	mov	dph,r5
      000344 8E F0            [24]  866 	mov	b,r6
      000346 12r00r00         [24]  867 	lcall	__gptrget
      000349 F5*00            [12]  868 	mov	__print_format_sloc0_1_0,a
      00034B D0 06            [24]  869 	pop	ar6
      00034D E5*00            [12]  870 	mov	a,__print_format_sloc0_1_0
      00034F 60 3E            [24]  871 	jz	00145$
      000351 8F 05            [24]  872 	mov	ar5,r7
      000353 1F               [12]  873 	dec	r7
      000354 C3               [12]  874 	clr	c
      000355 74 80            [12]  875 	mov	a,#(0x00 ^ 0x80)
      000357 8D F0            [24]  876 	mov	b,r5
      000359 63 F0 80         [24]  877 	xrl	b,#0x80
      00035C 95 F0            [12]  878 	subb	a,b
      00035E 50 2F            [24]  879 	jnc	00145$
                                    880 ;	printf_large.c:599: OUTPUT_CHAR( c, p );
      000360 C0 06            [24]  881 	push	ar6
      000362 85*00 82         [24]  882 	mov	dpl,__print_format_sloc0_1_0
      000365 C0 07            [24]  883 	push	ar7
      000367 C0 06            [24]  884 	push	ar6
      000369 12r00r00         [24]  885 	lcall	__output_char
      00036C D0 06            [24]  886 	pop	ar6
      00036E D0 07            [24]  887 	pop	ar7
                                    888 ;	printf_large.c:600: PTR++;
      000370 90r00r05         [24]  889 	mov	dptr,#_value
      000373 E0               [24]  890 	movx	a,@dptr
      000374 FA               [12]  891 	mov	r2,a
      000375 A3               [24]  892 	inc	dptr
      000376 E0               [24]  893 	movx	a,@dptr
      000377 FD               [12]  894 	mov	r5,a
      000378 A3               [24]  895 	inc	dptr
      000379 E0               [24]  896 	movx	a,@dptr
      00037A FE               [12]  897 	mov	r6,a
      00037B 0A               [12]  898 	inc	r2
      00037C BA 00 01         [24]  899 	cjne	r2,#0x00,00544$
      00037F 0D               [12]  900 	inc	r5
      000380                        901 00544$:
      000380 90r00r05         [24]  902 	mov	dptr,#_value
      000383 EA               [12]  903 	mov	a,r2
      000384 F0               [24]  904 	movx	@dptr,a
      000385 ED               [12]  905 	mov	a,r5
      000386 A3               [24]  906 	inc	dptr
      000387 F0               [24]  907 	movx	@dptr,a
      000388 EE               [12]  908 	mov	a,r6
      000389 A3               [24]  909 	inc	dptr
      00038A F0               [24]  910 	movx	@dptr,a
      00038B D0 06            [24]  911 	pop	ar6
      00038D 80 A4            [24]  912 	sjmp	00143$
      00038F                        913 00145$:
                                    914 ;	printf_large.c:603: if ( left_justify && (length < width))
      00038F 20*01 03         [24]  915 	jb	__print_format_left_justify_1_67,00545$
      000392 02r04r83         [24]  916 	ljmp	00172$
      000395                        917 00545$:
      000395 90r00r1A         [24]  918 	mov	dptr,#__print_format_width_1_67
      000398 E0               [24]  919 	movx	a,@dptr
      000399 FF               [12]  920 	mov	r7,a
      00039A C3               [12]  921 	clr	c
      00039B EE               [12]  922 	mov	a,r6
      00039C 9F               [12]  923 	subb	a,r7
      00039D 40 03            [24]  924 	jc	00546$
      00039F 02r04r83         [24]  925 	ljmp	00172$
      0003A2                        926 00546$:
                                    927 ;	printf_large.c:605: width -= length;
      0003A2 90r00r1A         [24]  928 	mov	dptr,#__print_format_width_1_67
      0003A5 EF               [12]  929 	mov	a,r7
      0003A6 C3               [12]  930 	clr	c
      0003A7 9E               [12]  931 	subb	a,r6
      0003A8 F0               [24]  932 	movx	@dptr,a
                                    933 ;	printf_large.c:606: while( width-- != 0 )
      0003A9 E0               [24]  934 	movx	a,@dptr
      0003AA FF               [12]  935 	mov	r7,a
      0003AB                        936 00146$:
      0003AB 8F 06            [24]  937 	mov	ar6,r7
      0003AD 1F               [12]  938 	dec	r7
      0003AE EE               [12]  939 	mov	a,r6
      0003AF 70 03            [24]  940 	jnz	00547$
      0003B1 02r04r7E         [24]  941 	ljmp	00331$
      0003B4                        942 00547$:
                                    943 ;	printf_large.c:608: OUTPUT_CHAR( ' ', p );
      0003B4 75 82 20         [24]  944 	mov	dpl,#0x20
      0003B7 C0 07            [24]  945 	push	ar7
      0003B9 12r00r00         [24]  946 	lcall	__output_char
      0003BC D0 07            [24]  947 	pop	ar7
                                    948 ;	printf_large.c:613: case 'P':
      0003BE 80 EB            [24]  949 	sjmp	00146$
      0003C0                        950 00152$:
                                    951 ;	printf_large.c:614: PTR = va_arg(ap,ptr_t);
      0003C0 90r00r16         [24]  952 	mov	dptr,#__print_format_PARM_4
      0003C3 E0               [24]  953 	movx	a,@dptr
      0003C4 FE               [12]  954 	mov	r6,a
      0003C5 1E               [12]  955 	dec	r6
      0003C6 1E               [12]  956 	dec	r6
      0003C7 1E               [12]  957 	dec	r6
      0003C8 EE               [12]  958 	mov	a,r6
      0003C9 F0               [24]  959 	movx	@dptr,a
      0003CA 8E 01            [24]  960 	mov	ar1,r6
      0003CC 87 02            [24]  961 	mov	ar2,@r1
      0003CE 09               [12]  962 	inc	r1
      0003CF 87 05            [24]  963 	mov	ar5,@r1
      0003D1 09               [12]  964 	inc	r1
      0003D2 87 06            [24]  965 	mov	ar6,@r1
      0003D4 19               [12]  966 	dec	r1
      0003D5 19               [12]  967 	dec	r1
      0003D6 90r00r05         [24]  968 	mov	dptr,#_value
      0003D9 EA               [12]  969 	mov	a,r2
      0003DA F0               [24]  970 	movx	@dptr,a
      0003DB ED               [12]  971 	mov	a,r5
      0003DC A3               [24]  972 	inc	dptr
      0003DD F0               [24]  973 	movx	@dptr,a
      0003DE EE               [12]  974 	mov	a,r6
      0003DF A3               [24]  975 	inc	dptr
      0003E0 F0               [24]  976 	movx	@dptr,a
                                    977 ;	printf_large.c:637: unsigned char memtype = value.byte[2];
      0003E1 90r00r07         [24]  978 	mov	dptr,#(_value + 0x0002)
      0003E4 E0               [24]  979 	movx	a,@dptr
      0003E5 FE               [12]  980 	mov	r6,a
                                    981 ;	printf_large.c:638: if (memtype >= 0x80)
      0003E6 BE 80 00         [24]  982 	cjne	r6,#0x80,00548$
      0003E9                        983 00548$:
      0003E9 40 08            [24]  984 	jc	00160$
                                    985 ;	printf_large.c:639: c = 'C';
      0003EB 90r00r1D         [24]  986 	mov	dptr,#__print_format_c_1_67
      0003EE 74 43            [12]  987 	mov	a,#0x43
      0003F0 F0               [24]  988 	movx	@dptr,a
      0003F1 80 20            [24]  989 	sjmp	00161$
      0003F3                        990 00160$:
                                    991 ;	printf_large.c:640: else if (memtype >= 0x60)
      0003F3 BE 60 00         [24]  992 	cjne	r6,#0x60,00550$
      0003F6                        993 00550$:
      0003F6 40 08            [24]  994 	jc	00157$
                                    995 ;	printf_large.c:641: c = 'P';
      0003F8 90r00r1D         [24]  996 	mov	dptr,#__print_format_c_1_67
      0003FB 74 50            [12]  997 	mov	a,#0x50
      0003FD F0               [24]  998 	movx	@dptr,a
      0003FE 80 13            [24]  999 	sjmp	00161$
      000400                       1000 00157$:
                                   1001 ;	printf_large.c:642: else if (memtype >= 0x40)
      000400 BE 40 00         [24] 1002 	cjne	r6,#0x40,00552$
      000403                       1003 00552$:
      000403 40 08            [24] 1004 	jc	00154$
                                   1005 ;	printf_large.c:643: c = 'I';
      000405 90r00r1D         [24] 1006 	mov	dptr,#__print_format_c_1_67
      000408 74 49            [12] 1007 	mov	a,#0x49
      00040A F0               [24] 1008 	movx	@dptr,a
      00040B 80 06            [24] 1009 	sjmp	00161$
      00040D                       1010 00154$:
                                   1011 ;	printf_large.c:645: c = 'X';
      00040D 90r00r1D         [24] 1012 	mov	dptr,#__print_format_c_1_67
      000410 74 58            [12] 1013 	mov	a,#0x58
      000412 F0               [24] 1014 	movx	@dptr,a
      000413                       1015 00161$:
                                   1016 ;	printf_large.c:647: OUTPUT_CHAR(c, p);
      000413 90r00r1D         [24] 1017 	mov	dptr,#__print_format_c_1_67
      000416 E0               [24] 1018 	movx	a,@dptr
      000417 FE               [12] 1019 	mov	r6,a
      000418 F5 82            [12] 1020 	mov	dpl,a
      00041A C0 06            [24] 1021 	push	ar6
      00041C 12r00r00         [24] 1022 	lcall	__output_char
                                   1023 ;	printf_large.c:648: OUTPUT_CHAR(':', p);
      00041F 75 82 3A         [24] 1024 	mov	dpl,#0x3A
      000422 12r00r00         [24] 1025 	lcall	__output_char
                                   1026 ;	printf_large.c:649: OUTPUT_CHAR('0', p);
      000425 75 82 30         [24] 1027 	mov	dpl,#0x30
      000428 12r00r00         [24] 1028 	lcall	__output_char
                                   1029 ;	printf_large.c:650: OUTPUT_CHAR('x', p);
      00042B 75 82 78         [24] 1030 	mov	dpl,#0x78
      00042E 12r00r00         [24] 1031 	lcall	__output_char
      000431 D0 06            [24] 1032 	pop	ar6
                                   1033 ;	printf_large.c:651: if ((c != 'I' /* idata */) &&
      000433 BE 49 02         [24] 1034 	cjne	r6,#0x49,00554$
      000436 80 0E            [24] 1035 	sjmp	00163$
      000438                       1036 00554$:
                                   1037 ;	printf_large.c:652: (c != 'P' /* pdata */))
      000438 BE 50 02         [24] 1038 	cjne	r6,#0x50,00555$
      00043B 80 09            [24] 1039 	sjmp	00163$
      00043D                       1040 00555$:
                                   1041 ;	printf_large.c:654: OUTPUT_2DIGITS( value.byte[1] );
      00043D 90r00r06         [24] 1042 	mov	dptr,#(_value + 0x0001)
      000440 E0               [24] 1043 	movx	a,@dptr
      000441 F5 82            [12] 1044 	mov	dpl,a
      000443 12r00r58         [24] 1045 	lcall	_output_2digits
      000446                       1046 00163$:
                                   1047 ;	printf_large.c:656: OUTPUT_2DIGITS( value.byte[0] );
      000446 90r00r05         [24] 1048 	mov	dptr,#_value
      000449 E0               [24] 1049 	movx	a,@dptr
      00044A F5 82            [12] 1050 	mov	dpl,a
      00044C 12r00r58         [24] 1051 	lcall	_output_2digits
                                   1052 ;	printf_large.c:663: break;
                                   1053 ;	printf_large.c:666: case 'I':
      00044F 80 32            [24] 1054 	sjmp	00172$
      000451                       1055 00166$:
                                   1056 ;	printf_large.c:667: signed_argument = 1;
      000451 D2*05            [12] 1057 	setb	__print_format_signed_argument_1_67
                                   1058 ;	printf_large.c:668: radix = 10;
      000453 90r00r19         [24] 1059 	mov	dptr,#__print_format_radix_1_67
      000456 74 0A            [12] 1060 	mov	a,#0x0A
      000458 F0               [24] 1061 	movx	@dptr,a
                                   1062 ;	printf_large.c:669: break;
                                   1063 ;	printf_large.c:671: case 'O':
      000459 80 28            [24] 1064 	sjmp	00172$
      00045B                       1065 00167$:
                                   1066 ;	printf_large.c:672: radix = 8;
      00045B 90r00r19         [24] 1067 	mov	dptr,#__print_format_radix_1_67
      00045E 74 08            [12] 1068 	mov	a,#0x08
      000460 F0               [24] 1069 	movx	@dptr,a
                                   1070 ;	printf_large.c:673: break;
                                   1071 ;	printf_large.c:675: case 'U':
      000461 80 20            [24] 1072 	sjmp	00172$
      000463                       1073 00168$:
                                   1074 ;	printf_large.c:676: radix = 10;
      000463 90r00r19         [24] 1075 	mov	dptr,#__print_format_radix_1_67
      000466 74 0A            [12] 1076 	mov	a,#0x0A
      000468 F0               [24] 1077 	movx	@dptr,a
                                   1078 ;	printf_large.c:677: break;
                                   1079 ;	printf_large.c:679: case 'X':
      000469 80 18            [24] 1080 	sjmp	00172$
      00046B                       1081 00169$:
                                   1082 ;	printf_large.c:680: radix = 16;
      00046B 90r00r19         [24] 1083 	mov	dptr,#__print_format_radix_1_67
      00046E 74 10            [12] 1084 	mov	a,#0x10
      000470 F0               [24] 1085 	movx	@dptr,a
                                   1086 ;	printf_large.c:681: break;
                                   1087 ;	printf_large.c:683: case 'F':
      000471 80 10            [24] 1088 	sjmp	00172$
      000473                       1089 00170$:
                                   1090 ;	printf_large.c:684: float_argument=1;
      000473 D2*08            [12] 1091 	setb	__print_format_float_argument_1_67
                                   1092 ;	printf_large.c:685: break;
                                   1093 ;	printf_large.c:687: default:
      000475 80 0C            [24] 1094 	sjmp	00172$
      000477                       1095 00171$:
                                   1096 ;	printf_large.c:689: OUTPUT_CHAR( c, p );
      000477 8B 82            [24] 1097 	mov	dpl,r3
      000479 12r00r00         [24] 1098 	lcall	__output_char
                                   1099 ;	printf_large.c:872: return charsOutputted;
                                   1100 ;	printf_large.c:691: }
      00047C 80 05            [24] 1101 	sjmp	00172$
      00047E                       1102 00331$:
      00047E 90r00r1A         [24] 1103 	mov	dptr,#__print_format_width_1_67
      000481 EF               [12] 1104 	mov	a,r7
      000482 F0               [24] 1105 	movx	@dptr,a
      000483                       1106 00172$:
                                   1107 ;	printf_large.c:693: if (float_argument)
      000483 30*08 74         [24] 1108 	jnb	__print_format_float_argument_1_67,00238$
                                   1109 ;	printf_large.c:695: value.f = va_arg(ap, float);
      000486 90r00r16         [24] 1110 	mov	dptr,#__print_format_PARM_4
      000489 E0               [24] 1111 	movx	a,@dptr
      00048A FF               [12] 1112 	mov	r7,a
      00048B 1F               [12] 1113 	dec	r7
      00048C 1F               [12] 1114 	dec	r7
      00048D 1F               [12] 1115 	dec	r7
      00048E 1F               [12] 1116 	dec	r7
      00048F EF               [12] 1117 	mov	a,r7
      000490 F0               [24] 1118 	movx	@dptr,a
      000491 8F 01            [24] 1119 	mov	ar1,r7
      000493 87 03            [24] 1120 	mov	ar3,@r1
      000495 09               [12] 1121 	inc	r1
      000496 87 05            [24] 1122 	mov	ar5,@r1
      000498 09               [12] 1123 	inc	r1
      000499 87 06            [24] 1124 	mov	ar6,@r1
      00049B 09               [12] 1125 	inc	r1
      00049C 87 07            [24] 1126 	mov	ar7,@r1
      00049E 19               [12] 1127 	dec	r1
      00049F 19               [12] 1128 	dec	r1
      0004A0 19               [12] 1129 	dec	r1
      0004A1 90r00r05         [24] 1130 	mov	dptr,#_value
      0004A4 EB               [12] 1131 	mov	a,r3
      0004A5 F0               [24] 1132 	movx	@dptr,a
      0004A6 ED               [12] 1133 	mov	a,r5
      0004A7 A3               [24] 1134 	inc	dptr
      0004A8 F0               [24] 1135 	movx	@dptr,a
      0004A9 EE               [12] 1136 	mov	a,r6
      0004AA A3               [24] 1137 	inc	dptr
      0004AB F0               [24] 1138 	movx	@dptr,a
      0004AC EF               [12] 1139 	mov	a,r7
      0004AD A3               [24] 1140 	inc	dptr
      0004AE F0               [24] 1141 	movx	@dptr,a
                                   1142 ;	printf_large.c:697: PTR="<NO FLOAT>";
      0004AF 90r00r05         [24] 1143 	mov	dptr,#_value
      0004B2 74r00            [12] 1144 	mov	a,#___str_0
      0004B4 F0               [24] 1145 	movx	@dptr,a
      0004B5 74s00            [12] 1146 	mov	a,#(___str_0 >> 8)
      0004B7 A3               [24] 1147 	inc	dptr
      0004B8 F0               [24] 1148 	movx	@dptr,a
      0004B9 74 80            [12] 1149 	mov	a,#0x80
      0004BB A3               [24] 1150 	inc	dptr
      0004BC F0               [24] 1151 	movx	@dptr,a
                                   1152 ;	printf_large.c:698: while (c=*PTR++)
      0004BD                       1153 00173$:
      0004BD 90r00r05         [24] 1154 	mov	dptr,#_value
      0004C0 E0               [24] 1155 	movx	a,@dptr
      0004C1 F5*01            [12] 1156 	mov	__print_format_sloc1_1_0,a
      0004C3 A3               [24] 1157 	inc	dptr
      0004C4 E0               [24] 1158 	movx	a,@dptr
      0004C5 F5*02            [12] 1159 	mov	(__print_format_sloc1_1_0 + 1),a
      0004C7 A3               [24] 1160 	inc	dptr
      0004C8 E0               [24] 1161 	movx	a,@dptr
      0004C9 F5*03            [12] 1162 	mov	(__print_format_sloc1_1_0 + 2),a
      0004CB 74 01            [12] 1163 	mov	a,#0x01
      0004CD 25*01            [12] 1164 	add	a,__print_format_sloc1_1_0
      0004CF FA               [12] 1165 	mov	r2,a
      0004D0 E4               [12] 1166 	clr	a
      0004D1 35*02            [12] 1167 	addc	a,(__print_format_sloc1_1_0 + 1)
      0004D3 FB               [12] 1168 	mov	r3,a
      0004D4 AF*03            [24] 1169 	mov	r7,(__print_format_sloc1_1_0 + 2)
      0004D6 90r00r05         [24] 1170 	mov	dptr,#_value
      0004D9 EA               [12] 1171 	mov	a,r2
      0004DA F0               [24] 1172 	movx	@dptr,a
      0004DB EB               [12] 1173 	mov	a,r3
      0004DC A3               [24] 1174 	inc	dptr
      0004DD F0               [24] 1175 	movx	@dptr,a
      0004DE EF               [12] 1176 	mov	a,r7
      0004DF A3               [24] 1177 	inc	dptr
      0004E0 F0               [24] 1178 	movx	@dptr,a
      0004E1 85*01 82         [24] 1179 	mov	dpl,__print_format_sloc1_1_0
      0004E4 85*02 83         [24] 1180 	mov	dph,(__print_format_sloc1_1_0 + 1)
      0004E7 85*03 F0         [24] 1181 	mov	b,(__print_format_sloc1_1_0 + 2)
      0004EA 12r00r00         [24] 1182 	lcall	__gptrget
      0004ED FF               [12] 1183 	mov	r7,a
      0004EE 70 03            [24] 1184 	jnz	00557$
      0004F0 02r01r0D         [24] 1185 	ljmp	00243$
      0004F3                       1186 00557$:
                                   1187 ;	printf_large.c:700: OUTPUT_CHAR (c, p);
      0004F3 8F 82            [24] 1188 	mov	dpl,r7
      0004F5 12r00r00         [24] 1189 	lcall	__output_char
      0004F8 80 C3            [24] 1190 	sjmp	00173$
      0004FA                       1191 00238$:
                                   1192 ;	printf_large.c:718: else if (radix != 0)
      0004FA 90r00r19         [24] 1193 	mov	dptr,#__print_format_radix_1_67
      0004FD E0               [24] 1194 	movx	a,@dptr
      0004FE F5*01            [12] 1195 	mov	__print_format_sloc1_1_0,a
      000500 E0               [24] 1196 	movx	a,@dptr
      000501 70 03            [24] 1197 	jnz	00558$
      000503 02r01r0D         [24] 1198 	ljmp	00243$
      000506                       1199 00558$:
                                   1200 ;	printf_large.c:726: if (char_argument)
      000506 30*06 47         [24] 1201 	jnb	__print_format_char_argument_1_67,00184$
                                   1202 ;	printf_large.c:728: value.l = va_arg(ap, char);
      000509 90r00r16         [24] 1203 	mov	dptr,#__print_format_PARM_4
      00050C E0               [24] 1204 	movx	a,@dptr
      00050D FE               [12] 1205 	mov	r6,a
      00050E 1E               [12] 1206 	dec	r6
      00050F EE               [12] 1207 	mov	a,r6
      000510 F0               [24] 1208 	movx	@dptr,a
      000511 8E 01            [24] 1209 	mov	ar1,r6
      000513 E7               [12] 1210 	mov	a,@r1
      000514 FE               [12] 1211 	mov	r6,a
      000515 33               [12] 1212 	rlc	a
      000516 95 E0            [12] 1213 	subb	a,acc
      000518 FD               [12] 1214 	mov	r5,a
      000519 FB               [12] 1215 	mov	r3,a
      00051A FA               [12] 1216 	mov	r2,a
      00051B 90r00r05         [24] 1217 	mov	dptr,#_value
      00051E EE               [12] 1218 	mov	a,r6
      00051F F0               [24] 1219 	movx	@dptr,a
      000520 ED               [12] 1220 	mov	a,r5
      000521 A3               [24] 1221 	inc	dptr
      000522 F0               [24] 1222 	movx	@dptr,a
      000523 EB               [12] 1223 	mov	a,r3
      000524 A3               [24] 1224 	inc	dptr
      000525 F0               [24] 1225 	movx	@dptr,a
      000526 EA               [12] 1226 	mov	a,r2
      000527 A3               [24] 1227 	inc	dptr
      000528 F0               [24] 1228 	movx	@dptr,a
                                   1229 ;	printf_large.c:729: if (!signed_argument)
      000529 30*05 03         [24] 1230 	jnb	__print_format_signed_argument_1_67,00560$
      00052C 02r05rC4         [24] 1231 	ljmp	00185$
      00052F                       1232 00560$:
                                   1233 ;	printf_large.c:731: value.l &= 0xFF;
      00052F 90r00r05         [24] 1234 	mov	dptr,#_value
      000532 E0               [24] 1235 	movx	a,@dptr
      000533 FA               [12] 1236 	mov	r2,a
      000534 A3               [24] 1237 	inc	dptr
      000535 E0               [24] 1238 	movx	a,@dptr
      000536 A3               [24] 1239 	inc	dptr
      000537 E0               [24] 1240 	movx	a,@dptr
      000538 A3               [24] 1241 	inc	dptr
      000539 E0               [24] 1242 	movx	a,@dptr
      00053A 7B 00            [12] 1243 	mov	r3,#0x00
      00053C 7D 00            [12] 1244 	mov	r5,#0x00
      00053E 7E 00            [12] 1245 	mov	r6,#0x00
      000540 90r00r05         [24] 1246 	mov	dptr,#_value
      000543 EA               [12] 1247 	mov	a,r2
      000544 F0               [24] 1248 	movx	@dptr,a
      000545 EB               [12] 1249 	mov	a,r3
      000546 A3               [24] 1250 	inc	dptr
      000547 F0               [24] 1251 	movx	@dptr,a
      000548 ED               [12] 1252 	mov	a,r5
      000549 A3               [24] 1253 	inc	dptr
      00054A F0               [24] 1254 	movx	@dptr,a
      00054B EE               [12] 1255 	mov	a,r6
      00054C A3               [24] 1256 	inc	dptr
      00054D F0               [24] 1257 	movx	@dptr,a
      00054E 80 74            [24] 1258 	sjmp	00185$
      000550                       1259 00184$:
                                   1260 ;	printf_large.c:734: else if (long_argument)
      000550 30*07 2B         [24] 1261 	jnb	__print_format_long_argument_1_67,00181$
                                   1262 ;	printf_large.c:736: value.l = va_arg(ap, long);
      000553 90r00r16         [24] 1263 	mov	dptr,#__print_format_PARM_4
      000556 E0               [24] 1264 	movx	a,@dptr
      000557 FE               [12] 1265 	mov	r6,a
      000558 1E               [12] 1266 	dec	r6
      000559 1E               [12] 1267 	dec	r6
      00055A 1E               [12] 1268 	dec	r6
      00055B 1E               [12] 1269 	dec	r6
      00055C EE               [12] 1270 	mov	a,r6
      00055D F0               [24] 1271 	movx	@dptr,a
      00055E 8E 01            [24] 1272 	mov	ar1,r6
      000560 87 02            [24] 1273 	mov	ar2,@r1
      000562 09               [12] 1274 	inc	r1
      000563 87 03            [24] 1275 	mov	ar3,@r1
      000565 09               [12] 1276 	inc	r1
      000566 87 05            [24] 1277 	mov	ar5,@r1
      000568 09               [12] 1278 	inc	r1
      000569 87 06            [24] 1279 	mov	ar6,@r1
      00056B 19               [12] 1280 	dec	r1
      00056C 19               [12] 1281 	dec	r1
      00056D 19               [12] 1282 	dec	r1
      00056E 90r00r05         [24] 1283 	mov	dptr,#_value
      000571 EA               [12] 1284 	mov	a,r2
      000572 F0               [24] 1285 	movx	@dptr,a
      000573 EB               [12] 1286 	mov	a,r3
      000574 A3               [24] 1287 	inc	dptr
      000575 F0               [24] 1288 	movx	@dptr,a
      000576 ED               [12] 1289 	mov	a,r5
      000577 A3               [24] 1290 	inc	dptr
      000578 F0               [24] 1291 	movx	@dptr,a
      000579 EE               [12] 1292 	mov	a,r6
      00057A A3               [24] 1293 	inc	dptr
      00057B F0               [24] 1294 	movx	@dptr,a
      00057C 80 46            [24] 1295 	sjmp	00185$
      00057E                       1296 00181$:
                                   1297 ;	printf_large.c:740: value.l = va_arg(ap, int);
      00057E 90r00r16         [24] 1298 	mov	dptr,#__print_format_PARM_4
      000581 E0               [24] 1299 	movx	a,@dptr
      000582 FE               [12] 1300 	mov	r6,a
      000583 1E               [12] 1301 	dec	r6
      000584 1E               [12] 1302 	dec	r6
      000585 EE               [12] 1303 	mov	a,r6
      000586 F0               [24] 1304 	movx	@dptr,a
      000587 8E 01            [24] 1305 	mov	ar1,r6
      000589 87 05            [24] 1306 	mov	ar5,@r1
      00058B 09               [12] 1307 	inc	r1
      00058C 87 06            [24] 1308 	mov	ar6,@r1
      00058E 19               [12] 1309 	dec	r1
      00058F EE               [12] 1310 	mov	a,r6
      000590 33               [12] 1311 	rlc	a
      000591 95 E0            [12] 1312 	subb	a,acc
      000593 FB               [12] 1313 	mov	r3,a
      000594 FA               [12] 1314 	mov	r2,a
      000595 90r00r05         [24] 1315 	mov	dptr,#_value
      000598 ED               [12] 1316 	mov	a,r5
      000599 F0               [24] 1317 	movx	@dptr,a
      00059A EE               [12] 1318 	mov	a,r6
      00059B A3               [24] 1319 	inc	dptr
      00059C F0               [24] 1320 	movx	@dptr,a
      00059D EB               [12] 1321 	mov	a,r3
      00059E A3               [24] 1322 	inc	dptr
      00059F F0               [24] 1323 	movx	@dptr,a
      0005A0 EA               [12] 1324 	mov	a,r2
      0005A1 A3               [24] 1325 	inc	dptr
      0005A2 F0               [24] 1326 	movx	@dptr,a
                                   1327 ;	printf_large.c:741: if (!signed_argument)
      0005A3 20*05 1E         [24] 1328 	jb	__print_format_signed_argument_1_67,00185$
                                   1329 ;	printf_large.c:743: value.l &= 0xFFFF;
      0005A6 90r00r05         [24] 1330 	mov	dptr,#_value
      0005A9 E0               [24] 1331 	movx	a,@dptr
      0005AA FA               [12] 1332 	mov	r2,a
      0005AB A3               [24] 1333 	inc	dptr
      0005AC E0               [24] 1334 	movx	a,@dptr
      0005AD FB               [12] 1335 	mov	r3,a
      0005AE A3               [24] 1336 	inc	dptr
      0005AF E0               [24] 1337 	movx	a,@dptr
      0005B0 A3               [24] 1338 	inc	dptr
      0005B1 E0               [24] 1339 	movx	a,@dptr
      0005B2 7D 00            [12] 1340 	mov	r5,#0x00
      0005B4 7E 00            [12] 1341 	mov	r6,#0x00
      0005B6 90r00r05         [24] 1342 	mov	dptr,#_value
      0005B9 EA               [12] 1343 	mov	a,r2
      0005BA F0               [24] 1344 	movx	@dptr,a
      0005BB EB               [12] 1345 	mov	a,r3
      0005BC A3               [24] 1346 	inc	dptr
      0005BD F0               [24] 1347 	movx	@dptr,a
      0005BE ED               [12] 1348 	mov	a,r5
      0005BF A3               [24] 1349 	inc	dptr
      0005C0 F0               [24] 1350 	movx	@dptr,a
      0005C1 EE               [12] 1351 	mov	a,r6
      0005C2 A3               [24] 1352 	inc	dptr
      0005C3 F0               [24] 1353 	movx	@dptr,a
      0005C4                       1354 00185$:
                                   1355 ;	printf_large.c:747: if ( signed_argument )
      0005C4 30*05 3E         [24] 1356 	jnb	__print_format_signed_argument_1_67,00190$
                                   1357 ;	printf_large.c:749: if (value.l < 0)
      0005C7 90r00r05         [24] 1358 	mov	dptr,#_value
      0005CA E0               [24] 1359 	movx	a,@dptr
      0005CB FA               [12] 1360 	mov	r2,a
      0005CC A3               [24] 1361 	inc	dptr
      0005CD E0               [24] 1362 	movx	a,@dptr
      0005CE FB               [12] 1363 	mov	r3,a
      0005CF A3               [24] 1364 	inc	dptr
      0005D0 E0               [24] 1365 	movx	a,@dptr
      0005D1 FD               [12] 1366 	mov	r5,a
      0005D2 A3               [24] 1367 	inc	dptr
      0005D3 E0               [24] 1368 	movx	a,@dptr
      0005D4 FE               [12] 1369 	mov	r6,a
      0005D5 30 E7 2B         [24] 1370 	jnb	acc.7,00187$
                                   1371 ;	printf_large.c:750: value.l = -value.l;
      0005D8 90r00r05         [24] 1372 	mov	dptr,#_value
      0005DB E0               [24] 1373 	movx	a,@dptr
      0005DC FA               [12] 1374 	mov	r2,a
      0005DD A3               [24] 1375 	inc	dptr
      0005DE E0               [24] 1376 	movx	a,@dptr
      0005DF FB               [12] 1377 	mov	r3,a
      0005E0 A3               [24] 1378 	inc	dptr
      0005E1 E0               [24] 1379 	movx	a,@dptr
      0005E2 FD               [12] 1380 	mov	r5,a
      0005E3 A3               [24] 1381 	inc	dptr
      0005E4 E0               [24] 1382 	movx	a,@dptr
      0005E5 FE               [12] 1383 	mov	r6,a
      0005E6 C3               [12] 1384 	clr	c
      0005E7 E4               [12] 1385 	clr	a
      0005E8 9A               [12] 1386 	subb	a,r2
      0005E9 FA               [12] 1387 	mov	r2,a
      0005EA E4               [12] 1388 	clr	a
      0005EB 9B               [12] 1389 	subb	a,r3
      0005EC FB               [12] 1390 	mov	r3,a
      0005ED E4               [12] 1391 	clr	a
      0005EE 9D               [12] 1392 	subb	a,r5
      0005EF FD               [12] 1393 	mov	r5,a
      0005F0 E4               [12] 1394 	clr	a
      0005F1 9E               [12] 1395 	subb	a,r6
      0005F2 FE               [12] 1396 	mov	r6,a
      0005F3 90r00r05         [24] 1397 	mov	dptr,#_value
      0005F6 EA               [12] 1398 	mov	a,r2
      0005F7 F0               [24] 1399 	movx	@dptr,a
      0005F8 EB               [12] 1400 	mov	a,r3
      0005F9 A3               [24] 1401 	inc	dptr
      0005FA F0               [24] 1402 	movx	@dptr,a
      0005FB ED               [12] 1403 	mov	a,r5
      0005FC A3               [24] 1404 	inc	dptr
      0005FD F0               [24] 1405 	movx	@dptr,a
      0005FE EE               [12] 1406 	mov	a,r6
      0005FF A3               [24] 1407 	inc	dptr
      000600 F0               [24] 1408 	movx	@dptr,a
      000601 80 02            [24] 1409 	sjmp	00190$
      000603                       1410 00187$:
                                   1411 ;	printf_large.c:752: signed_argument = 0;
      000603 C2*05            [12] 1412 	clr	__print_format_signed_argument_1_67
      000605                       1413 00190$:
                                   1414 ;	printf_large.c:756: lsd = 1;
      000605 D2*09            [12] 1415 	setb	__print_format_lsd_1_67
                                   1416 ;	printf_large.c:758: do {
      000607 75*04r23         [24] 1417 	mov	__print_format_sloc2_1_0,#(__print_format_store_4_88 + 0x0005)
      00060A 75*05s00         [24] 1418 	mov	(__print_format_sloc2_1_0 + 1),#((__print_format_store_4_88 + 0x0005) >> 8)
      00060D 75*00 00         [24] 1419 	mov	__print_format_sloc0_1_0,#0x00
      000610                       1420 00194$:
                                   1421 ;	printf_large.c:759: value.byte[4] = 0;
      000610 90r00r09         [24] 1422 	mov	dptr,#(_value + 0x0004)
      000613 E4               [12] 1423 	clr	a
      000614 F0               [24] 1424 	movx	@dptr,a
                                   1425 ;	printf_large.c:763: calculate_digit(radix);
      000615 85*01 82         [24] 1426 	mov	dpl,__print_format_sloc1_1_0
      000618 12r00r74         [24] 1427 	lcall	_calculate_digit
                                   1428 ;	printf_large.c:765: if (!lsd)
      00061B 20*09 23         [24] 1429 	jb	__print_format_lsd_1_67,00192$
                                   1430 ;	printf_large.c:767: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
      00061E 90r00r09         [24] 1431 	mov	dptr,#(_value + 0x0004)
      000621 E0               [24] 1432 	movx	a,@dptr
      000622 C4               [12] 1433 	swap	a
      000623 FA               [12] 1434 	mov	r2,a
      000624 85*04 82         [24] 1435 	mov	dpl,__print_format_sloc2_1_0
      000627 85*05 83         [24] 1436 	mov	dph,(__print_format_sloc2_1_0 + 1)
      00062A E0               [24] 1437 	movx	a,@dptr
      00062B FF               [12] 1438 	mov	r7,a
      00062C 42 02            [12] 1439 	orl	ar2,a
      00062E 85*04 82         [24] 1440 	mov	dpl,__print_format_sloc2_1_0
      000631 85*05 83         [24] 1441 	mov	dph,(__print_format_sloc2_1_0 + 1)
      000634 EA               [12] 1442 	mov	a,r2
      000635 F0               [24] 1443 	movx	@dptr,a
                                   1444 ;	printf_large.c:768: pstore--;
      000636 15*04            [12] 1445 	dec	__print_format_sloc2_1_0
      000638 74 FF            [12] 1446 	mov	a,#0xFF
      00063A B5*04 02         [24] 1447 	cjne	a,__print_format_sloc2_1_0,00566$
      00063D 15*05            [12] 1448 	dec	(__print_format_sloc2_1_0 + 1)
      00063F                       1449 00566$:
      00063F 80 0C            [24] 1450 	sjmp	00193$
      000641                       1451 00192$:
                                   1452 ;	printf_large.c:772: *pstore = value.byte[4];
      000641 90r00r09         [24] 1453 	mov	dptr,#(_value + 0x0004)
      000644 E0               [24] 1454 	movx	a,@dptr
      000645 FA               [12] 1455 	mov	r2,a
      000646 85*04 82         [24] 1456 	mov	dpl,__print_format_sloc2_1_0
      000649 85*05 83         [24] 1457 	mov	dph,(__print_format_sloc2_1_0 + 1)
      00064C F0               [24] 1458 	movx	@dptr,a
      00064D                       1459 00193$:
                                   1460 ;	printf_large.c:774: length++;
      00064D 05*00            [12] 1461 	inc	__print_format_sloc0_1_0
                                   1462 ;	printf_large.c:775: lsd = !lsd;
      00064F B2*09            [12] 1463 	cpl	__print_format_lsd_1_67
                                   1464 ;	printf_large.c:776: } while( value.ul );
      000651 90r00r05         [24] 1465 	mov	dptr,#_value
      000654 E0               [24] 1466 	movx	a,@dptr
      000655 FA               [12] 1467 	mov	r2,a
      000656 A3               [24] 1468 	inc	dptr
      000657 E0               [24] 1469 	movx	a,@dptr
      000658 FB               [12] 1470 	mov	r3,a
      000659 A3               [24] 1471 	inc	dptr
      00065A E0               [24] 1472 	movx	a,@dptr
      00065B FE               [12] 1473 	mov	r6,a
      00065C A3               [24] 1474 	inc	dptr
      00065D E0               [24] 1475 	movx	a,@dptr
      00065E FF               [12] 1476 	mov	r7,a
      00065F EA               [12] 1477 	mov	a,r2
      000660 4B               [12] 1478 	orl	a,r3
      000661 4E               [12] 1479 	orl	a,r6
      000662 4F               [12] 1480 	orl	a,r7
      000663 70 AB            [24] 1481 	jnz	00194$
                                   1482 ;	printf_large.c:778: if (width == 0)
      000665 90r00r24         [24] 1483 	mov	dptr,#__print_format_pstore_4_88
      000668 E5*04            [12] 1484 	mov	a,__print_format_sloc2_1_0
      00066A F0               [24] 1485 	movx	@dptr,a
      00066B E5*05            [12] 1486 	mov	a,(__print_format_sloc2_1_0 + 1)
      00066D A3               [24] 1487 	inc	dptr
      00066E F0               [24] 1488 	movx	@dptr,a
      00066F 90r00r1C         [24] 1489 	mov	dptr,#__print_format_length_1_67
      000672 E5*00            [12] 1490 	mov	a,__print_format_sloc0_1_0
      000674 F0               [24] 1491 	movx	@dptr,a
      000675 90r00r1A         [24] 1492 	mov	dptr,#__print_format_width_1_67
      000678 E0               [24] 1493 	movx	a,@dptr
      000679 70 06            [24] 1494 	jnz	00198$
                                   1495 ;	printf_large.c:783: width = 1;
      00067B 90r00r1A         [24] 1496 	mov	dptr,#__print_format_width_1_67
      00067E 74 01            [12] 1497 	mov	a,#0x01
      000680 F0               [24] 1498 	movx	@dptr,a
      000681                       1499 00198$:
                                   1500 ;	printf_large.c:787: if (!zero_padding && !left_justify)
      000681 20*02 27         [24] 1501 	jb	__print_format_zero_padding_1_67,00203$
      000684 20*01 24         [24] 1502 	jb	__print_format_left_justify_1_67,00203$
                                   1503 ;	printf_large.c:789: while ( width > (unsigned char) (length+1) )
      000687 E5*00            [12] 1504 	mov	a,__print_format_sloc0_1_0
      000689 04               [12] 1505 	inc	a
      00068A FF               [12] 1506 	mov	r7,a
      00068B 90r00r1A         [24] 1507 	mov	dptr,#__print_format_width_1_67
      00068E E0               [24] 1508 	movx	a,@dptr
      00068F FE               [12] 1509 	mov	r6,a
      000690                       1510 00199$:
      000690 C3               [12] 1511 	clr	c
      000691 EF               [12] 1512 	mov	a,r7
      000692 9E               [12] 1513 	subb	a,r6
      000693 50 11            [24] 1514 	jnc	00333$
                                   1515 ;	printf_large.c:791: OUTPUT_CHAR( ' ', p );
      000695 75 82 20         [24] 1516 	mov	dpl,#0x20
      000698 C0 07            [24] 1517 	push	ar7
      00069A C0 06            [24] 1518 	push	ar6
      00069C 12r00r00         [24] 1519 	lcall	__output_char
      00069F D0 06            [24] 1520 	pop	ar6
      0006A1 D0 07            [24] 1521 	pop	ar7
                                   1522 ;	printf_large.c:792: width--;
      0006A3 1E               [12] 1523 	dec	r6
      0006A4 80 EA            [24] 1524 	sjmp	00199$
      0006A6                       1525 00333$:
      0006A6 90r00r1A         [24] 1526 	mov	dptr,#__print_format_width_1_67
      0006A9 EE               [12] 1527 	mov	a,r6
      0006AA F0               [24] 1528 	movx	@dptr,a
      0006AB                       1529 00203$:
                                   1530 ;	printf_large.c:796: if (signed_argument) // this now means the original value was negative
      0006AB 30*05 0E         [24] 1531 	jnb	__print_format_signed_argument_1_67,00213$
                                   1532 ;	printf_large.c:798: OUTPUT_CHAR( '-', p );
      0006AE 75 82 2D         [24] 1533 	mov	dpl,#0x2D
      0006B1 12r00r00         [24] 1534 	lcall	__output_char
                                   1535 ;	printf_large.c:800: width--;
      0006B4 90r00r1A         [24] 1536 	mov	dptr,#__print_format_width_1_67
      0006B7 E0               [24] 1537 	movx	a,@dptr
      0006B8 14               [12] 1538 	dec	a
      0006B9 F0               [24] 1539 	movx	@dptr,a
      0006BA 80 26            [24] 1540 	sjmp	00214$
      0006BC                       1541 00213$:
                                   1542 ;	printf_large.c:802: else if (length != 0)
      0006BC 90r00r1C         [24] 1543 	mov	dptr,#__print_format_length_1_67
      0006BF E0               [24] 1544 	movx	a,@dptr
      0006C0 60 20            [24] 1545 	jz	00214$
                                   1546 ;	printf_large.c:805: if (prefix_sign)
      0006C2 30*03 0E         [24] 1547 	jnb	__print_format_prefix_sign_1_67,00208$
                                   1548 ;	printf_large.c:807: OUTPUT_CHAR( '+', p );
      0006C5 75 82 2B         [24] 1549 	mov	dpl,#0x2B
      0006C8 12r00r00         [24] 1550 	lcall	__output_char
                                   1551 ;	printf_large.c:809: width--;
      0006CB 90r00r1A         [24] 1552 	mov	dptr,#__print_format_width_1_67
      0006CE E0               [24] 1553 	movx	a,@dptr
      0006CF 14               [12] 1554 	dec	a
      0006D0 F0               [24] 1555 	movx	@dptr,a
      0006D1 80 0F            [24] 1556 	sjmp	00214$
      0006D3                       1557 00208$:
                                   1558 ;	printf_large.c:811: else if (prefix_space)
      0006D3 30*04 0C         [24] 1559 	jnb	__print_format_prefix_space_1_67,00214$
                                   1560 ;	printf_large.c:813: OUTPUT_CHAR( ' ', p );
      0006D6 75 82 20         [24] 1561 	mov	dpl,#0x20
      0006D9 12r00r00         [24] 1562 	lcall	__output_char
                                   1563 ;	printf_large.c:815: width--;
      0006DC 90r00r1A         [24] 1564 	mov	dptr,#__print_format_width_1_67
      0006DF E0               [24] 1565 	movx	a,@dptr
      0006E0 14               [12] 1566 	dec	a
      0006E1 F0               [24] 1567 	movx	@dptr,a
      0006E2                       1568 00214$:
                                   1569 ;	printf_large.c:820: if (!left_justify)
      0006E2 20*01 2A         [24] 1570 	jb	__print_format_left_justify_1_67,00222$
                                   1571 ;	printf_large.c:822: while ( width-- > length )
      0006E5 90r00r1C         [24] 1572 	mov	dptr,#__print_format_length_1_67
      0006E8 E0               [24] 1573 	movx	a,@dptr
      0006E9 FF               [12] 1574 	mov	r7,a
      0006EA 90r00r1A         [24] 1575 	mov	dptr,#__print_format_width_1_67
      0006ED E0               [24] 1576 	movx	a,@dptr
      0006EE FE               [12] 1577 	mov	r6,a
      0006EF                       1578 00215$:
      0006EF 8E 05            [24] 1579 	mov	ar5,r6
      0006F1 1E               [12] 1580 	dec	r6
      0006F2 C3               [12] 1581 	clr	c
      0006F3 EF               [12] 1582 	mov	a,r7
      0006F4 9D               [12] 1583 	subb	a,r5
      0006F5 50 36            [24] 1584 	jnc	00334$
                                   1585 ;	printf_large.c:824: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
      0006F7 30*02 04         [24] 1586 	jnb	__print_format_zero_padding_1_67,00248$
      0006FA 7D 30            [12] 1587 	mov	r5,#0x30
      0006FC 80 02            [24] 1588 	sjmp	00249$
      0006FE                       1589 00248$:
      0006FE 7D 20            [12] 1590 	mov	r5,#0x20
      000700                       1591 00249$:
      000700 8D 82            [24] 1592 	mov	dpl,r5
      000702 C0 07            [24] 1593 	push	ar7
      000704 C0 06            [24] 1594 	push	ar6
      000706 12r00r00         [24] 1595 	lcall	__output_char
      000709 D0 06            [24] 1596 	pop	ar6
      00070B D0 07            [24] 1597 	pop	ar7
      00070D 80 E0            [24] 1598 	sjmp	00215$
      00070F                       1599 00222$:
                                   1600 ;	printf_large.c:830: if (width > length)
      00070F 90r00r1A         [24] 1601 	mov	dptr,#__print_format_width_1_67
      000712 E0               [24] 1602 	movx	a,@dptr
      000713 FF               [12] 1603 	mov	r7,a
      000714 90r00r1C         [24] 1604 	mov	dptr,#__print_format_length_1_67
      000717 E0               [24] 1605 	movx	a,@dptr
      000718 FD               [12] 1606 	mov	r5,a
      000719 C3               [12] 1607 	clr	c
      00071A 9F               [12] 1608 	subb	a,r7
      00071B 50 09            [24] 1609 	jnc	00219$
                                   1610 ;	printf_large.c:831: width -= length;
      00071D 90r00r1A         [24] 1611 	mov	dptr,#__print_format_width_1_67
      000720 EF               [12] 1612 	mov	a,r7
      000721 C3               [12] 1613 	clr	c
      000722 9D               [12] 1614 	subb	a,r5
      000723 F0               [24] 1615 	movx	@dptr,a
      000724 80 0C            [24] 1616 	sjmp	00326$
      000726                       1617 00219$:
                                   1618 ;	printf_large.c:833: width = 0;
      000726 90r00r1A         [24] 1619 	mov	dptr,#__print_format_width_1_67
      000729 E4               [12] 1620 	clr	a
      00072A F0               [24] 1621 	movx	@dptr,a
                                   1622 ;	printf_large.c:872: return charsOutputted;
                                   1623 ;	printf_large.c:837: while( length-- )
      00072B 80 05            [24] 1624 	sjmp	00326$
      00072D                       1625 00334$:
      00072D 90r00r1A         [24] 1626 	mov	dptr,#__print_format_width_1_67
      000730 EE               [12] 1627 	mov	a,r6
      000731 F0               [24] 1628 	movx	@dptr,a
      000732                       1629 00326$:
      000732 90r00r24         [24] 1630 	mov	dptr,#__print_format_pstore_4_88
      000735 E0               [24] 1631 	movx	a,@dptr
      000736 FE               [12] 1632 	mov	r6,a
      000737 A3               [24] 1633 	inc	dptr
      000738 E0               [24] 1634 	movx	a,@dptr
      000739 FF               [12] 1635 	mov	r7,a
      00073A 90r00r1C         [24] 1636 	mov	dptr,#__print_format_length_1_67
      00073D E0               [24] 1637 	movx	a,@dptr
      00073E FD               [12] 1638 	mov	r5,a
      00073F                       1639 00227$:
      00073F 8D 03            [24] 1640 	mov	ar3,r5
      000741 1D               [12] 1641 	dec	r5
      000742 EB               [12] 1642 	mov	a,r3
      000743 60 3E            [24] 1643 	jz	00229$
                                   1644 ;	printf_large.c:839: lsd = !lsd;
      000745 B2*09            [12] 1645 	cpl	__print_format_lsd_1_67
                                   1646 ;	printf_large.c:840: if (!lsd)
      000747 20*09 14         [24] 1647 	jb	__print_format_lsd_1_67,00225$
                                   1648 ;	printf_large.c:842: pstore++;
      00074A 0E               [12] 1649 	inc	r6
      00074B BE 00 01         [24] 1650 	cjne	r6,#0x00,00582$
      00074E 0F               [12] 1651 	inc	r7
      00074F                       1652 00582$:
                                   1653 ;	printf_large.c:843: value.byte[4] = *pstore >> 4;
      00074F 8E 82            [24] 1654 	mov	dpl,r6
      000751 8F 83            [24] 1655 	mov	dph,r7
      000753 E0               [24] 1656 	movx	a,@dptr
      000754 C4               [12] 1657 	swap	a
      000755 54 0F            [12] 1658 	anl	a,#0x0F
      000757 FB               [12] 1659 	mov	r3,a
      000758 90r00r09         [24] 1660 	mov	dptr,#(_value + 0x0004)
      00075B F0               [24] 1661 	movx	@dptr,a
      00075C 80 0E            [24] 1662 	sjmp	00226$
      00075E                       1663 00225$:
                                   1664 ;	printf_large.c:847: value.byte[4] = *pstore & 0x0F;
      00075E 8E 82            [24] 1665 	mov	dpl,r6
      000760 8F 83            [24] 1666 	mov	dph,r7
      000762 E0               [24] 1667 	movx	a,@dptr
      000763 FB               [12] 1668 	mov	r3,a
      000764 53 03 0F         [24] 1669 	anl	ar3,#0x0F
      000767 90r00r09         [24] 1670 	mov	dptr,#(_value + 0x0004)
      00076A EB               [12] 1671 	mov	a,r3
      00076B F0               [24] 1672 	movx	@dptr,a
      00076C                       1673 00226$:
                                   1674 ;	printf_large.c:853: output_digit( value.byte[4] );
      00076C 90r00r09         [24] 1675 	mov	dptr,#(_value + 0x0004)
      00076F E0               [24] 1676 	movx	a,@dptr
      000770 F5 82            [12] 1677 	mov	dpl,a
      000772 C0 07            [24] 1678 	push	ar7
      000774 C0 06            [24] 1679 	push	ar6
      000776 C0 05            [24] 1680 	push	ar5
      000778 12r00r3B         [24] 1681 	lcall	_output_digit
      00077B D0 05            [24] 1682 	pop	ar5
      00077D D0 06            [24] 1683 	pop	ar6
      00077F D0 07            [24] 1684 	pop	ar7
      000781 80 BC            [24] 1685 	sjmp	00227$
      000783                       1686 00229$:
                                   1687 ;	printf_large.c:856: if (left_justify)
      000783 20*01 03         [24] 1688 	jb	__print_format_left_justify_1_67,00583$
      000786 02r01r0D         [24] 1689 	ljmp	00243$
      000789                       1690 00583$:
                                   1691 ;	printf_large.c:858: while (width-- > 0)
      000789 90r00r1A         [24] 1692 	mov	dptr,#__print_format_width_1_67
      00078C E0               [24] 1693 	movx	a,@dptr
      00078D FF               [12] 1694 	mov	r7,a
      00078E                       1695 00230$:
      00078E 8F 06            [24] 1696 	mov	ar6,r7
      000790 1F               [12] 1697 	dec	r7
      000791 EE               [12] 1698 	mov	a,r6
      000792 70 03            [24] 1699 	jnz	00584$
      000794 02r01r0D         [24] 1700 	ljmp	00243$
      000797                       1701 00584$:
                                   1702 ;	printf_large.c:860: OUTPUT_CHAR(' ', p);
      000797 75 82 20         [24] 1703 	mov	dpl,#0x20
      00079A C0 07            [24] 1704 	push	ar7
      00079C 12r00r00         [24] 1705 	lcall	__output_char
      00079F D0 07            [24] 1706 	pop	ar7
      0007A1 80 EB            [24] 1707 	sjmp	00230$
      0007A3                       1708 00241$:
                                   1709 ;	printf_large.c:868: OUTPUT_CHAR( c, p );
      0007A3 8C 82            [24] 1710 	mov	dpl,r4
      0007A5 12r00r00         [24] 1711 	lcall	__output_char
      0007A8 02r01r0D         [24] 1712 	ljmp	00243$
      0007AB                       1713 00245$:
                                   1714 ;	printf_large.c:872: return charsOutputted;
      0007AB 90r00r0A         [24] 1715 	mov	dptr,#_charsOutputted
      0007AE E0               [24] 1716 	movx	a,@dptr
      0007AF FE               [12] 1717 	mov	r6,a
      0007B0 A3               [24] 1718 	inc	dptr
      0007B1 E0               [24] 1719 	movx	a,@dptr
      0007B2 8E 82            [24] 1720 	mov	dpl,r6
      0007B4 F5 83            [12] 1721 	mov	dph,a
      0007B6 22               [24] 1722 	ret
                                   1723 	.area CSEG    (CODE)
                                   1724 	.area CONST   (CODE)
      000000                       1725 ___str_0:
      000000 3C 4E 4F 20 46 4C 4F  1726 	.ascii "<NO FLOAT>"
             41 54 3E
      00000A 00                    1727 	.db 0x00
                                   1728 	.area XINIT   (CODE)
                                   1729 	.area CABS    (ABS,CODE)
