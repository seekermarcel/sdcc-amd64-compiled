                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:15:40 2022
                              5 ;--------------------------------------------------------
                              6 	.hd64
                              7 	.module asinf
                              8 	.optsdcc -mz180
                              9 	
                             10 ;--------------------------------------------------------
                             11 ; Public variables in this module
                             12 ;--------------------------------------------------------
                             13 	.globl _asincosf
                             14 	.globl _asinf
                             15 ;--------------------------------------------------------
                             16 ; special function registers
                             17 ;--------------------------------------------------------
                             18 ;--------------------------------------------------------
                             19 ; ram data
                             20 ;--------------------------------------------------------
                             21 	.area _DATA
                             22 ;--------------------------------------------------------
                             23 ; ram data
                             24 ;--------------------------------------------------------
                             25 	.area _INITIALIZED
                             26 ;--------------------------------------------------------
                             27 ; absolute external ram data
                             28 ;--------------------------------------------------------
                             29 	.area _DABS (ABS)
                             30 ;--------------------------------------------------------
                             31 ; global & static initialisations
                             32 ;--------------------------------------------------------
                             33 	.area _HOME
                             34 	.area _GSINIT
                             35 	.area _GSFINAL
                             36 	.area _GSINIT
                             37 ;--------------------------------------------------------
                             38 ; Home
                             39 ;--------------------------------------------------------
                             40 	.area _HOME
                             41 	.area _HOME
                             42 ;--------------------------------------------------------
                             43 ; code
                             44 ;--------------------------------------------------------
                             45 	.area _CODE
                             46 ;../asinf.c:36: float asinf(float x) _FLOAT_FUNC_REENTRANT
                             47 ;	---------------------------------
                             48 ; Function asinf
                             49 ; ---------------------------------
   0000                      50 _asinf::
                             51 ;../asinf.c:38: if (x == 1.0) return  HALF_PI;
   0000 21 80 3F      [ 9]   52 	ld	hl,#0x3F80
   0003 E5            [11]   53 	push	hl
   0004 21 00 00      [ 9]   54 	ld	hl,#0x0000
   0007 E5            [11]   55 	push	hl
   0008 FD 21 06 00   [12]   56 	ld	iy,#6
   000C FD 39         [10]   57 	add	iy,sp
   000E FD 6E 02      [14]   58 	ld	l,2 (iy)
   0011 FD 66 03      [14]   59 	ld	h,3 (iy)
   0014 E5            [11]   60 	push	hl
   0015 FD 6E 00      [14]   61 	ld	l,0 (iy)
   0018 FD 66 01      [14]   62 	ld	h,1 (iy)
   001B E5            [11]   63 	push	hl
   001C CDr00r00      [16]   64 	call	___fseq
   001F 33            [ 4]   65 	inc	sp
   0020 33            [ 4]   66 	inc	sp
   0021 33            [ 4]   67 	inc	sp
   0022 33            [ 4]   68 	inc	sp
   0023 33            [ 4]   69 	inc	sp
   0024 33            [ 4]   70 	inc	sp
   0025 33            [ 4]   71 	inc	sp
   0026 33            [ 4]   72 	inc	sp
   0027 7D            [ 4]   73 	ld	a,l
   0028 B7            [ 4]   74 	or	a, a
   0029 28 07         [ 8]   75 	jr	Z,00108$
   002B 21 DB 0F      [ 9]   76 	ld	hl,#0x0FDB
   002E 11 C9 3F      [ 9]   77 	ld	de,#0x3FC9
   0031 C9            [ 9]   78 	ret
   0032                      79 00108$:
                             80 ;../asinf.c:39: else if (x ==-1.0) return -HALF_PI;
   0032 21 80 BF      [ 9]   81 	ld	hl,#0xBF80
   0035 E5            [11]   82 	push	hl
   0036 21 00 00      [ 9]   83 	ld	hl,#0x0000
   0039 E5            [11]   84 	push	hl
   003A FD 21 06 00   [12]   85 	ld	iy,#6
   003E FD 39         [10]   86 	add	iy,sp
   0040 FD 6E 02      [14]   87 	ld	l,2 (iy)
   0043 FD 66 03      [14]   88 	ld	h,3 (iy)
   0046 E5            [11]   89 	push	hl
   0047 FD 6E 00      [14]   90 	ld	l,0 (iy)
   004A FD 66 01      [14]   91 	ld	h,1 (iy)
   004D E5            [11]   92 	push	hl
   004E CDr00r00      [16]   93 	call	___fseq
   0051 33            [ 4]   94 	inc	sp
   0052 33            [ 4]   95 	inc	sp
   0053 33            [ 4]   96 	inc	sp
   0054 33            [ 4]   97 	inc	sp
   0055 33            [ 4]   98 	inc	sp
   0056 33            [ 4]   99 	inc	sp
   0057 33            [ 4]  100 	inc	sp
   0058 33            [ 4]  101 	inc	sp
   0059 7D            [ 4]  102 	ld	a,l
   005A B7            [ 4]  103 	or	a, a
   005B 28 07         [ 8]  104 	jr	Z,00105$
   005D 21 DB 0F      [ 9]  105 	ld	hl,#0x0FDB
   0060 11 C9 BF      [ 9]  106 	ld	de,#0xBFC9
   0063 C9            [ 9]  107 	ret
   0064                     108 00105$:
                            109 ;../asinf.c:40: else if (x == 0.0) return 0.0;
   0064 FD 21 02 00   [12]  110 	ld	iy,#2
   0068 FD 39         [10]  111 	add	iy,sp
   006A FD 7E 03      [14]  112 	ld	a,3 (iy)
   006D CB BF         [ 7]  113 	res	7, a
   006F FD B6 02      [14]  114 	or	a, 2 (iy)
   0072 FD B6 01      [14]  115 	or	a, 1 (iy)
   0075 FD B6 00      [14]  116 	or	a,0 (iy)
   0078 20 06         [ 8]  117 	jr	NZ,00102$
   007A 21 00 00      [ 9]  118 	ld	hl,#0x0000
   007D 5D            [ 4]  119 	ld	e,l
   007E 54            [ 4]  120 	ld	d,h
   007F C9            [ 9]  121 	ret
   0080                     122 00102$:
                            123 ;../asinf.c:41: else               return asincosf(x, false);
   0080 AF            [ 4]  124 	xor	a, a
   0081 F5            [11]  125 	push	af
   0082 33            [ 4]  126 	inc	sp
   0083 FD 21 03 00   [12]  127 	ld	iy,#3
   0087 FD 39         [10]  128 	add	iy,sp
   0089 FD 6E 02      [14]  129 	ld	l,2 (iy)
   008C FD 66 03      [14]  130 	ld	h,3 (iy)
   008F E5            [11]  131 	push	hl
   0090 FD 6E 00      [14]  132 	ld	l,0 (iy)
   0093 FD 66 01      [14]  133 	ld	h,1 (iy)
   0096 E5            [11]  134 	push	hl
   0097 CDr00r00      [16]  135 	call	_asincosf
   009A 33            [ 4]  136 	inc	sp
   009B 33            [ 4]  137 	inc	sp
   009C 33            [ 4]  138 	inc	sp
   009D 33            [ 4]  139 	inc	sp
   009E 33            [ 4]  140 	inc	sp
   009F C9            [ 9]  141 	ret
                            142 	.area _CODE
                            143 	.area _INITIALIZER
                            144 	.area _CABS (ABS)
