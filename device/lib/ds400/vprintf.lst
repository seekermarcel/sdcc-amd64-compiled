                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:31 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module vprintf
                                      7 	.optsdcc -mds400 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _putchar
                                     35 	.globl __print_format
                                     36 	.globl _vprintf_PARM_2
                                     37 	.globl _vprintf
                                     38 	.globl _printf
                                     39 ;--------------------------------------------------------
                                     40 ; special function registers
                                     41 ;--------------------------------------------------------
                           000080    42 _P4	=	0x0080
                           000081    43 _SP	=	0x0081
                           000082    44 _DPL	=	0x0082
                           000083    45 _DPH	=	0x0083
                           000084    46 _DPL1	=	0x0084
                           000085    47 _DPH1	=	0x0085
                           000086    48 _DPS	=	0x0086
                           000087    49 _PCON	=	0x0087
                           000088    50 _TCON	=	0x0088
                           000089    51 _TMOD	=	0x0089
                           00008A    52 _TL0	=	0x008a
                           00008B    53 _TL1	=	0x008b
                           00008C    54 _TH0	=	0x008c
                           00008D    55 _TH1	=	0x008d
                           00008E    56 _CKCON	=	0x008e
                           000090    57 _P1	=	0x0090
                           000091    58 _EXIF	=	0x0091
                           000092    59 _P4CNT	=	0x0092
                           000093    60 _DPX	=	0x0093
                           000095    61 _DPX1	=	0x0095
                           000098    62 _SCON0	=	0x0098
                           000099    63 _SBUF0	=	0x0099
                           00009B    64 _ESP	=	0x009b
                           00009C    65 _AP	=	0x009c
                           00009D    66 _ACON	=	0x009d
                           0000A0    67 _P2	=	0x00a0
                           0000A1    68 _P5	=	0x00a1
                           0000A2    69 _P5CNT	=	0x00a2
                           0000A8    70 _IE	=	0x00a8
                           0000B0    71 _P3	=	0x00b0
                           0000B8    72 _IP	=	0x00b8
                           0000C0    73 _SCON1	=	0x00c0
                           0000C1    74 _SBUF1	=	0x00c1
                           0000C4    75 _PMR	=	0x00c4
                           0000C6    76 _MCON	=	0x00c6
                           0000C7    77 _TA	=	0x00c7
                           0000C8    78 _T2CON	=	0x00c8
                           0000C9    79 _T2MOD	=	0x00c9
                           0000CA    80 _RCAP2L	=	0x00ca
                           0000CA    81 _RTL2	=	0x00ca
                           0000CB    82 _RCAP2H	=	0x00cb
                           0000CB    83 _RTH2	=	0x00cb
                           0000CC    84 _TL2	=	0x00cc
                           0000CD    85 _TH2	=	0x00cd
                           0000D0    86 _PSW	=	0x00d0
                           0000D1    87 _MCNT0	=	0x00d1
                           0000D2    88 _MCNT1	=	0x00d2
                           0000D3    89 _MA	=	0x00d3
                           0000D4    90 _MB	=	0x00d4
                           0000D5    91 _MC	=	0x00d5
                           0000D8    92 _WDCON	=	0x00d8
                           0000E0    93 _ACC	=	0x00e0
                           0000E8    94 _EIE	=	0x00e8
                           0000EA    95 _MXAX	=	0x00ea
                           0000F0    96 _B	=	0x00f0
                           0000F8    97 _EIP	=	0x00f8
                           008C8A    98 _TMR0	=	0x8c8a
                           008D8B    99 _TMR1	=	0x8d8b
                           00CDCC   100 _TMR2	=	0xcdcc
                           00CBCA   101 _RCAP2	=	0xcbca
                                    102 ;--------------------------------------------------------
                                    103 ; special function bits
                                    104 ;--------------------------------------------------------
                           000088   105 _IT0	=	0x0088
                           000089   106 _IE0	=	0x0089
                           00008A   107 _IT1	=	0x008a
                           00008B   108 _IE1	=	0x008b
                           00008C   109 _TR0	=	0x008c
                           00008D   110 _TF0	=	0x008d
                           00008E   111 _TR1	=	0x008e
                           00008F   112 _TF1	=	0x008f
                           000090   113 _T2	=	0x0090
                           000091   114 _T2EX	=	0x0091
                           000092   115 _RXD1	=	0x0092
                           000093   116 _TXD1	=	0x0093
                           000094   117 _INT2	=	0x0094
                           000095   118 _INT3	=	0x0095
                           000096   119 _INT4	=	0x0096
                           000097   120 _INT5	=	0x0097
                           000098   121 _RI_0	=	0x0098
                           000099   122 _TI_0	=	0x0099
                           00009A   123 _RB8_0	=	0x009a
                           00009B   124 _TB8_0	=	0x009b
                           00009C   125 _REN_0	=	0x009c
                           00009D   126 _SM2_0	=	0x009d
                           00009E   127 _SM1_0	=	0x009e
                           00009F   128 _SM0_0	=	0x009f
                           00009F   129 _FE_0	=	0x009f
                           0000A8   130 _EX0	=	0x00a8
                           0000A9   131 _ET0	=	0x00a9
                           0000AA   132 _EX1	=	0x00aa
                           0000AB   133 _ET1	=	0x00ab
                           0000AC   134 _ES0	=	0x00ac
                           0000AD   135 _ET2	=	0x00ad
                           0000AE   136 _ES1	=	0x00ae
                           0000AF   137 _EA	=	0x00af
                           0000B0   138 _RXD0	=	0x00b0
                           0000B1   139 _TXD0	=	0x00b1
                           0000B2   140 _INT0	=	0x00b2
                           0000B3   141 _INT1	=	0x00b3
                           0000B4   142 _T0	=	0x00b4
                           0000B5   143 _T1	=	0x00b5
                           0000B6   144 _WR	=	0x00b6
                           0000B7   145 _RD	=	0x00b7
                           0000B8   146 _PX0	=	0x00b8
                           0000B9   147 _PT0	=	0x00b9
                           0000BA   148 _PX1	=	0x00ba
                           0000BB   149 _PT1	=	0x00bb
                           0000BC   150 _PS0	=	0x00bc
                           0000BD   151 _PT2	=	0x00bd
                           0000BE   152 _PS1	=	0x00be
                           0000C0   153 _RI_1	=	0x00c0
                           0000C1   154 _TI_1	=	0x00c1
                           0000C2   155 _RB8_1	=	0x00c2
                           0000C3   156 _TB8_1	=	0x00c3
                           0000C4   157 _REN_1	=	0x00c4
                           0000C5   158 _SM2_1	=	0x00c5
                           0000C6   159 _SM1_1	=	0x00c6
                           0000C7   160 _SM0_1	=	0x00c7
                           0000C7   161 _FE_1	=	0x00c7
                           0000C8   162 _CP_RL	=	0x00c8
                           0000C9   163 _C_T	=	0x00c9
                           0000CA   164 _TR2	=	0x00ca
                           0000CB   165 _EXEN2	=	0x00cb
                           0000CC   166 _TCLK	=	0x00cc
                           0000CD   167 _RCLK	=	0x00cd
                           0000CE   168 _EXF2	=	0x00ce
                           0000CF   169 _TF2	=	0x00cf
                           0000D0   170 _P	=	0x00d0
                           0000D1   171 _F1	=	0x00d1
                           0000D2   172 _OV	=	0x00d2
                           0000D3   173 _RS0	=	0x00d3
                           0000D4   174 _RS1	=	0x00d4
                           0000D5   175 _F0	=	0x00d5
                           0000D6   176 _AC	=	0x00d6
                           0000D7   177 _CY	=	0x00d7
                           0000D8   178 _RWT	=	0x00d8
                           0000D9   179 _EWT	=	0x00d9
                           0000DA   180 _WDRF	=	0x00da
                           0000DB   181 _WDIF	=	0x00db
                           0000DC   182 _PFI	=	0x00dc
                           0000DD   183 _EPFI	=	0x00dd
                           0000DE   184 _POR	=	0x00de
                           0000DF   185 _SMOD_1	=	0x00df
                           0000E8   186 _EX2	=	0x00e8
                           0000E9   187 _EX3	=	0x00e9
                           0000EA   188 _EX4	=	0x00ea
                           0000EB   189 _EX5	=	0x00eb
                           0000EC   190 _EWDI	=	0x00ec
                           0000ED   191 _C1IE	=	0x00ed
                           0000EE   192 _C0IE	=	0x00ee
                           0000EF   193 _CANBIE	=	0x00ef
                           0000F8   194 _PX2	=	0x00f8
                           0000F9   195 _PX3	=	0x00f9
                           0000FA   196 _PX4	=	0x00fa
                           0000FB   197 _PX5	=	0x00fb
                           0000FC   198 _PWDI	=	0x00fc
                           0000FD   199 _C1IP	=	0x00fd
                           0000FE   200 _C0IP	=	0x00fe
                           0000FF   201 _CANBIP	=	0x00ff
                                    202 ;--------------------------------------------------------
                                    203 ; overlayable register banks
                                    204 ;--------------------------------------------------------
                                    205 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        206 	.ds 8
                                    207 	.area REG_BANK_3	(REL,OVR,DATA)
      000000                        208 	.ds 8
                                    209 ;--------------------------------------------------------
                                    210 ; internal ram data
                                    211 ;--------------------------------------------------------
                                    212 	.area DSEG    (DATA)
                                    213 ;--------------------------------------------------------
                                    214 ; overlayable items in internal ram 
                                    215 ;--------------------------------------------------------
                                    216 ;--------------------------------------------------------
                                    217 ; indirectly addressable internal ram data
                                    218 ;--------------------------------------------------------
                                    219 	.area ISEG    (DATA)
                                    220 ;--------------------------------------------------------
                                    221 ; absolute internal ram data
                                    222 ;--------------------------------------------------------
                                    223 	.area IABS    (ABS,DATA)
                                    224 	.area IABS    (ABS,DATA)
                                    225 ;--------------------------------------------------------
                                    226 ; bit data
                                    227 ;--------------------------------------------------------
                                    228 	.area BSEG    (BIT)
                                    229 ;--------------------------------------------------------
                                    230 ; paged external ram data
                                    231 ;--------------------------------------------------------
                                    232 	.area PSEG    (PAG,XDATA)
                                    233 ;--------------------------------------------------------
                                    234 ; external ram data
                                    235 ;--------------------------------------------------------
                                    236 	.area XSEG    (XDATA)
      000000                        237 _vprintf_PARM_2:
      000000                        238 	.ds 4
                                    239 ;--------------------------------------------------------
                                    240 ; absolute external ram data
                                    241 ;--------------------------------------------------------
                                    242 	.area XABS    (ABS,XDATA)
                                    243 ;--------------------------------------------------------
                                    244 ; external initialized ram data
                                    245 ;--------------------------------------------------------
                                    246 	.area XISEG   (XDATA)
                                    247 ;--------------------------------------------------------
                                    248 ; global & static initialisations
                                    249 ;--------------------------------------------------------
                                    250 	.area HOME    (CODE)
                                    251 	.area GSINIT  (CODE)
                                    252 	.area GSFINAL (CODE)
                                    253 	.area GSINIT  (CODE)
                                    254 ;--------------------------------------------------------
                                    255 ; Home
                                    256 ;--------------------------------------------------------
                                    257 	.area HOME    (CODE)
                                    258 	.area HOME    (CODE)
                                    259 ;--------------------------------------------------------
                                    260 ; code
                                    261 ;--------------------------------------------------------
                                    262 	.area CSEG    (CODE)
                                    263 ;------------------------------------------------------------
                                    264 ;Allocation info for local variables in function 'put_char_to_stdout'
                                    265 ;------------------------------------------------------------
                                    266 ;p                         Allocated to stack - _bp -8
                                    267 ;c                         Allocated to registers r2 
                                    268 ;------------------------------------------------------------
                                    269 ;	vprintf.c:34: put_char_to_stdout (char c, void* p) _REENTRANT
                                    270 ;	-----------------------------------------
                                    271 ;	 function put_char_to_stdout
                                    272 ;	-----------------------------------------
      000000                        273 _put_char_to_stdout:
                           000002   274 	ar2 = 0x02
                           000003   275 	ar3 = 0x03
                           000004   276 	ar4 = 0x04
                           000005   277 	ar5 = 0x05
                           000006   278 	ar6 = 0x06
                           000007   279 	ar7 = 0x07
                           000000   280 	ar0 = 0x00
                           000001   281 	ar1 = 0x01
      000000 C0*00            [ 8]  282 	push	_bpx
      000002 C0*01            [ 8]  283 	push	_bpx+1
      000004 85 81*00         [12]  284 	mov	_bpx,sp
      000007 85 9B*01         [12]  285 	mov	_bpx+1,esp
      00000A 53*01 03         [12]  286 	anl	_bpx+1,#3
      00000D 43*01 DC         [12]  287 	orl	_bpx+1,#0xDC
      000010 AA 82            [ 8]  288 	mov	r2,dpl
                                    289 ;	vprintf.c:37: putchar (c);
      000012 8A 82            [ 8]  290 	mov	dpl,r2
      000014 12s00r00r00      [16]  291 	lcall	_putchar
      000018                        292 00101$:
      000018 85*00 81         [12]  293 	mov	sp,_bpx
      00001B 85*01 9B         [12]  294 	mov	esp,_bpx+1
      00001E D0*01            [ 8]  295 	pop	_bpx+1
      000020 D0*00            [ 8]  296 	pop	_bpx
      000022 22               [16]  297 	ret
                                    298 ;------------------------------------------------------------
                                    299 ;Allocation info for local variables in function 'vprintf'
                                    300 ;------------------------------------------------------------
                                    301 ;ap                        Allocated with name '_vprintf_PARM_2'
                                    302 ;format                    Allocated to registers r2 r3 r4 r5 
                                    303 ;------------------------------------------------------------
                                    304 ;	vprintf.c:41: vprintf (const char *format, va_list ap)
                                    305 ;	-----------------------------------------
                                    306 ;	 function vprintf
                                    307 ;	-----------------------------------------
      000023                        308 _vprintf:
      000023 AA 82            [ 8]  309 	mov	r2,dpl
      000025 AB 83            [ 8]  310 	mov	r3,dph
      000027 AC 93            [ 8]  311 	mov	r4,dpx
      000029 AD F0            [ 8]  312 	mov	r5,b
                                    313 ;	vprintf.c:43: return _print_format (put_char_to_stdout, NULL, format, ap);
      00002B 90s00r00r00      [12]  314 	mov	dptr,#_vprintf_PARM_2
                                    315 ;	genAssign: resultIsFar = FALSE
      00002F E0               [ 8]  316 	movx	a,@dptr
      000030 FE               [ 4]  317 	mov	r6,a
      000031 A3               [12]  318 	inc	dptr
      000032 E0               [ 8]  319 	movx	a,@dptr
      000033 FF               [ 4]  320 	mov	r7,a
      000034 A3               [12]  321 	inc	dptr
      000035 E0               [ 8]  322 	movx	a,@dptr
      000036 F8               [ 4]  323 	mov	r0,a
      000037 A3               [12]  324 	inc	dptr
      000038 E0               [ 8]  325 	movx	a,@dptr
      000039 F9               [ 4]  326 	mov	r1,a
                                    327 ;	genAssign: resultIsFar = TRUE
      00003A 90s00r00r00      [12]  328 	mov	dptr,#__print_format_PARM_2
      00003E E4               [ 4]  329 	clr	a
      00003F F0               [ 8]  330 	movx	@dptr,a
      000040 A3               [12]  331 	inc	dptr
      000041 F0               [ 8]  332 	movx	@dptr,a
      000042 A3               [12]  333 	inc	dptr
      000043 F0               [ 8]  334 	movx	@dptr,a
      000044 A3               [12]  335 	inc	dptr
      000045 E4               [ 4]  336 	clr	a
      000046 F0               [ 8]  337 	movx	@dptr,a
                                    338 ;	genAssign: resultIsFar = TRUE
      000047 90s00r00r00      [12]  339 	mov	dptr,#__print_format_PARM_3
      00004B EA               [ 4]  340 	mov	a,r2
      00004C F0               [ 8]  341 	movx	@dptr,a
      00004D A3               [12]  342 	inc	dptr
      00004E EB               [ 4]  343 	mov	a,r3
      00004F F0               [ 8]  344 	movx	@dptr,a
      000050 A3               [12]  345 	inc	dptr
      000051 EC               [ 4]  346 	mov	a,r4
      000052 F0               [ 8]  347 	movx	@dptr,a
      000053 A3               [12]  348 	inc	dptr
      000054 ED               [ 4]  349 	mov	a,r5
      000055 F0               [ 8]  350 	movx	@dptr,a
                                    351 ;	genAssign: resultIsFar = TRUE
      000056 90s00r00r00      [12]  352 	mov	dptr,#__print_format_PARM_4
      00005A EE               [ 4]  353 	mov	a,r6
      00005B F0               [ 8]  354 	movx	@dptr,a
      00005C A3               [12]  355 	inc	dptr
      00005D EF               [ 4]  356 	mov	a,r7
      00005E F0               [ 8]  357 	movx	@dptr,a
      00005F A3               [12]  358 	inc	dptr
      000060 E8               [ 4]  359 	mov	a,r0
      000061 F0               [ 8]  360 	movx	@dptr,a
      000062 A3               [12]  361 	inc	dptr
      000063 E9               [ 4]  362 	mov	a,r1
      000064 F0               [ 8]  363 	movx	@dptr,a
      000065 90s00r00r00      [12]  364 	mov dptr,#_put_char_to_stdout
      000069 12s00r00r00      [16]  365 	lcall	__print_format
      00006D                        366 00101$:
      00006D 22               [16]  367 	ret
                                    368 ;------------------------------------------------------------
                                    369 ;Allocation info for local variables in function 'printf'
                                    370 ;------------------------------------------------------------
                                    371 ;format                    Allocated to stack - _bp -8
                                    372 ;arg                       Allocated to registers r2 r3 r4 r5 
                                    373 ;i                         Allocated to registers r2 r3 
                                    374 ;------------------------------------------------------------
                                    375 ;	vprintf.c:47: printf (const char *format, ...)
                                    376 ;	-----------------------------------------
                                    377 ;	 function printf
                                    378 ;	-----------------------------------------
      00006E                        379 _printf:
      00006E C0*00            [ 8]  380 	push	_bpx
      000070 C0*01            [ 8]  381 	push	_bpx+1
      000072 85 81*00         [12]  382 	mov	_bpx,sp
      000075 85 9B*01         [12]  383 	mov	_bpx+1,esp
      000078 53*01 03         [12]  384 	anl	_bpx+1,#3
      00007B 43*01 DC         [12]  385 	orl	_bpx+1,#0xDC
                                    386 ;	vprintf.c:52: va_start (arg, format);
      00007E E5*00            [ 8]  387 	mov	a,_bpx
      000080 24 F8            [ 8]  388 	add	a,#0xF8
      000082 F5 F0            [ 8]  389 	mov	b,a
      000084 E5*01            [ 8]  390 	mov	a,_bpx+1
      000086 34 FF            [ 8]  391 	addc	a,#0xFF
      000088 AA F0            [ 8]  392 	mov	r2,b
      00008A FB               [ 4]  393 	mov	r3,a
      00008B 7C FF            [ 8]  394 	mov	r4,#0xFF
      00008D 7D 00            [ 8]  395 	mov	r5,#0x00
                                    396 ;	vprintf.c:53: i = _print_format (put_char_to_stdout, NULL, format, arg);
      00008F E5*00            [ 8]  397 	mov	a,_bpx
      000091 C3               [ 4]  398 	clr	c
      000092 94 08            [ 8]  399 	subb	a,#0x08
      000094 F5 82            [ 8]  400 	mov	dpl,a
      000096 E5*01            [ 8]  401 	mov	a,_bpx+1
      000098 94 00            [ 8]  402 	subb	a,#0x00
      00009A F5 83            [ 8]  403 	mov	dph,a
      00009C 75 93 FF         [12]  404 	mov	dpx,#0xFF
                                    405 ;	genAssign: resultIsFar = FALSE
      00009F E0               [ 8]  406 	movx	a,@dptr
      0000A0 FE               [ 4]  407 	mov	r6,a
      0000A1 A3               [12]  408 	inc	dptr
      0000A2 E0               [ 8]  409 	movx	a,@dptr
      0000A3 FF               [ 4]  410 	mov	r7,a
      0000A4 A3               [12]  411 	inc	dptr
      0000A5 E0               [ 8]  412 	movx	a,@dptr
      0000A6 F8               [ 4]  413 	mov	r0,a
      0000A7 A3               [12]  414 	inc	dptr
      0000A8 E0               [ 8]  415 	movx	a,@dptr
      0000A9 F9               [ 4]  416 	mov	r1,a
                                    417 ;	genAssign: resultIsFar = TRUE
      0000AA 90s00r00r00      [12]  418 	mov	dptr,#__print_format_PARM_2
      0000AE E4               [ 4]  419 	clr	a
      0000AF F0               [ 8]  420 	movx	@dptr,a
      0000B0 A3               [12]  421 	inc	dptr
      0000B1 F0               [ 8]  422 	movx	@dptr,a
      0000B2 A3               [12]  423 	inc	dptr
      0000B3 F0               [ 8]  424 	movx	@dptr,a
      0000B4 A3               [12]  425 	inc	dptr
      0000B5 E4               [ 4]  426 	clr	a
      0000B6 F0               [ 8]  427 	movx	@dptr,a
                                    428 ;	genAssign: resultIsFar = TRUE
      0000B7 90s00r00r00      [12]  429 	mov	dptr,#__print_format_PARM_3
      0000BB EE               [ 4]  430 	mov	a,r6
      0000BC F0               [ 8]  431 	movx	@dptr,a
      0000BD A3               [12]  432 	inc	dptr
      0000BE EF               [ 4]  433 	mov	a,r7
      0000BF F0               [ 8]  434 	movx	@dptr,a
      0000C0 A3               [12]  435 	inc	dptr
      0000C1 E8               [ 4]  436 	mov	a,r0
      0000C2 F0               [ 8]  437 	movx	@dptr,a
      0000C3 A3               [12]  438 	inc	dptr
      0000C4 E9               [ 4]  439 	mov	a,r1
      0000C5 F0               [ 8]  440 	movx	@dptr,a
                                    441 ;	genAssign: resultIsFar = TRUE
      0000C6 90s00r00r00      [12]  442 	mov	dptr,#__print_format_PARM_4
      0000CA EA               [ 4]  443 	mov	a,r2
      0000CB F0               [ 8]  444 	movx	@dptr,a
      0000CC A3               [12]  445 	inc	dptr
      0000CD EB               [ 4]  446 	mov	a,r3
      0000CE F0               [ 8]  447 	movx	@dptr,a
      0000CF A3               [12]  448 	inc	dptr
      0000D0 EC               [ 4]  449 	mov	a,r4
      0000D1 F0               [ 8]  450 	movx	@dptr,a
      0000D2 A3               [12]  451 	inc	dptr
      0000D3 ED               [ 4]  452 	mov	a,r5
      0000D4 F0               [ 8]  453 	movx	@dptr,a
      0000D5 90s00r00r00      [12]  454 	mov dptr,#_put_char_to_stdout
      0000D9 12s00r00r00      [16]  455 	lcall	__print_format
      0000DD AA 82            [ 8]  456 	mov	r2,dpl
      0000DF AB 83            [ 8]  457 	mov	r3,dph
                                    458 ;	genAssign: resultIsFar = FALSE
      0000E1 8A 82            [ 8]  459 	mov	dpl,r2
      0000E3 8B 83            [ 8]  460 	mov	dph,r3
                                    461 ;	vprintf.c:56: return i;
      0000E5                        462 00101$:
      0000E5 85*00 81         [12]  463 	mov	sp,_bpx
      0000E8 85*01 9B         [12]  464 	mov	esp,_bpx+1
      0000EB D0*01            [ 8]  465 	pop	_bpx+1
      0000ED D0*00            [ 8]  466 	pop	_bpx
      0000EF 22               [16]  467 	ret
                                    468 	.area CSEG    (CODE)
                                    469 	.area CONST   (CODE)
                                    470 	.area XINIT   (CODE)
                                    471 	.area CABS    (ABS,CODE)
