                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:27 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _setjmp
                                      7 	.optsdcc -mds390 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _longjmp
                                     35 	.globl _longjmp_PARM_2
                                     36 	.globl ___setjmp
                                     37 ;--------------------------------------------------------
                                     38 ; special function registers
                                     39 ;--------------------------------------------------------
                           000080    40 _P0	=	0x0080
                           000081    41 _SP	=	0x0081
                           000082    42 _DPL	=	0x0082
                           000083    43 _DPH	=	0x0083
                           000087    44 _PCON	=	0x0087
                           000088    45 _TCON	=	0x0088
                           000089    46 _TMOD	=	0x0089
                           00008A    47 _TL0	=	0x008a
                           00008B    48 _TL1	=	0x008b
                           00008C    49 _TH0	=	0x008c
                           00008D    50 _TH1	=	0x008d
                           000090    51 _P1	=	0x0090
                           000098    52 _SCON	=	0x0098
                           000099    53 _SBUF	=	0x0099
                           0000A0    54 _P2	=	0x00a0
                           0000A8    55 _IE	=	0x00a8
                           0000B0    56 _P3	=	0x00b0
                           0000B8    57 _IP	=	0x00b8
                           0000D0    58 _PSW	=	0x00d0
                           0000E0    59 _ACC	=	0x00e0
                           0000F0    60 _B	=	0x00f0
                                     61 ;--------------------------------------------------------
                                     62 ; special function bits
                                     63 ;--------------------------------------------------------
                           000080    64 _P0_0	=	0x0080
                           000081    65 _P0_1	=	0x0081
                           000082    66 _P0_2	=	0x0082
                           000083    67 _P0_3	=	0x0083
                           000084    68 _P0_4	=	0x0084
                           000085    69 _P0_5	=	0x0085
                           000086    70 _P0_6	=	0x0086
                           000087    71 _P0_7	=	0x0087
                           000088    72 _IT0	=	0x0088
                           000089    73 _IE0	=	0x0089
                           00008A    74 _IT1	=	0x008a
                           00008B    75 _IE1	=	0x008b
                           00008C    76 _TR0	=	0x008c
                           00008D    77 _TF0	=	0x008d
                           00008E    78 _TR1	=	0x008e
                           00008F    79 _TF1	=	0x008f
                           000090    80 _P1_0	=	0x0090
                           000091    81 _P1_1	=	0x0091
                           000092    82 _P1_2	=	0x0092
                           000093    83 _P1_3	=	0x0093
                           000094    84 _P1_4	=	0x0094
                           000095    85 _P1_5	=	0x0095
                           000096    86 _P1_6	=	0x0096
                           000097    87 _P1_7	=	0x0097
                           000098    88 _RI	=	0x0098
                           000099    89 _TI	=	0x0099
                           00009A    90 _RB8	=	0x009a
                           00009B    91 _TB8	=	0x009b
                           00009C    92 _REN	=	0x009c
                           00009D    93 _SM2	=	0x009d
                           00009E    94 _SM1	=	0x009e
                           00009F    95 _SM0	=	0x009f
                           0000A0    96 _P2_0	=	0x00a0
                           0000A1    97 _P2_1	=	0x00a1
                           0000A2    98 _P2_2	=	0x00a2
                           0000A3    99 _P2_3	=	0x00a3
                           0000A4   100 _P2_4	=	0x00a4
                           0000A5   101 _P2_5	=	0x00a5
                           0000A6   102 _P2_6	=	0x00a6
                           0000A7   103 _P2_7	=	0x00a7
                           0000A8   104 _EX0	=	0x00a8
                           0000A9   105 _ET0	=	0x00a9
                           0000AA   106 _EX1	=	0x00aa
                           0000AB   107 _ET1	=	0x00ab
                           0000AC   108 _ES	=	0x00ac
                           0000AF   109 _EA	=	0x00af
                           0000B0   110 _P3_0	=	0x00b0
                           0000B1   111 _P3_1	=	0x00b1
                           0000B2   112 _P3_2	=	0x00b2
                           0000B3   113 _P3_3	=	0x00b3
                           0000B4   114 _P3_4	=	0x00b4
                           0000B5   115 _P3_5	=	0x00b5
                           0000B6   116 _P3_6	=	0x00b6
                           0000B7   117 _P3_7	=	0x00b7
                           0000B0   118 _RXD	=	0x00b0
                           0000B1   119 _TXD	=	0x00b1
                           0000B2   120 _INT0	=	0x00b2
                           0000B3   121 _INT1	=	0x00b3
                           0000B4   122 _T0	=	0x00b4
                           0000B5   123 _T1	=	0x00b5
                           0000B6   124 _WR	=	0x00b6
                           0000B7   125 _RD	=	0x00b7
                           0000B8   126 _PX0	=	0x00b8
                           0000B9   127 _PT0	=	0x00b9
                           0000BA   128 _PX1	=	0x00ba
                           0000BB   129 _PT1	=	0x00bb
                           0000BC   130 _PS	=	0x00bc
                           0000D0   131 _P	=	0x00d0
                           0000D1   132 _F1	=	0x00d1
                           0000D2   133 _OV	=	0x00d2
                           0000D3   134 _RS0	=	0x00d3
                           0000D4   135 _RS1	=	0x00d4
                           0000D5   136 _F0	=	0x00d5
                           0000D6   137 _AC	=	0x00d6
                           0000D7   138 _CY	=	0x00d7
                                    139 ;--------------------------------------------------------
                                    140 ; overlayable register banks
                                    141 ;--------------------------------------------------------
                                    142 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        143 	.ds 8
                                    144 ;--------------------------------------------------------
                                    145 ; internal ram data
                                    146 ;--------------------------------------------------------
                                    147 	.area DSEG    (DATA)
                                    148 ;--------------------------------------------------------
                                    149 ; overlayable items in internal ram 
                                    150 ;--------------------------------------------------------
                                    151 ;--------------------------------------------------------
                                    152 ; indirectly addressable internal ram data
                                    153 ;--------------------------------------------------------
                                    154 	.area ISEG    (DATA)
                                    155 ;--------------------------------------------------------
                                    156 ; absolute internal ram data
                                    157 ;--------------------------------------------------------
                                    158 	.area IABS    (ABS,DATA)
                                    159 	.area IABS    (ABS,DATA)
                                    160 ;--------------------------------------------------------
                                    161 ; bit data
                                    162 ;--------------------------------------------------------
                                    163 	.area BSEG    (BIT)
                                    164 ;--------------------------------------------------------
                                    165 ; paged external ram data
                                    166 ;--------------------------------------------------------
                                    167 	.area PSEG    (PAG,XDATA)
                                    168 ;--------------------------------------------------------
                                    169 ; external ram data
                                    170 ;--------------------------------------------------------
                                    171 	.area XSEG    (XDATA)
      000000                        172 _longjmp_PARM_2:
      000000                        173 	.ds 2
                                    174 ;--------------------------------------------------------
                                    175 ; absolute external ram data
                                    176 ;--------------------------------------------------------
                                    177 	.area XABS    (ABS,XDATA)
                                    178 ;--------------------------------------------------------
                                    179 ; external initialized ram data
                                    180 ;--------------------------------------------------------
                                    181 	.area XISEG   (XDATA)
                                    182 ;--------------------------------------------------------
                                    183 ; global & static initialisations
                                    184 ;--------------------------------------------------------
                                    185 	.area HOME    (CODE)
                                    186 	.area GSINIT  (CODE)
                                    187 	.area GSFINAL (CODE)
                                    188 	.area GSINIT  (CODE)
                                    189 ;--------------------------------------------------------
                                    190 ; Home
                                    191 ;--------------------------------------------------------
                                    192 	.area HOME    (CODE)
                                    193 	.area HOME    (CODE)
                                    194 ;--------------------------------------------------------
                                    195 ; code
                                    196 ;--------------------------------------------------------
                                    197 	.area CSEG    (CODE)
                                    198 ;------------------------------------------------------------
                                    199 ;Allocation info for local variables in function '__setjmp'
                                    200 ;------------------------------------------------------------
                                    201 ;buf                       Allocated to registers 
                                    202 ;------------------------------------------------------------
                                    203 ;	_setjmp.c:404: int __setjmp (jmp_buf buf)
                                    204 ;	-----------------------------------------
                                    205 ;	 function __setjmp
                                    206 ;	-----------------------------------------
      000000                        207 ___setjmp:
                           000002   208 	ar2 = 0x02
                           000003   209 	ar3 = 0x03
                           000004   210 	ar4 = 0x04
                           000005   211 	ar5 = 0x05
                           000006   212 	ar6 = 0x06
                           000007   213 	ar7 = 0x07
                           000000   214 	ar0 = 0x00
                           000001   215 	ar1 = 0x01
                                    216 ;	_setjmp.c:413: *buf++ = SP;
      000000 E5 81            [ 8]  217 	mov	a,_SP
      000002 12s00r00r00      [16]  218 	lcall	__gptrput
      000006 A3               [12]  219 	inc	dptr
                                    220 ;	_setjmp.c:415: *buf++ = *((unsigned char __data *) SP - 0);
      000007 A8 81            [ 8]  221 	mov	r0,_SP
      000009 86 02            [ 8]  222 	mov	ar2,@r0
      00000B EA               [ 4]  223 	mov	a,r2
      00000C 12s00r00r00      [16]  224 	lcall	__gptrput
      000010 A3               [12]  225 	inc	dptr
                                    226 ;	_setjmp.c:416: *buf++ = *((unsigned char __data *) SP - 1);
      000011 AA 81            [ 8]  227 	mov	r2,_SP
      000013 EA               [ 4]  228 	mov	a,r2
      000014 14               [ 4]  229 	dec	a
      000015 F8               [ 4]  230 	mov	r0,a
      000016 86 02            [ 8]  231 	mov	ar2,@r0
      000018 EA               [ 4]  232 	mov	a,r2
      000019 12s00r00r00      [16]  233 	lcall	__gptrput
                                    234 ;	_setjmp.c:420: return 0;
      00001D 90 00 00 00      [12]  235 	mov  dptr,#0x0000
      000021                        236 00101$:
      000021 22               [16]  237 	ret
                                    238 ;------------------------------------------------------------
                                    239 ;Allocation info for local variables in function 'longjmp'
                                    240 ;------------------------------------------------------------
                                    241 ;rv                        Allocated with name '_longjmp_PARM_2'
                                    242 ;buf                       Allocated to registers r2 r3 r4 r5 
                                    243 ;lsp                       Allocated to registers r6 
                                    244 ;------------------------------------------------------------
                                    245 ;	_setjmp.c:423: int longjmp (jmp_buf buf, int rv)
                                    246 ;	-----------------------------------------
                                    247 ;	 function longjmp
                                    248 ;	-----------------------------------------
      000022                        249 _longjmp:
                                    250 ;	_setjmp.c:431: lsp = *buf++;
      000022 AA 82            [ 8]  251 	mov     r2,dpl
      000024 AB 83            [ 8]  252 	mov     r3,dph
      000026 AC 93            [ 8]  253 	mov     r4,dpx
      000028 AD F0            [ 8]  254 	mov     r5,b
      00002A 8D F0            [ 8]  255 	mov	b,r5
      00002C 12s00r00r00      [16]  256 	lcall	__gptrget
      000030 FE               [ 4]  257 	mov	r6,a
      000031 A3               [12]  258 	inc	dptr
      000032 AA 82            [ 8]  259 	mov	r2,dpl
      000034 AB 83            [ 8]  260 	mov	r3,dph
      000036 AC 93            [ 8]  261 	mov	r4,dpx
      000038 AD F0            [ 8]  262 	mov	r5,b
                                    263 ;	genAssign: resultIsFar = TRUE
                                    264 ;	_setjmp.c:433: *((unsigned char __data *) lsp - 0) = *buf++;
      00003A 8E 00            [ 8]  265 	mov	ar0,r6
      00003C 8A 82            [ 8]  266 	mov	dpl,r2
      00003E 8B 83            [ 8]  267 	mov	dph,r3
      000040 8C 93            [ 8]  268 	mov	dpx,r4
      000042 8D F0            [ 8]  269 	mov	b,r5
      000044 12s00r00r00      [16]  270 	lcall	__gptrget
      000048 FF               [ 4]  271 	mov	r7,a
      000049 A3               [12]  272 	inc	dptr
      00004A AA 82            [ 8]  273 	mov	r2,dpl
      00004C AB 83            [ 8]  274 	mov	r3,dph
      00004E AC 93            [ 8]  275 	mov	r4,dpx
      000050 AD F0            [ 8]  276 	mov	r5,b
      000052 A6 07            [ 8]  277 	mov	@r0,ar7
                                    278 ;	_setjmp.c:434: *((unsigned char __data *) lsp - 1) = *buf++;
      000054 18               [ 4]  279 	dec	r0
      000055 8A 82            [ 8]  280 	mov	dpl,r2
      000057 8B 83            [ 8]  281 	mov	dph,r3
      000059 8C 93            [ 8]  282 	mov	dpx,r4
      00005B 8D F0            [ 8]  283 	mov	b,r5
      00005D 12s00r00r00      [16]  284 	lcall	__gptrget
      000061 FA               [ 4]  285 	mov  r2,a
      000062 F6               [ 4]  286 	mov  @r0,a
                                    287 ;	_setjmp.c:438: SP = lsp;
                                    288 ;	genAssign: resultIsFar = FALSE
      000063 8E 81            [ 8]  289 	mov	_SP,r6
                                    290 ;	_setjmp.c:439: return rv ? rv : 1;
      000065 90s00r00r00      [12]  291 	mov	dptr,#_longjmp_PARM_2
      000069 E0               [ 8]  292 	movx	a,@dptr
      00006A F5 F0            [ 8]  293 	mov	b,a
      00006C A3               [12]  294 	inc	dptr
      00006D E0               [ 8]  295 	movx	a,@dptr
      00006E 45 F0            [ 8]  296 	orl	a,b
      000070 60 0D            [12]  297 	jz  00103$
      000072                        298 00108$:
      000072 90s00r00r00      [12]  299 	mov	dptr,#_longjmp_PARM_2
                                    300 ;	genAssign: resultIsFar = FALSE
      000076 E0               [ 8]  301 	movx	a,@dptr
      000077 F5 84            [ 8]  302 	mov	dpl1,a
      000079 A3               [12]  303 	inc	dptr
      00007A E0               [ 8]  304 	movx	a,@dptr
      00007B F5 85            [ 8]  305 	mov	dph1,a
      00007D 80 06            [12]  306 	sjmp 00104$
      00007F                        307 00103$:
                                    308 ;	genAssign: resultIsFar = FALSE
      00007F 75 84 01         [12]  309 	mov	dpl1,#0x01
      000082 E4               [ 4]  310 	clr	a
      000083 F5 85            [ 8]  311 	mov	dph1,a
      000085                        312 00104$:
      000085 85 84 82         [12]  313 	mov	dpl,dpl1
      000088 85 85 83         [12]  314 	mov	dph,dph1
      00008B                        315 00101$:
      00008B 22               [16]  316 	ret
                                    317 	.area CSEG    (CODE)
                                    318 	.area CONST   (CODE)
                                    319 	.area XINIT   (CODE)
                                    320 	.area CABS    (ABS,CODE)
