                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:48 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _atof
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _atoi
                                     13 	.globl _toupper
                                     14 	.globl _isspace
                                     15 	.globl _atof
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable bit register bank
                                     33 ;--------------------------------------------------------
                                     34 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         35 bits:
      000000                         36 	.ds 1
                           008000    37 	b0 = bits[0]
                           008100    38 	b1 = bits[1]
                           008200    39 	b2 = bits[2]
                           008300    40 	b3 = bits[3]
                           008400    41 	b4 = bits[4]
                           008500    42 	b5 = bits[5]
                           008600    43 	b6 = bits[6]
                           008700    44 	b7 = bits[7]
                                     45 ;--------------------------------------------------------
                                     46 ; internal ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area DSEG    (DATA)
                                     49 ;--------------------------------------------------------
                                     50 ; overlayable items in internal ram 
                                     51 ;--------------------------------------------------------
                                     52 ;--------------------------------------------------------
                                     53 ; indirectly addressable internal ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area ISEG    (DATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute internal ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area IABS    (ABS,DATA)
                                     60 	.area IABS    (ABS,DATA)
                                     61 ;--------------------------------------------------------
                                     62 ; bit data
                                     63 ;--------------------------------------------------------
                                     64 	.area BSEG    (BIT)
                                     65 ;--------------------------------------------------------
                                     66 ; paged external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area PSEG    (PAG,XDATA)
                                     69 ;--------------------------------------------------------
                                     70 ; external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XSEG    (XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; absolute external ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XABS    (ABS,XDATA)
                                     77 ;--------------------------------------------------------
                                     78 ; external initialized ram data
                                     79 ;--------------------------------------------------------
                                     80 	.area XISEG   (XDATA)
                                     81 	.area HOME    (CODE)
                                     82 	.area GSINIT0 (CODE)
                                     83 	.area GSINIT1 (CODE)
                                     84 	.area GSINIT2 (CODE)
                                     85 	.area GSINIT3 (CODE)
                                     86 	.area GSINIT4 (CODE)
                                     87 	.area GSINIT5 (CODE)
                                     88 	.area GSINIT  (CODE)
                                     89 	.area GSFINAL (CODE)
                                     90 	.area CSEG    (CODE)
                                     91 ;--------------------------------------------------------
                                     92 ; global & static initialisations
                                     93 ;--------------------------------------------------------
                                     94 	.area HOME    (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 	.area GSFINAL (CODE)
                                     97 	.area GSINIT  (CODE)
                                     98 ;--------------------------------------------------------
                                     99 ; Home
                                    100 ;--------------------------------------------------------
                                    101 	.area HOME    (CODE)
                                    102 	.area HOME    (CODE)
                                    103 ;--------------------------------------------------------
                                    104 ; code
                                    105 ;--------------------------------------------------------
                                    106 	.area CSEG    (CODE)
                                    107 ;------------------------------------------------------------
                                    108 ;Allocation info for local variables in function 'atof'
                                    109 ;------------------------------------------------------------
                                    110 ;s                         Allocated to registers r5 r3 r2 
                                    111 ;value                     Allocated to stack - _bp +8
                                    112 ;fraction                  Allocated to stack - _bp +12
                                    113 ;iexp                      Allocated to registers r6 
                                    114 ;sign                      Allocated to registers b0 
                                    115 ;sloc0                     Allocated to stack - _bp +1
                                    116 ;sloc1                     Allocated to stack - _bp +4
                                    117 ;------------------------------------------------------------
                                    118 ;	_atof.c:33: float atof(const char * s)
                                    119 ;	-----------------------------------------
                                    120 ;	 function atof
                                    121 ;	-----------------------------------------
      000000                        122 _atof:
                           000007   123 	ar7 = 0x07
                           000006   124 	ar6 = 0x06
                           000005   125 	ar5 = 0x05
                           000004   126 	ar4 = 0x04
                           000003   127 	ar3 = 0x03
                           000002   128 	ar2 = 0x02
                           000001   129 	ar1 = 0x01
                           000000   130 	ar0 = 0x00
      000000 C0*00            [24]  131 	push	_bp
      000002 E5 81            [12]  132 	mov	a,sp
      000004 F5*00            [12]  133 	mov	_bp,a
      000006 24 0F            [12]  134 	add	a,#0x0F
      000008 F5 81            [12]  135 	mov	sp,a
      00000A AD 82            [24]  136 	mov	r5,dpl
      00000C AB 83            [24]  137 	mov	r3,dph
      00000E AA F0            [24]  138 	mov	r2,b
                                    139 ;	_atof.c:40: while (isspace(*s)) s++;
      000010 A8*00            [24]  140 	mov	r0,_bp
      000012 08               [12]  141 	inc	r0
      000013 A6 05            [24]  142 	mov	@r0,ar5
      000015 08               [12]  143 	inc	r0
      000016 A6 03            [24]  144 	mov	@r0,ar3
      000018 08               [12]  145 	inc	r0
      000019 A6 02            [24]  146 	mov	@r0,ar2
      00001B                        147 00101$:
      00001B A8*00            [24]  148 	mov	r0,_bp
      00001D 08               [12]  149 	inc	r0
      00001E 86 82            [24]  150 	mov	dpl,@r0
      000020 08               [12]  151 	inc	r0
      000021 86 83            [24]  152 	mov	dph,@r0
      000023 08               [12]  153 	inc	r0
      000024 86 F0            [24]  154 	mov	b,@r0
      000026 12r00r00         [24]  155 	lcall	__gptrget
      000029 FC               [12]  156 	mov	r4,a
      00002A 33               [12]  157 	rlc	a
      00002B 95 E0            [12]  158 	subb	a,acc
      00002D FB               [12]  159 	mov	r3,a
      00002E 8C 82            [24]  160 	mov	dpl,r4
      000030 8B 83            [24]  161 	mov	dph,r3
      000032 12r00r00         [24]  162 	lcall	_isspace
      000035 E5 82            [12]  163 	mov	a,dpl
      000037 85 83 F0         [24]  164 	mov	b,dph
      00003A 45 F0            [12]  165 	orl	a,b
      00003C 60 0B            [24]  166 	jz	00145$
      00003E A8*00            [24]  167 	mov	r0,_bp
      000040 08               [12]  168 	inc	r0
      000041 06               [12]  169 	inc	@r0
      000042 B6 00 02         [24]  170 	cjne	@r0,#0x00,00177$
      000045 08               [12]  171 	inc	r0
      000046 06               [12]  172 	inc	@r0
      000047                        173 00177$:
      000047 80 D2            [24]  174 	sjmp	00101$
      000049                        175 00145$:
      000049 A8*00            [24]  176 	mov	r0,_bp
      00004B 08               [12]  177 	inc	r0
      00004C 86 05            [24]  178 	mov	ar5,@r0
      00004E 08               [12]  179 	inc	r0
      00004F 86 03            [24]  180 	mov	ar3,@r0
      000051 08               [12]  181 	inc	r0
      000052 86 02            [24]  182 	mov	ar2,@r0
                                    183 ;	_atof.c:43: if (*s == '-')
      000054 A8*00            [24]  184 	mov	r0,_bp
      000056 08               [12]  185 	inc	r0
      000057 86 82            [24]  186 	mov	dpl,@r0
      000059 08               [12]  187 	inc	r0
      00005A 86 83            [24]  188 	mov	dph,@r0
      00005C 08               [12]  189 	inc	r0
      00005D 86 F0            [24]  190 	mov	b,@r0
      00005F 12r00r00         [24]  191 	lcall	__gptrget
      000062 FC               [12]  192 	mov	r4,a
      000063 BC 2D 12         [24]  193 	cjne	r4,#0x2D,00107$
                                    194 ;	_atof.c:45: sign=1;
      000066 D2*00            [12]  195 	setb	b0
                                    196 ;	_atof.c:46: s++;
      000068 A8*00            [24]  197 	mov	r0,_bp
      00006A 08               [12]  198 	inc	r0
      00006B 74 01            [12]  199 	mov	a,#0x01
      00006D 26               [12]  200 	add	a,@r0
      00006E FD               [12]  201 	mov	r5,a
      00006F E4               [12]  202 	clr	a
      000070 08               [12]  203 	inc	r0
      000071 36               [12]  204 	addc	a,@r0
      000072 FB               [12]  205 	mov	r3,a
      000073 08               [12]  206 	inc	r0
      000074 86 02            [24]  207 	mov	ar2,@r0
      000076 80 13            [24]  208 	sjmp	00108$
      000078                        209 00107$:
                                    210 ;	_atof.c:50: sign=0;
      000078 C2*00            [12]  211 	clr	b0
                                    212 ;	_atof.c:51: if (*s == '+') s++;
      00007A BC 2B 0E         [24]  213 	cjne	r4,#0x2B,00108$
      00007D A8*00            [24]  214 	mov	r0,_bp
      00007F 08               [12]  215 	inc	r0
      000080 74 01            [12]  216 	mov	a,#0x01
      000082 26               [12]  217 	add	a,@r0
      000083 FD               [12]  218 	mov	r5,a
      000084 E4               [12]  219 	clr	a
      000085 08               [12]  220 	inc	r0
      000086 36               [12]  221 	addc	a,@r0
      000087 FB               [12]  222 	mov	r3,a
      000088 08               [12]  223 	inc	r0
      000089 86 02            [24]  224 	mov	ar2,@r0
      00008B                        225 00108$:
                                    226 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
      00008B E5*00            [12]  227 	mov	a,_bp
      00008D 24 08            [12]  228 	add	a,#0x08
      00008F F8               [12]  229 	mov	r0,a
      000090 E4               [12]  230 	clr	a
      000091 F6               [12]  231 	mov	@r0,a
      000092 08               [12]  232 	inc	r0
      000093 F6               [12]  233 	mov	@r0,a
      000094 08               [12]  234 	inc	r0
      000095 F6               [12]  235 	mov	@r0,a
      000096 08               [12]  236 	inc	r0
      000097 F6               [12]  237 	mov	@r0,a
      000098 A8*00            [24]  238 	mov	r0,_bp
      00009A 08               [12]  239 	inc	r0
      00009B A6 05            [24]  240 	mov	@r0,ar5
      00009D 08               [12]  241 	inc	r0
      00009E A6 03            [24]  242 	mov	@r0,ar3
      0000A0 08               [12]  243 	inc	r0
      0000A1 A6 02            [24]  244 	mov	@r0,ar2
      0000A3                        245 00124$:
      0000A3 A8*00            [24]  246 	mov	r0,_bp
      0000A5 08               [12]  247 	inc	r0
      0000A6 86 82            [24]  248 	mov	dpl,@r0
      0000A8 08               [12]  249 	inc	r0
      0000A9 86 83            [24]  250 	mov	dph,@r0
      0000AB 08               [12]  251 	inc	r0
      0000AC 86 F0            [24]  252 	mov	b,@r0
      0000AE 12r00r00         [24]  253 	lcall	__gptrget
      0000B1 FC               [12]  254 	mov	r4,a
      0000B2 33               [12]  255 	rlc	a
      0000B3 95 E0            [12]  256 	subb	a,acc
      0000B5 FB               [12]  257 	mov	r3,a
      0000B6 8C 82            [24]  258 	mov	dpl,r4
      0000B8 8B 83            [24]  259 	mov	dph,r3
      0000BA C0*00            [24]  260 	push	bits
      0000BC 12r00r00         [24]  261 	lcall	_isdigit
      0000BF E5 82            [12]  262 	mov	a,dpl
      0000C1 85 83 F0         [24]  263 	mov	b,dph
      0000C4 D0*00            [24]  264 	pop	bits
      0000C6 45 F0            [12]  265 	orl	a,b
      0000C8 70 03            [24]  266 	jnz	00182$
      0000CA 02r01r78         [24]  267 	ljmp	00146$
      0000CD                        268 00182$:
                                    269 ;	_atof.c:57: value=10.0*value+(*s-'0');
      0000CD C0*00            [24]  270 	push	bits
      0000CF E5*00            [12]  271 	mov	a,_bp
      0000D1 24 08            [12]  272 	add	a,#0x08
      0000D3 F8               [12]  273 	mov	r0,a
      0000D4 E6               [12]  274 	mov	a,@r0
      0000D5 C0 E0            [24]  275 	push	acc
      0000D7 08               [12]  276 	inc	r0
      0000D8 E6               [12]  277 	mov	a,@r0
      0000D9 C0 E0            [24]  278 	push	acc
      0000DB 08               [12]  279 	inc	r0
      0000DC E6               [12]  280 	mov	a,@r0
      0000DD C0 E0            [24]  281 	push	acc
      0000DF 08               [12]  282 	inc	r0
      0000E0 E6               [12]  283 	mov	a,@r0
      0000E1 C0 E0            [24]  284 	push	acc
      0000E3 90 00 00         [24]  285 	mov	dptr,#0x0000
      0000E6 75 F0 20         [24]  286 	mov	b,#0x20
      0000E9 74 41            [12]  287 	mov	a,#0x41
      0000EB 12r00r00         [24]  288 	lcall	___fsmul
      0000EE C8               [12]  289 	xch	a,r0
      0000EF E5*00            [12]  290 	mov	a,_bp
      0000F1 24 04            [12]  291 	add	a,#0x04
      0000F3 C8               [12]  292 	xch	a,r0
      0000F4 A6 82            [24]  293 	mov	@r0,dpl
      0000F6 08               [12]  294 	inc	r0
      0000F7 A6 83            [24]  295 	mov	@r0,dph
      0000F9 08               [12]  296 	inc	r0
      0000FA A6 F0            [24]  297 	mov	@r0,b
      0000FC 08               [12]  298 	inc	r0
      0000FD F6               [12]  299 	mov	@r0,a
      0000FE E5 81            [12]  300 	mov	a,sp
      000100 24 FC            [12]  301 	add	a,#0xfc
      000102 F5 81            [12]  302 	mov	sp,a
      000104 D0*00            [24]  303 	pop	bits
      000106 A8*00            [24]  304 	mov	r0,_bp
      000108 08               [12]  305 	inc	r0
      000109 86 82            [24]  306 	mov	dpl,@r0
      00010B 08               [12]  307 	inc	r0
      00010C 86 83            [24]  308 	mov	dph,@r0
      00010E 08               [12]  309 	inc	r0
      00010F 86 F0            [24]  310 	mov	b,@r0
      000111 12r00r00         [24]  311 	lcall	__gptrget
      000114 FE               [12]  312 	mov	r6,a
      000115 A3               [24]  313 	inc	dptr
      000116 18               [12]  314 	dec	r0
      000117 18               [12]  315 	dec	r0
      000118 A6 82            [24]  316 	mov	@r0,dpl
      00011A 08               [12]  317 	inc	r0
      00011B A6 83            [24]  318 	mov	@r0,dph
      00011D EE               [12]  319 	mov	a,r6
      00011E 33               [12]  320 	rlc	a
      00011F 95 E0            [12]  321 	subb	a,acc
      000121 FD               [12]  322 	mov	r5,a
      000122 EE               [12]  323 	mov	a,r6
      000123 24 D0            [12]  324 	add	a,#0xD0
      000125 F5 82            [12]  325 	mov	dpl,a
      000127 ED               [12]  326 	mov	a,r5
      000128 34 FF            [12]  327 	addc	a,#0xFF
      00012A F5 83            [12]  328 	mov	dph,a
      00012C C0*00            [24]  329 	push	bits
      00012E 12r00r00         [24]  330 	lcall	___sint2fs
      000131 AC 82            [24]  331 	mov	r4,dpl
      000133 AD 83            [24]  332 	mov	r5,dph
      000135 AE F0            [24]  333 	mov	r6,b
      000137 FF               [12]  334 	mov	r7,a
      000138 D0*00            [24]  335 	pop	bits
      00013A C0*00            [24]  336 	push	bits
      00013C C0 04            [24]  337 	push	ar4
      00013E C0 05            [24]  338 	push	ar5
      000140 C0 06            [24]  339 	push	ar6
      000142 C0 07            [24]  340 	push	ar7
      000144 E5*00            [12]  341 	mov	a,_bp
      000146 24 04            [12]  342 	add	a,#0x04
      000148 F8               [12]  343 	mov	r0,a
      000149 86 82            [24]  344 	mov	dpl,@r0
      00014B 08               [12]  345 	inc	r0
      00014C 86 83            [24]  346 	mov	dph,@r0
      00014E 08               [12]  347 	inc	r0
      00014F 86 F0            [24]  348 	mov	b,@r0
      000151 08               [12]  349 	inc	r0
      000152 E6               [12]  350 	mov	a,@r0
      000153 12r00r00         [24]  351 	lcall	___fsadd
      000156 AC 82            [24]  352 	mov	r4,dpl
      000158 AD 83            [24]  353 	mov	r5,dph
      00015A AE F0            [24]  354 	mov	r6,b
      00015C FF               [12]  355 	mov	r7,a
      00015D E5 81            [12]  356 	mov	a,sp
      00015F 24 FC            [12]  357 	add	a,#0xfc
      000161 F5 81            [12]  358 	mov	sp,a
      000163 D0*00            [24]  359 	pop	bits
      000165 E5*00            [12]  360 	mov	a,_bp
      000167 24 08            [12]  361 	add	a,#0x08
      000169 F8               [12]  362 	mov	r0,a
      00016A A6 04            [24]  363 	mov	@r0,ar4
      00016C 08               [12]  364 	inc	r0
      00016D A6 05            [24]  365 	mov	@r0,ar5
      00016F 08               [12]  366 	inc	r0
      000170 A6 06            [24]  367 	mov	@r0,ar6
      000172 08               [12]  368 	inc	r0
      000173 A6 07            [24]  369 	mov	@r0,ar7
                                    370 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
      000175 02r00rA3         [24]  371 	ljmp	00124$
      000178                        372 00146$:
      000178 A8*00            [24]  373 	mov	r0,_bp
      00017A 08               [12]  374 	inc	r0
      00017B 86 05            [24]  375 	mov	ar5,@r0
      00017D 08               [12]  376 	inc	r0
      00017E 86 03            [24]  377 	mov	ar3,@r0
      000180 08               [12]  378 	inc	r0
      000181 86 02            [24]  379 	mov	ar2,@r0
                                    380 ;	_atof.c:61: if (*s == '.')
      000183 A8*00            [24]  381 	mov	r0,_bp
      000185 08               [12]  382 	inc	r0
      000186 86 82            [24]  383 	mov	dpl,@r0
      000188 08               [12]  384 	inc	r0
      000189 86 83            [24]  385 	mov	dph,@r0
      00018B 08               [12]  386 	inc	r0
      00018C 86 F0            [24]  387 	mov	b,@r0
      00018E 12r00r00         [24]  388 	lcall	__gptrget
      000191 FF               [12]  389 	mov	r7,a
      000192 BF 2E 02         [24]  390 	cjne	r7,#0x2E,00183$
      000195 80 03            [24]  391 	sjmp	00184$
      000197                        392 00183$:
      000197 02r02rE1         [24]  393 	ljmp	00112$
      00019A                        394 00184$:
                                    395 ;	_atof.c:63: s++;
      00019A A8*00            [24]  396 	mov	r0,_bp
      00019C 08               [12]  397 	inc	r0
      00019D 74 01            [12]  398 	mov	a,#0x01
      00019F 26               [12]  399 	add	a,@r0
      0001A0 FD               [12]  400 	mov	r5,a
      0001A1 E4               [12]  401 	clr	a
      0001A2 08               [12]  402 	inc	r0
      0001A3 36               [12]  403 	addc	a,@r0
      0001A4 FB               [12]  404 	mov	r3,a
      0001A5 08               [12]  405 	inc	r0
      0001A6 86 02            [24]  406 	mov	ar2,@r0
                                    407 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
      0001A8 E5*00            [12]  408 	mov	a,_bp
      0001AA 24 0C            [12]  409 	add	a,#0x0c
      0001AC F8               [12]  410 	mov	r0,a
      0001AD 76 CD            [12]  411 	mov	@r0,#0xCD
      0001AF 08               [12]  412 	inc	r0
      0001B0 76 CC            [12]  413 	mov	@r0,#0xCC
      0001B2 08               [12]  414 	inc	r0
      0001B3 76 CC            [12]  415 	mov	@r0,#0xCC
      0001B5 08               [12]  416 	inc	r0
      0001B6 76 3D            [12]  417 	mov	@r0,#0x3D
      0001B8 E5*00            [12]  418 	mov	a,_bp
      0001BA 24 04            [12]  419 	add	a,#0x04
      0001BC F8               [12]  420 	mov	r0,a
      0001BD A6 05            [24]  421 	mov	@r0,ar5
      0001BF 08               [12]  422 	inc	r0
      0001C0 A6 03            [24]  423 	mov	@r0,ar3
      0001C2 08               [12]  424 	inc	r0
      0001C3 A6 02            [24]  425 	mov	@r0,ar2
      0001C5                        426 00127$:
      0001C5 E5*00            [12]  427 	mov	a,_bp
      0001C7 24 04            [12]  428 	add	a,#0x04
      0001C9 F8               [12]  429 	mov	r0,a
      0001CA 86 82            [24]  430 	mov	dpl,@r0
      0001CC 08               [12]  431 	inc	r0
      0001CD 86 83            [24]  432 	mov	dph,@r0
      0001CF 08               [12]  433 	inc	r0
      0001D0 86 F0            [24]  434 	mov	b,@r0
      0001D2 12r00r00         [24]  435 	lcall	__gptrget
      0001D5 FE               [12]  436 	mov	r6,a
      0001D6 33               [12]  437 	rlc	a
      0001D7 95 E0            [12]  438 	subb	a,acc
      0001D9 FD               [12]  439 	mov	r5,a
      0001DA 8E 82            [24]  440 	mov	dpl,r6
      0001DC 8D 83            [24]  441 	mov	dph,r5
      0001DE C0*00            [24]  442 	push	bits
      0001E0 12r00r00         [24]  443 	lcall	_isdigit
      0001E3 E5 82            [12]  444 	mov	a,dpl
      0001E5 85 83 F0         [24]  445 	mov	b,dph
      0001E8 D0*00            [24]  446 	pop	bits
      0001EA 45 F0            [12]  447 	orl	a,b
      0001EC 70 03            [24]  448 	jnz	00185$
      0001EE 02r02rD4         [24]  449 	ljmp	00147$
      0001F1                        450 00185$:
                                    451 ;	_atof.c:66: value+=(*s-'0')*fraction;
      0001F1 E5*00            [12]  452 	mov	a,_bp
      0001F3 24 04            [12]  453 	add	a,#0x04
      0001F5 F8               [12]  454 	mov	r0,a
      0001F6 86 82            [24]  455 	mov	dpl,@r0
      0001F8 08               [12]  456 	inc	r0
      0001F9 86 83            [24]  457 	mov	dph,@r0
      0001FB 08               [12]  458 	inc	r0
      0001FC 86 F0            [24]  459 	mov	b,@r0
      0001FE 12r00r00         [24]  460 	lcall	__gptrget
      000201 FE               [12]  461 	mov	r6,a
      000202 A3               [24]  462 	inc	dptr
      000203 18               [12]  463 	dec	r0
      000204 18               [12]  464 	dec	r0
      000205 A6 82            [24]  465 	mov	@r0,dpl
      000207 08               [12]  466 	inc	r0
      000208 A6 83            [24]  467 	mov	@r0,dph
      00020A EE               [12]  468 	mov	a,r6
      00020B 33               [12]  469 	rlc	a
      00020C 95 E0            [12]  470 	subb	a,acc
      00020E FD               [12]  471 	mov	r5,a
      00020F EE               [12]  472 	mov	a,r6
      000210 24 D0            [12]  473 	add	a,#0xD0
      000212 F5 82            [12]  474 	mov	dpl,a
      000214 ED               [12]  475 	mov	a,r5
      000215 34 FF            [12]  476 	addc	a,#0xFF
      000217 F5 83            [12]  477 	mov	dph,a
      000219 C0*00            [24]  478 	push	bits
      00021B 12r00r00         [24]  479 	lcall	___sint2fs
      00021E AC 82            [24]  480 	mov	r4,dpl
      000220 AD 83            [24]  481 	mov	r5,dph
      000222 AE F0            [24]  482 	mov	r6,b
      000224 FF               [12]  483 	mov	r7,a
      000225 D0*00            [24]  484 	pop	bits
      000227 C0*00            [24]  485 	push	bits
      000229 E5*00            [12]  486 	mov	a,_bp
      00022B 24 0C            [12]  487 	add	a,#0x0c
      00022D F8               [12]  488 	mov	r0,a
      00022E E6               [12]  489 	mov	a,@r0
      00022F C0 E0            [24]  490 	push	acc
      000231 08               [12]  491 	inc	r0
      000232 E6               [12]  492 	mov	a,@r0
      000233 C0 E0            [24]  493 	push	acc
      000235 08               [12]  494 	inc	r0
      000236 E6               [12]  495 	mov	a,@r0
      000237 C0 E0            [24]  496 	push	acc
      000239 08               [12]  497 	inc	r0
      00023A E6               [12]  498 	mov	a,@r0
      00023B C0 E0            [24]  499 	push	acc
      00023D 8C 82            [24]  500 	mov	dpl,r4
      00023F 8D 83            [24]  501 	mov	dph,r5
      000241 8E F0            [24]  502 	mov	b,r6
      000243 EF               [12]  503 	mov	a,r7
      000244 12r00r00         [24]  504 	lcall	___fsmul
      000247 AC 82            [24]  505 	mov	r4,dpl
      000249 AD 83            [24]  506 	mov	r5,dph
      00024B AE F0            [24]  507 	mov	r6,b
      00024D FF               [12]  508 	mov	r7,a
      00024E E5 81            [12]  509 	mov	a,sp
      000250 24 FC            [12]  510 	add	a,#0xfc
      000252 F5 81            [12]  511 	mov	sp,a
      000254 D0*00            [24]  512 	pop	bits
      000256 C0*00            [24]  513 	push	bits
      000258 C0 04            [24]  514 	push	ar4
      00025A C0 05            [24]  515 	push	ar5
      00025C C0 06            [24]  516 	push	ar6
      00025E C0 07            [24]  517 	push	ar7
      000260 E5*00            [12]  518 	mov	a,_bp
      000262 24 08            [12]  519 	add	a,#0x08
      000264 F8               [12]  520 	mov	r0,a
      000265 86 82            [24]  521 	mov	dpl,@r0
      000267 08               [12]  522 	inc	r0
      000268 86 83            [24]  523 	mov	dph,@r0
      00026A 08               [12]  524 	inc	r0
      00026B 86 F0            [24]  525 	mov	b,@r0
      00026D 08               [12]  526 	inc	r0
      00026E E6               [12]  527 	mov	a,@r0
      00026F 12r00r00         [24]  528 	lcall	___fsadd
      000272 AC 82            [24]  529 	mov	r4,dpl
      000274 AD 83            [24]  530 	mov	r5,dph
      000276 AE F0            [24]  531 	mov	r6,b
      000278 FF               [12]  532 	mov	r7,a
      000279 E5 81            [12]  533 	mov	a,sp
      00027B 24 FC            [12]  534 	add	a,#0xfc
      00027D F5 81            [12]  535 	mov	sp,a
      00027F D0*00            [24]  536 	pop	bits
      000281 E5*00            [12]  537 	mov	a,_bp
      000283 24 08            [12]  538 	add	a,#0x08
      000285 F8               [12]  539 	mov	r0,a
      000286 A6 04            [24]  540 	mov	@r0,ar4
      000288 08               [12]  541 	inc	r0
      000289 A6 05            [24]  542 	mov	@r0,ar5
      00028B 08               [12]  543 	inc	r0
      00028C A6 06            [24]  544 	mov	@r0,ar6
      00028E 08               [12]  545 	inc	r0
      00028F A6 07            [24]  546 	mov	@r0,ar7
                                    547 ;	_atof.c:67: fraction*=0.1;
      000291 C0*00            [24]  548 	push	bits
      000293 E5*00            [12]  549 	mov	a,_bp
      000295 24 0C            [12]  550 	add	a,#0x0c
      000297 F8               [12]  551 	mov	r0,a
      000298 E6               [12]  552 	mov	a,@r0
      000299 C0 E0            [24]  553 	push	acc
      00029B 08               [12]  554 	inc	r0
      00029C E6               [12]  555 	mov	a,@r0
      00029D C0 E0            [24]  556 	push	acc
      00029F 08               [12]  557 	inc	r0
      0002A0 E6               [12]  558 	mov	a,@r0
      0002A1 C0 E0            [24]  559 	push	acc
      0002A3 08               [12]  560 	inc	r0
      0002A4 E6               [12]  561 	mov	a,@r0
      0002A5 C0 E0            [24]  562 	push	acc
      0002A7 90 CC CD         [24]  563 	mov	dptr,#0xCCCD
      0002AA 75 F0 CC         [24]  564 	mov	b,#0xCC
      0002AD 74 3D            [12]  565 	mov	a,#0x3D
      0002AF 12r00r00         [24]  566 	lcall	___fsmul
      0002B2 AC 82            [24]  567 	mov	r4,dpl
      0002B4 AD 83            [24]  568 	mov	r5,dph
      0002B6 AE F0            [24]  569 	mov	r6,b
      0002B8 FF               [12]  570 	mov	r7,a
      0002B9 E5 81            [12]  571 	mov	a,sp
      0002BB 24 FC            [12]  572 	add	a,#0xfc
      0002BD F5 81            [12]  573 	mov	sp,a
      0002BF D0*00            [24]  574 	pop	bits
      0002C1 E5*00            [12]  575 	mov	a,_bp
      0002C3 24 0C            [12]  576 	add	a,#0x0c
      0002C5 F8               [12]  577 	mov	r0,a
      0002C6 A6 04            [24]  578 	mov	@r0,ar4
      0002C8 08               [12]  579 	inc	r0
      0002C9 A6 05            [24]  580 	mov	@r0,ar5
      0002CB 08               [12]  581 	inc	r0
      0002CC A6 06            [24]  582 	mov	@r0,ar6
      0002CE 08               [12]  583 	inc	r0
      0002CF A6 07            [24]  584 	mov	@r0,ar7
                                    585 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
      0002D1 02r01rC5         [24]  586 	ljmp	00127$
      0002D4                        587 00147$:
      0002D4 E5*00            [12]  588 	mov	a,_bp
      0002D6 24 04            [12]  589 	add	a,#0x04
      0002D8 F8               [12]  590 	mov	r0,a
      0002D9 86 05            [24]  591 	mov	ar5,@r0
      0002DB 08               [12]  592 	inc	r0
      0002DC 86 03            [24]  593 	mov	ar3,@r0
      0002DE 08               [12]  594 	inc	r0
      0002DF 86 02            [24]  595 	mov	ar2,@r0
      0002E1                        596 00112$:
                                    597 ;	_atof.c:72: if (toupper(*s)=='E')
      0002E1 8D 82            [24]  598 	mov	dpl,r5
      0002E3 8B 83            [24]  599 	mov	dph,r3
      0002E5 8A F0            [24]  600 	mov	b,r2
      0002E7 12r00r00         [24]  601 	lcall	__gptrget
      0002EA FF               [12]  602 	mov	r7,a
      0002EB 33               [12]  603 	rlc	a
      0002EC 95 E0            [12]  604 	subb	a,acc
      0002EE FE               [12]  605 	mov	r6,a
      0002EF 8F 82            [24]  606 	mov	dpl,r7
      0002F1 8E 83            [24]  607 	mov	dph,r6
      0002F3 C0 05            [24]  608 	push	ar5
      0002F5 C0 03            [24]  609 	push	ar3
      0002F7 C0 02            [24]  610 	push	ar2
      0002F9 C0*00            [24]  611 	push	bits
      0002FB 12r00r00         [24]  612 	lcall	_toupper
      0002FE AE 82            [24]  613 	mov	r6,dpl
      000300 AF 83            [24]  614 	mov	r7,dph
      000302 D0*00            [24]  615 	pop	bits
      000304 D0 02            [24]  616 	pop	ar2
      000306 D0 03            [24]  617 	pop	ar3
      000308 D0 05            [24]  618 	pop	ar5
      00030A BE 45 05         [24]  619 	cjne	r6,#0x45,00186$
      00030D BF 00 02         [24]  620 	cjne	r7,#0x00,00186$
      000310 80 03            [24]  621 	sjmp	00187$
      000312                        622 00186$:
      000312 02r03rC4         [24]  623 	ljmp	00120$
      000315                        624 00187$:
                                    625 ;	_atof.c:74: s++;
      000315 0D               [12]  626 	inc	r5
      000316 BD 00 01         [24]  627 	cjne	r5,#0x00,00188$
      000319 0B               [12]  628 	inc	r3
      00031A                        629 00188$:
                                    630 ;	_atof.c:75: iexp=(signed char)atoi(s);
      00031A 8D 82            [24]  631 	mov	dpl,r5
      00031C 8B 83            [24]  632 	mov	dph,r3
      00031E 8A F0            [24]  633 	mov	b,r2
      000320 C0*00            [24]  634 	push	bits
      000322 12r00r00         [24]  635 	lcall	_atoi
      000325 AE 82            [24]  636 	mov	r6,dpl
      000327 AF 83            [24]  637 	mov	r7,dph
      000329 D0*00            [24]  638 	pop	bits
                                    639 ;	_atof.c:77: while(iexp!=0)
      00032B                        640 00116$:
      00032B EE               [12]  641 	mov	a,r6
      00032C 70 03            [24]  642 	jnz	00189$
      00032E 02r03rC4         [24]  643 	ljmp	00120$
      000331                        644 00189$:
                                    645 ;	_atof.c:79: if(iexp<0)
      000331 EE               [12]  646 	mov	a,r6
      000332 30 E7 47         [24]  647 	jnb	acc.7,00114$
                                    648 ;	_atof.c:81: value*=0.1;
      000335 C0 06            [24]  649 	push	ar6
      000337 C0*00            [24]  650 	push	bits
      000339 E5*00            [12]  651 	mov	a,_bp
      00033B 24 08            [12]  652 	add	a,#0x08
      00033D F8               [12]  653 	mov	r0,a
      00033E E6               [12]  654 	mov	a,@r0
      00033F C0 E0            [24]  655 	push	acc
      000341 08               [12]  656 	inc	r0
      000342 E6               [12]  657 	mov	a,@r0
      000343 C0 E0            [24]  658 	push	acc
      000345 08               [12]  659 	inc	r0
      000346 E6               [12]  660 	mov	a,@r0
      000347 C0 E0            [24]  661 	push	acc
      000349 08               [12]  662 	inc	r0
      00034A E6               [12]  663 	mov	a,@r0
      00034B C0 E0            [24]  664 	push	acc
      00034D 90 CC CD         [24]  665 	mov	dptr,#0xCCCD
      000350 75 F0 CC         [24]  666 	mov	b,#0xCC
      000353 74 3D            [12]  667 	mov	a,#0x3D
      000355 12r00r00         [24]  668 	lcall	___fsmul
      000358 AB 82            [24]  669 	mov	r3,dpl
      00035A AC 83            [24]  670 	mov	r4,dph
      00035C AD F0            [24]  671 	mov	r5,b
      00035E FF               [12]  672 	mov	r7,a
      00035F E5 81            [12]  673 	mov	a,sp
      000361 24 FC            [12]  674 	add	a,#0xfc
      000363 F5 81            [12]  675 	mov	sp,a
      000365 D0*00            [24]  676 	pop	bits
      000367 D0 06            [24]  677 	pop	ar6
      000369 E5*00            [12]  678 	mov	a,_bp
      00036B 24 08            [12]  679 	add	a,#0x08
      00036D F8               [12]  680 	mov	r0,a
      00036E A6 03            [24]  681 	mov	@r0,ar3
      000370 08               [12]  682 	inc	r0
      000371 A6 04            [24]  683 	mov	@r0,ar4
      000373 08               [12]  684 	inc	r0
      000374 A6 05            [24]  685 	mov	@r0,ar5
      000376 08               [12]  686 	inc	r0
      000377 A6 07            [24]  687 	mov	@r0,ar7
                                    688 ;	_atof.c:82: iexp++;
      000379 0E               [12]  689 	inc	r6
      00037A 80 AF            [24]  690 	sjmp	00116$
      00037C                        691 00114$:
                                    692 ;	_atof.c:86: value*=10.0;
      00037C C0 06            [24]  693 	push	ar6
      00037E C0*00            [24]  694 	push	bits
      000380 E5*00            [12]  695 	mov	a,_bp
      000382 24 08            [12]  696 	add	a,#0x08
      000384 F8               [12]  697 	mov	r0,a
      000385 E6               [12]  698 	mov	a,@r0
      000386 C0 E0            [24]  699 	push	acc
      000388 08               [12]  700 	inc	r0
      000389 E6               [12]  701 	mov	a,@r0
      00038A C0 E0            [24]  702 	push	acc
      00038C 08               [12]  703 	inc	r0
      00038D E6               [12]  704 	mov	a,@r0
      00038E C0 E0            [24]  705 	push	acc
      000390 08               [12]  706 	inc	r0
      000391 E6               [12]  707 	mov	a,@r0
      000392 C0 E0            [24]  708 	push	acc
      000394 90 00 00         [24]  709 	mov	dptr,#0x0000
      000397 75 F0 20         [24]  710 	mov	b,#0x20
      00039A 74 41            [12]  711 	mov	a,#0x41
      00039C 12r00r00         [24]  712 	lcall	___fsmul
      00039F AB 82            [24]  713 	mov	r3,dpl
      0003A1 AC 83            [24]  714 	mov	r4,dph
      0003A3 AD F0            [24]  715 	mov	r5,b
      0003A5 FF               [12]  716 	mov	r7,a
      0003A6 E5 81            [12]  717 	mov	a,sp
      0003A8 24 FC            [12]  718 	add	a,#0xfc
      0003AA F5 81            [12]  719 	mov	sp,a
      0003AC D0*00            [24]  720 	pop	bits
      0003AE D0 06            [24]  721 	pop	ar6
      0003B0 E5*00            [12]  722 	mov	a,_bp
      0003B2 24 08            [12]  723 	add	a,#0x08
      0003B4 F8               [12]  724 	mov	r0,a
      0003B5 A6 03            [24]  725 	mov	@r0,ar3
      0003B7 08               [12]  726 	inc	r0
      0003B8 A6 04            [24]  727 	mov	@r0,ar4
      0003BA 08               [12]  728 	inc	r0
      0003BB A6 05            [24]  729 	mov	@r0,ar5
      0003BD 08               [12]  730 	inc	r0
      0003BE A6 07            [24]  731 	mov	@r0,ar7
                                    732 ;	_atof.c:87: iexp--;
      0003C0 1E               [12]  733 	dec	r6
      0003C1 02r03r2B         [24]  734 	ljmp	00116$
      0003C4                        735 00120$:
                                    736 ;	_atof.c:93: if(sign) value*=-1.0;
      0003C4 30*00 12         [24]  737 	jnb	b0,00122$
      0003C7 E5*00            [12]  738 	mov	a,_bp
      0003C9 24 08            [12]  739 	add	a,#0x08
      0003CB F8               [12]  740 	mov	r0,a
      0003CC E6               [12]  741 	mov	a,@r0
      0003CD F6               [12]  742 	mov	@r0,a
      0003CE 08               [12]  743 	inc	r0
      0003CF E6               [12]  744 	mov	a,@r0
      0003D0 F6               [12]  745 	mov	@r0,a
      0003D1 08               [12]  746 	inc	r0
      0003D2 E6               [12]  747 	mov	a,@r0
      0003D3 F6               [12]  748 	mov	@r0,a
      0003D4 08               [12]  749 	inc	r0
      0003D5 E6               [12]  750 	mov	a,@r0
      0003D6 B2 E7            [12]  751 	cpl	acc.7
      0003D8 F6               [12]  752 	mov	@r0,a
      0003D9                        753 00122$:
                                    754 ;	_atof.c:94: return (value);
      0003D9 E5*00            [12]  755 	mov	a,_bp
      0003DB 24 08            [12]  756 	add	a,#0x08
      0003DD F8               [12]  757 	mov	r0,a
      0003DE 86 82            [24]  758 	mov	dpl,@r0
      0003E0 08               [12]  759 	inc	r0
      0003E1 86 83            [24]  760 	mov	dph,@r0
      0003E3 08               [12]  761 	inc	r0
      0003E4 86 F0            [24]  762 	mov	b,@r0
      0003E6 08               [12]  763 	inc	r0
      0003E7 E6               [12]  764 	mov	a,@r0
      0003E8 85*00 81         [24]  765 	mov	sp,_bp
      0003EB D0*00            [24]  766 	pop	_bp
      0003ED 22               [24]  767 	ret
                                    768 	.area CSEG    (CODE)
                                    769 	.area CONST   (CODE)
                                    770 	.area XINIT   (CODE)
                                    771 	.area CABS    (ABS,CODE)
