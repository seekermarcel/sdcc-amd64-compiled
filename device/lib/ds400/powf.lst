                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:28 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module powf
                                      7 	.optsdcc -mds400 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _logf
                                     35 	.globl _expf
                                     36 	.globl _powf_PARM_2
                                     37 	.globl _powf
                                     38 ;--------------------------------------------------------
                                     39 ; special function registers
                                     40 ;--------------------------------------------------------
                                     41 ;--------------------------------------------------------
                                     42 ; special function bits
                                     43 ;--------------------------------------------------------
                                     44 ;--------------------------------------------------------
                                     45 ; overlayable register banks
                                     46 ;--------------------------------------------------------
                                     47 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         48 	.ds 8
                                     49 	.area REG_BANK_3	(REL,OVR,DATA)
      000000                         50 	.ds 8
                                     51 ;--------------------------------------------------------
                                     52 ; internal ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area DSEG    (DATA)
                                     55 ;--------------------------------------------------------
                                     56 ; overlayable items in internal ram 
                                     57 ;--------------------------------------------------------
                                     58 ;--------------------------------------------------------
                                     59 ; indirectly addressable internal ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area ISEG    (DATA)
                                     62 ;--------------------------------------------------------
                                     63 ; absolute internal ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area IABS    (ABS,DATA)
                                     66 	.area IABS    (ABS,DATA)
                                     67 ;--------------------------------------------------------
                                     68 ; bit data
                                     69 ;--------------------------------------------------------
                                     70 	.area BSEG    (BIT)
                                     71 ;--------------------------------------------------------
                                     72 ; paged external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area PSEG    (PAG,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XSEG    (XDATA)
      000000                         79 _powf_PARM_2:
      000000                         80 	.ds 4
                                     81 ;--------------------------------------------------------
                                     82 ; absolute external ram data
                                     83 ;--------------------------------------------------------
                                     84 	.area XABS    (ABS,XDATA)
                                     85 ;--------------------------------------------------------
                                     86 ; external initialized ram data
                                     87 ;--------------------------------------------------------
                                     88 	.area XISEG   (XDATA)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'powf'
                                    107 ;------------------------------------------------------------
                                    108 ;y                         Allocated with name '_powf_PARM_2'
                                    109 ;x                         Allocated to registers r2 r3 r4 r5 
                                    110 ;------------------------------------------------------------
                                    111 ;	powf.c:35: float powf(float x, float y)
                                    112 ;	-----------------------------------------
                                    113 ;	 function powf
                                    114 ;	-----------------------------------------
      000000                        115 _powf:
                           000002   116 	ar2 = 0x02
                           000003   117 	ar3 = 0x03
                           000004   118 	ar4 = 0x04
                           000005   119 	ar5 = 0x05
                           000006   120 	ar6 = 0x06
                           000007   121 	ar7 = 0x07
                           000000   122 	ar0 = 0x00
                           000001   123 	ar1 = 0x01
      000000 AA 82            [ 8]  124 	mov	r2,dpl
      000002 AB 83            [ 8]  125 	mov	r3,dph
      000004 AC 93            [ 8]  126 	mov	r4,dpx
      000006 AD F0            [ 8]  127 	mov	r5,b
                                    128 ;	powf.c:37: if(y == 0.0) return 1.0;
      000008 90s00r00r00      [12]  129 	mov	dptr,#_powf_PARM_2
      00000C E0               [ 8]  130 	movx	a,@dptr
      00000D F5 F0            [ 8]  131 	mov	b,a
      00000F A3               [12]  132 	inc	dptr
      000010 E0               [ 8]  133 	movx	a,@dptr
      000011 42 F0            [ 8]  134 	orl	b,a
      000013 A3               [12]  135 	inc	dptr
      000014 E0               [ 8]  136 	movx	a,@dptr
      000015 42 F0            [ 8]  137 	orl	b,a
      000017 A3               [12]  138 	inc	dptr
      000018 E0               [ 8]  139 	movx	a,@dptr
      000019 54 7F            [ 8]  140 	anl	a,#0x7F
      00001B 45 F0            [ 8]  141 	orl	a,b
      00001D 70 0E            [12]  142 	jnz  00102$
      00001F                        143 00118$:
      00001F 90 00 00 00      [12]  144 	mov  dptr,#0x0000
      000023 75 93 80         [12]  145 	mov	dpx,#0x80
      000026 75 F0 3F         [12]  146 	mov	b,#0x3F
      000029 02s00r00rEF      [16]  147 	ljmp	00107$
      00002D                        148 00102$:
                                    149 ;	powf.c:38: if(y == 1.0) return x;
                                    150 ;	genAssign: resultIsFar = TRUE
      00002D 90s00r00r00      [12]  151 	mov	dptr,#___fseq_PARM_2
      000031 E4               [ 4]  152 	clr	a
      000032 F0               [ 8]  153 	movx	@dptr,a
      000033 A3               [12]  154 	inc	dptr
      000034 E4               [ 4]  155 	clr	a
      000035 F0               [ 8]  156 	movx	@dptr,a
      000036 A3               [12]  157 	inc	dptr
      000037 74 80            [ 8]  158 	mov	a,#0x80
      000039 F0               [ 8]  159 	movx	@dptr,a
      00003A A3               [12]  160 	inc	dptr
      00003B 74 3F            [ 8]  161 	mov	a,#0x3F
      00003D F0               [ 8]  162 	movx	@dptr,a
      00003E C0 02            [ 8]  163 	push	ar2
      000040 C0 03            [ 8]  164 	push	ar3
      000042 C0 04            [ 8]  165 	push	ar4
      000044 C0 05            [ 8]  166 	push	ar5
      000046 05 86            [ 8]  167 	inc	dps
      000048 90s00r00r00      [12]  168 	mov	dptr,#_powf_PARM_2
      00004C E0               [ 8]  169 	movx	a,@dptr
      00004D F5 82            [ 8]  170 	mov	dpl,a
      00004F A3               [12]  171 	inc	dptr
      000050 E0               [ 8]  172 	movx	a,@dptr
      000051 F5 83            [ 8]  173 	mov	dph,a
      000053 A3               [12]  174 	inc	dptr
      000054 E0               [ 8]  175 	movx	a,@dptr
      000055 F5 93            [ 8]  176 	mov	dpx,a
      000057 A3               [12]  177 	inc	dptr
      000058 E0               [ 8]  178 	movx	a,@dptr
      000059 F5 F0            [ 8]  179 	mov	b,a
      00005B 75 86 00         [12]  180 	mov	dps,#0
      00005E 12s00r00r00      [16]  181 	lcall	___fseq
      000062 D0 05            [ 8]  182 	pop	ar5
      000064 D0 04            [ 8]  183 	pop	ar4
      000066 D0 03            [ 8]  184 	pop	ar3
      000068 D0 02            [ 8]  185 	pop	ar2
      00006A E5 82            [ 8]  186 	mov	a,dpl
      00006C 60 0C            [12]  187 	jz  00104$
      00006E                        188 00119$:
      00006E 8A 82            [ 8]  189 	mov	dpl,r2
      000070 8B 83            [ 8]  190 	mov	dph,r3
      000072 8C 93            [ 8]  191 	mov	dpx,r4
      000074 8D F0            [ 8]  192 	mov	b,r5
      000076 02s00r00rEF      [16]  193 	ljmp	00107$
      00007A                        194 00104$:
                                    195 ;	powf.c:39: if(x <= 0.0) return 0.0;
                                    196 ;	genAssign: resultIsFar = TRUE
      00007A 90s00r00r00      [12]  197 	mov	dptr,#___fsgt_PARM_2
      00007E E4               [ 4]  198 	clr	a
      00007F F0               [ 8]  199 	movx	@dptr,a
      000080 A3               [12]  200 	inc	dptr
      000081 F0               [ 8]  201 	movx	@dptr,a
      000082 A3               [12]  202 	inc	dptr
      000083 F0               [ 8]  203 	movx	@dptr,a
      000084 A3               [12]  204 	inc	dptr
      000085 F0               [ 8]  205 	movx	@dptr,a
      000086 C0 02            [ 8]  206 	push	ar2
      000088 C0 03            [ 8]  207 	push	ar3
      00008A C0 04            [ 8]  208 	push	ar4
      00008C C0 05            [ 8]  209 	push	ar5
      00008E 8A 82            [ 8]  210 	mov	dpl,r2
      000090 8B 83            [ 8]  211 	mov	dph,r3
      000092 8C 93            [ 8]  212 	mov	dpx,r4
      000094 8D F0            [ 8]  213 	mov	b,r5
      000096 12s00r00r00      [16]  214 	lcall	___fsgt
      00009A D0 05            [ 8]  215 	pop	ar5
      00009C D0 04            [ 8]  216 	pop	ar4
      00009E D0 03            [ 8]  217 	pop	ar3
      0000A0 D0 02            [ 8]  218 	pop	ar2
      0000A2 E5 82            [ 8]  219 	mov	a,dpl
      0000A4 70 09            [12]  220 	jnz  00106$
      0000A6                        221 00120$:
      0000A6 90 00 00 00      [12]  222 	mov  dptr,#0x0000
      0000AA 75 F0 00         [12]  223 	mov	b,#0x00
      0000AD 80 40            [12]  224 	sjmp 00107$
      0000AF                        225 00106$:
                                    226 ;	powf.c:40: return expf(logf(x) * y);
      0000AF 8A 82            [ 8]  227 	mov	dpl,r2
      0000B1 8B 83            [ 8]  228 	mov	dph,r3
      0000B3 8C 93            [ 8]  229 	mov	dpx,r4
      0000B5 8D F0            [ 8]  230 	mov	b,r5
      0000B7 12s00r00r00      [16]  231 	lcall	_logf
      0000BB AA 82            [ 8]  232 	mov	r2,dpl
      0000BD AB 83            [ 8]  233 	mov	r3,dph
      0000BF AC 93            [ 8]  234 	mov	r4,dpx
      0000C1 AD F0            [ 8]  235 	mov	r5,b
      0000C3 90s00r00r00      [12]  236 	mov	dptr,#_powf_PARM_2
                                    237 ;	genAssign: resultIsFar = TRUE
      0000C7 75 86 21         [12]  238 	mov	dps,#0x21
      0000CA 90s00r00r00      [12]  239 	mov	dptr,#___fsmul_PARM_2
      0000CE E0               [ 8]  240 	movx	a,@dptr
      0000CF F0               [ 8]  241 	movx	@dptr,a
      0000D0 A3               [12]  242 	inc	dptr
      0000D1 A3               [12]  243 	inc	dptr
      0000D2 E0               [ 8]  244 	movx	a,@dptr
      0000D3 F0               [ 8]  245 	movx	@dptr,a
      0000D4 A3               [12]  246 	inc	dptr
      0000D5 A3               [12]  247 	inc	dptr
      0000D6 E0               [ 8]  248 	movx	a,@dptr
      0000D7 F0               [ 8]  249 	movx	@dptr,a
      0000D8 A3               [12]  250 	inc	dptr
      0000D9 A3               [12]  251 	inc	dptr
      0000DA E0               [ 8]  252 	movx	a,@dptr
      0000DB F0               [ 8]  253 	movx	@dptr,a
      0000DC 75 86 00         [12]  254 	mov	dps,#0
      0000DF 8A 82            [ 8]  255 	mov	dpl,r2
      0000E1 8B 83            [ 8]  256 	mov	dph,r3
      0000E3 8C 93            [ 8]  257 	mov	dpx,r4
      0000E5 8D F0            [ 8]  258 	mov	b,r5
      0000E7 12s00r00r00      [16]  259 	lcall	___fsmul
      0000EB 12s00r00r00      [16]  260 	lcall	_expf
      0000EF                        261 00107$:
      0000EF 22               [16]  262 	ret
                                    263 	.area CSEG    (CODE)
                                    264 	.area CONST   (CODE)
                                    265 	.area XINIT   (CODE)
                                    266 	.area CABS    (ABS,CODE)
