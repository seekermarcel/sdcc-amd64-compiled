                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:15:45 2022
                              5 ;--------------------------------------------------------
                              6 	.hd64
                              7 	.module _malloc
                              8 	.optsdcc -mz180
                              9 	
                             10 ;--------------------------------------------------------
                             11 ; Public variables in this module
                             12 ;--------------------------------------------------------
                             13 	.globl __sdcc_heap_init
                             14 	.globl _malloc
                             15 ;--------------------------------------------------------
                             16 ; special function registers
                             17 ;--------------------------------------------------------
                             18 ;--------------------------------------------------------
                             19 ; ram data
                             20 ;--------------------------------------------------------
                             21 	.area _DATA
                             22 ;--------------------------------------------------------
                             23 ; ram data
                             24 ;--------------------------------------------------------
                             25 	.area _INITIALIZED
                             26 ;--------------------------------------------------------
                             27 ; absolute external ram data
                             28 ;--------------------------------------------------------
                             29 	.area _DABS (ABS)
                             30 ;--------------------------------------------------------
                             31 ; global & static initialisations
                             32 ;--------------------------------------------------------
                             33 	.area _HOME
                             34 	.area _GSINIT
                             35 	.area _GSFINAL
                             36 	.area _GSINIT
                             37 ;--------------------------------------------------------
                             38 ; Home
                             39 ;--------------------------------------------------------
                             40 	.area _HOME
                             41 	.area _HOME
                             42 ;--------------------------------------------------------
                             43 ; code
                             44 ;--------------------------------------------------------
                             45 	.area _CODE
                             46 ;../_malloc.c:59: _sdcc_heap_init(void)
                             47 ;	---------------------------------
                             48 ; Function _sdcc_heap_init
                             49 ; ---------------------------------
   0000                      50 __sdcc_heap_init::
                             51 ;../_malloc.c:61: MEMHEADER *pbase = &_sdcc_heap_start;
                             52 ;../_malloc.c:62: unsigned int size = &_sdcc_heap_end - (char *)pbase;
   0000 21r00r00      [ 9]   53 	ld	hl,#__sdcc_heap_end+0
   0003 11r00r00      [ 9]   54 	ld	de,#__sdcc_heap_start
   0006 BF            [ 4]   55 	cp	a, a
   0007 ED 52         [10]   56 	sbc	hl, de
                             57 ;../_malloc.c:64: pbase->next = (MEMHEADER *)((char *)pbase + size - HEADER_SIZE);
   0009 19            [ 7]   58 	add	hl,de
   000A 7D            [ 4]   59 	ld	a,l
   000B C6 FA         [ 6]   60 	add	a,#0xFA
   000D 5F            [ 4]   61 	ld	e,a
   000E 7C            [ 4]   62 	ld	a,h
   000F CE FF         [ 6]   63 	adc	a,#0xFF
   0011 57            [ 4]   64 	ld	d,a
   0012 ED 53r00r00   [19]   65 	ld	(__sdcc_heap_start), de
                             66 ;../_malloc.c:65: pbase->next->next = NULL; //And mark it as last
   0016 3E 00         [ 6]   67 	ld	a,#0x00
   0018 12            [ 7]   68 	ld	(de),a
   0019 13            [ 4]   69 	inc	de
   001A 3E 00         [ 6]   70 	ld	a,#0x00
   001C 12            [ 7]   71 	ld	(de),a
                             72 ;../_malloc.c:66: pbase->prev       = NULL; //and mark first as first
   001D 21 00 00      [ 9]   73 	ld	hl,#0x0000
   0020 22r02r00      [16]   74 	ld	((__sdcc_heap_start + 0x0002)), hl
                             75 ;../_malloc.c:67: pbase->len        = 0;    //Empty and ready.
   0023 2E 00         [ 6]   76 	ld	l, #0x00
   0025 22r04r00      [16]   77 	ld	((__sdcc_heap_start + 0x0004)), hl
   0028 C9            [ 9]   78 	ret
                             79 ;../_malloc.c:71: malloc (unsigned int size)
                             80 ;	---------------------------------
                             81 ; Function malloc
                             82 ; ---------------------------------
   0029                      83 _malloc::
   0029 DD E5         [14]   84 	push	ix
   002B DD 21 00 00   [12]   85 	ld	ix,#0
   002F DD 39         [10]   86 	add	ix,sp
   0031 3B            [ 4]   87 	dec	sp
   0032 3B            [ 4]   88 	dec	sp
                             89 ;../_malloc.c:77: if (size>(0xFFFF-HEADER_SIZE))
   0033 3E F9         [ 6]   90 	ld	a,#0xF9
   0035 DD BE 04      [14]   91 	cp	a, 4 (ix)
   0038 3E FF         [ 6]   92 	ld	a,#0xFF
   003A DD 9E 05      [14]   93 	sbc	a, 5 (ix)
   003D 30 06         [ 8]   94 	jr	NC,00102$
                             95 ;../_malloc.c:79: return NULL; //To prevent overflow in next line
   003F 21 00 00      [ 9]   96 	ld	hl,#0x0000
   0042 C3r2Fr01      [ 9]   97 	jp	00117$
   0045                      98 00102$:
                             99 ;../_malloc.c:82: size += HEADER_SIZE; //We need a memory for header too
   0045 DD 7E 04      [14]  100 	ld	a,4 (ix)
   0048 C6 06         [ 6]  101 	add	a, #0x06
   004A DD 77 04      [15]  102 	ld	4 (ix),a
   004D DD 7E 05      [14]  103 	ld	a,5 (ix)
   0050 CE 00         [ 6]  104 	adc	a, #0x00
   0052 DD 77 05      [15]  105 	ld	5 (ix),a
                            106 ;../_malloc.c:83: current_header = &_sdcc_heap_start;
   0055 DD 36 FEr00   [15]  107 	ld	-2 (ix),#<(__sdcc_heap_start)
   0059 DD 36 FFs00   [15]  108 	ld	-1 (ix),#>(__sdcc_heap_start)
                            109 ;../_malloc.c:132: }
   005D ED 57         [ 6]  110 	ld	a,i
   005F F3            [ 3]  111 	di
   0060 F5            [11]  112 	push	af
                            113 ;../_malloc.c:87: while (1)
   0061                     114 00108$:
                            115 ;../_malloc.c:96: if ((((unsigned int)current_header->next) -
   0061 DD 6E FE      [14]  116 	ld	l,-2 (ix)
   0064 DD 66 FF      [14]  117 	ld	h,-1 (ix)
   0067 5E            [ 6]  118 	ld	e,(hl)
   0068 23            [ 4]  119 	inc	hl
   0069 56            [ 6]  120 	ld	d,(hl)
   006A 6B            [ 4]  121 	ld	l, e
   006B 62            [ 4]  122 	ld	h, d
                            123 ;../_malloc.c:97: ((unsigned int)current_header) -
   006C DD 4E FE      [14]  124 	ld	c,-2 (ix)
   006F DD 46 FF      [14]  125 	ld	b,-1 (ix)
   0072 7D            [ 4]  126 	ld	a,l
   0073 91            [ 4]  127 	sub	a, c
   0074 4F            [ 4]  128 	ld	c,a
   0075 7C            [ 4]  129 	ld	a,h
   0076 98            [ 4]  130 	sbc	a, b
   0077 47            [ 4]  131 	ld	b,a
                            132 ;../_malloc.c:98: current_header->len) >= size)
   0078 DD 6E FE      [14]  133 	ld	l,-2 (ix)
   007B DD 66 FF      [14]  134 	ld	h,-1 (ix)
   007E 23            [ 4]  135 	inc	hl
   007F 23            [ 4]  136 	inc	hl
   0080 23            [ 4]  137 	inc	hl
   0081 23            [ 4]  138 	inc	hl
   0082 7E            [ 6]  139 	ld	a, (hl)
   0083 23            [ 4]  140 	inc	hl
   0084 66            [ 6]  141 	ld	h,(hl)
   0085 6F            [ 4]  142 	ld	l,a
   0086 79            [ 4]  143 	ld	a,c
   0087 95            [ 4]  144 	sub	a, l
   0088 6F            [ 4]  145 	ld	l,a
   0089 78            [ 4]  146 	ld	a,b
   008A 9C            [ 4]  147 	sbc	a, h
   008B 67            [ 4]  148 	ld	h,a
   008C 7D            [ 4]  149 	ld	a,l
   008D DD 96 04      [14]  150 	sub	a, 4 (ix)
   0090 7C            [ 4]  151 	ld	a,h
   0091 DD 9E 05      [14]  152 	sbc	a, 5 (ix)
   0094 38 0E         [ 8]  153 	jr	C,00104$
                            154 ;../_malloc.c:100: ret = &current_header->mem;
   0096 DD 7E FE      [14]  155 	ld	a,-2 (ix)
   0099 C6 06         [ 6]  156 	add	a, #0x06
   009B 4F            [ 4]  157 	ld	c,a
   009C DD 7E FF      [14]  158 	ld	a,-1 (ix)
   009F CE 00         [ 6]  159 	adc	a, #0x00
   00A1 47            [ 4]  160 	ld	b,a
                            161 ;../_malloc.c:101: break;
   00A2 18 16         [ 8]  162 	jr	00109$
   00A4                     163 00104$:
                            164 ;../_malloc.c:103: current_header = current_header->next;    //else try next
   00A4 DD 73 FE      [15]  165 	ld	-2 (ix),e
   00A7 DD 72 FF      [15]  166 	ld	-1 (ix),d
                            167 ;../_malloc.c:96: if ((((unsigned int)current_header->next) -
   00AA DD 6E FE      [14]  168 	ld	l,-2 (ix)
   00AD DD 66 FF      [14]  169 	ld	h,-1 (ix)
   00B0 5E            [ 6]  170 	ld	e,(hl)
   00B1 23            [ 4]  171 	inc	hl
   00B2 56            [ 6]  172 	ld	d,(hl)
                            173 ;../_malloc.c:104: if (!current_header->next)
   00B3 7A            [ 4]  174 	ld	a,d
   00B4 B3            [ 4]  175 	or	a,e
   00B5 20 AA         [ 8]  176 	jr	NZ,00108$
                            177 ;../_malloc.c:106: ret = NULL;
   00B7 01 00 00      [ 9]  178 	ld	bc,#0x0000
                            179 ;../_malloc.c:107: break;
   00BA                     180 00109$:
                            181 ;../_malloc.c:111: if (ret)
   00BA 78            [ 4]  182 	ld	a,b
   00BB B1            [ 4]  183 	or	a,c
   00BC 28 6A         [ 8]  184 	jr	Z,00116$
                            185 ;../_malloc.c:113: if (!current_header->len)
   00BE FD 21 04 00   [12]  186 	ld	iy,#0x0004
   00C2 C5            [11]  187 	push	bc
   00C3 DD 4E FE      [14]  188 	ld	c,-2 (ix)
   00C6 DD 46 FF      [14]  189 	ld	b,-1 (ix)
   00C9 FD 09         [10]  190 	add	iy, bc
   00CB C1            [ 9]  191 	pop	bc
   00CC FD 6E 00      [14]  192 	ld	l,0 (iy)
   00CF FD 66 01      [14]  193 	ld	h,1 (iy)
   00D2 7C            [ 4]  194 	ld	a,h
   00D3 B5            [ 4]  195 	or	a,l
   00D4 20 0E         [ 8]  196 	jr	NZ,00113$
                            197 ;../_malloc.c:115: current_header->len = size; //for first allocation
   00D6 DD 7E 04      [14]  198 	ld	a,4 (ix)
   00D9 FD 77 00      [15]  199 	ld	0 (iy),a
   00DC DD 7E 05      [14]  200 	ld	a,5 (ix)
   00DF FD 77 01      [15]  201 	ld	1 (iy),a
   00E2 18 44         [ 8]  202 	jr	00116$
   00E4                     203 00113$:
                            204 ;../_malloc.c:120: new_header = (MEMHEADER * )((char *)current_header + current_header->len);
   00E4 DD 4E FE      [14]  205 	ld	c,-2 (ix)
   00E7 DD 46 FF      [14]  206 	ld	b,-1 (ix)
   00EA 09            [ 7]  207 	add	hl,bc
                            208 ;../_malloc.c:121: new_header->next = current_header->next; //and plug it into the chain
   00EB 4D            [ 4]  209 	ld	c,l
   00EC 44            [ 4]  210 	ld	b,h
   00ED 73            [ 7]  211 	ld	(hl),e
   00EE 23            [ 4]  212 	inc	hl
   00EF 72            [ 7]  213 	ld	(hl),d
                            214 ;../_malloc.c:122: new_header->prev = current_header;
   00F0 69            [ 4]  215 	ld	l, c
   00F1 60            [ 4]  216 	ld	h, b
   00F2 23            [ 4]  217 	inc	hl
   00F3 23            [ 4]  218 	inc	hl
   00F4 DD 7E FE      [14]  219 	ld	a,-2 (ix)
   00F7 77            [ 7]  220 	ld	(hl),a
   00F8 23            [ 4]  221 	inc	hl
   00F9 DD 7E FF      [14]  222 	ld	a,-1 (ix)
   00FC 77            [ 7]  223 	ld	(hl),a
                            224 ;../_malloc.c:123: current_header->next  = new_header;
   00FD DD 6E FE      [14]  225 	ld	l,-2 (ix)
   0100 DD 66 FF      [14]  226 	ld	h,-1 (ix)
   0103 71            [ 7]  227 	ld	(hl),c
   0104 23            [ 4]  228 	inc	hl
   0105 70            [ 7]  229 	ld	(hl),b
                            230 ;../_malloc.c:124: if (new_header->next)
   0106 69            [ 4]  231 	ld	l, c
   0107 60            [ 4]  232 	ld	h, b
   0108 7E            [ 6]  233 	ld	a, (hl)
   0109 23            [ 4]  234 	inc	hl
   010A 66            [ 6]  235 	ld	h,(hl)
   010B 6F            [ 4]  236 	ld	l,a
   010C 7A            [ 4]  237 	ld	a,d
   010D B3            [ 4]  238 	or	a,e
   010E 28 05         [ 8]  239 	jr	Z,00111$
                            240 ;../_malloc.c:126: new_header->next->prev = new_header;
   0110 23            [ 4]  241 	inc	hl
   0111 23            [ 4]  242 	inc	hl
   0112 71            [ 7]  243 	ld	(hl),c
   0113 23            [ 4]  244 	inc	hl
   0114 70            [ 7]  245 	ld	(hl),b
   0115                     246 00111$:
                            247 ;../_malloc.c:128: new_header->len  = size; //mark as used
   0115 21 04 00      [ 9]  248 	ld	hl,#0x0004
   0118 09            [ 7]  249 	add	hl,bc
   0119 DD 7E 04      [14]  250 	ld	a,4 (ix)
   011C 77            [ 7]  251 	ld	(hl),a
   011D 23            [ 4]  252 	inc	hl
   011E DD 7E 05      [14]  253 	ld	a,5 (ix)
   0121 77            [ 7]  254 	ld	(hl),a
                            255 ;../_malloc.c:129: ret = &new_header->mem;
   0122 21 06 00      [ 9]  256 	ld	hl,#0x0006
   0125 09            [ 7]  257 	add	hl,bc
   0126 4D            [ 4]  258 	ld	c, l
   0127 44            [ 4]  259 	ld	b, h
   0128                     260 00116$:
   0128 F1            [ 9]  261 	pop	af
   0129 E2r2Dr01      [ 9]  262 	jp	PO,00148$
   012C FB            [ 3]  263 	ei
   012D                     264 00148$:
                            265 ;../_malloc.c:133: return ret;
   012D 69            [ 4]  266 	ld	l, c
   012E 60            [ 4]  267 	ld	h, b
   012F                     268 00117$:
   012F DD F9         [ 7]  269 	ld	sp, ix
   0131 DD E1         [12]  270 	pop	ix
   0133 C9            [ 9]  271 	ret
                            272 	.area _CODE
                            273 	.area _INITIALIZER
                            274 	.area _CABS (ABS)
