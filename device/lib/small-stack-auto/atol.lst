                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:50 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module atol
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _atol
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; overlayable bit register bank
                                     30 ;--------------------------------------------------------
                                     31 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         32 bits:
      000000                         33 	.ds 1
                           008000    34 	b0 = bits[0]
                           008100    35 	b1 = bits[1]
                           008200    36 	b2 = bits[2]
                           008300    37 	b3 = bits[3]
                           008400    38 	b4 = bits[4]
                           008500    39 	b5 = bits[5]
                           008600    40 	b6 = bits[6]
                           008700    41 	b7 = bits[7]
                                     42 ;--------------------------------------------------------
                                     43 ; internal ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area DSEG    (DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; overlayable items in internal ram 
                                     48 ;--------------------------------------------------------
                                     49 ;--------------------------------------------------------
                                     50 ; indirectly addressable internal ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area ISEG    (DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; absolute internal ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area IABS    (ABS,DATA)
                                     57 	.area IABS    (ABS,DATA)
                                     58 ;--------------------------------------------------------
                                     59 ; bit data
                                     60 ;--------------------------------------------------------
                                     61 	.area BSEG    (BIT)
                                     62 ;--------------------------------------------------------
                                     63 ; paged external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area PSEG    (PAG,XDATA)
                                     66 ;--------------------------------------------------------
                                     67 ; external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area XSEG    (XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; absolute external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XABS    (ABS,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; external initialized ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XISEG   (XDATA)
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT0 (CODE)
                                     80 	.area GSINIT1 (CODE)
                                     81 	.area GSINIT2 (CODE)
                                     82 	.area GSINIT3 (CODE)
                                     83 	.area GSINIT4 (CODE)
                                     84 	.area GSINIT5 (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 	.area GSFINAL (CODE)
                                     87 	.area CSEG    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; global & static initialisations
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME    (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 	.area GSFINAL (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; Home
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME    (CODE)
                                     99 	.area HOME    (CODE)
                                    100 ;--------------------------------------------------------
                                    101 ; code
                                    102 ;--------------------------------------------------------
                                    103 	.area CSEG    (CODE)
                                    104 ;------------------------------------------------------------
                                    105 ;Allocation info for local variables in function 'atol'
                                    106 ;------------------------------------------------------------
                                    107 ;nptr                      Allocated to registers r4 r3 r2 
                                    108 ;__00010004                Allocated to registers 
                                    109 ;__00010001                Allocated to registers 
                                    110 ;ret                       Allocated to stack - _bp +8
                                    111 ;neg                       Allocated to registers b0 
                                    112 ;__00020002                Allocated to registers r4 r3 
                                    113 ;c                         Allocated to registers 
                                    114 ;__00020005                Allocated to registers r4 r3 
                                    115 ;c                         Allocated to registers 
                                    116 ;sloc0                     Allocated to stack - _bp +1
                                    117 ;sloc1                     Allocated to stack - _bp +4
                                    118 ;------------------------------------------------------------
                                    119 ;	atol.c:34: long int atol(const char *nptr)
                                    120 ;	-----------------------------------------
                                    121 ;	 function atol
                                    122 ;	-----------------------------------------
      000000                        123 _atol:
                           000007   124 	ar7 = 0x07
                           000006   125 	ar6 = 0x06
                           000005   126 	ar5 = 0x05
                           000004   127 	ar4 = 0x04
                           000003   128 	ar3 = 0x03
                           000002   129 	ar2 = 0x02
                           000001   130 	ar1 = 0x01
                           000000   131 	ar0 = 0x00
      000000 C0*00            [24]  132 	push	_bp
      000002 E5 81            [12]  133 	mov	a,sp
      000004 F5*00            [12]  134 	mov	_bp,a
      000006 24 0B            [12]  135 	add	a,#0x0B
      000008 F5 81            [12]  136 	mov	sp,a
      00000A AC 82            [24]  137 	mov	r4,dpl
      00000C AB 83            [24]  138 	mov	r3,dph
      00000E AA F0            [24]  139 	mov	r2,b
                                    140 ;	atol.c:36: long int ret = 0;
      000010 E5*00            [12]  141 	mov	a,_bp
      000012 24 08            [12]  142 	add	a,#0x08
      000014 F8               [12]  143 	mov	r0,a
      000015 E4               [12]  144 	clr	a
      000016 F6               [12]  145 	mov	@r0,a
      000017 08               [12]  146 	inc	r0
      000018 F6               [12]  147 	mov	@r0,a
      000019 08               [12]  148 	inc	r0
      00001A F6               [12]  149 	mov	@r0,a
      00001B 08               [12]  150 	inc	r0
      00001C F6               [12]  151 	mov	@r0,a
                                    152 ;	atol.c:39: while (isblank (*nptr))
      00001D 8C 05            [24]  153 	mov	ar5,r4
      00001F 8B 06            [24]  154 	mov	ar6,r3
      000021 8A 07            [24]  155 	mov	ar7,r2
      000023                        156 00101$:
      000023 8D 82            [24]  157 	mov	dpl,r5
      000025 8E 83            [24]  158 	mov	dph,r6
      000027 8F F0            [24]  159 	mov	b,r7
      000029 12r00r00         [24]  160 	lcall	__gptrget
      00002C FC               [12]  161 	mov	r4,a
      00002D 33               [12]  162 	rlc	a
      00002E 95 E0            [12]  163 	subb	a,acc
      000030 FB               [12]  164 	mov	r3,a
                                    165 ;	../../device/include/ctype.h:53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
      000031 BC 20 02         [24]  166 	cjne	r4,#0x20,00147$
      000034 80 03            [24]  167 	sjmp	00115$
      000036                        168 00147$:
      000036 BC 09 07         [24]  169 	cjne	r4,#0x09,00131$
      000039                        170 00115$:
                                    171 ;	atol.c:40: nptr++;
      000039 0D               [12]  172 	inc	r5
      00003A BD 00 E6         [24]  173 	cjne	r5,#0x00,00101$
      00003D 0E               [12]  174 	inc	r6
      00003E 80 E3            [24]  175 	sjmp	00101$
      000040                        176 00131$:
      000040 8D 04            [24]  177 	mov	ar4,r5
      000042 8E 03            [24]  178 	mov	ar3,r6
      000044 8F 02            [24]  179 	mov	ar2,r7
                                    180 ;	atol.c:42: neg = (*nptr == '-');
      000046 8D 82            [24]  181 	mov	dpl,r5
      000048 8E 83            [24]  182 	mov	dph,r6
      00004A 8F F0            [24]  183 	mov	b,r7
      00004C 12r00r00         [24]  184 	lcall	__gptrget
      00004F FF               [12]  185 	mov	r7,a
      000050 BF 2D 03         [24]  186 	cjne	r7,#0x2D,00151$
      000053 D3               [12]  187 	setb	c
      000054 80 01            [24]  188 	sjmp	00152$
      000056                        189 00151$:
      000056 C3               [12]  190 	clr	c
      000057                        191 00152$:
      000057 92*00            [24]  192 	mov	b0,c
                                    193 ;	atol.c:44: if (*nptr == '-' || *nptr == '+')
      000059 BF 2D 02         [24]  194 	cjne	r7,#0x2D,00153$
      00005C 80 03            [24]  195 	sjmp	00104$
      00005E                        196 00153$:
      00005E BF 2B 05         [24]  197 	cjne	r7,#0x2B,00129$
      000061                        198 00104$:
                                    199 ;	atol.c:45: nptr++;
      000061 0C               [12]  200 	inc	r4
      000062 BC 00 01         [24]  201 	cjne	r4,#0x00,00156$
      000065 0B               [12]  202 	inc	r3
      000066                        203 00156$:
                                    204 ;	atol.c:47: while (isdigit (*nptr))
      000066                        205 00129$:
      000066 A8*00            [24]  206 	mov	r0,_bp
      000068 08               [12]  207 	inc	r0
      000069 A6 04            [24]  208 	mov	@r0,ar4
      00006B 08               [12]  209 	inc	r0
      00006C A6 03            [24]  210 	mov	@r0,ar3
      00006E 08               [12]  211 	inc	r0
      00006F A6 02            [24]  212 	mov	@r0,ar2
      000071                        213 00107$:
      000071 A8*00            [24]  214 	mov	r0,_bp
      000073 08               [12]  215 	inc	r0
      000074 86 82            [24]  216 	mov	dpl,@r0
      000076 08               [12]  217 	inc	r0
      000077 86 83            [24]  218 	mov	dph,@r0
      000079 08               [12]  219 	inc	r0
      00007A 86 F0            [24]  220 	mov	b,@r0
      00007C 12r00r00         [24]  221 	lcall	__gptrget
      00007F FC               [12]  222 	mov	r4,a
      000080 33               [12]  223 	rlc	a
      000081 95 E0            [12]  224 	subb	a,acc
      000083 FB               [12]  225 	mov	r3,a
                                    226 ;	../../device/include/ctype.h:62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      000084 BC 30 00         [24]  227 	cjne	r4,#0x30,00157$
      000087                        228 00157$:
      000087 50 03            [24]  229 	jnc	00158$
      000089 02r01r1D         [24]  230 	ljmp	00109$
      00008C                        231 00158$:
      00008C EC               [12]  232 	mov	a,r4
      00008D 24 C6            [12]  233 	add	a,#0xff - 0x39
      00008F 50 03            [24]  234 	jnc	00159$
      000091 02r01r1D         [24]  235 	ljmp	00109$
      000094                        236 00159$:
                                    237 ;	atol.c:48: ret = ret * 10 + (*(nptr++) - '0');
      000094 C0*00            [24]  238 	push	bits
      000096 E5*00            [12]  239 	mov	a,_bp
      000098 24 08            [12]  240 	add	a,#0x08
      00009A F8               [12]  241 	mov	r0,a
      00009B E6               [12]  242 	mov	a,@r0
      00009C C0 E0            [24]  243 	push	acc
      00009E 08               [12]  244 	inc	r0
      00009F E6               [12]  245 	mov	a,@r0
      0000A0 C0 E0            [24]  246 	push	acc
      0000A2 08               [12]  247 	inc	r0
      0000A3 E6               [12]  248 	mov	a,@r0
      0000A4 C0 E0            [24]  249 	push	acc
      0000A6 08               [12]  250 	inc	r0
      0000A7 E6               [12]  251 	mov	a,@r0
      0000A8 C0 E0            [24]  252 	push	acc
      0000AA 90 00 0A         [24]  253 	mov	dptr,#(0x0A&0x00ff)
      0000AD E4               [12]  254 	clr	a
      0000AE F5 F0            [12]  255 	mov	b,a
      0000B0 12r00r00         [24]  256 	lcall	__mullong
      0000B3 C8               [12]  257 	xch	a,r0
      0000B4 E5*00            [12]  258 	mov	a,_bp
      0000B6 24 04            [12]  259 	add	a,#0x04
      0000B8 C8               [12]  260 	xch	a,r0
      0000B9 A6 82            [24]  261 	mov	@r0,dpl
      0000BB 08               [12]  262 	inc	r0
      0000BC A6 83            [24]  263 	mov	@r0,dph
      0000BE 08               [12]  264 	inc	r0
      0000BF A6 F0            [24]  265 	mov	@r0,b
      0000C1 08               [12]  266 	inc	r0
      0000C2 F6               [12]  267 	mov	@r0,a
      0000C3 E5 81            [12]  268 	mov	a,sp
      0000C5 24 FC            [12]  269 	add	a,#0xfc
      0000C7 F5 81            [12]  270 	mov	sp,a
      0000C9 D0*00            [24]  271 	pop	bits
      0000CB A8*00            [24]  272 	mov	r0,_bp
      0000CD 08               [12]  273 	inc	r0
      0000CE 86 82            [24]  274 	mov	dpl,@r0
      0000D0 08               [12]  275 	inc	r0
      0000D1 86 83            [24]  276 	mov	dph,@r0
      0000D3 08               [12]  277 	inc	r0
      0000D4 86 F0            [24]  278 	mov	b,@r0
      0000D6 12r00r00         [24]  279 	lcall	__gptrget
      0000D9 FE               [12]  280 	mov	r6,a
      0000DA A3               [24]  281 	inc	dptr
      0000DB 18               [12]  282 	dec	r0
      0000DC 18               [12]  283 	dec	r0
      0000DD A6 82            [24]  284 	mov	@r0,dpl
      0000DF 08               [12]  285 	inc	r0
      0000E0 A6 83            [24]  286 	mov	@r0,dph
      0000E2 EE               [12]  287 	mov	a,r6
      0000E3 33               [12]  288 	rlc	a
      0000E4 95 E0            [12]  289 	subb	a,acc
      0000E6 FD               [12]  290 	mov	r5,a
      0000E7 EE               [12]  291 	mov	a,r6
      0000E8 24 D0            [12]  292 	add	a,#0xD0
      0000EA FE               [12]  293 	mov	r6,a
      0000EB ED               [12]  294 	mov	a,r5
      0000EC 34 FF            [12]  295 	addc	a,#0xFF
      0000EE FD               [12]  296 	mov	r5,a
      0000EF 8E 04            [24]  297 	mov	ar4,r6
      0000F1 33               [12]  298 	rlc	a
      0000F2 95 E0            [12]  299 	subb	a,acc
      0000F4 FE               [12]  300 	mov	r6,a
      0000F5 FF               [12]  301 	mov	r7,a
      0000F6 E5*00            [12]  302 	mov	a,_bp
      0000F8 24 04            [12]  303 	add	a,#0x04
      0000FA F8               [12]  304 	mov	r0,a
      0000FB EC               [12]  305 	mov	a,r4
      0000FC 26               [12]  306 	add	a,@r0
      0000FD FC               [12]  307 	mov	r4,a
      0000FE ED               [12]  308 	mov	a,r5
      0000FF 08               [12]  309 	inc	r0
      000100 36               [12]  310 	addc	a,@r0
      000101 FD               [12]  311 	mov	r5,a
      000102 EE               [12]  312 	mov	a,r6
      000103 08               [12]  313 	inc	r0
      000104 36               [12]  314 	addc	a,@r0
      000105 FE               [12]  315 	mov	r6,a
      000106 EF               [12]  316 	mov	a,r7
      000107 08               [12]  317 	inc	r0
      000108 36               [12]  318 	addc	a,@r0
      000109 FF               [12]  319 	mov	r7,a
      00010A E5*00            [12]  320 	mov	a,_bp
      00010C 24 08            [12]  321 	add	a,#0x08
      00010E F8               [12]  322 	mov	r0,a
      00010F A6 04            [24]  323 	mov	@r0,ar4
      000111 08               [12]  324 	inc	r0
      000112 A6 05            [24]  325 	mov	@r0,ar5
      000114 08               [12]  326 	inc	r0
      000115 A6 06            [24]  327 	mov	@r0,ar6
      000117 08               [12]  328 	inc	r0
      000118 A6 07            [24]  329 	mov	@r0,ar7
      00011A 02r00r71         [24]  330 	ljmp	00107$
      00011D                        331 00109$:
                                    332 ;	atol.c:50: return (neg ? -ret : ret); // Since -LONG_MIN is LONG_MIN in sdcc, the result value always turns out ok.
      00011D 30*00 17         [24]  333 	jnb	b0,00120$
      000120 E5*00            [12]  334 	mov	a,_bp
      000122 24 08            [12]  335 	add	a,#0x08
      000124 F8               [12]  336 	mov	r0,a
      000125 C3               [12]  337 	clr	c
      000126 E4               [12]  338 	clr	a
      000127 96               [12]  339 	subb	a,@r0
      000128 FC               [12]  340 	mov	r4,a
      000129 08               [12]  341 	inc	r0
      00012A E4               [12]  342 	clr	a
      00012B 96               [12]  343 	subb	a,@r0
      00012C FD               [12]  344 	mov	r5,a
      00012D 08               [12]  345 	inc	r0
      00012E E4               [12]  346 	clr	a
      00012F 96               [12]  347 	subb	a,@r0
      000130 FE               [12]  348 	mov	r6,a
      000131 08               [12]  349 	inc	r0
      000132 E4               [12]  350 	clr	a
      000133 96               [12]  351 	subb	a,@r0
      000134 FF               [12]  352 	mov	r7,a
      000135 80 10            [24]  353 	sjmp	00121$
      000137                        354 00120$:
      000137 E5*00            [12]  355 	mov	a,_bp
      000139 24 08            [12]  356 	add	a,#0x08
      00013B F8               [12]  357 	mov	r0,a
      00013C 86 04            [24]  358 	mov	ar4,@r0
      00013E 08               [12]  359 	inc	r0
      00013F 86 05            [24]  360 	mov	ar5,@r0
      000141 08               [12]  361 	inc	r0
      000142 86 06            [24]  362 	mov	ar6,@r0
      000144 08               [12]  363 	inc	r0
      000145 86 07            [24]  364 	mov	ar7,@r0
      000147                        365 00121$:
      000147 8C 82            [24]  366 	mov	dpl,r4
      000149 8D 83            [24]  367 	mov	dph,r5
      00014B 8E F0            [24]  368 	mov	b,r6
      00014D EF               [12]  369 	mov	a,r7
      00014E 85*00 81         [24]  370 	mov	sp,_bp
      000151 D0*00            [24]  371 	pop	_bp
      000153 22               [24]  372 	ret
                                    373 	.area CSEG    (CODE)
                                    374 	.area CONST   (CODE)
                                    375 	.area XINIT   (CODE)
                                    376 	.area CABS    (ABS,CODE)
