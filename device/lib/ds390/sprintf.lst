                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:27 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module sprintf
                                      7 	.optsdcc -mds390 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl __print_format
                                     35 	.globl _vsprintf_PARM_3
                                     36 	.globl _vsprintf_PARM_2
                                     37 	.globl _vsprintf
                                     38 	.globl _sprintf
                                     39 ;--------------------------------------------------------
                                     40 ; special function registers
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; special function bits
                                     44 ;--------------------------------------------------------
                                     45 ;--------------------------------------------------------
                                     46 ; overlayable register banks
                                     47 ;--------------------------------------------------------
                                     48 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         49 	.ds 8
                                     50 ;--------------------------------------------------------
                                     51 ; internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area DSEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; overlayable items in internal ram 
                                     56 ;--------------------------------------------------------
                                     57 ;--------------------------------------------------------
                                     58 ; indirectly addressable internal ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area ISEG    (DATA)
                                     61 ;--------------------------------------------------------
                                     62 ; absolute internal ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area IABS    (ABS,DATA)
                                     65 	.area IABS    (ABS,DATA)
                                     66 ;--------------------------------------------------------
                                     67 ; bit data
                                     68 ;--------------------------------------------------------
                                     69 	.area BSEG    (BIT)
                                     70 ;--------------------------------------------------------
                                     71 ; paged external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area PSEG    (PAG,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XSEG    (XDATA)
      000000                         78 _vsprintf_PARM_2:
      000000                         79 	.ds 4
      000004                         80 _vsprintf_PARM_3:
      000004                         81 	.ds 4
      000008                         82 _vsprintf_buf_1_14:
      000008                         83 	.ds 4
                                     84 ;--------------------------------------------------------
                                     85 ; absolute external ram data
                                     86 ;--------------------------------------------------------
                                     87 	.area XABS    (ABS,XDATA)
                                     88 ;--------------------------------------------------------
                                     89 ; external initialized ram data
                                     90 ;--------------------------------------------------------
                                     91 	.area XISEG   (XDATA)
                                     92 ;--------------------------------------------------------
                                     93 ; global & static initialisations
                                     94 ;--------------------------------------------------------
                                     95 	.area HOME    (CODE)
                                     96 	.area GSINIT  (CODE)
                                     97 	.area GSFINAL (CODE)
                                     98 	.area GSINIT  (CODE)
                                     99 ;--------------------------------------------------------
                                    100 ; Home
                                    101 ;--------------------------------------------------------
                                    102 	.area HOME    (CODE)
                                    103 	.area HOME    (CODE)
                                    104 ;--------------------------------------------------------
                                    105 ; code
                                    106 ;--------------------------------------------------------
                                    107 	.area CSEG    (CODE)
                                    108 ;------------------------------------------------------------
                                    109 ;Allocation info for local variables in function 'put_char_to_string'
                                    110 ;------------------------------------------------------------
                                    111 ;p                         Allocated to stack - _bp -8
                                    112 ;c                         Allocated to stack - _bp +1
                                    113 ;buf                       Allocated to registers 
                                    114 ;------------------------------------------------------------
                                    115 ;	sprintf.c:34: put_char_to_string (char c, void* p) _REENTRANT
                                    116 ;	-----------------------------------------
                                    117 ;	 function put_char_to_string
                                    118 ;	-----------------------------------------
      000000                        119 _put_char_to_string:
                           000002   120 	ar2 = 0x02
                           000003   121 	ar3 = 0x03
                           000004   122 	ar4 = 0x04
                           000005   123 	ar5 = 0x05
                           000006   124 	ar6 = 0x06
                           000007   125 	ar7 = 0x07
                           000000   126 	ar0 = 0x00
                           000001   127 	ar1 = 0x01
      000000 C0*00            [ 8]  128 	push	_bpx
      000002 C0*01            [ 8]  129 	push	_bpx+1
      000004 85 81*00         [12]  130 	mov	_bpx,sp
      000007 85 9B*01         [12]  131 	mov	_bpx+1,esp
      00000A 53*01 03         [12]  132 	anl	_bpx+1,#3
      00000D C0 E0            [ 8]  133 	push	acc
      00000F 75 95 40         [12]  134 	mov	dpx1,#0x40
      000012 85*01 85         [12]  135 	mov	dph1,_bpx+1
      000015 85*00 84         [12]  136 	mov	dpl1,_bpx
      000018 75 86 01         [12]  137 	mov	dps,#1
      00001B A3               [12]  138 	inc	dptr
      00001C 75 86 01         [12]  139 	mov	dps, #1
      00001F E5 82            [ 8]  140 	mov	a,dpl
      000021 F0               [ 8]  141 	movx	@dptr,a
      000022 75 86 00         [12]  142 	mov	dps,#0
                                    143 ;	sprintf.c:36: char **buf = (char **)p;
      000025 E5*00            [ 8]  144 	mov	a,_bpx
      000027 C3               [ 4]  145 	clr	c
      000028 94 08            [ 8]  146 	subb	a,#0x08
      00002A F5 82            [ 8]  147 	mov	dpl,a
      00002C E5*01            [ 8]  148 	mov	a,_bpx+1
      00002E 94 00            [ 8]  149 	subb	a,#0x00
      000030 F5 83            [ 8]  150 	mov	dph,a
      000032 75 93 40         [12]  151 	mov	dpx,#0x40
                                    152 ;	genAssign: resultIsFar = FALSE
      000035 E0               [ 8]  153 	movx	a,@dptr
      000036 FB               [ 4]  154 	mov	r3,a
      000037 A3               [12]  155 	inc	dptr
      000038 E0               [ 8]  156 	movx	a,@dptr
      000039 FC               [ 4]  157 	mov	r4,a
      00003A A3               [12]  158 	inc	dptr
      00003B E0               [ 8]  159 	movx	a,@dptr
      00003C FD               [ 4]  160 	mov	r5,a
      00003D A3               [12]  161 	inc	dptr
      00003E E0               [ 8]  162 	movx	a,@dptr
      00003F FE               [ 4]  163 	mov	r6,a
      000040 8B 82            [ 8]  164 	mov	dpl,r3
      000042 8C 83            [ 8]  165 	mov	dph,r4
      000044 8D 93            [ 8]  166 	mov	dpx,r5
      000046 8E F0            [ 8]  167 	mov	b,r6
                                    168 ;	sprintf.c:37: *(*buf)++ = c;
      000048 12s00r00r00      [16]  169 	lcall	__gptrgetWord
      00004C FB               [ 4]  170 	mov	r3,a
      00004D AC 9C            [ 8]  171 	mov	r4,acc1
      00004F A3               [12]  172 	inc	dptr
      000050 12s00r00r00      [16]  173 	lcall	__gptrgetWord
      000054 FD               [ 4]  174 	mov	r5,a
      000055 AE 9C            [ 8]  175 	mov	r6,acc1
      000057 12s00r00r00      [16]  176 	lcall	__decdptr
      00005B 12s00r00r00      [16]  177 	lcall	__decdptr
      00005F 12s00r00r00      [16]  178 	lcall	__decdptr
      000063 74 01            [ 8]  179 	mov	a,#0x01
      000065 2B               [ 4]  180 	add	a,r3
      000066 FF               [ 4]  181 	mov	r7,a
      000067 E4               [ 4]  182 	clr	a
      000068 3C               [ 4]  183 	addc	a,r4
      000069 F8               [ 4]  184 	mov	r0,a
      00006A E4               [ 4]  185 	clr	a
      00006B 3D               [ 4]  186 	addc	a,r5
      00006C F9               [ 4]  187 	mov	r1,a
      00006D 8E 02            [ 8]  188 	mov	ar2,r6
      00006F 8F 9C            [ 8]  189 	mov	acc1, r7
      000071 E8               [ 4]  190 	mov	a,r0
      000072 12s00r00r00      [16]  191 	lcall	__gptrputWord
      000076 A3               [12]  192 	inc	dptr
      000077 89 9C            [ 8]  193 	mov	acc1, r1
      000079 EA               [ 4]  194 	mov	a,r2
      00007A 12s00r00r00      [16]  195 	lcall	__gptrputWord
      00007E 8B 82            [ 8]  196 	mov	dpl,r3
      000080 8C 83            [ 8]  197 	mov	dph,r4
      000082 8D 93            [ 8]  198 	mov	dpx,r5
      000084 8E F0            [ 8]  199 	mov	b,r6
      000086 75 95 40         [12]  200 	mov	dpx1,#0x40
      000089 85*01 85         [12]  201 	mov	dph1,_bpx+1
      00008C 85*00 84         [12]  202 	mov	dpl1,_bpx
      00008F 75 86 01         [12]  203 	mov	dps,#1
      000092 A3               [12]  204 	inc	dptr
      000093 75 86 01         [12]  205 	mov	dps, #1
      000096 E0               [ 8]  206 	movx	a,@dptr
      000097 15 86            [ 8]  207 	dec	dps
      000099 12s00r00r00      [16]  208 	lcall	__gptrput
      00009D                        209 00101$:
      00009D 85*00 81         [12]  210 	mov	sp,_bpx
      0000A0 85*01 9B         [12]  211 	mov	esp,_bpx+1
      0000A3 D0*01            [ 8]  212 	pop	_bpx+1
      0000A5 D0*00            [ 8]  213 	pop	_bpx
      0000A7 22               [16]  214 	ret
                                    215 ;------------------------------------------------------------
                                    216 ;Allocation info for local variables in function 'vsprintf'
                                    217 ;------------------------------------------------------------
                                    218 ;format                    Allocated with name '_vsprintf_PARM_2'
                                    219 ;ap                        Allocated with name '_vsprintf_PARM_3'
                                    220 ;buf                       Allocated with name '_vsprintf_buf_1_14'
                                    221 ;i                         Allocated to registers r2 r3 
                                    222 ;------------------------------------------------------------
                                    223 ;	sprintf.c:41: vsprintf (char *buf, const char *format, va_list ap)
                                    224 ;	-----------------------------------------
                                    225 ;	 function vsprintf
                                    226 ;	-----------------------------------------
      0000A8                        227 _vsprintf:
      0000A8 75 86 01         [12]  228 	mov     dps, #1
      0000AB 90s00r00r08      [12]  229 	mov     dptr, #_vsprintf_buf_1_14
      0000AF E5 82            [ 8]  230 	mov	a,dpl
      0000B1 F0               [ 8]  231 	movx	@dptr,a
      0000B2 A3               [12]  232 	inc	dptr
      0000B3 E5 83            [ 8]  233 	mov	a,dph
      0000B5 F0               [ 8]  234 	movx	@dptr,a
      0000B6 A3               [12]  235 	inc	dptr
      0000B7 E5 93            [ 8]  236 	mov	a,dpx
      0000B9 F0               [ 8]  237 	movx	@dptr,a
      0000BA A3               [12]  238 	inc	dptr
      0000BB E5 F0            [ 8]  239 	mov	a,b
      0000BD F0               [ 8]  240 	movx	@dptr,a
      0000BE 75 86 00         [12]  241 	mov	dps,#0
                                    242 ;	sprintf.c:44: i = _print_format (put_char_to_string, &buf, format, ap);
      0000C1 90s00r00r00      [12]  243 	mov	dptr,#_vsprintf_PARM_2
                                    244 ;	genAssign: resultIsFar = FALSE
      0000C5 E0               [ 8]  245 	movx	a,@dptr
      0000C6 FA               [ 4]  246 	mov	r2,a
      0000C7 A3               [12]  247 	inc	dptr
      0000C8 E0               [ 8]  248 	movx	a,@dptr
      0000C9 FB               [ 4]  249 	mov	r3,a
      0000CA A3               [12]  250 	inc	dptr
      0000CB E0               [ 8]  251 	movx	a,@dptr
      0000CC FC               [ 4]  252 	mov	r4,a
      0000CD A3               [12]  253 	inc	dptr
      0000CE E0               [ 8]  254 	movx	a,@dptr
      0000CF FD               [ 4]  255 	mov	r5,a
      0000D0 90s00r00r04      [12]  256 	mov	dptr,#_vsprintf_PARM_3
                                    257 ;	genAssign: resultIsFar = FALSE
      0000D4 E0               [ 8]  258 	movx	a,@dptr
      0000D5 FE               [ 4]  259 	mov	r6,a
      0000D6 A3               [12]  260 	inc	dptr
      0000D7 E0               [ 8]  261 	movx	a,@dptr
      0000D8 FF               [ 4]  262 	mov	r7,a
      0000D9 A3               [12]  263 	inc	dptr
      0000DA E0               [ 8]  264 	movx	a,@dptr
      0000DB F8               [ 4]  265 	mov	r0,a
      0000DC A3               [12]  266 	inc	dptr
      0000DD E0               [ 8]  267 	movx	a,@dptr
      0000DE F9               [ 4]  268 	mov	r1,a
                                    269 ;	genAssign: resultIsFar = TRUE
      0000DF 90s00r00r00      [12]  270 	mov	dptr,#__print_format_PARM_2
      0000E3 74r08            [ 8]  271 	mov	a,#_vsprintf_buf_1_14
      0000E5 F0               [ 8]  272 	movx	@dptr,a
      0000E6 A3               [12]  273 	inc	dptr
      0000E7 74s00            [ 8]  274 	mov	a,#(_vsprintf_buf_1_14 >> 8)
      0000E9 F0               [ 8]  275 	movx	@dptr,a
      0000EA A3               [12]  276 	inc	dptr
      0000EB 74s00            [ 8]  277 	mov	a,#(_vsprintf_buf_1_14 >> 16)
      0000ED F0               [ 8]  278 	movx	@dptr,a
      0000EE A3               [12]  279 	inc	dptr
      0000EF E4               [ 4]  280 	clr	a
      0000F0 F0               [ 8]  281 	movx	@dptr,a
                                    282 ;	genAssign: resultIsFar = TRUE
      0000F1 90s00r00r00      [12]  283 	mov	dptr,#__print_format_PARM_3
      0000F5 EA               [ 4]  284 	mov	a,r2
      0000F6 F0               [ 8]  285 	movx	@dptr,a
      0000F7 A3               [12]  286 	inc	dptr
      0000F8 EB               [ 4]  287 	mov	a,r3
      0000F9 F0               [ 8]  288 	movx	@dptr,a
      0000FA A3               [12]  289 	inc	dptr
      0000FB EC               [ 4]  290 	mov	a,r4
      0000FC F0               [ 8]  291 	movx	@dptr,a
      0000FD A3               [12]  292 	inc	dptr
      0000FE ED               [ 4]  293 	mov	a,r5
      0000FF F0               [ 8]  294 	movx	@dptr,a
                                    295 ;	genAssign: resultIsFar = TRUE
      000100 90s00r00r00      [12]  296 	mov	dptr,#__print_format_PARM_4
      000104 EE               [ 4]  297 	mov	a,r6
      000105 F0               [ 8]  298 	movx	@dptr,a
      000106 A3               [12]  299 	inc	dptr
      000107 EF               [ 4]  300 	mov	a,r7
      000108 F0               [ 8]  301 	movx	@dptr,a
      000109 A3               [12]  302 	inc	dptr
      00010A E8               [ 4]  303 	mov	a,r0
      00010B F0               [ 8]  304 	movx	@dptr,a
      00010C A3               [12]  305 	inc	dptr
      00010D E9               [ 4]  306 	mov	a,r1
      00010E F0               [ 8]  307 	movx	@dptr,a
      00010F 90s00r00r00      [12]  308 	mov dptr,#_put_char_to_string
      000113 12s00r00r00      [16]  309 	lcall	__print_format
      000117 AA 82            [ 8]  310 	mov	r2,dpl
      000119 AB 83            [ 8]  311 	mov	r3,dph
                                    312 ;	genAssign: resultIsFar = TRUE
      00011B 8A 84            [ 8]  313 	mov	dpl1,r2
      00011D 8B 85            [ 8]  314 	mov	dph1,r3
                                    315 ;	sprintf.c:45: *buf = 0;
      00011F 90s00r00r08      [12]  316 	mov	dptr,#_vsprintf_buf_1_14
                                    317 ;	genAssign: resultIsFar = FALSE
      000123 E0               [ 8]  318 	movx	a,@dptr
      000124 FC               [ 4]  319 	mov	r4,a
      000125 A3               [12]  320 	inc	dptr
      000126 E0               [ 8]  321 	movx	a,@dptr
      000127 FD               [ 4]  322 	mov	r5,a
      000128 A3               [12]  323 	inc	dptr
      000129 E0               [ 8]  324 	movx	a,@dptr
      00012A FE               [ 4]  325 	mov	r6,a
      00012B A3               [12]  326 	inc	dptr
      00012C E0               [ 8]  327 	movx	a,@dptr
      00012D FF               [ 4]  328 	mov	r7,a
      00012E 8C 82            [ 8]  329 	mov	dpl,r4
      000130 8D 83            [ 8]  330 	mov	dph,r5
      000132 8E 93            [ 8]  331 	mov	dpx,r6
      000134 8F F0            [ 8]  332 	mov	b,r7
      000136 E4               [ 4]  333 	clr	a
      000137 12s00r00r00      [16]  334 	lcall	__gptrput
                                    335 ;	sprintf.c:46: return i;
      00013B 85 84 82         [12]  336 	mov	dpl,dpl1
      00013E 85 85 83         [12]  337 	mov	dph,dph1
      000141                        338 00101$:
      000141 22               [16]  339 	ret
                                    340 ;------------------------------------------------------------
                                    341 ;Allocation info for local variables in function 'sprintf'
                                    342 ;------------------------------------------------------------
                                    343 ;buf                       Allocated to stack - _bp -8
                                    344 ;format                    Allocated to stack - _bp -12
                                    345 ;arg                       Allocated to stack - _bp +1
                                    346 ;i                         Allocated to registers r2 r3 
                                    347 ;------------------------------------------------------------
                                    348 ;	sprintf.c:50: sprintf (char *buf, const char *format, ...)
                                    349 ;	-----------------------------------------
                                    350 ;	 function sprintf
                                    351 ;	-----------------------------------------
      000142                        352 _sprintf:
      000142 C0*00            [ 8]  353 	push	_bpx
      000144 C0*01            [ 8]  354 	push	_bpx+1
      000146 85 81*00         [12]  355 	mov	_bpx,sp
      000149 85 9B*01         [12]  356 	mov	_bpx+1,esp
      00014C 53*01 03         [12]  357 	anl	_bpx+1,#3
      00014F C0 E0            [ 8]  358 	push	acc
      000151 C0 E0            [ 8]  359 	push	acc
      000153 C0 E0            [ 8]  360 	push	acc
      000155 C0 E0            [ 8]  361 	push	acc
                                    362 ;	sprintf.c:55: va_start (arg, format);
      000157 E5*00            [ 8]  363 	mov	a,_bpx
      000159 24 F4            [ 8]  364 	add	a,#0xF4
      00015B F5 F0            [ 8]  365 	mov	b,a
      00015D E5*01            [ 8]  366 	mov	a,_bpx+1
      00015F 34 FF            [ 8]  367 	addc	a,#0xFF
      000161 AA F0            [ 8]  368 	mov	r2,b
      000163 FB               [ 4]  369 	mov	r3,a
      000164 7C 40            [ 8]  370 	mov	r4,#0x40
      000166 75 93 40         [12]  371 	mov	dpx,#0x40
      000169 85*01 83         [12]  372 	mov	dph,_bpx+1
      00016C 85*00 82         [12]  373 	mov	dpl,_bpx
      00016F A3               [12]  374 	inc	dptr
      000170 EA               [ 4]  375 	mov	a,r2
      000171 F0               [ 8]  376 	movx	@dptr,a
      000172 A3               [12]  377 	inc	dptr
      000173 EB               [ 4]  378 	mov	a,r3
      000174 F0               [ 8]  379 	movx	@dptr,a
      000175 A3               [12]  380 	inc	dptr
      000176 EC               [ 4]  381 	mov	a,r4
      000177 F0               [ 8]  382 	movx	@dptr,a
      000178 A3               [12]  383 	inc	dptr
      000179 E4               [ 4]  384 	clr	a
      00017A F0               [ 8]  385 	movx	@dptr,a
                                    386 ;	sprintf.c:56: i = _print_format (put_char_to_string, &buf, format, arg);
      00017B E5*00            [ 8]  387 	mov	a,_bpx
      00017D 24 F8            [ 8]  388 	add	a,#0xF8
      00017F F5 F0            [ 8]  389 	mov	b,a
      000181 E5*01            [ 8]  390 	mov	a,_bpx+1
      000183 34 FF            [ 8]  391 	addc	a,#0xFF
      000185 AE F0            [ 8]  392 	mov	r6,b
      000187 FF               [ 4]  393 	mov	r7,a
      000188 78 40            [ 8]  394 	mov	r0,#0x40
      00018A 79 00            [ 8]  395 	mov	r1,#0x00
      00018C E5*00            [ 8]  396 	mov	a,_bpx
      00018E C3               [ 4]  397 	clr	c
      00018F 94 0C            [ 8]  398 	subb	a,#0x0C
      000191 F5 82            [ 8]  399 	mov	dpl,a
      000193 E5*01            [ 8]  400 	mov	a,_bpx+1
      000195 94 00            [ 8]  401 	subb	a,#0x00
      000197 F5 83            [ 8]  402 	mov	dph,a
      000199 75 93 40         [12]  403 	mov	dpx,#0x40
                                    404 ;	genAssign: resultIsFar = FALSE
      00019C E0               [ 8]  405 	movx	a,@dptr
      00019D FA               [ 4]  406 	mov	r2,a
      00019E A3               [12]  407 	inc	dptr
      00019F E0               [ 8]  408 	movx	a,@dptr
      0001A0 FB               [ 4]  409 	mov	r3,a
      0001A1 A3               [12]  410 	inc	dptr
      0001A2 E0               [ 8]  411 	movx	a,@dptr
      0001A3 FC               [ 4]  412 	mov	r4,a
      0001A4 A3               [12]  413 	inc	dptr
      0001A5 E0               [ 8]  414 	movx	a,@dptr
      0001A6 FD               [ 4]  415 	mov	r5,a
                                    416 ;	genAssign: resultIsFar = TRUE
      0001A7 90s00r00r00      [12]  417 	mov	dptr,#__print_format_PARM_2
      0001AB EE               [ 4]  418 	mov	a,r6
      0001AC F0               [ 8]  419 	movx	@dptr,a
      0001AD A3               [12]  420 	inc	dptr
      0001AE EF               [ 4]  421 	mov	a,r7
      0001AF F0               [ 8]  422 	movx	@dptr,a
      0001B0 A3               [12]  423 	inc	dptr
      0001B1 E8               [ 4]  424 	mov	a,r0
      0001B2 F0               [ 8]  425 	movx	@dptr,a
      0001B3 A3               [12]  426 	inc	dptr
      0001B4 E9               [ 4]  427 	mov	a,r1
      0001B5 F0               [ 8]  428 	movx	@dptr,a
                                    429 ;	genAssign: resultIsFar = TRUE
      0001B6 90s00r00r00      [12]  430 	mov	dptr,#__print_format_PARM_3
      0001BA EA               [ 4]  431 	mov	a,r2
      0001BB F0               [ 8]  432 	movx	@dptr,a
      0001BC A3               [12]  433 	inc	dptr
      0001BD EB               [ 4]  434 	mov	a,r3
      0001BE F0               [ 8]  435 	movx	@dptr,a
      0001BF A3               [12]  436 	inc	dptr
      0001C0 EC               [ 4]  437 	mov	a,r4
      0001C1 F0               [ 8]  438 	movx	@dptr,a
      0001C2 A3               [12]  439 	inc	dptr
      0001C3 ED               [ 4]  440 	mov	a,r5
      0001C4 F0               [ 8]  441 	movx	@dptr,a
      0001C5 75 93 40         [12]  442 	mov	dpx,#0x40
      0001C8 85*01 83         [12]  443 	mov	dph,_bpx+1
      0001CB 85*00 82         [12]  444 	mov	dpl,_bpx
      0001CE A3               [12]  445 	inc	dptr
                                    446 ;	genAssign: resultIsFar = TRUE
      0001CF 75 86 21         [12]  447 	mov	dps,#0x21
      0001D2 90s00r00r00      [12]  448 	mov	dptr,#__print_format_PARM_4
      0001D6 E0               [ 8]  449 	movx	a,@dptr
      0001D7 F0               [ 8]  450 	movx	@dptr,a
      0001D8 A3               [12]  451 	inc	dptr
      0001D9 A3               [12]  452 	inc	dptr
      0001DA E0               [ 8]  453 	movx	a,@dptr
      0001DB F0               [ 8]  454 	movx	@dptr,a
      0001DC A3               [12]  455 	inc	dptr
      0001DD A3               [12]  456 	inc	dptr
      0001DE E0               [ 8]  457 	movx	a,@dptr
      0001DF F0               [ 8]  458 	movx	@dptr,a
      0001E0 A3               [12]  459 	inc	dptr
      0001E1 A3               [12]  460 	inc	dptr
      0001E2 E0               [ 8]  461 	movx	a,@dptr
      0001E3 F0               [ 8]  462 	movx	@dptr,a
      0001E4 75 86 00         [12]  463 	mov	dps,#0
      0001E7 90s00r00r00      [12]  464 	mov dptr,#_put_char_to_string
      0001EB 12s00r00r00      [16]  465 	lcall	__print_format
      0001EF AA 82            [ 8]  466 	mov	r2,dpl
      0001F1 AB 83            [ 8]  467 	mov	r3,dph
                                    468 ;	genAssign: resultIsFar = TRUE
      0001F3 8A 84            [ 8]  469 	mov	dpl1,r2
      0001F5 8B 85            [ 8]  470 	mov	dph1,r3
                                    471 ;	sprintf.c:57: *buf = 0;
      0001F7 E5*00            [ 8]  472 	mov	a,_bpx
      0001F9 C3               [ 4]  473 	clr	c
      0001FA 94 08            [ 8]  474 	subb	a,#0x08
      0001FC F5 82            [ 8]  475 	mov	dpl,a
      0001FE E5*01            [ 8]  476 	mov	a,_bpx+1
      000200 94 00            [ 8]  477 	subb	a,#0x00
      000202 F5 83            [ 8]  478 	mov	dph,a
      000204 75 93 40         [12]  479 	mov	dpx,#0x40
                                    480 ;	genAssign: resultIsFar = FALSE
      000207 E0               [ 8]  481 	movx	a,@dptr
      000208 FC               [ 4]  482 	mov	r4,a
      000209 A3               [12]  483 	inc	dptr
      00020A E0               [ 8]  484 	movx	a,@dptr
      00020B FD               [ 4]  485 	mov	r5,a
      00020C A3               [12]  486 	inc	dptr
      00020D E0               [ 8]  487 	movx	a,@dptr
      00020E FE               [ 4]  488 	mov	r6,a
      00020F A3               [12]  489 	inc	dptr
      000210 E0               [ 8]  490 	movx	a,@dptr
      000211 FF               [ 4]  491 	mov	r7,a
      000212 8C 82            [ 8]  492 	mov	dpl,r4
      000214 8D 83            [ 8]  493 	mov	dph,r5
      000216 8E 93            [ 8]  494 	mov	dpx,r6
      000218 8F F0            [ 8]  495 	mov	b,r7
      00021A E4               [ 4]  496 	clr	a
      00021B 12s00r00r00      [16]  497 	lcall	__gptrput
                                    498 ;	sprintf.c:60: return i;
      00021F 85 84 82         [12]  499 	mov	dpl,dpl1
      000222 85 85 83         [12]  500 	mov	dph,dph1
      000225                        501 00101$:
      000225 85*00 81         [12]  502 	mov	sp,_bpx
      000228 85*01 9B         [12]  503 	mov	esp,_bpx+1
      00022B D0*01            [ 8]  504 	pop	_bpx+1
      00022D D0*00            [ 8]  505 	pop	_bpx
      00022F 22               [16]  506 	ret
                                    507 	.area CSEG    (CODE)
                                    508 	.area CONST   (CODE)
                                    509 	.area XINIT   (CODE)
                                    510 	.area CABS    (ABS,CODE)
