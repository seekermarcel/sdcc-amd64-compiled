                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:27 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module serial
                                      7 	.optsdcc -mds390 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _serial_getc
                                     35 	.globl _serial_putc
                                     36 	.globl _serial_interrupt_handler
                                     37 	.globl _serial_init
                                     38 ;--------------------------------------------------------
                                     39 ; special function registers
                                     40 ;--------------------------------------------------------
                           000080    41 _P0	=	0x0080
                           000081    42 _SP	=	0x0081
                           000082    43 _DPL	=	0x0082
                           000083    44 _DPH	=	0x0083
                           000087    45 _PCON	=	0x0087
                           000088    46 _TCON	=	0x0088
                           000089    47 _TMOD	=	0x0089
                           00008A    48 _TL0	=	0x008a
                           00008B    49 _TL1	=	0x008b
                           00008C    50 _TH0	=	0x008c
                           00008D    51 _TH1	=	0x008d
                           000090    52 _P1	=	0x0090
                           000098    53 _SCON	=	0x0098
                           000099    54 _SBUF	=	0x0099
                           0000A0    55 _P2	=	0x00a0
                           0000A8    56 _IE	=	0x00a8
                           0000B0    57 _P3	=	0x00b0
                           0000B8    58 _IP	=	0x00b8
                           0000D0    59 _PSW	=	0x00d0
                           0000E0    60 _ACC	=	0x00e0
                           0000F0    61 _B	=	0x00f0
                           0000C8    62 _T2CON	=	0x00c8
                           0000CA    63 _RCAP2L	=	0x00ca
                           0000CB    64 _RCAP2H	=	0x00cb
                           0000CC    65 _TL2	=	0x00cc
                           0000CD    66 _TH2	=	0x00cd
                                     67 ;--------------------------------------------------------
                                     68 ; special function bits
                                     69 ;--------------------------------------------------------
                           000080    70 _P0_0	=	0x0080
                           000081    71 _P0_1	=	0x0081
                           000082    72 _P0_2	=	0x0082
                           000083    73 _P0_3	=	0x0083
                           000084    74 _P0_4	=	0x0084
                           000085    75 _P0_5	=	0x0085
                           000086    76 _P0_6	=	0x0086
                           000087    77 _P0_7	=	0x0087
                           000088    78 _IT0	=	0x0088
                           000089    79 _IE0	=	0x0089
                           00008A    80 _IT1	=	0x008a
                           00008B    81 _IE1	=	0x008b
                           00008C    82 _TR0	=	0x008c
                           00008D    83 _TF0	=	0x008d
                           00008E    84 _TR1	=	0x008e
                           00008F    85 _TF1	=	0x008f
                           000090    86 _P1_0	=	0x0090
                           000091    87 _P1_1	=	0x0091
                           000092    88 _P1_2	=	0x0092
                           000093    89 _P1_3	=	0x0093
                           000094    90 _P1_4	=	0x0094
                           000095    91 _P1_5	=	0x0095
                           000096    92 _P1_6	=	0x0096
                           000097    93 _P1_7	=	0x0097
                           000098    94 _RI	=	0x0098
                           000099    95 _TI	=	0x0099
                           00009A    96 _RB8	=	0x009a
                           00009B    97 _TB8	=	0x009b
                           00009C    98 _REN	=	0x009c
                           00009D    99 _SM2	=	0x009d
                           00009E   100 _SM1	=	0x009e
                           00009F   101 _SM0	=	0x009f
                           0000A0   102 _P2_0	=	0x00a0
                           0000A1   103 _P2_1	=	0x00a1
                           0000A2   104 _P2_2	=	0x00a2
                           0000A3   105 _P2_3	=	0x00a3
                           0000A4   106 _P2_4	=	0x00a4
                           0000A5   107 _P2_5	=	0x00a5
                           0000A6   108 _P2_6	=	0x00a6
                           0000A7   109 _P2_7	=	0x00a7
                           0000A8   110 _EX0	=	0x00a8
                           0000A9   111 _ET0	=	0x00a9
                           0000AA   112 _EX1	=	0x00aa
                           0000AB   113 _ET1	=	0x00ab
                           0000AC   114 _ES	=	0x00ac
                           0000AF   115 _EA	=	0x00af
                           0000B0   116 _P3_0	=	0x00b0
                           0000B1   117 _P3_1	=	0x00b1
                           0000B2   118 _P3_2	=	0x00b2
                           0000B3   119 _P3_3	=	0x00b3
                           0000B4   120 _P3_4	=	0x00b4
                           0000B5   121 _P3_5	=	0x00b5
                           0000B6   122 _P3_6	=	0x00b6
                           0000B7   123 _P3_7	=	0x00b7
                           0000B0   124 _RXD	=	0x00b0
                           0000B1   125 _TXD	=	0x00b1
                           0000B2   126 _INT0	=	0x00b2
                           0000B3   127 _INT1	=	0x00b3
                           0000B4   128 _T0	=	0x00b4
                           0000B5   129 _T1	=	0x00b5
                           0000B6   130 _WR	=	0x00b6
                           0000B7   131 _RD	=	0x00b7
                           0000B8   132 _PX0	=	0x00b8
                           0000B9   133 _PT0	=	0x00b9
                           0000BA   134 _PX1	=	0x00ba
                           0000BB   135 _PT1	=	0x00bb
                           0000BC   136 _PS	=	0x00bc
                           0000D0   137 _P	=	0x00d0
                           0000D1   138 _F1	=	0x00d1
                           0000D2   139 _OV	=	0x00d2
                           0000D3   140 _RS0	=	0x00d3
                           0000D4   141 _RS1	=	0x00d4
                           0000D5   142 _F0	=	0x00d5
                           0000D6   143 _AC	=	0x00d6
                           0000D7   144 _CY	=	0x00d7
                           0000AD   145 _ET2	=	0x00ad
                           0000BD   146 _PT2	=	0x00bd
                           0000C8   147 _T2CON_0	=	0x00c8
                           0000C9   148 _T2CON_1	=	0x00c9
                           0000CA   149 _T2CON_2	=	0x00ca
                           0000CB   150 _T2CON_3	=	0x00cb
                           0000CC   151 _T2CON_4	=	0x00cc
                           0000CD   152 _T2CON_5	=	0x00cd
                           0000CE   153 _T2CON_6	=	0x00ce
                           0000CF   154 _T2CON_7	=	0x00cf
                           0000C8   155 _CP_RL2	=	0x00c8
                           0000C9   156 _C_T2	=	0x00c9
                           0000CA   157 _TR2	=	0x00ca
                           0000CB   158 _EXEN2	=	0x00cb
                           0000CC   159 _TCLK	=	0x00cc
                           0000CD   160 _RCLK	=	0x00cd
                           0000CE   161 _EXF2	=	0x00ce
                           0000CF   162 _TF2	=	0x00cf
                                    163 ;--------------------------------------------------------
                                    164 ; overlayable register banks
                                    165 ;--------------------------------------------------------
                                    166 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        167 	.ds 8
                                    168 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        169 	.ds 8
                                    170 ;--------------------------------------------------------
                                    171 ; internal ram data
                                    172 ;--------------------------------------------------------
                                    173 	.area DSEG    (DATA)
                                    174 ;--------------------------------------------------------
                                    175 ; overlayable items in internal ram 
                                    176 ;--------------------------------------------------------
                                    177 ;--------------------------------------------------------
                                    178 ; indirectly addressable internal ram data
                                    179 ;--------------------------------------------------------
                                    180 	.area ISEG    (DATA)
                                    181 ;--------------------------------------------------------
                                    182 ; absolute internal ram data
                                    183 ;--------------------------------------------------------
                                    184 	.area IABS    (ABS,DATA)
                                    185 	.area IABS    (ABS,DATA)
                                    186 ;--------------------------------------------------------
                                    187 ; bit data
                                    188 ;--------------------------------------------------------
                                    189 	.area BSEG    (BIT)
      000000                        190 _work_flag_byte_arrived:
      000000                        191 	.ds 1
      000001                        192 _work_flag_buffer_transfered:
      000001                        193 	.ds 1
      000002                        194 _tx_serial_buffer_empty:
      000002                        195 	.ds 1
      000003                        196 _rx_serial_buffer_empty:
      000003                        197 	.ds 1
                                    198 ;--------------------------------------------------------
                                    199 ; paged external ram data
                                    200 ;--------------------------------------------------------
                                    201 	.area PSEG    (PAG,XDATA)
                                    202 ;--------------------------------------------------------
                                    203 ; external ram data
                                    204 ;--------------------------------------------------------
                                    205 	.area XSEG    (XDATA)
      000000                        206 _stx_index_in:
      000000                        207 	.ds 1
      000001                        208 _srx_index_in:
      000001                        209 	.ds 1
      000002                        210 _stx_index_out:
      000002                        211 	.ds 1
      000003                        212 _srx_index_out:
      000003                        213 	.ds 1
      000004                        214 _stx_buffer:
      000004                        215 	.ds 256
      000104                        216 _srx_buffer:
      000104                        217 	.ds 256
                                    218 ;--------------------------------------------------------
                                    219 ; absolute external ram data
                                    220 ;--------------------------------------------------------
                                    221 	.area XABS    (ABS,XDATA)
                                    222 ;--------------------------------------------------------
                                    223 ; external initialized ram data
                                    224 ;--------------------------------------------------------
                                    225 	.area XISEG   (XDATA)
                                    226 ;--------------------------------------------------------
                                    227 ; global & static initialisations
                                    228 ;--------------------------------------------------------
                                    229 	.area HOME    (CODE)
                                    230 	.area GSINIT  (CODE)
                                    231 	.area GSFINAL (CODE)
                                    232 	.area GSINIT  (CODE)
                                    233 ;--------------------------------------------------------
                                    234 ; Home
                                    235 ;--------------------------------------------------------
                                    236 	.area HOME    (CODE)
                                    237 	.area HOME    (CODE)
                                    238 ;--------------------------------------------------------
                                    239 ; code
                                    240 ;--------------------------------------------------------
                                    241 	.area CSEG    (CODE)
                                    242 ;------------------------------------------------------------
                                    243 ;Allocation info for local variables in function 'serial_init'
                                    244 ;------------------------------------------------------------
                                    245 ;	serial.c:45: void serial_init(void)
                                    246 ;	-----------------------------------------
                                    247 ;	 function serial_init
                                    248 ;	-----------------------------------------
      000000                        249 _serial_init:
                           000002   250 	ar2 = 0x02
                           000003   251 	ar3 = 0x03
                           000004   252 	ar4 = 0x04
                           000005   253 	ar5 = 0x05
                           000006   254 	ar6 = 0x06
                           000007   255 	ar7 = 0x07
                           000000   256 	ar0 = 0x00
                           000001   257 	ar1 = 0x01
                                    258 ;	serial.c:47: SCON = 0x50;
                                    259 ;	genAssign: resultIsFar = FALSE
      000000 75 98 50         [12]  260 	mov	_SCON,#0x50
                                    261 ;	serial.c:48: T2CON = 0x34;
                                    262 ;	genAssign: resultIsFar = FALSE
      000003 75 C8 34         [12]  263 	mov	_T2CON,#0x34
                                    264 ;	serial.c:49: PS = 1;
                                    265 ;	genAssign: resultIsFar = FALSE
      000006 D2 BC            [ 8]  266 	setb	_PS
                                    267 ;	serial.c:50: T2CON = 0x34;
                                    268 ;	genAssign: resultIsFar = FALSE
      000008 75 C8 34         [12]  269 	mov	_T2CON,#0x34
                                    270 ;	serial.c:51: RCAP2H = 0xFF;
                                    271 ;	genAssign: resultIsFar = FALSE
      00000B 75 CB FF         [12]  272 	mov	_RCAP2H,#0xFF
                                    273 ;	serial.c:52: RCAP2L = 0xDA;
                                    274 ;	genAssign: resultIsFar = FALSE
      00000E 75 CA DA         [12]  275 	mov	_RCAP2L,#0xDA
                                    276 ;	serial.c:54: RI = 0;
                                    277 ;	genAssign: resultIsFar = FALSE
      000011 C2 98            [ 8]  278 	clr	_RI
                                    279 ;	serial.c:55: TI = 0;
                                    280 ;	genAssign: resultIsFar = FALSE
      000013 C2 99            [ 8]  281 	clr	_TI
                                    282 ;	serial.c:57: stx_index_in = srx_index_in = stx_index_out = srx_index_out = 0;
                                    283 ;	genAssign: resultIsFar = TRUE
      000015 90s00r00r03      [12]  284 	mov	dptr,#_srx_index_out
                                    285 ;	genAssign: resultIsFar = TRUE
                                    286 ;	genAssign: resultIsFar = TRUE
                                    287 ;	genAssign: resultIsFar = TRUE
      000019 E4               [ 4]  288 	clr   a
      00001A F0               [ 8]  289 	movx  @dptr,a
      00001B 90s00r00r02      [12]  290 	mov   dptr,#_stx_index_out
      00001F F0               [ 8]  291 	movx  @dptr,a
      000020 90s00r00r01      [12]  292 	mov   dptr,#_srx_index_in
      000024 F0               [ 8]  293 	movx  @dptr,a
      000025 90s00r00r00      [12]  294 	mov   dptr,#_stx_index_in
      000029 F0               [ 8]  295 	movx  @dptr,a
                                    296 ;	serial.c:58: rx_serial_buffer_empty = tx_serial_buffer_empty = 1;
                                    297 ;	genAssign: resultIsFar = FALSE
      00002A D2*02            [ 8]  298 	setb	_tx_serial_buffer_empty
                                    299 ;	genAssign: resultIsFar = FALSE
      00002C D2*03            [ 8]  300 	setb	_rx_serial_buffer_empty
                                    301 ;	serial.c:59: work_flag_buffer_transfered = 0;
                                    302 ;	genAssign: resultIsFar = FALSE
      00002E C2*01            [ 8]  303 	clr	_work_flag_buffer_transfered
                                    304 ;	serial.c:60: work_flag_byte_arrived = 0;
                                    305 ;	genAssign: resultIsFar = FALSE
      000030 C2*00            [ 8]  306 	clr	_work_flag_byte_arrived
                                    307 ;	serial.c:61: ES=1;
                                    308 ;	genAssign: resultIsFar = FALSE
      000032 D2 AC            [ 8]  309 	setb	_ES
      000034                        310 00101$:
      000034 22               [16]  311 	ret
                                    312 ;------------------------------------------------------------
                                    313 ;Allocation info for local variables in function 'serial_interrupt_handler'
                                    314 ;------------------------------------------------------------
                                    315 ;	serial.c:64: void serial_interrupt_handler(void) __interrupt 4 __using 1
                                    316 ;	-----------------------------------------
                                    317 ;	 function serial_interrupt_handler
                                    318 ;	-----------------------------------------
      000035                        319 _serial_interrupt_handler:
                           00000A   320 	ar2 = 0x0A
                           00000B   321 	ar3 = 0x0B
                           00000C   322 	ar4 = 0x0C
                           00000D   323 	ar5 = 0x0D
                           00000E   324 	ar6 = 0x0E
                           00000F   325 	ar7 = 0x0F
                           000008   326 	ar0 = 0x08
                           000009   327 	ar1 = 0x09
      000035 C0 E0            [ 8]  328 	push	acc
      000037 C0 F0            [ 8]  329 	push	b
      000039 C0 82            [ 8]  330 	push	dpl
      00003B C0 83            [ 8]  331 	push	dph
      00003D C0 93            [ 8]  332 	push	dpx
      00003F C0 86            [ 8]  333 	push	dps
      000041 75 86 00         [12]  334 	mov	dps,#0
      000044 C0 9C            [ 8]  335 	push	acc1
      000046 C0 D0            [ 8]  336 	push	psw
      000048 75 D0 08         [12]  337 	mov	psw,#0x08
                                    338 ;	serial.c:66: ES=0;
                                    339 ;	genAssign: resultIsFar = FALSE
      00004B C2 AC            [ 8]  340 	clr	_ES
                                    341 ;	serial.c:67: if ( RI )
                                    342 ;	serial.c:69: RI = 0;
                                    343 ;	genAssign: resultIsFar = FALSE
      00004D 10 98 02         [12]  344 	jbc     _RI,00119$
      000050 80 24            [12]  345 	sjmp    00102$
      000052                        346 00119$:
                                    347 ;	serial.c:70: srx_buffer[srx_index_in++]=SBUF;
      000052 90s00r00r01      [12]  348 	mov	dptr,#_srx_index_in
                                    349 ;	genAssign: resultIsFar = FALSE
      000056 E0               [ 8]  350 	movx	a,@dptr
      000057 FA               [ 4]  351 	mov	r2,a
      000058 90s00r00r01      [12]  352 	mov	dptr,#_srx_index_in
      00005C 74 01            [ 8]  353 	mov	a,#0x01
      00005E 2A               [ 4]  354 	add	a,r2
      00005F F0               [ 8]  355 	movx	@dptr,a
      000060 EA               [ 4]  356 	mov	a,r2
      000061 24r04            [ 8]  357 	add	a,#_srx_buffer
      000063 F5 82            [ 8]  358 	mov	dpl,a
      000065 E4               [ 4]  359 	clr	a
      000066 34s01            [ 8]  360 	addc	a,#(_srx_buffer >> 8)
      000068 F5 83            [ 8]  361 	mov	dph,a
      00006A E4               [ 4]  362 	clr	a
      00006B 34s00            [ 8]  363 	addc	a,#(_srx_buffer >> 16)
      00006D F5 93            [ 8]  364 	mov	dpx,a
      00006F E5 99            [ 8]  365 	mov	a,_SBUF
      000071 F0               [ 8]  366 	movx	@dptr,a
                                    367 ;	serial.c:71: work_flag_byte_arrived = 1;
                                    368 ;	genAssign: resultIsFar = FALSE
      000072 D2*00            [ 8]  369 	setb	_work_flag_byte_arrived
                                    370 ;	serial.c:72: rx_serial_buffer_empty = 0;
                                    371 ;	genAssign: resultIsFar = FALSE
      000074 C2*03            [ 8]  372 	clr	_rx_serial_buffer_empty
      000076                        373 00102$:
                                    374 ;	serial.c:74: if ( TI )
                                    375 ;	serial.c:76: TI = 0;
                                    376 ;	genAssign: resultIsFar = FALSE
      000076 10 99 02         [12]  377 	jbc     _TI,00120$
      000079 80 3B            [12]  378 	sjmp    00107$
      00007B                        379 00120$:
                                    380 ;	serial.c:77: if (stx_index_out == stx_index_in )
      00007B 90s00r00r00      [12]  381 	mov	dptr,#_stx_index_in
      00007F 75 86 01         [12]  382 	mov     dps, #1
      000082 90s00r00r02      [12]  383 	mov     dptr, #_stx_index_out
      000086 E0               [ 8]  384 	movx	a,@dptr
      000087 75 86 00         [12]  385 	mov	dps,#0
      00008A F5 F0            [ 8]  386 	mov	b,a
      00008C E0               [ 8]  387 	movx	a,@dptr
      00008D B5 F0 06         [16]  388 	cjne a,b,00104$
      000090                        389 00122$:
                                    390 ;	serial.c:79: tx_serial_buffer_empty = 1;
                                    391 ;	genAssign: resultIsFar = FALSE
      000090 D2*02            [ 8]  392 	setb	_tx_serial_buffer_empty
                                    393 ;	serial.c:80: work_flag_buffer_transfered = 1;
                                    394 ;	genAssign: resultIsFar = FALSE
      000092 D2*01            [ 8]  395 	setb	_work_flag_buffer_transfered
      000094 80 20            [12]  396 	sjmp 00107$
      000096                        397 00104$:
                                    398 ;	serial.c:82: else SBUF = stx_buffer[stx_index_out++];
      000096 90s00r00r02      [12]  399 	mov	dptr,#_stx_index_out
                                    400 ;	genAssign: resultIsFar = FALSE
      00009A E0               [ 8]  401 	movx	a,@dptr
      00009B FA               [ 4]  402 	mov	r2,a
      00009C 90s00r00r02      [12]  403 	mov	dptr,#_stx_index_out
      0000A0 74 01            [ 8]  404 	mov	a,#0x01
      0000A2 2A               [ 4]  405 	add	a,r2
      0000A3 F0               [ 8]  406 	movx	@dptr,a
      0000A4 EA               [ 4]  407 	mov	a,r2
      0000A5 24r04            [ 8]  408 	add	a,#_stx_buffer
      0000A7 F5 82            [ 8]  409 	mov	dpl,a
      0000A9 E4               [ 4]  410 	clr	a
      0000AA 34s00            [ 8]  411 	addc	a,#(_stx_buffer >> 8)
      0000AC F5 83            [ 8]  412 	mov	dph,a
      0000AE E4               [ 4]  413 	clr	a
      0000AF 34s00            [ 8]  414 	addc	a,#(_stx_buffer >> 16)
      0000B1 F5 93            [ 8]  415 	mov	dpx,a
      0000B3 E0               [ 8]  416 	movx	a,@dptr
      0000B4 F5 99            [ 8]  417 	mov	_SBUF,a
      0000B6                        418 00107$:
                                    419 ;	serial.c:84: ES=1;
                                    420 ;	genAssign: resultIsFar = FALSE
      0000B6 D2 AC            [ 8]  421 	setb	_ES
      0000B8                        422 00108$:
      0000B8 D0 D0            [ 8]  423 	pop	psw
      0000BA D0 9C            [ 8]  424 	pop	acc1
      0000BC D0 86            [ 8]  425 	pop	dps
      0000BE D0 93            [ 8]  426 	pop	dpx
      0000C0 D0 83            [ 8]  427 	pop	dph
      0000C2 D0 82            [ 8]  428 	pop	dpl
      0000C4 D0 F0            [ 8]  429 	pop	b
      0000C6 D0 E0            [ 8]  430 	pop	acc
      0000C8 32               [16]  431 	reti
                                    432 ;	eliminated unneeded push/pop dpl1
                                    433 ;	eliminated unneeded push/pop dph1
                                    434 ;	eliminated unneeded push/pop dpx1
                                    435 ;------------------------------------------------------------
                                    436 ;Allocation info for local variables in function 'serial_putc'
                                    437 ;------------------------------------------------------------
                                    438 ;c                         Allocated to registers r2 
                                    439 ;------------------------------------------------------------
                                    440 ;	serial.c:89: void serial_putc(unsigned char c)
                                    441 ;	-----------------------------------------
                                    442 ;	 function serial_putc
                                    443 ;	-----------------------------------------
      0000C9                        444 _serial_putc:
                           000002   445 	ar2 = 0x02
                           000003   446 	ar3 = 0x03
                           000004   447 	ar4 = 0x04
                           000005   448 	ar5 = 0x05
                           000006   449 	ar6 = 0x06
                           000007   450 	ar7 = 0x07
                           000000   451 	ar0 = 0x00
                           000001   452 	ar1 = 0x01
      0000C9 AA 82            [ 8]  453 	mov	r2,dpl
                                    454 ;	serial.c:91: stx_buffer[stx_index_in++]=c;
      0000CB 90s00r00r00      [12]  455 	mov	dptr,#_stx_index_in
                                    456 ;	genAssign: resultIsFar = FALSE
      0000CF E0               [ 8]  457 	movx	a,@dptr
      0000D0 FB               [ 4]  458 	mov	r3,a
      0000D1 90s00r00r00      [12]  459 	mov	dptr,#_stx_index_in
      0000D5 74 01            [ 8]  460 	mov	a,#0x01
      0000D7 2B               [ 4]  461 	add	a,r3
      0000D8 F0               [ 8]  462 	movx	@dptr,a
      0000D9 EB               [ 4]  463 	mov	a,r3
      0000DA 24r04            [ 8]  464 	add	a,#_stx_buffer
      0000DC F5 82            [ 8]  465 	mov	dpl,a
      0000DE E4               [ 4]  466 	clr	a
      0000DF 34s00            [ 8]  467 	addc	a,#(_stx_buffer >> 8)
      0000E1 F5 83            [ 8]  468 	mov	dph,a
      0000E3 E4               [ 4]  469 	clr	a
      0000E4 34s00            [ 8]  470 	addc	a,#(_stx_buffer >> 16)
      0000E6 F5 93            [ 8]  471 	mov	dpx,a
      0000E8 EA               [ 4]  472 	mov	a,r2
      0000E9 F0               [ 8]  473 	movx	@dptr,a
                                    474 ;	serial.c:92: ES=0;
                                    475 ;	genAssign: resultIsFar = FALSE
      0000EA C2 AC            [ 8]  476 	clr	_ES
                                    477 ;	serial.c:93: if ( tx_serial_buffer_empty )
                                    478 ;	serial.c:95: tx_serial_buffer_empty = 0;
                                    479 ;	genAssign: resultIsFar = FALSE
      0000EC 10*02 02         [12]  480 	jbc     _tx_serial_buffer_empty,00108$
      0000EF 80 02            [12]  481 	sjmp    00102$
      0000F1                        482 00108$:
                                    483 ;	serial.c:96: TI=1;
                                    484 ;	genAssign: resultIsFar = FALSE
      0000F1 D2 99            [ 8]  485 	setb	_TI
      0000F3                        486 00102$:
                                    487 ;	serial.c:98: ES=1;
                                    488 ;	genAssign: resultIsFar = FALSE
      0000F3 D2 AC            [ 8]  489 	setb	_ES
      0000F5                        490 00103$:
      0000F5 22               [16]  491 	ret
                                    492 ;------------------------------------------------------------
                                    493 ;Allocation info for local variables in function 'serial_getc'
                                    494 ;------------------------------------------------------------
                                    495 ;tmp                       Allocated to registers r2 
                                    496 ;------------------------------------------------------------
                                    497 ;	serial.c:101: unsigned char serial_getc(void)
                                    498 ;	-----------------------------------------
                                    499 ;	 function serial_getc
                                    500 ;	-----------------------------------------
      0000F6                        501 _serial_getc:
                                    502 ;	serial.c:103: unsigned char tmp = srx_buffer[srx_index_out++];
      0000F6 90s00r00r03      [12]  503 	mov	dptr,#_srx_index_out
                                    504 ;	genAssign: resultIsFar = FALSE
      0000FA E0               [ 8]  505 	movx	a,@dptr
      0000FB FA               [ 4]  506 	mov	r2,a
      0000FC 90s00r00r03      [12]  507 	mov	dptr,#_srx_index_out
      000100 74 01            [ 8]  508 	mov	a,#0x01
      000102 2A               [ 4]  509 	add	a,r2
      000103 F0               [ 8]  510 	movx	@dptr,a
      000104 EA               [ 4]  511 	mov	a,r2
      000105 24r04            [ 8]  512 	add	a,#_srx_buffer
      000107 F5 82            [ 8]  513 	mov	dpl,a
      000109 E4               [ 4]  514 	clr	a
      00010A 34s01            [ 8]  515 	addc	a,#(_srx_buffer >> 8)
      00010C F5 83            [ 8]  516 	mov	dph,a
      00010E E4               [ 4]  517 	clr	a
      00010F 34s00            [ 8]  518 	addc	a,#(_srx_buffer >> 16)
      000111 F5 93            [ 8]  519 	mov	dpx,a
      000113 E0               [ 8]  520 	movx	a,@dptr
      000114 FA               [ 4]  521 	mov	r2,a
                                    522 ;	genAssign: resultIsFar = TRUE
                                    523 ;	serial.c:104: ES=0;
                                    524 ;	genAssign: resultIsFar = FALSE
      000115 C2 AC            [ 8]  525 	clr	_ES
                                    526 ;	serial.c:105: if ( srx_index_out == srx_index_in) rx_serial_buffer_empty = 1;
      000117 90s00r00r01      [12]  527 	mov	dptr,#_srx_index_in
      00011B 75 86 01         [12]  528 	mov     dps, #1
      00011E 90s00r00r03      [12]  529 	mov     dptr, #_srx_index_out
      000122 E0               [ 8]  530 	movx	a,@dptr
      000123 75 86 00         [12]  531 	mov	dps,#0
      000126 F5 F0            [ 8]  532 	mov	b,a
      000128 E0               [ 8]  533 	movx	a,@dptr
      000129 B5 F0 02         [16]  534 	cjne a,b,00102$
      00012C                        535 00109$:
                                    536 ;	genAssign: resultIsFar = FALSE
      00012C D2*03            [ 8]  537 	setb	_rx_serial_buffer_empty
      00012E                        538 00102$:
                                    539 ;	serial.c:106: ES=1;
                                    540 ;	genAssign: resultIsFar = FALSE
      00012E D2 AC            [ 8]  541 	setb	_ES
                                    542 ;	serial.c:107: return tmp;
      000130 8A 82            [ 8]  543 	mov	dpl,r2
      000132                        544 00103$:
      000132 22               [16]  545 	ret
                                    546 	.area CSEG    (CODE)
                                    547 	.area CONST   (CODE)
                                    548 	.area XINIT   (CODE)
                                    549 	.area CABS    (ABS,CODE)
