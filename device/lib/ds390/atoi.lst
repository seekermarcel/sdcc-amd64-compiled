                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:26 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module atoi
                                      7 	.optsdcc -mds390 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _atoi
                                     35 ;--------------------------------------------------------
                                     36 ; special function registers
                                     37 ;--------------------------------------------------------
                                     38 ;--------------------------------------------------------
                                     39 ; special function bits
                                     40 ;--------------------------------------------------------
                                     41 ;--------------------------------------------------------
                                     42 ; overlayable register banks
                                     43 ;--------------------------------------------------------
                                     44 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         45 	.ds 8
                                     46 ;--------------------------------------------------------
                                     47 ; internal ram data
                                     48 ;--------------------------------------------------------
                                     49 	.area DSEG    (DATA)
                                     50 ;--------------------------------------------------------
                                     51 ; overlayable items in internal ram 
                                     52 ;--------------------------------------------------------
                                     53 ;--------------------------------------------------------
                                     54 ; indirectly addressable internal ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area ISEG    (DATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute internal ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area IABS    (ABS,DATA)
                                     61 	.area IABS    (ABS,DATA)
                                     62 ;--------------------------------------------------------
                                     63 ; bit data
                                     64 ;--------------------------------------------------------
                                     65 	.area BSEG    (BIT)
      000000                         66 _atoi_neg_1_37:
      000000                         67 	.ds 1
                                     68 ;--------------------------------------------------------
                                     69 ; paged external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area PSEG    (PAG,XDATA)
                                     72 ;--------------------------------------------------------
                                     73 ; external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area XSEG    (XDATA)
      000000                         76 _atoi_nptr_1_36:
      000000                         77 	.ds 4
      000004                         78 _atoi_sloc0_1_0:
      000004                         79 	.ds 2
                                     80 ;--------------------------------------------------------
                                     81 ; absolute external ram data
                                     82 ;--------------------------------------------------------
                                     83 	.area XABS    (ABS,XDATA)
                                     84 ;--------------------------------------------------------
                                     85 ; external initialized ram data
                                     86 ;--------------------------------------------------------
                                     87 	.area XISEG   (XDATA)
                                     88 ;--------------------------------------------------------
                                     89 ; global & static initialisations
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME    (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 	.area GSFINAL (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; Home
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME    (CODE)
                                     99 	.area HOME    (CODE)
                                    100 ;--------------------------------------------------------
                                    101 ; code
                                    102 ;--------------------------------------------------------
                                    103 	.area CSEG    (CODE)
                                    104 ;------------------------------------------------------------
                                    105 ;Allocation info for local variables in function 'atoi'
                                    106 ;------------------------------------------------------------
                                    107 ;nptr                      Allocated with name '_atoi_nptr_1_36'
                                    108 ;__00010004                Allocated to registers 
                                    109 ;__00010001                Allocated to registers 
                                    110 ;ret                       Allocated to registers r6 r7 
                                    111 ;__00020002                Allocated to registers r4 r5 
                                    112 ;c                         Allocated to registers 
                                    113 ;__00020005                Allocated to registers r0 r1 
                                    114 ;c                         Allocated to registers 
                                    115 ;sloc0                     Allocated with name '_atoi_sloc0_1_0'
                                    116 ;------------------------------------------------------------
                                    117 ;	atoi.c:34: int atoi(const char *nptr)
                                    118 ;	-----------------------------------------
                                    119 ;	 function atoi
                                    120 ;	-----------------------------------------
      000000                        121 _atoi:
                           000002   122 	ar2 = 0x02
                           000003   123 	ar3 = 0x03
                           000004   124 	ar4 = 0x04
                           000005   125 	ar5 = 0x05
                           000006   126 	ar6 = 0x06
                           000007   127 	ar7 = 0x07
                           000000   128 	ar0 = 0x00
                           000001   129 	ar1 = 0x01
      000000 75 86 01         [12]  130 	mov     dps, #1
      000003 90s00r00r00      [12]  131 	mov     dptr, #_atoi_nptr_1_36
      000007 E5 82            [ 8]  132 	mov	a,dpl
      000009 F0               [ 8]  133 	movx	@dptr,a
      00000A A3               [12]  134 	inc	dptr
      00000B E5 83            [ 8]  135 	mov	a,dph
      00000D F0               [ 8]  136 	movx	@dptr,a
      00000E A3               [12]  137 	inc	dptr
      00000F E5 93            [ 8]  138 	mov	a,dpx
      000011 F0               [ 8]  139 	movx	@dptr,a
      000012 A3               [12]  140 	inc	dptr
      000013 E5 F0            [ 8]  141 	mov	a,b
      000015 F0               [ 8]  142 	movx	@dptr,a
      000016 75 86 00         [12]  143 	mov	dps,#0
                                    144 ;	atoi.c:36: int ret = 0;
                                    145 ;	genAssign: resultIsFar = TRUE
      000019 7E 00            [ 8]  146 	mov	r6,#0x00
      00001B 7F 00            [ 8]  147 	mov	r7,#0x00
                                    148 ;	atoi.c:39: while (isblank (*nptr))
      00001D 90s00r00r00      [12]  149 	mov	dptr,#_atoi_nptr_1_36
                                    150 ;	genAssign: resultIsFar = FALSE
      000021 E0               [ 8]  151 	movx	a,@dptr
      000022 F8               [ 4]  152 	mov	r0,a
      000023 A3               [12]  153 	inc	dptr
      000024 E0               [ 8]  154 	movx	a,@dptr
      000025 F9               [ 4]  155 	mov	r1,a
      000026 A3               [12]  156 	inc	dptr
      000027 E0               [ 8]  157 	movx	a,@dptr
      000028 FA               [ 4]  158 	mov	r2,a
      000029 A3               [12]  159 	inc	dptr
      00002A E0               [ 8]  160 	movx	a,@dptr
      00002B FB               [ 4]  161 	mov	r3,a
      00002C                        162 00101$:
      00002C 88 82            [ 8]  163 	mov	dpl,r0
      00002E 89 83            [ 8]  164 	mov	dph,r1
      000030 8A 93            [ 8]  165 	mov	dpx,r2
      000032 8B F0            [ 8]  166 	mov	b,r3
      000034 12s00r00r00      [16]  167 	lcall	__gptrget
      000038 FC               [ 4]  168 	mov  r4,a
      000039 33               [ 4]  169 	rlc	a
      00003A 95 E0            [ 8]  170 	subb	a,acc
      00003C FD               [ 4]  171 	mov	r5,a
                                    172 ;	../../device/include/ctype.h:53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
      00003D BC 20 02         [16]  173 	cjne	r4,#0x20,00147$
      000040 80 03            [12]  174 	sjmp 00115$
      000042                        175 00147$:
      000042 BC 09 0B         [16]  176 	cjne r4,#0x09,00131$
      000045                        177 00149$:
      000045                        178 00115$:
                                    179 ;	atoi.c:40: nptr++;
      000045 08               [ 4]  180 	inc	r0
      000046 B8 00 05         [16]  181 	cjne	r0,#0x00,00150$
      000049 09               [ 4]  182 	inc	r1
      00004A B9 00 01         [16]  183 	cjne	r1,#0x00,00150$
      00004D 0A               [ 4]  184 	inc	r2
      00004E                        185 00150$:
      00004E 80 DC            [12]  186 	sjmp 00101$
      000050                        187 00131$:
                                    188 ;	genAssign: resultIsFar = TRUE
      000050 90s00r00r00      [12]  189 	mov	dptr,#_atoi_nptr_1_36
      000054 E8               [ 4]  190 	mov	a,r0
      000055 F0               [ 8]  191 	movx	@dptr,a
      000056 A3               [12]  192 	inc	dptr
      000057 E9               [ 4]  193 	mov	a,r1
      000058 F0               [ 8]  194 	movx	@dptr,a
      000059 A3               [12]  195 	inc	dptr
      00005A EA               [ 4]  196 	mov	a,r2
      00005B F0               [ 8]  197 	movx	@dptr,a
      00005C A3               [12]  198 	inc	dptr
      00005D EB               [ 4]  199 	mov	a,r3
      00005E F0               [ 8]  200 	movx	@dptr,a
                                    201 ;	atoi.c:42: neg = (*nptr == '-');
      00005F 88 82            [ 8]  202 	mov	dpl,r0
      000061 89 83            [ 8]  203 	mov	dph,r1
      000063 8A 93            [ 8]  204 	mov	dpx,r2
      000065 8B F0            [ 8]  205 	mov	b,r3
      000067 12s00r00r00      [16]  206 	lcall	__gptrget
      00006B FA               [ 4]  207 	mov	r2,a
      00006C E4               [ 4]  208 	clr     a
      00006D BA 2D 01         [16]  209 	cjne    r2,#0x2D,00151$
      000070 04               [ 4]  210 	inc     a
      000071                        211 00151$:
      000071                        212 00152$:
      000071 24 FF            [ 8]  213 	add	a,#0xFF
      000073 92*00            [ 8]  214 	mov	_atoi_neg_1_37,c
                                    215 ;	atoi.c:44: if (*nptr == '-' || *nptr == '+')
      000075 BA 2D 02         [16]  216 	cjne	r2,#0x2D,00153$
      000078 80 03            [12]  217 	sjmp 00104$
      00007A                        218 00153$:
      00007A BA 2B 15         [16]  219 	cjne r2,#0x2B,00129$
      00007D                        220 00155$:
      00007D                        221 00104$:
                                    222 ;	atoi.c:45: nptr++;
      00007D 90s00r00r00      [12]  223 	mov	dptr,#_atoi_nptr_1_36
      000081 E0               [ 8]  224 	movx	a,@dptr
      000082 24 01            [ 8]  225 	add	a,#0x01
      000084 F0               [ 8]  226 	movx	@dptr,a
      000085 A3               [12]  227 	inc	dptr
      000086 E0               [ 8]  228 	movx	a,@dptr
      000087 34 00            [ 8]  229 	addc	a,#0x00
      000089 F0               [ 8]  230 	movx	@dptr,a
      00008A A3               [12]  231 	inc	dptr
      00008B E0               [ 8]  232 	movx	a,@dptr
      00008C 34 00            [ 8]  233 	addc	a,#0x00
      00008E F0               [ 8]  234 	movx	@dptr,a
      00008F A3               [12]  235 	inc	dptr
      000090 E0               [ 8]  236 	movx	a,@dptr
      000091 F0               [ 8]  237 	movx	@dptr,a
                                    238 ;	atoi.c:47: while (isdigit (*nptr))
      000092                        239 00129$:
      000092 90s00r00r00      [12]  240 	mov	dptr,#_atoi_nptr_1_36
                                    241 ;	genAssign: resultIsFar = FALSE
      000096 E0               [ 8]  242 	movx	a,@dptr
      000097 FA               [ 4]  243 	mov	r2,a
      000098 A3               [12]  244 	inc	dptr
      000099 E0               [ 8]  245 	movx	a,@dptr
      00009A FB               [ 4]  246 	mov	r3,a
      00009B A3               [12]  247 	inc	dptr
      00009C E0               [ 8]  248 	movx	a,@dptr
      00009D FC               [ 4]  249 	mov	r4,a
      00009E A3               [12]  250 	inc	dptr
      00009F E0               [ 8]  251 	movx	a,@dptr
      0000A0 FD               [ 4]  252 	mov	r5,a
      0000A1                        253 00107$:
      0000A1 8A 82            [ 8]  254 	mov	dpl,r2
      0000A3 8B 83            [ 8]  255 	mov	dph,r3
      0000A5 8C 93            [ 8]  256 	mov	dpx,r4
      0000A7 8D F0            [ 8]  257 	mov	b,r5
      0000A9 12s00r00r00      [16]  258 	lcall	__gptrget
      0000AD F8               [ 4]  259 	mov  r0,a
      0000AE 33               [ 4]  260 	rlc	a
      0000AF 95 E0            [ 8]  261 	subb	a,acc
      0000B1 F9               [ 4]  262 	mov	r1,a
                                    263 ;	../../device/include/ctype.h:62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      0000B2 B8 30 00         [16]  264 	cjne	r0,#0x30,00156$
      0000B5                        265 00156$:
      0000B5 40 67            [12]  266 	jc   00109$
      0000B7                        267 00157$:
      0000B7 C3               [ 4]  268 	clr	c
      0000B8 74 39            [ 8]  269 	mov	a,#0x39
      0000BA 98               [ 4]  270 	subb	a,r0
      0000BB 40 61            [12]  271 	jc   00109$
      0000BD                        272 00158$:
                                    273 ;	atoi.c:48: ret = ret * 10 + (*(nptr++) - '0');
                                    274 ;	genAssign: resultIsFar = TRUE
      0000BD 90s00r00r00      [12]  275 	mov	dptr,#__mulint_PARM_2
      0000C1 EE               [ 4]  276 	mov	a,r6
      0000C2 F0               [ 8]  277 	movx	@dptr,a
      0000C3 A3               [12]  278 	inc	dptr
      0000C4 EF               [ 4]  279 	mov	a,r7
      0000C5 F0               [ 8]  280 	movx	@dptr,a
      0000C6 C0 02            [ 8]  281 	push	ar2
      0000C8 C0 03            [ 8]  282 	push	ar3
      0000CA C0 04            [ 8]  283 	push	ar4
      0000CC C0 05            [ 8]  284 	push	ar5
      0000CE 90 00 00 0A      [12]  285 	mov  dptr,#0x000A
      0000D2 12s00r00r00      [16]  286 	lcall	__mulint
      0000D6 E5 82            [ 8]  287 	mov	a,dpl
      0000D8 85 83 F0         [12]  288 	mov	b,dph
      0000DB 90s00r00r04      [12]  289 	mov	dptr,#_atoi_sloc0_1_0
      0000DF F0               [ 8]  290 	movx	@dptr,a
      0000E0 A3               [12]  291 	inc	dptr
      0000E1 E5 F0            [ 8]  292 	mov	a,b
      0000E3 F0               [ 8]  293 	movx	@dptr,a
      0000E4 D0 05            [ 8]  294 	pop	ar5
      0000E6 D0 04            [ 8]  295 	pop	ar4
      0000E8 D0 03            [ 8]  296 	pop	ar3
      0000EA D0 02            [ 8]  297 	pop	ar2
      0000EC 8A 82            [ 8]  298 	mov	dpl,r2
      0000EE 8B 83            [ 8]  299 	mov	dph,r3
      0000F0 8C 93            [ 8]  300 	mov	dpx,r4
      0000F2 8D F0            [ 8]  301 	mov	b,r5
      0000F4 12s00r00r00      [16]  302 	lcall	__gptrget
      0000F8 F8               [ 4]  303 	mov	r0,a
      0000F9 A3               [12]  304 	inc	dptr
      0000FA AA 82            [ 8]  305 	mov	r2,dpl
      0000FC AB 83            [ 8]  306 	mov	r3,dph
      0000FE AC 93            [ 8]  307 	mov	r4,dpx
      000100 AD F0            [ 8]  308 	mov	r5,b
      000102 E8               [ 4]  309 	mov	a,r0
      000103 33               [ 4]  310 	rlc	a
      000104 95 E0            [ 8]  311 	subb	a,acc
      000106 F9               [ 4]  312 	mov	r1,a
      000107 E8               [ 4]  313 	mov	a,r0
      000108 24 D0            [ 8]  314 	add	a,#0xD0
      00010A F8               [ 4]  315 	mov	r0,a
      00010B E9               [ 4]  316 	mov	a,r1
      00010C 34 FF            [ 8]  317 	addc	a,#0xFF
      00010E F9               [ 4]  318 	mov	r1,a
      00010F 90s00r00r04      [12]  319 	mov	dptr,#_atoi_sloc0_1_0
      000113 E0               [ 8]  320 	movx	a,@dptr
      000114 28               [ 4]  321 	add	a,r0
      000115 FE               [ 4]  322 	mov	r6,a
      000116 A3               [12]  323 	inc	dptr
      000117 E0               [ 8]  324 	movx	a,@dptr
      000118 39               [ 4]  325 	addc	a,r1
      000119 FF               [ 4]  326 	mov	r7,a
      00011A 02s00r00rA1      [16]  327 	ljmp	00107$
      00011E                        328 00109$:
                                    329 ;	atoi.c:50: return (neg ? -ret : ret); // Since -INT_MIN is INT_MIN in sdcc, the result value always turns out ok.
      00011E 30*00 0B         [12]  330 	jnb  _atoi_neg_1_37,00120$
      000121                        331 00159$:
      000121 C3               [ 4]  332 	clr	c
      000122 E4               [ 4]  333 	clr	a
      000123 9E               [ 4]  334 	subb	a,r6
      000124 F5 82            [ 8]  335 	mov	dpl,a
      000126 E4               [ 4]  336 	clr	a
      000127 9F               [ 4]  337 	subb	a,r7
      000128 F5 83            [ 8]  338 	mov	dph,a
      00012A 80 04            [12]  339 	sjmp 00121$
      00012C                        340 00120$:
                                    341 ;	genAssign: resultIsFar = FALSE
      00012C 8E 82            [ 8]  342 	mov	dpl,r6
      00012E 8F 83            [ 8]  343 	mov	dph,r7
      000130                        344 00121$:
      000130                        345 00112$:
      000130 22               [16]  346 	ret
                                    347 	.area CSEG    (CODE)
                                    348 	.area CONST   (CODE)
                                    349 	.area XINIT   (CODE)
                                    350 	.area CABS    (ABS,CODE)
