                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:15:23 2022
                              5 ;--------------------------------------------------------
                              6 	.module asinf
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _asincosf
                             13 	.globl _asinf
                             14 ;--------------------------------------------------------
                             15 ; special function registers
                             16 ;--------------------------------------------------------
                             17 ;--------------------------------------------------------
                             18 ; ram data
                             19 ;--------------------------------------------------------
                             20 	.area _DATA
                             21 ;--------------------------------------------------------
                             22 ; ram data
                             23 ;--------------------------------------------------------
                             24 	.area _INITIALIZED
                             25 ;--------------------------------------------------------
                             26 ; absolute external ram data
                             27 ;--------------------------------------------------------
                             28 	.area _DABS (ABS)
                             29 ;--------------------------------------------------------
                             30 ; global & static initialisations
                             31 ;--------------------------------------------------------
                             32 	.area _HOME
                             33 	.area _GSINIT
                             34 	.area _GSFINAL
                             35 	.area _GSINIT
                             36 ;--------------------------------------------------------
                             37 ; Home
                             38 ;--------------------------------------------------------
                             39 	.area _HOME
                             40 	.area _HOME
                             41 ;--------------------------------------------------------
                             42 ; code
                             43 ;--------------------------------------------------------
                             44 	.area _CODE
                             45 ;../asinf.c:36: float asinf(float x) _FLOAT_FUNC_REENTRANT
                             46 ;	---------------------------------
                             47 ; Function asinf
                             48 ; ---------------------------------
   0000                      49 _asinf::
                             50 ;../asinf.c:38: if (x == 1.0) return  HALF_PI;
   0000 21 80 3F      [10]   51 	ld	hl,#0x3F80
   0003 E5            [11]   52 	push	hl
   0004 21 00 00      [10]   53 	ld	hl,#0x0000
   0007 E5            [11]   54 	push	hl
   0008 FD 21 06 00   [14]   55 	ld	iy,#6
   000C FD 39         [15]   56 	add	iy,sp
   000E FD 6E 02      [19]   57 	ld	l,2 (iy)
   0011 FD 66 03      [19]   58 	ld	h,3 (iy)
   0014 E5            [11]   59 	push	hl
   0015 FD 6E 00      [19]   60 	ld	l,0 (iy)
   0018 FD 66 01      [19]   61 	ld	h,1 (iy)
   001B E5            [11]   62 	push	hl
   001C CDr00r00      [17]   63 	call	___fseq
   001F F1            [10]   64 	pop	af
   0020 F1            [10]   65 	pop	af
   0021 F1            [10]   66 	pop	af
   0022 F1            [10]   67 	pop	af
   0023 7D            [ 4]   68 	ld	a,l
   0024 B7            [ 4]   69 	or	a, a
   0025 28 07         [12]   70 	jr	Z,00108$
   0027 21 DB 0F      [10]   71 	ld	hl,#0x0FDB
   002A 11 C9 3F      [10]   72 	ld	de,#0x3FC9
   002D C9            [10]   73 	ret
   002E                      74 00108$:
                             75 ;../asinf.c:39: else if (x ==-1.0) return -HALF_PI;
   002E 21 80 BF      [10]   76 	ld	hl,#0xBF80
   0031 E5            [11]   77 	push	hl
   0032 21 00 00      [10]   78 	ld	hl,#0x0000
   0035 E5            [11]   79 	push	hl
   0036 FD 21 06 00   [14]   80 	ld	iy,#6
   003A FD 39         [15]   81 	add	iy,sp
   003C FD 6E 02      [19]   82 	ld	l,2 (iy)
   003F FD 66 03      [19]   83 	ld	h,3 (iy)
   0042 E5            [11]   84 	push	hl
   0043 FD 6E 00      [19]   85 	ld	l,0 (iy)
   0046 FD 66 01      [19]   86 	ld	h,1 (iy)
   0049 E5            [11]   87 	push	hl
   004A CDr00r00      [17]   88 	call	___fseq
   004D F1            [10]   89 	pop	af
   004E F1            [10]   90 	pop	af
   004F F1            [10]   91 	pop	af
   0050 F1            [10]   92 	pop	af
   0051 7D            [ 4]   93 	ld	a,l
   0052 B7            [ 4]   94 	or	a, a
   0053 28 07         [12]   95 	jr	Z,00105$
   0055 21 DB 0F      [10]   96 	ld	hl,#0x0FDB
   0058 11 C9 BF      [10]   97 	ld	de,#0xBFC9
   005B C9            [10]   98 	ret
   005C                      99 00105$:
                            100 ;../asinf.c:40: else if (x == 0.0) return 0.0;
   005C FD 21 02 00   [14]  101 	ld	iy,#2
   0060 FD 39         [15]  102 	add	iy,sp
   0062 FD 7E 03      [19]  103 	ld	a,3 (iy)
   0065 CB BF         [ 8]  104 	res	7, a
   0067 FD B6 02      [19]  105 	or	a, 2 (iy)
   006A FD B6 01      [19]  106 	or	a, 1 (iy)
   006D FD B6 00      [19]  107 	or	a,0 (iy)
   0070 20 06         [12]  108 	jr	NZ,00102$
   0072 21 00 00      [10]  109 	ld	hl,#0x0000
   0075 5D            [ 4]  110 	ld	e,l
   0076 54            [ 4]  111 	ld	d,h
   0077 C9            [10]  112 	ret
   0078                     113 00102$:
                            114 ;../asinf.c:41: else               return asincosf(x, false);
   0078 AF            [ 4]  115 	xor	a, a
   0079 F5            [11]  116 	push	af
   007A 33            [ 6]  117 	inc	sp
   007B FD 21 03 00   [14]  118 	ld	iy,#3
   007F FD 39         [15]  119 	add	iy,sp
   0081 FD 6E 02      [19]  120 	ld	l,2 (iy)
   0084 FD 66 03      [19]  121 	ld	h,3 (iy)
   0087 E5            [11]  122 	push	hl
   0088 FD 6E 00      [19]  123 	ld	l,0 (iy)
   008B FD 66 01      [19]  124 	ld	h,1 (iy)
   008E E5            [11]  125 	push	hl
   008F CDr00r00      [17]  126 	call	_asincosf
   0092 F1            [10]  127 	pop	af
   0093 F1            [10]  128 	pop	af
   0094 33            [ 6]  129 	inc	sp
   0095 C9            [10]  130 	ret
                            131 	.area _CODE
                            132 	.area _INITIALIZER
                            133 	.area _CABS (ABS)
