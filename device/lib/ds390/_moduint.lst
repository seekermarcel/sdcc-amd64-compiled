                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:26 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _moduint
                                      7 	.optsdcc -mds390 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl __moduint_PARM_2
                                     35 	.globl __moduint
                                     36 ;--------------------------------------------------------
                                     37 ; special function registers
                                     38 ;--------------------------------------------------------
                                     39 ;--------------------------------------------------------
                                     40 ; special function bits
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; overlayable register banks
                                     44 ;--------------------------------------------------------
                                     45 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         46 	.ds 8
                                     47 ;--------------------------------------------------------
                                     48 ; internal ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area DSEG    (DATA)
                                     51 ;--------------------------------------------------------
                                     52 ; overlayable items in internal ram 
                                     53 ;--------------------------------------------------------
                                     54 ;--------------------------------------------------------
                                     55 ; indirectly addressable internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area ISEG    (DATA)
                                     58 ;--------------------------------------------------------
                                     59 ; absolute internal ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area IABS    (ABS,DATA)
                                     62 	.area IABS    (ABS,DATA)
                                     63 ;--------------------------------------------------------
                                     64 ; bit data
                                     65 ;--------------------------------------------------------
                                     66 	.area BSEG    (BIT)
                                     67 ;--------------------------------------------------------
                                     68 ; paged external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area PSEG    (PAG,XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XSEG    (XDATA)
      000000                         75 __moduint_PARM_2:
      000000                         76 	.ds 2
                                     77 ;--------------------------------------------------------
                                     78 ; absolute external ram data
                                     79 ;--------------------------------------------------------
                                     80 	.area XABS    (ABS,XDATA)
                                     81 ;--------------------------------------------------------
                                     82 ; external initialized ram data
                                     83 ;--------------------------------------------------------
                                     84 	.area XISEG   (XDATA)
                                     85 ;--------------------------------------------------------
                                     86 ; global & static initialisations
                                     87 ;--------------------------------------------------------
                                     88 	.area HOME    (CODE)
                                     89 	.area GSINIT  (CODE)
                                     90 	.area GSFINAL (CODE)
                                     91 	.area GSINIT  (CODE)
                                     92 ;--------------------------------------------------------
                                     93 ; Home
                                     94 ;--------------------------------------------------------
                                     95 	.area HOME    (CODE)
                                     96 	.area HOME    (CODE)
                                     97 ;--------------------------------------------------------
                                     98 ; code
                                     99 ;--------------------------------------------------------
                                    100 	.area CSEG    (CODE)
                                    101 ;------------------------------------------------------------
                                    102 ;Allocation info for local variables in function '_moduint'
                                    103 ;------------------------------------------------------------
                                    104 ;b                         Allocated with name '__moduint_PARM_2'
                                    105 ;a                         Allocated to registers r2 r3 
                                    106 ;count                     Allocated to registers r4 
                                    107 ;------------------------------------------------------------
                                    108 ;	_moduint.c:173: _moduint (unsigned int a, unsigned int b)
                                    109 ;	-----------------------------------------
                                    110 ;	 function _moduint
                                    111 ;	-----------------------------------------
      000000                        112 __moduint:
                           000002   113 	ar2 = 0x02
                           000003   114 	ar3 = 0x03
                           000004   115 	ar4 = 0x04
                           000005   116 	ar5 = 0x05
                           000006   117 	ar6 = 0x06
                           000007   118 	ar7 = 0x07
                           000000   119 	ar0 = 0x00
                           000001   120 	ar1 = 0x01
      000000 85 82 84         [12]  121 	mov	dpl1,dpl
      000003 85 83 85         [12]  122 	mov	dph1,dph
                                    123 ;	_moduint.c:175: unsigned char count = 0;
                                    124 ;	genAssign: resultIsFar = TRUE
      000006 7C 00            [ 8]  125 	mov	r4,#0x00
                                    126 ;	_moduint.c:177: while (!MSB_SET(b))
                                    127 ;	genAssign: resultIsFar = FALSE
      000008 7D 00            [ 8]  128 	mov	r5,#0x00
      00000A                        129 00103$:
      00000A 90s00r00r00      [12]  130 	mov	dptr,#__moduint_PARM_2
      00000E A3               [12]  131 	inc	dptr
      00000F E0               [ 8]  132 	movx	a,@dptr
      000010 23               [ 4]  133 	rl	a
      000011 54 01            [ 8]  134 	anl	a,#0x01
      000013 FE               [ 4]  135 	mov  r6,a
      000014 70 4F            [12]  136 	jnz  00117$
      000016                        137 00132$:
                                    138 ;	_moduint.c:179: b <<= 1;
      000016 90s00r00r00      [12]  139 	mov	dptr,#__moduint_PARM_2
      00001A E0               [ 8]  140 	movx	a,@dptr
      00001B FE               [ 4]  141 	mov	r6,a
      00001C A3               [12]  142 	inc	dptr
      00001D E0               [ 8]  143 	movx	a,@dptr
      00001E CE               [ 4]  144 	xch	a,r6
      00001F 25 E0            [ 8]  145 	add	a,acc
      000021 CE               [ 4]  146 	xch	a,r6
      000022 33               [ 4]  147 	rlc	a
      000023 FF               [ 4]  148 	mov	r7,a
                                    149 ;	genAssign: resultIsFar = TRUE
      000024 90s00r00r00      [12]  150 	mov	dptr,#__moduint_PARM_2
      000028 EE               [ 4]  151 	mov	a,r6
      000029 F0               [ 8]  152 	movx	@dptr,a
      00002A A3               [12]  153 	inc	dptr
      00002B EF               [ 4]  154 	mov	a,r7
      00002C F0               [ 8]  155 	movx	@dptr,a
                                    156 ;	_moduint.c:180: if (b > a)
      00002D 90s00r00r00      [12]  157 	mov	dptr,#__moduint_PARM_2
      000031 C3               [ 4]  158 	clr	c
      000032 E5 84            [ 8]  159 	mov	a,dpl1
      000034 C5 F0            [ 8]  160 	xch	a, b
      000036 E0               [ 8]  161 	movx	a,@dptr
      000037 C5 F0            [ 8]  162 	xch	a, b
      000039 95 F0            [ 8]  163 	subb	a,b
      00003B E5 85            [ 8]  164 	mov	a,dph1
      00003D C5 F0            [ 8]  165 	xch	a, b
      00003F A3               [12]  166 	inc	dptr
      000040 E0               [ 8]  167 	movx	a,@dptr
      000041 C5 F0            [ 8]  168 	xch	a, b
      000043 95 F0            [ 8]  169 	subb	a,b
      000045 50 19            [12]  170 	jnc  00102$
      000047                        171 00133$:
                                    172 ;	_moduint.c:182: b >>=1;
      000047 90s00r00r00      [12]  173 	mov	dptr,#__moduint_PARM_2
      00004B E0               [ 8]  174 	movx	a,@dptr
      00004C FE               [ 4]  175 	mov	r6,a
      00004D A3               [12]  176 	inc	dptr
      00004E E0               [ 8]  177 	movx	a,@dptr
      00004F C3               [ 4]  178 	clr	c
      000050 13               [ 4]  179 	rrc	a
      000051 CE               [ 4]  180 	xch	a,r6
      000052 13               [ 4]  181 	rrc	a
      000053 CE               [ 4]  182 	xch	a,r6
      000054 FF               [ 4]  183 	mov	r7,a
                                    184 ;	genAssign: resultIsFar = TRUE
      000055 90s00r00r00      [12]  185 	mov	dptr,#__moduint_PARM_2
      000059 EE               [ 4]  186 	mov	a,r6
      00005A F0               [ 8]  187 	movx	@dptr,a
      00005B A3               [12]  188 	inc	dptr
      00005C EF               [ 4]  189 	mov	a,r7
      00005D F0               [ 8]  190 	movx	@dptr,a
                                    191 ;	_moduint.c:183: break;
      00005E 80 05            [12]  192 	sjmp 00117$
      000060                        193 00102$:
                                    194 ;	_moduint.c:185: count++;
      000060 0D               [ 4]  195 	inc	r5
                                    196 ;	genAssign: resultIsFar = TRUE
      000061 8D 04            [ 8]  197 	mov	ar4,r5
                                    198 ;	_moduint.c:187: do
      000063 80 A5            [12]  199 	sjmp 00103$
      000065                        200 00117$:
                                    201 ;	genAssign: resultIsFar = FALSE
      000065                        202 00108$:
                                    203 ;	_moduint.c:189: if (a >= b)
      000065 90s00r00r00      [12]  204 	mov	dptr,#__moduint_PARM_2
      000069 C3               [ 4]  205 	clr	c
      00006A E5 84            [ 8]  206 	mov	a,dpl1
      00006C C5 F0            [ 8]  207 	xch	a, b
      00006E E0               [ 8]  208 	movx	a,@dptr
      00006F C5 F0            [ 8]  209 	xch	a, b
      000071 95 F0            [ 8]  210 	subb	a,b
      000073 E5 85            [ 8]  211 	mov	a,dph1
      000075 C5 F0            [ 8]  212 	xch	a, b
      000077 A3               [12]  213 	inc	dptr
      000078 E0               [ 8]  214 	movx	a,@dptr
      000079 C5 F0            [ 8]  215 	xch	a, b
      00007B 95 F0            [ 8]  216 	subb	a,b
      00007D 40 1A            [12]  217 	jc   00107$
      00007F                        218 00134$:
                                    219 ;	_moduint.c:190: a -= b;
      00007F 90s00r00r00      [12]  220 	mov	dptr,#__moduint_PARM_2
      000083 C3               [ 4]  221 	clr	c
      000084 E0               [ 8]  222 	movx	a,@dptr
      000085 F5 F0            [ 8]  223 	mov	b,a
      000087 E5 84            [ 8]  224 	mov	a,dpl1
      000089 95 F0            [ 8]  225 	subb	a,b
      00008B FD               [ 4]  226 	mov	r5,a
      00008C A3               [12]  227 	inc	dptr
      00008D E0               [ 8]  228 	movx	a,@dptr
      00008E F5 F0            [ 8]  229 	mov	b,a
      000090 E5 85            [ 8]  230 	mov	a,dph1
      000092 95 F0            [ 8]  231 	subb	a,b
      000094 FE               [ 4]  232 	mov	r6,a
                                    233 ;	genAssign: resultIsFar = TRUE
      000095 8D 84            [ 8]  234 	mov	dpl1,r5
      000097 8E 85            [ 8]  235 	mov	dph1,r6
      000099                        236 00107$:
                                    237 ;	_moduint.c:191: b >>= 1;
      000099 90s00r00r00      [12]  238 	mov	dptr,#__moduint_PARM_2
      00009D E0               [ 8]  239 	movx	a,@dptr
      00009E FD               [ 4]  240 	mov	r5,a
      00009F A3               [12]  241 	inc	dptr
      0000A0 E0               [ 8]  242 	movx	a,@dptr
      0000A1 C3               [ 4]  243 	clr	c
      0000A2 13               [ 4]  244 	rrc	a
      0000A3 CD               [ 4]  245 	xch	a,r5
      0000A4 13               [ 4]  246 	rrc	a
      0000A5 CD               [ 4]  247 	xch	a,r5
      0000A6 FE               [ 4]  248 	mov	r6,a
                                    249 ;	genAssign: resultIsFar = TRUE
      0000A7 90s00r00r00      [12]  250 	mov	dptr,#__moduint_PARM_2
      0000AB ED               [ 4]  251 	mov	a,r5
      0000AC F0               [ 8]  252 	movx	@dptr,a
      0000AD A3               [12]  253 	inc	dptr
      0000AE EE               [ 4]  254 	mov	a,r6
      0000AF F0               [ 8]  255 	movx	@dptr,a
                                    256 ;	_moduint.c:193: while (count--);
                                    257 ;	genAssign: resultIsFar = FALSE
      0000B0 8C 05            [ 8]  258 	mov	ar5,r4
      0000B2 1C               [ 4]  259 	dec	r4
      0000B3 ED               [ 4]  260 	mov	a,r5
      0000B4 70 AF            [12]  261 	jnz  00108$
      0000B6                        262 00135$:
                                    263 ;	_moduint.c:194: return a;
      0000B6 85 84 82         [12]  264 	mov	dpl,dpl1
      0000B9 85 85 83         [12]  265 	mov	dph,dph1
      0000BC                        266 00111$:
      0000BC 22               [16]  267 	ret
                                    268 	.area CSEG    (CODE)
                                    269 	.area CONST   (CODE)
                                    270 	.area XINIT   (CODE)
                                    271 	.area CABS    (ABS,CODE)
