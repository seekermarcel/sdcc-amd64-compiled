                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:10:32 2022
                              5 ;--------------------------------------------------------
                              6 	.module acosf
                              7 	.optsdcc -mhc08
                              8 	
                              9 	.area HOME    (CODE)
                             10 	.area GSINIT0 (CODE)
                             11 	.area GSINIT  (CODE)
                             12 	.area GSFINAL (CODE)
                             13 	.area CSEG    (CODE)
                             14 	.area XINIT   (CODE)
                             15 	.area CONST   (CODE)
                             16 	.area DSEG    (PAG)
                             17 	.area OSEG    (PAG, OVR)
                             18 	.area XSEG
                             19 	.area XISEG
                             20 ;--------------------------------------------------------
                             21 ; Public variables in this module
                             22 ;--------------------------------------------------------
                             23 	.globl _asincosf
                             24 	.globl _acosf
                             25 ;--------------------------------------------------------
                             26 ; ram data
                             27 ;--------------------------------------------------------
                             28 	.area DSEG    (PAG)
                             29 ;--------------------------------------------------------
                             30 ; overlayable items in ram 
                             31 ;--------------------------------------------------------
                             32 ;--------------------------------------------------------
                             33 ; absolute ram data
                             34 ;--------------------------------------------------------
                             35 	.area IABS    (ABS)
                             36 	.area IABS    (ABS)
                             37 ;--------------------------------------------------------
                             38 ; absolute external ram data
                             39 ;--------------------------------------------------------
                             40 	.area XABS    (ABS)
                             41 ;--------------------------------------------------------
                             42 ; external initialized ram data
                             43 ;--------------------------------------------------------
                             44 	.area XISEG
                             45 ;--------------------------------------------------------
                             46 ; extended address mode data
                             47 ;--------------------------------------------------------
                             48 	.area XSEG
                             49 ;--------------------------------------------------------
                             50 ; global & static initialisations
                             51 ;--------------------------------------------------------
                             52 	.area HOME    (CODE)
                             53 	.area GSINIT  (CODE)
                             54 	.area GSFINAL (CODE)
                             55 	.area GSINIT  (CODE)
                             56 ;--------------------------------------------------------
                             57 ; Home
                             58 ;--------------------------------------------------------
                             59 	.area HOME    (CODE)
                             60 	.area HOME    (CODE)
                             61 ;--------------------------------------------------------
                             62 ; code
                             63 ;--------------------------------------------------------
                             64 	.area CSEG    (CODE)
                             65 ;------------------------------------------------------------
                             66 ;Allocation info for local variables in function 'acosf'
                             67 ;------------------------------------------------------------
                             68 ;x                         Allocated to stack - sp -2
                             69 ;sloc0                     Allocated to stack - sp -8
                             70 ;------------------------------------------------------------
                             71 ;../acosf.c:36: float acosf(float x) _FLOAT_FUNC_REENTRANT
                             72 ;	-----------------------------------------
                             73 ;	 function acosf
                             74 ;	-----------------------------------------
                             75 ;	Register assignment is optimal.
                             76 ;	Stack space usage: 4 bytes.
   0000                      77 _acosf:
   0000 A7 FC         [ 2]   78 	ais	#-4
                             79 ;../acosf.c:38: if (x == 1.0) return 0.0;
   0002 95            [ 2]   80 	tsx
   0003 45r00r00      [ 3]   81 	ldhx	#___fseq_PARM_1
   0006 9E E6 07      [ 4]   82 	lda	7,s
   0009 F7            [ 2]   83 	sta	,x
   000A 9E E6 08      [ 4]   84 	lda	8,s
   000D E7 01         [ 3]   85 	sta	1,x
   000F 9E E6 09      [ 4]   86 	lda	9,s
   0012 E7 02         [ 3]   87 	sta	2,x
   0014 9E E6 0A      [ 4]   88 	lda	10,s
   0017 E7 03         [ 3]   89 	sta	3,x
   0019 45r00r00      [ 3]   90 	ldhx	#___fseq_PARM_2
   001C A6 3F         [ 2]   91 	lda	#0x3F
   001E F7            [ 2]   92 	sta	,x
   001F A6 80         [ 2]   93 	lda	#0x80
   0021 E7 01         [ 3]   94 	sta	1,x
   0023 4F            [ 1]   95 	clra
   0024 E7 02         [ 3]   96 	sta	2,x
   0026 E7 03         [ 3]   97 	sta	3,x
   0028 CDr00r00      [ 5]   98 	jsr	___fseq
   002B 4D            [ 1]   99 	tsta
   002C 27 09         [ 3]  100 	beq	00108$
   002E 4F            [ 1]  101 	clra
   002F 97            [ 1]  102 	tax
   0030 B7*00         [ 3]  103 	sta	*___SDCC_hc08_ret2
   0032 B7*00         [ 3]  104 	sta	*___SDCC_hc08_ret3
   0034 CCr00rC4      [ 3]  105 	jmp	00110$
   0037                     106 00108$:
                            107 ;../acosf.c:39: else if (x ==-1.0) return PI;
   0037 95            [ 2]  108 	tsx
   0038 45r00r00      [ 3]  109 	ldhx	#___fseq_PARM_1
   003B 9E E6 07      [ 4]  110 	lda	7,s
   003E F7            [ 2]  111 	sta	,x
   003F 9E E6 08      [ 4]  112 	lda	8,s
   0042 E7 01         [ 3]  113 	sta	1,x
   0044 9E E6 09      [ 4]  114 	lda	9,s
   0047 E7 02         [ 3]  115 	sta	2,x
   0049 9E E6 0A      [ 4]  116 	lda	10,s
   004C E7 03         [ 3]  117 	sta	3,x
   004E 45r00r00      [ 3]  118 	ldhx	#___fseq_PARM_2
   0051 A6 BF         [ 2]  119 	lda	#0xBF
   0053 F7            [ 2]  120 	sta	,x
   0054 A6 80         [ 2]  121 	lda	#0x80
   0056 E7 01         [ 3]  122 	sta	1,x
   0058 4F            [ 1]  123 	clra
   0059 E7 02         [ 3]  124 	sta	2,x
   005B E7 03         [ 3]  125 	sta	3,x
   005D CDr00r00      [ 5]  126 	jsr	___fseq
   0060 4D            [ 1]  127 	tsta
   0061 27 0C         [ 3]  128 	beq	00105$
   0063 A6 DB         [ 2]  129 	lda	#0xDB
   0065 AE 0F         [ 2]  130 	ldx	#0x0F
   0067 6E 49*00      [ 4]  131 	mov	#0x49,*___SDCC_hc08_ret2
   006A 6E 40*00      [ 4]  132 	mov	#0x40,*___SDCC_hc08_ret3
   006D 20 55         [ 3]  133 	bra	00110$
   006F                     134 00105$:
                            135 ;../acosf.c:40: else if (x == 0.0) return HALF_PI;
   006F 95            [ 2]  136 	tsx
   0070 E6 06         [ 3]  137 	lda	6,x
   0072 A4 7F         [ 2]  138 	and	#0x7F
   0074 EA 07         [ 3]  139 	ora	7,x
   0076 EA 08         [ 3]  140 	ora	8,x
   0078 EA 09         [ 3]  141 	ora	9,x
   007A 26 0C         [ 3]  142 	bne	00102$
   007C A6 DB         [ 2]  143 	lda	#0xDB
   007E AE 0F         [ 2]  144 	ldx	#0x0F
   0080 6E C9*00      [ 4]  145 	mov	#0xC9,*___SDCC_hc08_ret2
   0083 6E 3F*00      [ 4]  146 	mov	#0x3F,*___SDCC_hc08_ret3
   0086 20 3C         [ 3]  147 	bra	00110$
   0088                     148 00102$:
                            149 ;../acosf.c:41: else               return asincosf(x, true);
   0088 95            [ 2]  150 	tsx
   0089 45r00r00      [ 3]  151 	ldhx	#_asincosf_PARM_1
   008C 9E E6 07      [ 4]  152 	lda	7,s
   008F F7            [ 2]  153 	sta	,x
   0090 9E E6 08      [ 4]  154 	lda	8,s
   0093 E7 01         [ 3]  155 	sta	1,x
   0095 9E E6 09      [ 4]  156 	lda	9,s
   0098 E7 02         [ 3]  157 	sta	2,x
   009A 9E E6 0A      [ 4]  158 	lda	10,s
   009D E7 03         [ 3]  159 	sta	3,x
   009F A6 01         [ 2]  160 	lda	#0x01
   00A1 C7r00r00      [ 4]  161 	sta	_asincosf_PARM_2
   00A4 CDr00r00      [ 5]  162 	jsr	_asincosf
   00A7 9E E7 04      [ 4]  163 	sta	4,s
   00AA 9E EF 03      [ 4]  164 	stx	3,s
   00AD B6*00         [ 3]  165 	lda	*___SDCC_hc08_ret2
   00AF 9E E7 02      [ 4]  166 	sta	2,s
   00B2 B6*00         [ 3]  167 	lda	*___SDCC_hc08_ret3
   00B4 9E E7 01      [ 4]  168 	sta	1,s
   00B7 95            [ 2]  169 	tsx
   00B8 F6            [ 2]  170 	lda	,x
   00B9 B7*00         [ 3]  171 	sta	*___SDCC_hc08_ret3
   00BB E6 01         [ 3]  172 	lda	1,x
   00BD B7*00         [ 3]  173 	sta	*___SDCC_hc08_ret2
   00BF EE 02         [ 3]  174 	ldx	2,x
   00C1 9E E6 04      [ 4]  175 	lda	4,s
   00C4                     176 00110$:
   00C4 A7 04         [ 2]  177 	ais	#4
   00C6 81            [ 4]  178 	rts
                            179 	.area CSEG    (CODE)
                            180 	.area CONST   (CODE)
                            181 	.area XINIT   (CODE)
                            182 	.area CABS    (ABS,CODE)
