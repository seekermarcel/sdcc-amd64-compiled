                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:17:17 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _memcmp
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _memcmp
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area INITIALIZED
                                     21 ;--------------------------------------------------------
                                     22 ; absolute external ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DABS (ABS)
                                     25 ;--------------------------------------------------------
                                     26 ; global & static initialisations
                                     27 ;--------------------------------------------------------
                                     28 	.area HOME
                                     29 	.area GSINIT
                                     30 	.area GSFINAL
                                     31 	.area GSINIT
                                     32 ;--------------------------------------------------------
                                     33 ; Home
                                     34 ;--------------------------------------------------------
                                     35 	.area HOME
                                     36 	.area HOME
                                     37 ;--------------------------------------------------------
                                     38 ; code
                                     39 ;--------------------------------------------------------
                                     40 	.area CODE
                                     41 ;	../_memcmp.c: 31: int memcmp (const void * buf1, const void * buf2, size_t count)
                                     42 ;	-----------------------------------------
                                     43 ;	 function memcmp
                                     44 ;	-----------------------------------------
      000000                         45 _memcmp:
      000000 52 05            [ 2]   46 	sub	sp, #5
                                     47 ;	../_memcmp.c: 33: if (!count)
      000002 1E 0C            [ 2]   48 	ldw	x, (0x0c, sp)
      000004 26 03            [ 1]   49 	jrne	00112$
                                     50 ;	../_memcmp.c: 34: return(0);
      000006 5F               [ 1]   51 	clrw	x
      000007 20 35            [ 2]   52 	jra	00107$
                                     53 ;	../_memcmp.c: 36: while ( --count && *((char *)buf1) == *((char *)buf2) ) {
      000009                         54 00112$:
      000009 16 0C            [ 2]   55 	ldw	y, (0x0c, sp)
      00000B 17 04            [ 2]   56 	ldw	(0x04, sp), y
      00000D                         57 00104$:
      00000D 1E 04            [ 2]   58 	ldw	x, (0x04, sp)
      00000F 5A               [ 2]   59 	decw	x
      000010 1F 04            [ 2]   60 	ldw	(0x04, sp), x
      000012 1E 04            [ 2]   61 	ldw	x, (0x04, sp)
      000014 27 18            [ 1]   62 	jreq	00106$
      000016 16 08            [ 2]   63 	ldw	y, (0x08, sp)
      000018 90 F6            [ 1]   64 	ld	a, (y)
      00001A 1E 0A            [ 2]   65 	ldw	x, (0x0a, sp)
      00001C 88               [ 1]   66 	push	a
      00001D F6               [ 1]   67 	ld	a, (x)
      00001E 6B 04            [ 1]   68 	ld	(0x04, sp), a
      000020 84               [ 1]   69 	pop	a
      000021 11 03            [ 1]   70 	cp	a, (0x03, sp)
      000023 26 09            [ 1]   71 	jrne	00106$
                                     72 ;	../_memcmp.c: 37: buf1 = (char *)buf1 + 1;
      000025 90 5C            [ 2]   73 	incw	y
      000027 17 08            [ 2]   74 	ldw	(0x08, sp), y
                                     75 ;	../_memcmp.c: 38: buf2 = (char *)buf2 + 1;
      000029 5C               [ 2]   76 	incw	x
      00002A 1F 0A            [ 2]   77 	ldw	(0x0a, sp), x
      00002C 20 DF            [ 2]   78 	jra	00104$
      00002E                         79 00106$:
                                     80 ;	../_memcmp.c: 41: return( *((unsigned char *)buf1) - *((unsigned char *)buf2) );
      00002E 1E 08            [ 2]   81 	ldw	x, (0x08, sp)
      000030 F6               [ 1]   82 	ld	a, (x)
      000031 5F               [ 1]   83 	clrw	x
      000032 97               [ 1]   84 	ld	xl, a
      000033 16 0A            [ 2]   85 	ldw	y, (0x0a, sp)
      000035 90 F6            [ 1]   86 	ld	a, (y)
      000037 6B 02            [ 1]   87 	ld	(0x02, sp), a
      000039 0F 01            [ 1]   88 	clr	(0x01, sp)
      00003B 72 F0 01         [ 2]   89 	subw	x, (0x01, sp)
      00003E                         90 00107$:
      00003E 5B 05            [ 2]   91 	addw	sp, #5
      000040 81               [ 4]   92 	ret
                                     93 	.area CODE
                                     94 	.area INITIALIZER
                                     95 	.area CABS (ABS)
