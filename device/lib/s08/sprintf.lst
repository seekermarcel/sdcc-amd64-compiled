                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:10:39 2022
                              5 ;--------------------------------------------------------
                              6 	.cs08
                              7 	.module sprintf
                              8 	.optsdcc -ms08
                              9 	
                             10 	.area HOME    (CODE)
                             11 	.area GSINIT0 (CODE)
                             12 	.area GSINIT  (CODE)
                             13 	.area GSFINAL (CODE)
                             14 	.area CSEG    (CODE)
                             15 	.area XINIT   (CODE)
                             16 	.area CONST   (CODE)
                             17 	.area DSEG    (PAG)
                             18 	.area OSEG    (PAG, OVR)
                             19 	.area XSEG
                             20 	.area XISEG
                             21 ;--------------------------------------------------------
                             22 ; Public variables in this module
                             23 ;--------------------------------------------------------
                             24 	.globl __print_format
                             25 	.globl _vsprintf_PARM_3
                             26 	.globl _vsprintf_PARM_2
                             27 	.globl _vsprintf
                             28 	.globl _sprintf
                             29 ;--------------------------------------------------------
                             30 ; ram data
                             31 ;--------------------------------------------------------
                             32 	.area DSEG    (PAG)
                             33 ;--------------------------------------------------------
                             34 ; overlayable items in ram 
                             35 ;--------------------------------------------------------
                             36 ;--------------------------------------------------------
                             37 ; absolute ram data
                             38 ;--------------------------------------------------------
                             39 	.area IABS    (ABS)
                             40 	.area IABS    (ABS)
                             41 ;--------------------------------------------------------
                             42 ; absolute external ram data
                             43 ;--------------------------------------------------------
                             44 	.area XABS    (ABS)
                             45 ;--------------------------------------------------------
                             46 ; external initialized ram data
                             47 ;--------------------------------------------------------
                             48 	.area XISEG
                             49 ;--------------------------------------------------------
                             50 ; extended address mode data
                             51 ;--------------------------------------------------------
                             52 	.area XSEG
   0000                      53 _vsprintf_PARM_2:
   0000                      54 	.ds 2
   0002                      55 _vsprintf_PARM_3:
   0002                      56 	.ds 2
   0004                      57 _vsprintf_buf_1_14:
   0004                      58 	.ds 2
   0006                      59 _vsprintf_i_1_15:
   0006                      60 	.ds 2
                             61 ;--------------------------------------------------------
                             62 ; global & static initialisations
                             63 ;--------------------------------------------------------
                             64 	.area HOME    (CODE)
                             65 	.area GSINIT  (CODE)
                             66 	.area GSFINAL (CODE)
                             67 	.area GSINIT  (CODE)
                             68 ;--------------------------------------------------------
                             69 ; Home
                             70 ;--------------------------------------------------------
                             71 	.area HOME    (CODE)
                             72 	.area HOME    (CODE)
                             73 ;--------------------------------------------------------
                             74 ; code
                             75 ;--------------------------------------------------------
                             76 	.area CSEG    (CODE)
                             77 ;------------------------------------------------------------
                             78 ;Allocation info for local variables in function 'put_char_to_string'
                             79 ;------------------------------------------------------------
                             80 ;p                         Allocated to stack - sp -2
                             81 ;c                         Allocated to registers a 
                             82 ;buf                       Allocated to registers x h 
                             83 ;sloc0                     Allocated to stack - sp -6
                             84 ;sloc1                     Allocated to stack - sp -8
                             85 ;------------------------------------------------------------
                             86 ;../sprintf.c:34: put_char_to_string (char c, void* p) _REENTRANT
                             87 ;	-----------------------------------------
                             88 ;	 function put_char_to_string
                             89 ;	-----------------------------------------
                             90 ;	Register assignment is optimal.
                             91 ;	Stack space usage: 4 bytes.
   0000                      92 _put_char_to_string:
   0000 A7 FC         [ 2]   93 	ais	#-4
                             94 ;../sprintf.c:36: char **buf = (char **)p;
   0002 9E FE 07      [ 5]   95 	ldhx	7,s
                             96 ;../sprintf.c:37: *(*buf)++ = c;
   0005 87            [ 2]   97 	psha
   0006 F6            [ 3]   98 	lda	,x
   0007 9E E7 04      [ 4]   99 	sta	4,s
   000A E6 01         [ 3]  100 	lda	1,x
   000C 9E E7 05      [ 4]  101 	sta	5,s
   000F 9E E6 05      [ 4]  102 	lda	5,s
   0012 AB 01         [ 2]  103 	add	#0x01
   0014 9E E7 03      [ 4]  104 	sta	3,s
   0017 9E E6 04      [ 4]  105 	lda	4,s
   001A A9 00         [ 2]  106 	adc	#0
   001C 9E E7 02      [ 4]  107 	sta	2,s
   001F 9E E6 02      [ 4]  108 	lda	2,s
   0022 F7            [ 2]  109 	sta	,x
   0023 9E E6 03      [ 4]  110 	lda	3,s
   0026 E7 01         [ 3]  111 	sta	1,x
   0028 86            [ 3]  112 	pula
   0029 9E FE 03      [ 5]  113 	ldhx	3,s
   002C F7            [ 2]  114 	sta	,x
   002D A7 04         [ 2]  115 	ais	#4
   002F 81            [ 6]  116 	rts
                            117 ;------------------------------------------------------------
                            118 ;Allocation info for local variables in function 'vsprintf'
                            119 ;------------------------------------------------------------
                            120 ;format                    Allocated with name '_vsprintf_PARM_2'
                            121 ;ap                        Allocated with name '_vsprintf_PARM_3'
                            122 ;buf                       Allocated with name '_vsprintf_buf_1_14'
                            123 ;i                         Allocated with name '_vsprintf_i_1_15'
                            124 ;------------------------------------------------------------
                            125 ;../sprintf.c:41: vsprintf (char *buf, const char *format, va_list ap)
                            126 ;	-----------------------------------------
                            127 ;	 function vsprintf
                            128 ;	-----------------------------------------
                            129 ;	Register assignment is optimal.
                            130 ;	Stack space usage: 0 bytes.
   0030                     131 _vsprintf:
   0030 C7r00r05      [ 4]  132 	sta	(_vsprintf_buf_1_14 + 1)
   0033 CFr00r04      [ 4]  133 	stx	_vsprintf_buf_1_14
                            134 ;../sprintf.c:44: i = _print_format (put_char_to_string, &buf, format, ap);
   0036 45r00r04      [ 3]  135 	ldhx	#_vsprintf_buf_1_14
   0039 96r00r00      [ 5]  136 	sthx	__print_format_PARM_2
   003C 32r00r00      [ 5]  137 	ldhx	_vsprintf_PARM_2
   003F 96r00r00      [ 5]  138 	sthx	__print_format_PARM_3
   0042 32r00r02      [ 5]  139 	ldhx	_vsprintf_PARM_3
   0045 96r00r00      [ 5]  140 	sthx	__print_format_PARM_4
   0048 A6r00         [ 2]  141 	lda	#_put_char_to_string
   004A AEs00         [ 2]  142 	ldx	#>_put_char_to_string
   004C CDr00r00      [ 6]  143 	jsr	__print_format
   004F C7r00r07      [ 4]  144 	sta	(_vsprintf_i_1_15 + 1)
   0052 CFr00r06      [ 4]  145 	stx	_vsprintf_i_1_15
                            146 ;../sprintf.c:45: *buf = 0;
   0055 32r00r04      [ 5]  147 	ldhx	_vsprintf_buf_1_14
   0058 4F            [ 1]  148 	clra
   0059 F7            [ 2]  149 	sta	,x
                            150 ;../sprintf.c:46: return i;
   005A CEr00r06      [ 4]  151 	ldx	_vsprintf_i_1_15
   005D C6r00r07      [ 4]  152 	lda	(_vsprintf_i_1_15 + 1)
   0060 81            [ 6]  153 	rts
                            154 ;------------------------------------------------------------
                            155 ;Allocation info for local variables in function 'sprintf'
                            156 ;------------------------------------------------------------
                            157 ;buf                       Allocated to stack - sp +0
                            158 ;format                    Allocated to stack - sp +2
                            159 ;arg                       Allocated to registers 
                            160 ;i                         Allocated to stack - sp -4
                            161 ;------------------------------------------------------------
                            162 ;../sprintf.c:50: sprintf (char *buf, const char *format, ...)
                            163 ;	-----------------------------------------
                            164 ;	 function sprintf
                            165 ;	-----------------------------------------
                            166 ;	Register assignment is optimal.
                            167 ;	Stack space usage: 2 bytes.
   0061                     168 _sprintf:
   0061 A7 FE         [ 2]  169 	ais	#-2
                            170 ;../sprintf.c:55: va_start (arg, format);
   0063 95            [ 2]  171 	tsx
   0064 AF 06         [ 2]  172 	aix	#6
   0066 AF 02         [ 2]  173 	aix	#2
   0068 96r00r00      [ 5]  174 	sthx	__print_format_PARM_4
                            175 ;../sprintf.c:56: i = _print_format (put_char_to_string, &buf, format, arg);
   006B 95            [ 2]  176 	tsx
   006C AF 04         [ 2]  177 	aix	#4
   006E CFr00r01      [ 4]  178 	stx	(__print_format_PARM_2 + 1)
   0071 8B            [ 2]  179 	pshh
   0072 86            [ 3]  180 	pula
   0073 C7r00r00      [ 4]  181 	sta	__print_format_PARM_2
   0076 95            [ 2]  182 	tsx
   0077 E6 06         [ 3]  183 	lda	6,x
   0079 C7r00r00      [ 4]  184 	sta	__print_format_PARM_3
   007C E6 07         [ 3]  185 	lda	7,x
   007E C7r00r01      [ 4]  186 	sta	(__print_format_PARM_3 + 1)
   0081 A6r00         [ 2]  187 	lda	#_put_char_to_string
   0083 AEs00         [ 2]  188 	ldx	#>_put_char_to_string
   0085 CDr00r00      [ 6]  189 	jsr	__print_format
   0088 9E E7 02      [ 4]  190 	sta	2,s
   008B 9E EF 01      [ 4]  191 	stx	1,s
                            192 ;../sprintf.c:57: *buf = 0;
   008E 9E FE 05      [ 5]  193 	ldhx	5,s
   0091 4F            [ 1]  194 	clra
   0092 F7            [ 2]  195 	sta	,x
                            196 ;../sprintf.c:60: return i;
   0093 95            [ 2]  197 	tsx
   0094 FE            [ 3]  198 	ldx	,x
   0095 9E E6 02      [ 4]  199 	lda	2,s
   0098 A7 02         [ 2]  200 	ais	#2
   009A 81            [ 6]  201 	rts
                            202 	.area CSEG    (CODE)
                            203 	.area CONST   (CODE)
                            204 	.area XINIT   (CODE)
                            205 	.area CABS    (ABS,CODE)
