                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:16:35 2022
                              5 ;--------------------------------------------------------
                              6 	.module atoi
                              7 	.optsdcc -mtlcs90
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _atoi
                             13 ;--------------------------------------------------------
                             14 ; ram data
                             15 ;--------------------------------------------------------
                             16 	.area _DATA
                             17 ;--------------------------------------------------------
                             18 ; ram data
                             19 ;--------------------------------------------------------
                             20 	.area _INITIALIZED
                             21 ;--------------------------------------------------------
                             22 ; absolute external ram data
                             23 ;--------------------------------------------------------
                             24 	.area _DABS (ABS)
                             25 ;--------------------------------------------------------
                             26 ; global & static initialisations
                             27 ;--------------------------------------------------------
                             28 	.area _HOME
                             29 	.area _GSINIT
                             30 	.area _GSFINAL
                             31 	.area _GSINIT
                             32 ;--------------------------------------------------------
                             33 ; Home
                             34 ;--------------------------------------------------------
                             35 	.area _HOME
                             36 	.area _HOME
                             37 ;--------------------------------------------------------
                             38 ; code
                             39 ;--------------------------------------------------------
                             40 	.area _CODE
                             41 ;../atoi.c:34: int atoi(const char *nptr)
                             42 ;	---------------------------------
                             43 ; Function atoi
                             44 ; ---------------------------------
   0000                      45 _atoi::
   0000 54            [ 4]   46 	push	ix
   0001 3C 00 00      [ 4]   47 	ld	ix,#0
   0004 FE 14         [ 7]   48 	add	ix,sp
   0006 16 FC FF      [ 7]   49 	add	sp, #-4
                             50 ;../atoi.c:36: int ret = 0;
   0009 38 00 00      [12]   51 	ld	bc,#0x0000
                             52 ;../atoi.c:39: while (isblank (*nptr))
   000C F2 08 4A      [10]   53 	ld	hl, 8 (sp)
   000F                      54 00101$:
   000F E2 2E         [10]   55 	ld	a,(hl)
   0011 F4 FD 26      [17]   56 	ld	-3 (ix), a
   0014 2A            [16]   57 	ld	d, a
   0015 F0 FD 2E      [11]   58 	ld	a,-3 (ix)
   0018 A2            [ 4]   59 	rla
   0019 FE 63         [ 7]   60 	sbc	a, a
   001B 2B            [ 6]   61 	ld	e,a
                             62 ;./../../include/ctype.h:53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
   001C 22            [16]   63 	ld	a,d
   001D 6F 20         [ 4]   64 	cp	a,#0x20
   001F C6 04         [ 7]   65 	jr	Z,00115$
   0021 6A 09         [ 4]   66 	sub	a, #0x09
   0023 CE 03         [ 7]   67 	jr	NZ,00131$
   0025                      68 00115$:
                             69 ;../atoi.c:40: nptr++;
   0025 92            [ 4]   70 	inc	hl
   0026 C8 E7         [11]   71 	jr	00101$
   0028                      72 00131$:
   0028 F6 08 42      [ 7]   73 	ld	8 (sp), hl
                             74 ;../atoi.c:42: neg = (*nptr == '-');
   002B F0 FD 2E      [11]   75 	ld	a,-3 (ix)
   002E 6A 2D         [ 4]   76 	sub	a, #0x2D
   0030 CE 04         [ 7]   77 	jr	NZ,00157$
   0032 36 01         [10]   78 	ld	a,#0x01
   0034 C8 02         [11]   79 	jr	00158$
   0036                      80 00157$:
   0036 FE 65         [ 7]   81 	xor	a,a
   0038                      82 00158$:
   0038 F4 FC 26      [17]   83 	ld	-4 (ix),a
                             84 ;../atoi.c:44: if (*nptr == '-' || *nptr == '+')
   003B FE A8         [ 7]   85 	bit	0,a
   003D CE 07         [ 7]   86 	jr	NZ,00104$
   003F F0 FD 2E      [11]   87 	ld	a,-3 (ix)
   0042 6A 2B         [ 4]   88 	sub	a, #0x2B
   0044 CE 04         [ 7]   89 	jr	NZ,00129$
   0046                      90 00104$:
                             91 ;../atoi.c:45: nptr++;
   0046 92            [ 4]   92 	inc	hl
   0047 F6 08 42      [ 7]   93 	ld	8 (sp), hl
                             94 ;../atoi.c:47: while (isdigit (*nptr))
   004A                      95 00129$:
   004A 08            [ 4]   96 	ex	de, hl
   004B F2 08 4A      [10]   97 	ld	hl, 8 (sp)
   004E 08            [ 4]   98 	ex	de, hl
   004F                      99 00107$:
   004F E1 2E         [10]  100 	ld	a,(de)
   0051 F4 FE 26      [17]  101 	ld	-2 (ix),a
   0054 A2            [ 4]  102 	rla
   0055 FE 63         [ 7]  103 	sbc	a, a
   0057 F4 FF 26      [17]  104 	ld	-1 (ix),a
   005A F2 02 4A      [10]  105 	ld	hl, 2 (sp)
                            106 ;./../../include/ctype.h:62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
   005D 25            [ 4]  107 	ld	a,l
   005E 6A 30         [ 4]  108 	sub	a, #0x30
   0060 C7 28         [11]  109 	jr	C,00109$
   0062 36 39         [10]  110 	ld	a,#0x39
   0064 FD 62               111 	sub	a, l
   0066 C7 22         [11]  112 	jr	C,00109$
                            113 ;../atoi.c:48: ret = ret * 10 + (*(nptr++) - '0');
   0068 F9 35         [ 6]  114 	ld	l, c
   006A F8 34         [11]  115 	ld	h, b
   006C FA 70         [10]  116 	add	hl, hl
   006E FA 70         [10]  117 	add	hl, hl
   0070 F8 70         [11]  118 	add	hl, bc
   0072 FA 70         [10]  119 	add	hl, hl
   0074 91            [ 4]  120 	inc	de
   0075 F0 FE 2E      [11]  121 	ld	a,-2 (ix)
   0078 68 D0         [ 4]  122 	add	a,#0xD0
   007A 29            [11]  123 	ld	c,a
   007B F0 FF 2E      [11]  124 	ld	a,-1 (ix)
   007E 69 FF         [ 4]  125 	adc	a,#0xFF
   0080 28            [12]  126 	ld	b,a
   0081 F8 70         [11]  127 	add	hl,bc
   0083 FD 31               128 	ld	c, l
   0085 FC 30         [17]  129 	ld	b, h
   0087 1Ar4Fr00      [ 7]  130 	jp	00107$
   008A                     131 00109$:
                            132 ;../atoi.c:50: return (neg ? -ret : ret); // Since -INT_MIN is INT_MIN in sdcc, the result value always turns out ok.
   008A F0 FC A8      [11]  133 	bit	0,-4 (ix)
   008D C6 0C         [ 7]  134 	jr	Z,00120$
   008F FE 65         [ 7]  135 	xor	a, a
   0091 F9 62         [ 6]  136 	sub	a, c
   0093 2D            [ 4]  137 	ld	l,a
   0094 36 00         [10]  138 	ld	a, #0x00
   0096 F8 63         [11]  139 	sbc	a, b
   0098 2C            [ 4]  140 	ld	h,a
   0099 C8 04         [11]  141 	jr	00121$
   009B                     142 00120$:
   009B F9 35         [ 6]  143 	ld	l, c
   009D F8 34         [11]  144 	ld	h, b
   009F                     145 00121$:
   009F FC 3E         [17]  146 	ld	sp, ix
   00A1 5C            [ 4]  147 	pop	ix
   00A2 1E            [ 7]  148 	ret
                            149 	.area _CODE
                            150 	.area _INITIALIZER
                            151 	.area _CABS (ABS)
