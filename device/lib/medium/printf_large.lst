                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:44 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module printf_large
                                      7 	.optsdcc -mmcs51 --model-medium
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _strlen
                                     13 	.globl __print_format_PARM_4
                                     14 	.globl __print_format_PARM_3
                                     15 	.globl __print_format_PARM_2
                                     16 	.globl __print_format
                                     17 ;--------------------------------------------------------
                                     18 ; special function registers
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; special function bits
                                     24 ;--------------------------------------------------------
                                     25 	.area RSEG    (ABS,DATA)
      000000                         26 	.org 0x0000
                                     27 ;--------------------------------------------------------
                                     28 ; overlayable register banks
                                     29 ;--------------------------------------------------------
                                     30 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         31 	.ds 8
                                     32 ;--------------------------------------------------------
                                     33 ; internal ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area DSEG    (DATA)
      000000                         36 __print_format_sloc0_1_0:
      000000                         37 	.ds 1
      000001                         38 __print_format_sloc1_1_0:
      000001                         39 	.ds 4
      000005                         40 __print_format_sloc2_1_0:
      000005                         41 	.ds 4
                                     42 ;--------------------------------------------------------
                                     43 ; overlayable items in internal ram 
                                     44 ;--------------------------------------------------------
                                     45 	.area	OSEG    (OVR,DATA)
      000000                         46 _calculate_digit_ul_1_63:
      000000                         47 	.ds 4
      000004                         48 _calculate_digit_i_1_63:
      000004                         49 	.ds 1
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
      000000                         63 _lower_case:
      000000                         64 	.ds 1
      000001                         65 __print_format_left_justify_1_67:
      000001                         66 	.ds 1
      000002                         67 __print_format_zero_padding_1_67:
      000002                         68 	.ds 1
      000003                         69 __print_format_prefix_sign_1_67:
      000003                         70 	.ds 1
      000004                         71 __print_format_prefix_space_1_67:
      000004                         72 	.ds 1
      000005                         73 __print_format_signed_argument_1_67:
      000005                         74 	.ds 1
      000006                         75 __print_format_char_argument_1_67:
      000006                         76 	.ds 1
      000007                         77 __print_format_long_argument_1_67:
      000007                         78 	.ds 1
      000008                         79 __print_format_float_argument_1_67:
      000008                         80 	.ds 1
      000009                         81 __print_format_lsd_1_67:
      000009                         82 	.ds 1
                                     83 ;--------------------------------------------------------
                                     84 ; paged external ram data
                                     85 ;--------------------------------------------------------
                                     86 	.area PSEG    (PAG,XDATA)
      000000                         87 _output_char:
      000000                         88 	.ds 2
      000002                         89 _p:
      000002                         90 	.ds 3
      000005                         91 _value:
      000005                         92 	.ds 5
      00000A                         93 _charsOutputted:
      00000A                         94 	.ds 2
      00000C                         95 __print_format_PARM_2:
      00000C                         96 	.ds 3
      00000F                         97 __print_format_PARM_3:
      00000F                         98 	.ds 3
      000012                         99 __print_format_PARM_4:
      000012                        100 	.ds 1
      000013                        101 __print_format_radix_1_67:
      000013                        102 	.ds 1
      000014                        103 __print_format_width_1_67:
      000014                        104 	.ds 1
      000015                        105 __print_format_store_4_88:
      000015                        106 	.ds 6
                                    107 ;--------------------------------------------------------
                                    108 ; external ram data
                                    109 ;--------------------------------------------------------
                                    110 	.area XSEG    (XDATA)
                                    111 ;--------------------------------------------------------
                                    112 ; absolute external ram data
                                    113 ;--------------------------------------------------------
                                    114 	.area XABS    (ABS,XDATA)
                                    115 ;--------------------------------------------------------
                                    116 ; external initialized ram data
                                    117 ;--------------------------------------------------------
                                    118 	.area XISEG   (XDATA)
                                    119 	.area HOME    (CODE)
                                    120 	.area GSINIT0 (CODE)
                                    121 	.area GSINIT1 (CODE)
                                    122 	.area GSINIT2 (CODE)
                                    123 	.area GSINIT3 (CODE)
                                    124 	.area GSINIT4 (CODE)
                                    125 	.area GSINIT5 (CODE)
                                    126 	.area GSINIT  (CODE)
                                    127 	.area GSFINAL (CODE)
                                    128 	.area CSEG    (CODE)
                                    129 ;--------------------------------------------------------
                                    130 ; global & static initialisations
                                    131 ;--------------------------------------------------------
                                    132 	.area HOME    (CODE)
                                    133 	.area GSINIT  (CODE)
                                    134 	.area GSFINAL (CODE)
                                    135 	.area GSINIT  (CODE)
                                    136 ;--------------------------------------------------------
                                    137 ; Home
                                    138 ;--------------------------------------------------------
                                    139 	.area HOME    (CODE)
                                    140 	.area HOME    (CODE)
                                    141 ;--------------------------------------------------------
                                    142 ; code
                                    143 ;--------------------------------------------------------
                                    144 	.area CSEG    (CODE)
                                    145 ;------------------------------------------------------------
                                    146 ;Allocation info for local variables in function '_output_char'
                                    147 ;------------------------------------------------------------
                                    148 ;	printf_large.c:105: _output_char (unsigned char c)
                                    149 ;	-----------------------------------------
                                    150 ;	 function _output_char
                                    151 ;	-----------------------------------------
      000000                        152 __output_char:
                           000007   153 	ar7 = 0x07
                           000006   154 	ar6 = 0x06
                           000005   155 	ar5 = 0x05
                           000004   156 	ar4 = 0x04
                           000003   157 	ar3 = 0x03
                           000002   158 	ar2 = 0x02
                           000001   159 	ar1 = 0x01
                           000000   160 	ar0 = 0x00
      000000 AF 82            [24]  161 	mov	r7,dpl
                                    162 ;	printf_large.c:107: output_char( c, p );
      000002 78r02            [12]  163 	mov	r0,#_p
      000004 E2               [24]  164 	movx	a,@r0
      000005 C0 E0            [24]  165 	push	acc
      000007 08               [12]  166 	inc	r0
      000008 E2               [24]  167 	movx	a,@r0
      000009 C0 E0            [24]  168 	push	acc
      00000B 08               [12]  169 	inc	r0
      00000C E2               [24]  170 	movx	a,@r0
      00000D C0 E0            [24]  171 	push	acc
      00000F 12r00r14         [24]  172 	lcall	00103$
      000012 80 0C            [24]  173 	sjmp	00104$
      000014                        174 00103$:
      000014 78r00            [12]  175 	mov	r0,#_output_char
      000016 E2               [24]  176 	movx	a,@r0
      000017 C0 E0            [24]  177 	push	acc
      000019 08               [12]  178 	inc	r0
      00001A E2               [24]  179 	movx	a,@r0
      00001B C0 E0            [24]  180 	push	acc
      00001D 8F 82            [24]  181 	mov	dpl,r7
      00001F 22               [24]  182 	ret
      000020                        183 00104$:
      000020 15 81            [12]  184 	dec	sp
      000022 15 81            [12]  185 	dec	sp
      000024 15 81            [12]  186 	dec	sp
                                    187 ;	printf_large.c:108: charsOutputted++;
      000026 78r0A            [12]  188 	mov	r0,#_charsOutputted
      000028 E2               [24]  189 	movx	a,@r0
      000029 24 01            [12]  190 	add	a,#0x01
      00002B F2               [24]  191 	movx	@r0,a
      00002C 08               [12]  192 	inc	r0
      00002D E2               [24]  193 	movx	a,@r0
      00002E 34 00            [12]  194 	addc	a,#0x00
      000030 F2               [24]  195 	movx	@r0,a
      000031 22               [24]  196 	ret
                                    197 ;------------------------------------------------------------
                                    198 ;Allocation info for local variables in function 'output_digit'
                                    199 ;------------------------------------------------------------
                                    200 ;c                         Allocated to registers r7 
                                    201 ;------------------------------------------------------------
                                    202 ;	printf_large.c:130: output_digit (unsigned char n)
                                    203 ;	-----------------------------------------
                                    204 ;	 function output_digit
                                    205 ;	-----------------------------------------
      000032                        206 _output_digit:
      000032 AF 82            [24]  207 	mov	r7,dpl
                                    208 ;	printf_large.c:132: register unsigned char c = n + (unsigned char)'0';
      000034 74 30            [12]  209 	mov	a,#0x30
      000036 2F               [12]  210 	add	a,r7
                                    211 ;	printf_large.c:134: if (c > (unsigned char)'9')
      000037 FF               [12]  212 	mov  r7,a
      000038 24 C6            [12]  213 	add	a,#0xff - 0x39
      00003A 50 0A            [24]  214 	jnc	00104$
                                    215 ;	printf_large.c:136: c += (unsigned char)('A' - '0' - 10);
      00003C 74 07            [12]  216 	mov	a,#0x07
      00003E 2F               [12]  217 	add	a,r7
      00003F FF               [12]  218 	mov	r7,a
                                    219 ;	printf_large.c:137: if (lower_case)
      000040 30*00 03         [24]  220 	jnb	_lower_case,00104$
                                    221 ;	printf_large.c:138: c = tolower(c);
      000043 43 07 20         [24]  222 	orl	ar7,#0x20
      000046                        223 00104$:
                                    224 ;	printf_large.c:140: _output_char( c );
      000046 8F 82            [24]  225 	mov	dpl,r7
      000048 02r00r00         [24]  226 	ljmp	__output_char
                                    227 ;------------------------------------------------------------
                                    228 ;Allocation info for local variables in function 'output_2digits'
                                    229 ;------------------------------------------------------------
                                    230 ;	printf_large.c:157: output_2digits (unsigned char b)
                                    231 ;	-----------------------------------------
                                    232 ;	 function output_2digits
                                    233 ;	-----------------------------------------
      00004B                        234 _output_2digits:
                                    235 ;	printf_large.c:159: output_digit( b>>4   );
      00004B E5 82            [12]  236 	mov	a,dpl
      00004D FF               [12]  237 	mov	r7,a
      00004E C4               [12]  238 	swap	a
      00004F 54 0F            [12]  239 	anl	a,#0x0F
      000051 F5 82            [12]  240 	mov	dpl,a
      000053 C0 07            [24]  241 	push	ar7
      000055 12r00r32         [24]  242 	lcall	_output_digit
      000058 D0 07            [24]  243 	pop	ar7
                                    244 ;	printf_large.c:160: output_digit( b&0x0F );
      00005A 74 0F            [12]  245 	mov	a,#0x0F
      00005C 5F               [12]  246 	anl	a,r7
      00005D F5 82            [12]  247 	mov	dpl,a
      00005F 02r00r32         [24]  248 	ljmp	_output_digit
                                    249 ;------------------------------------------------------------
                                    250 ;Allocation info for local variables in function 'calculate_digit'
                                    251 ;------------------------------------------------------------
                                    252 ;ul                        Allocated with name '_calculate_digit_ul_1_63'
                                    253 ;b4                        Allocated to registers r2 
                                    254 ;i                         Allocated with name '_calculate_digit_i_1_63'
                                    255 ;------------------------------------------------------------
                                    256 ;	printf_large.c:189: calculate_digit (unsigned char radix)
                                    257 ;	-----------------------------------------
                                    258 ;	 function calculate_digit
                                    259 ;	-----------------------------------------
      000062                        260 _calculate_digit:
      000062 AF 82            [24]  261 	mov	r7,dpl
                                    262 ;	printf_large.c:191: register unsigned long ul = value.ul;
      000064 78r05            [12]  263 	mov	r0,#_value
      000066 E2               [24]  264 	movx	a,@r0
      000067 F5*00            [12]  265 	mov	_calculate_digit_ul_1_63,a
      000069 08               [12]  266 	inc	r0
      00006A E2               [24]  267 	movx	a,@r0
      00006B F5*01            [12]  268 	mov	(_calculate_digit_ul_1_63 + 1),a
      00006D 08               [12]  269 	inc	r0
      00006E E2               [24]  270 	movx	a,@r0
      00006F F5*02            [12]  271 	mov	(_calculate_digit_ul_1_63 + 2),a
      000071 08               [12]  272 	inc	r0
      000072 E2               [24]  273 	movx	a,@r0
      000073 F5*03            [12]  274 	mov	(_calculate_digit_ul_1_63 + 3),a
                                    275 ;	printf_large.c:192: register unsigned char b4 = value.byte[4];
      000075 78r09            [12]  276 	mov	r0,#(_value + 0x0004)
      000077 E2               [24]  277 	movx	a,@r0
      000078 FA               [12]  278 	mov	r2,a
                                    279 ;	printf_large.c:193: register unsigned char i = 32;
      000079 75*04 20         [24]  280 	mov	_calculate_digit_i_1_63,#0x20
                                    281 ;	printf_large.c:195: do
      00007C                        282 00103$:
                                    283 ;	printf_large.c:197: b4 = (b4 << 1);
      00007C EA               [12]  284 	mov	a,r2
      00007D 2A               [12]  285 	add	a,r2
      00007E FA               [12]  286 	mov	r2,a
                                    287 ;	printf_large.c:198: b4 |= (ul >> 31) & 0x01;
      00007F E5*03            [12]  288 	mov	a,(_calculate_digit_ul_1_63 + 3)
      000081 23               [12]  289 	rl	a
      000082 54 01            [12]  290 	anl	a,#0x01
      000084 FE               [12]  291 	mov	r6,a
      000085 8A 05            [24]  292 	mov	ar5,r2
      000087 4D               [12]  293 	orl	a,r5
      000088 FA               [12]  294 	mov	r2,a
                                    295 ;	printf_large.c:199: ul <<= 1;
      000089 E5*00            [12]  296 	mov	a,_calculate_digit_ul_1_63
      00008B 25*00            [12]  297 	add	a,_calculate_digit_ul_1_63
      00008D F5*00            [12]  298 	mov	_calculate_digit_ul_1_63,a
      00008F E5*01            [12]  299 	mov	a,(_calculate_digit_ul_1_63 + 1)
      000091 33               [12]  300 	rlc	a
      000092 F5*01            [12]  301 	mov	(_calculate_digit_ul_1_63 + 1),a
      000094 E5*02            [12]  302 	mov	a,(_calculate_digit_ul_1_63 + 2)
      000096 33               [12]  303 	rlc	a
      000097 F5*02            [12]  304 	mov	(_calculate_digit_ul_1_63 + 2),a
      000099 E5*03            [12]  305 	mov	a,(_calculate_digit_ul_1_63 + 3)
      00009B 33               [12]  306 	rlc	a
      00009C F5*03            [12]  307 	mov	(_calculate_digit_ul_1_63 + 3),a
                                    308 ;	printf_large.c:201: if (radix <= b4 )
      00009E C3               [12]  309 	clr	c
      00009F EA               [12]  310 	mov	a,r2
      0000A0 9F               [12]  311 	subb	a,r7
      0000A1 40 07            [24]  312 	jc	00104$
                                    313 ;	printf_large.c:203: b4 -= radix;
      0000A3 EA               [12]  314 	mov	a,r2
      0000A4 C3               [12]  315 	clr	c
      0000A5 9F               [12]  316 	subb	a,r7
      0000A6 FA               [12]  317 	mov	r2,a
                                    318 ;	printf_large.c:204: ul |= 1;
      0000A7 43*00 01         [24]  319 	orl	_calculate_digit_ul_1_63,#0x01
      0000AA                        320 00104$:
                                    321 ;	printf_large.c:206: } while (--i);
      0000AA E5*04            [12]  322 	mov	a,_calculate_digit_i_1_63
      0000AC 14               [12]  323 	dec	a
      0000AD FE               [12]  324 	mov	r6,a
      0000AE 8E*04            [24]  325 	mov	_calculate_digit_i_1_63,r6
      0000B0 70 CA            [24]  326 	jnz	00103$
                                    327 ;	printf_large.c:207: value.ul = ul;
      0000B2 78r05            [12]  328 	mov	r0,#_value
      0000B4 E5*00            [12]  329 	mov	a,_calculate_digit_ul_1_63
      0000B6 F2               [24]  330 	movx	@r0,a
      0000B7 08               [12]  331 	inc	r0
      0000B8 E5*01            [12]  332 	mov	a,(_calculate_digit_ul_1_63 + 1)
      0000BA F2               [24]  333 	movx	@r0,a
      0000BB 08               [12]  334 	inc	r0
      0000BC E5*02            [12]  335 	mov	a,(_calculate_digit_ul_1_63 + 2)
      0000BE F2               [24]  336 	movx	@r0,a
      0000BF 08               [12]  337 	inc	r0
      0000C0 E5*03            [12]  338 	mov	a,(_calculate_digit_ul_1_63 + 3)
      0000C2 F2               [24]  339 	movx	@r0,a
                                    340 ;	printf_large.c:208: value.byte[4] = b4;
      0000C3 78r09            [12]  341 	mov	r0,#(_value + 0x0004)
      0000C5 EA               [12]  342 	mov	a,r2
      0000C6 F2               [24]  343 	movx	@r0,a
      0000C7 22               [24]  344 	ret
                                    345 ;------------------------------------------------------------
                                    346 ;Allocation info for local variables in function '_print_format'
                                    347 ;------------------------------------------------------------
                                    348 ;sloc0                     Allocated with name '__print_format_sloc0_1_0'
                                    349 ;sloc1                     Allocated with name '__print_format_sloc1_1_0'
                                    350 ;sloc2                     Allocated with name '__print_format_sloc2_1_0'
                                    351 ;------------------------------------------------------------
                                    352 ;	printf_large.c:434: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                                    353 ;	-----------------------------------------
                                    354 ;	 function _print_format
                                    355 ;	-----------------------------------------
      0000C8                        356 __print_format:
      0000C8 AE 82            [24]  357 	mov	r6,dpl
      0000CA AF 83            [24]  358 	mov	r7,dph
                                    359 ;	printf_large.c:461: output_char = pfn;
      0000CC 78r00            [12]  360 	mov	r0,#_output_char
      0000CE EE               [12]  361 	mov	a,r6
      0000CF F2               [24]  362 	movx	@r0,a
      0000D0 08               [12]  363 	inc	r0
      0000D1 EF               [12]  364 	mov	a,r7
      0000D2 F2               [24]  365 	movx	@r0,a
                                    366 ;	printf_large.c:462: p = pvoid;
      0000D3 78r0C            [12]  367 	mov	r0,#__print_format_PARM_2
      0000D5 E2               [24]  368 	movx	a,@r0
      0000D6 FD               [12]  369 	mov	r5,a
      0000D7 08               [12]  370 	inc	r0
      0000D8 E2               [24]  371 	movx	a,@r0
      0000D9 FE               [12]  372 	mov	r6,a
      0000DA 08               [12]  373 	inc	r0
      0000DB E2               [24]  374 	movx	a,@r0
      0000DC FF               [12]  375 	mov	r7,a
      0000DD 78r02            [12]  376 	mov	r0,#_p
      0000DF ED               [12]  377 	mov	a,r5
      0000E0 F2               [24]  378 	movx	@r0,a
      0000E1 08               [12]  379 	inc	r0
      0000E2 EE               [12]  380 	mov	a,r6
      0000E3 F2               [24]  381 	movx	@r0,a
      0000E4 08               [12]  382 	inc	r0
      0000E5 EF               [12]  383 	mov	a,r7
      0000E6 F2               [24]  384 	movx	@r0,a
                                    385 ;	printf_large.c:466: charsOutputted = 0;
      0000E7 78r0A            [12]  386 	mov	r0,#_charsOutputted
      0000E9 E4               [12]  387 	clr	a
      0000EA F2               [24]  388 	movx	@r0,a
      0000EB 08               [12]  389 	inc	r0
      0000EC F2               [24]  390 	movx	@r0,a
                                    391 ;	printf_large.c:475: while( c=*format++ )
      0000ED                        392 00243$:
      0000ED 78r0F            [12]  393 	mov	r0,#__print_format_PARM_3
      0000EF E2               [24]  394 	movx	a,@r0
      0000F0 FD               [12]  395 	mov	r5,a
      0000F1 08               [12]  396 	inc	r0
      0000F2 E2               [24]  397 	movx	a,@r0
      0000F3 FE               [12]  398 	mov	r6,a
      0000F4 08               [12]  399 	inc	r0
      0000F5 E2               [24]  400 	movx	a,@r0
      0000F6 FF               [12]  401 	mov	r7,a
      0000F7 8D 82            [24]  402 	mov	dpl,r5
      0000F9 8E 83            [24]  403 	mov	dph,r6
      0000FB 8F F0            [24]  404 	mov	b,r7
      0000FD 12r00r00         [24]  405 	lcall	__gptrget
      000100 FC               [12]  406 	mov	r4,a
      000101 78r0F            [12]  407 	mov	r0,#__print_format_PARM_3
      000103 74 01            [12]  408 	mov	a,#0x01
      000105 2D               [12]  409 	add	a,r5
      000106 F2               [24]  410 	movx	@r0,a
      000107 E4               [12]  411 	clr	a
      000108 3E               [12]  412 	addc	a,r6
      000109 08               [12]  413 	inc	r0
      00010A F2               [24]  414 	movx	@r0,a
      00010B 08               [12]  415 	inc	r0
      00010C EF               [12]  416 	mov	a,r7
      00010D F2               [24]  417 	movx	@r0,a
      00010E EC               [12]  418 	mov	a,r4
      00010F FF               [12]  419 	mov	r7,a
      000110 70 03            [24]  420 	jnz	00500$
      000112 02r07r13         [24]  421 	ljmp	00245$
      000115                        422 00500$:
                                    423 ;	printf_large.c:477: if ( c=='%' )
      000115 BF 25 02         [24]  424 	cjne	r7,#0x25,00501$
      000118 80 03            [24]  425 	sjmp	00502$
      00011A                        426 00501$:
      00011A 02r07r0B         [24]  427 	ljmp	00241$
      00011D                        428 00502$:
                                    429 ;	printf_large.c:479: left_justify    = 0;
      00011D C2*01            [12]  430 	clr	__print_format_left_justify_1_67
                                    431 ;	printf_large.c:480: zero_padding    = 0;
      00011F C2*02            [12]  432 	clr	__print_format_zero_padding_1_67
                                    433 ;	printf_large.c:481: prefix_sign     = 0;
      000121 C2*03            [12]  434 	clr	__print_format_prefix_sign_1_67
                                    435 ;	printf_large.c:482: prefix_space    = 0;
      000123 C2*04            [12]  436 	clr	__print_format_prefix_space_1_67
                                    437 ;	printf_large.c:483: signed_argument = 0;
      000125 C2*05            [12]  438 	clr	__print_format_signed_argument_1_67
                                    439 ;	printf_large.c:484: char_argument   = 0;
      000127 C2*06            [12]  440 	clr	__print_format_char_argument_1_67
                                    441 ;	printf_large.c:485: long_argument   = 0;
      000129 C2*07            [12]  442 	clr	__print_format_long_argument_1_67
                                    443 ;	printf_large.c:486: float_argument  = 0;
      00012B C2*08            [12]  444 	clr	__print_format_float_argument_1_67
                                    445 ;	printf_large.c:487: radix           = 0;
      00012D 78r13            [12]  446 	mov	r0,#__print_format_radix_1_67
      00012F E4               [12]  447 	clr	a
      000130 F2               [24]  448 	movx	@r0,a
                                    449 ;	printf_large.c:488: width           = 0;
      000131 78r14            [12]  450 	mov	r0,#__print_format_width_1_67
      000133 F2               [24]  451 	movx	@r0,a
                                    452 ;	printf_large.c:489: decimals        = -1;
      000134 7C FF            [12]  453 	mov	r4,#0xFF
                                    454 ;	printf_large.c:491: get_conversion_spec:
      000136 78r0F            [12]  455 	mov	r0,#__print_format_PARM_3
      000138 E2               [24]  456 	movx	a,@r0
      000139 FA               [12]  457 	mov	r2,a
      00013A 08               [12]  458 	inc	r0
      00013B E2               [24]  459 	movx	a,@r0
      00013C FB               [12]  460 	mov	r3,a
      00013D 08               [12]  461 	inc	r0
      00013E E2               [24]  462 	movx	a,@r0
      00013F FE               [12]  463 	mov	r6,a
      000140                        464 00101$:
                                    465 ;	printf_large.c:493: c = *format++;
      000140 8A 82            [24]  466 	mov	dpl,r2
      000142 8B 83            [24]  467 	mov	dph,r3
      000144 8E F0            [24]  468 	mov	b,r6
      000146 12r00r00         [24]  469 	lcall	__gptrget
      000149 FF               [12]  470 	mov	r7,a
      00014A A3               [24]  471 	inc	dptr
      00014B AA 82            [24]  472 	mov	r2,dpl
      00014D AB 83            [24]  473 	mov	r3,dph
      00014F 78r0F            [12]  474 	mov	r0,#__print_format_PARM_3
      000151 EA               [12]  475 	mov	a,r2
      000152 F2               [24]  476 	movx	@r0,a
      000153 08               [12]  477 	inc	r0
      000154 EB               [12]  478 	mov	a,r3
      000155 F2               [24]  479 	movx	@r0,a
      000156 08               [12]  480 	inc	r0
      000157 EE               [12]  481 	mov	a,r6
      000158 F2               [24]  482 	movx	@r0,a
                                    483 ;	printf_large.c:495: if (c=='%')
      000159 BF 25 07         [24]  484 	cjne	r7,#0x25,00103$
                                    485 ;	printf_large.c:497: OUTPUT_CHAR(c, p);
      00015C 8F 82            [24]  486 	mov	dpl,r7
      00015E 12r00r00         [24]  487 	lcall	__output_char
                                    488 ;	printf_large.c:498: continue;
      000161 80 8A            [24]  489 	sjmp	00243$
      000163                        490 00103$:
                                    491 ;	printf_large.c:501: if (isdigit(c))
      000163 8F*00            [24]  492 	mov	__print_format_sloc0_1_0,r7
      000165 74 D0            [12]  493 	mov	a,#0x100 - 0x30
      000167 25*00            [12]  494 	add	a,__print_format_sloc0_1_0
      000169 50 37            [24]  495 	jnc	00110$
      00016B E5*00            [12]  496 	mov	a,__print_format_sloc0_1_0
      00016D 24 C6            [12]  497 	add	a,#0xff - 0x39
      00016F 40 31            [24]  498 	jc	00110$
                                    499 ;	printf_large.c:503: if (decimals==-1)
      000171 BC FF 22         [24]  500 	cjne	r4,#0xFF,00107$
                                    501 ;	printf_large.c:505: width = 10*width + c - '0';
      000174 C0 02            [24]  502 	push	ar2
      000176 C0 03            [24]  503 	push	ar3
      000178 C0 06            [24]  504 	push	ar6
      00017A 78r14            [12]  505 	mov	r0,#__print_format_width_1_67
      00017C E2               [24]  506 	movx	a,@r0
      00017D 75 F0 0A         [24]  507 	mov	b,#0x0A
      000180 A4               [48]  508 	mul	ab
      000181 2F               [12]  509 	add	a,r7
      000182 78r14            [12]  510 	mov	r0,#__print_format_width_1_67
      000184 24 D0            [12]  511 	add	a,#0xD0
      000186 F2               [24]  512 	movx	@r0,a
                                    513 ;	printf_large.c:506: if (width == 0)
      000187 D0 06            [24]  514 	pop	ar6
      000189 D0 03            [24]  515 	pop	ar3
      00018B D0 02            [24]  516 	pop	ar2
      00018D 78r14            [12]  517 	mov	r0,#__print_format_width_1_67
      00018F E2               [24]  518 	movx	a,@r0
      000190 70 AE            [24]  519 	jnz	00101$
                                    520 ;	printf_large.c:509: zero_padding = 1;
      000192 D2*02            [12]  521 	setb	__print_format_zero_padding_1_67
      000194 80 AA            [24]  522 	sjmp	00101$
      000196                        523 00107$:
                                    524 ;	printf_large.c:514: decimals = 10*decimals + c - '0';
      000196 EC               [12]  525 	mov	a,r4
      000197 75 F0 0A         [24]  526 	mov	b,#0x0A
      00019A A4               [48]  527 	mul	ab
      00019B FD               [12]  528 	mov	r5,a
      00019C 2F               [12]  529 	add	a,r7
      00019D 24 D0            [12]  530 	add	a,#0xD0
      00019F FC               [12]  531 	mov	r4,a
                                    532 ;	printf_large.c:516: goto get_conversion_spec;
      0001A0 80 9E            [24]  533 	sjmp	00101$
      0001A2                        534 00110$:
                                    535 ;	printf_large.c:519: if (c=='.')
      0001A2 BF 2E 07         [24]  536 	cjne	r7,#0x2E,00115$
                                    537 ;	printf_large.c:521: if (decimals==-1)
      0001A5 BC FF 98         [24]  538 	cjne	r4,#0xFF,00101$
                                    539 ;	printf_large.c:522: decimals=0;
      0001A8 7C 00            [12]  540 	mov	r4,#0x00
                                    541 ;	printf_large.c:525: goto get_conversion_spec;
      0001AA 80 94            [24]  542 	sjmp	00101$
      0001AC                        543 00115$:
                                    544 ;	printf_large.c:528: if (islower(c))
      0001AC 8F*00            [24]  545 	mov	__print_format_sloc0_1_0,r7
      0001AE 74 9F            [12]  546 	mov	a,#0x100 - 0x61
      0001B0 25*00            [12]  547 	add	a,__print_format_sloc0_1_0
      0001B2 50 0D            [24]  548 	jnc	00117$
      0001B4 E5*00            [12]  549 	mov	a,__print_format_sloc0_1_0
      0001B6 24 85            [12]  550 	add	a,#0xff - 0x7A
      0001B8 40 07            [24]  551 	jc	00117$
                                    552 ;	printf_large.c:530: c = toupper(c);
      0001BA 53 07 DF         [24]  553 	anl	ar7,#0xDF
                                    554 ;	printf_large.c:531: lower_case = 1;
      0001BD D2*00            [12]  555 	setb	_lower_case
      0001BF 80 02            [24]  556 	sjmp	00118$
      0001C1                        557 00117$:
                                    558 ;	printf_large.c:534: lower_case = 0;
      0001C1 C2*00            [12]  559 	clr	_lower_case
      0001C3                        560 00118$:
                                    561 ;	printf_large.c:536: switch( c )
      0001C3 BF 20 02         [24]  562 	cjne	r7,#0x20,00516$
      0001C6 80 6D            [24]  563 	sjmp	00122$
      0001C8                        564 00516$:
      0001C8 BF 2B 02         [24]  565 	cjne	r7,#0x2B,00517$
      0001CB 80 63            [24]  566 	sjmp	00121$
      0001CD                        567 00517$:
      0001CD BF 2D 02         [24]  568 	cjne	r7,#0x2D,00518$
      0001D0 80 59            [24]  569 	sjmp	00120$
      0001D2                        570 00518$:
      0001D2 BF 42 02         [24]  571 	cjne	r7,#0x42,00519$
      0001D5 80 63            [24]  572 	sjmp	00123$
      0001D7                        573 00519$:
      0001D7 BF 43 02         [24]  574 	cjne	r7,#0x43,00520$
      0001DA 80 68            [24]  575 	sjmp	00129$
      0001DC                        576 00520$:
      0001DC BF 44 03         [24]  577 	cjne	r7,#0x44,00521$
      0001DF 02r03rDE         [24]  578 	ljmp	00166$
      0001E2                        579 00521$:
      0001E2 BF 46 03         [24]  580 	cjne	r7,#0x46,00522$
      0001E5 02r03rFC         [24]  581 	ljmp	00170$
      0001E8                        582 00522$:
      0001E8 BF 48 03         [24]  583 	cjne	r7,#0x48,00523$
      0001EB 02r01r40         [24]  584 	ljmp	00101$
      0001EE                        585 00523$:
      0001EE BF 49 03         [24]  586 	cjne	r7,#0x49,00524$
      0001F1 02r03rDE         [24]  587 	ljmp	00166$
      0001F4                        588 00524$:
      0001F4 BF 4A 03         [24]  589 	cjne	r7,#0x4A,00525$
      0001F7 02r01r40         [24]  590 	ljmp	00101$
      0001FA                        591 00525$:
      0001FA BF 4C 02         [24]  592 	cjne	r7,#0x4C,00526$
      0001FD 80 40            [24]  593 	sjmp	00128$
      0001FF                        594 00526$:
      0001FF BF 4F 03         [24]  595 	cjne	r7,#0x4F,00527$
      000202 02r03rE7         [24]  596 	ljmp	00167$
      000205                        597 00527$:
      000205 BF 50 03         [24]  598 	cjne	r7,#0x50,00528$
      000208 02r03r67         [24]  599 	ljmp	00152$
      00020B                        600 00528$:
      00020B BF 53 02         [24]  601 	cjne	r7,#0x53,00529$
      00020E 80 60            [24]  602 	sjmp	00133$
      000210                        603 00529$:
      000210 BF 54 03         [24]  604 	cjne	r7,#0x54,00530$
      000213 02r01r40         [24]  605 	ljmp	00101$
      000216                        606 00530$:
      000216 BF 55 03         [24]  607 	cjne	r7,#0x55,00531$
      000219 02r03rEE         [24]  608 	ljmp	00168$
      00021C                        609 00531$:
      00021C BF 58 03         [24]  610 	cjne	r7,#0x58,00532$
      00021F 02r03rF5         [24]  611 	ljmp	00169$
      000222                        612 00532$:
      000222 BF 5A 03         [24]  613 	cjne	r7,#0x5A,00533$
      000225 02r01r40         [24]  614 	ljmp	00101$
      000228                        615 00533$:
      000228 02r04r00         [24]  616 	ljmp	00171$
                                    617 ;	printf_large.c:538: case '-':
      00022B                        618 00120$:
                                    619 ;	printf_large.c:539: left_justify = 1;
      00022B D2*01            [12]  620 	setb	__print_format_left_justify_1_67
                                    621 ;	printf_large.c:540: goto get_conversion_spec;
      00022D 02r01r40         [24]  622 	ljmp	00101$
                                    623 ;	printf_large.c:541: case '+':
      000230                        624 00121$:
                                    625 ;	printf_large.c:542: prefix_sign = 1;
      000230 D2*03            [12]  626 	setb	__print_format_prefix_sign_1_67
                                    627 ;	printf_large.c:543: goto get_conversion_spec;
      000232 02r01r40         [24]  628 	ljmp	00101$
                                    629 ;	printf_large.c:544: case ' ':
      000235                        630 00122$:
                                    631 ;	printf_large.c:545: prefix_space = 1;
      000235 D2*04            [12]  632 	setb	__print_format_prefix_space_1_67
                                    633 ;	printf_large.c:546: goto get_conversion_spec;
      000237 02r01r40         [24]  634 	ljmp	00101$
                                    635 ;	printf_large.c:547: case 'B': /* byte */
      00023A                        636 00123$:
                                    637 ;	printf_large.c:548: char_argument = 1;
      00023A D2*06            [12]  638 	setb	__print_format_char_argument_1_67
                                    639 ;	printf_large.c:549: goto get_conversion_spec;
      00023C 02r01r40         [24]  640 	ljmp	00101$
                                    641 ;	printf_large.c:556: case 'L': /* long */
      00023F                        642 00128$:
                                    643 ;	printf_large.c:557: long_argument = 1;
      00023F D2*07            [12]  644 	setb	__print_format_long_argument_1_67
                                    645 ;	printf_large.c:558: goto get_conversion_spec;
      000241 02r01r40         [24]  646 	ljmp	00101$
                                    647 ;	printf_large.c:560: case 'C':
      000244                        648 00129$:
                                    649 ;	printf_large.c:561: if( char_argument )
      000244 30*06 0E         [24]  650 	jnb	__print_format_char_argument_1_67,00131$
                                    651 ;	printf_large.c:562: c = va_arg(ap,char);
      000247 78r12            [12]  652 	mov	r0,#__print_format_PARM_4
      000249 E2               [24]  653 	movx	a,@r0
      00024A 14               [12]  654 	dec	a
      00024B FE               [12]  655 	mov	r6,a
      00024C 78r12            [12]  656 	mov	r0,#__print_format_PARM_4
      00024E F2               [24]  657 	movx	@r0,a
      00024F 8E 01            [24]  658 	mov	ar1,r6
      000251 87 07            [24]  659 	mov	ar7,@r1
      000253 80 13            [24]  660 	sjmp	00132$
      000255                        661 00131$:
                                    662 ;	printf_large.c:564: c = va_arg(ap,int);
      000255 78r12            [12]  663 	mov	r0,#__print_format_PARM_4
      000257 E2               [24]  664 	movx	a,@r0
      000258 24 FE            [12]  665 	add	a,#0xFE
      00025A FE               [12]  666 	mov	r6,a
      00025B 78r12            [12]  667 	mov	r0,#__print_format_PARM_4
      00025D F2               [24]  668 	movx	@r0,a
      00025E 8E 01            [24]  669 	mov	ar1,r6
      000260 87 03            [24]  670 	mov	ar3,@r1
      000262 09               [12]  671 	inc	r1
      000263 87 06            [24]  672 	mov	ar6,@r1
      000265 19               [12]  673 	dec	r1
      000266 8B 07            [24]  674 	mov	ar7,r3
      000268                        675 00132$:
                                    676 ;	printf_large.c:565: OUTPUT_CHAR( c, p );
      000268 8F 82            [24]  677 	mov	dpl,r7
      00026A 12r00r00         [24]  678 	lcall	__output_char
                                    679 ;	printf_large.c:566: break;
      00026D 02r04r0B         [24]  680 	ljmp	00172$
                                    681 ;	printf_large.c:568: case 'S':
      000270                        682 00133$:
                                    683 ;	printf_large.c:569: PTR = va_arg(ap,ptr_t);
      000270 78r12            [12]  684 	mov	r0,#__print_format_PARM_4
      000272 E2               [24]  685 	movx	a,@r0
      000273 24 FD            [12]  686 	add	a,#0xFD
      000275 FE               [12]  687 	mov	r6,a
      000276 78r12            [12]  688 	mov	r0,#__print_format_PARM_4
      000278 F2               [24]  689 	movx	@r0,a
      000279 8E 01            [24]  690 	mov	ar1,r6
      00027B 87 02            [24]  691 	mov	ar2,@r1
      00027D 09               [12]  692 	inc	r1
      00027E 87 03            [24]  693 	mov	ar3,@r1
      000280 09               [12]  694 	inc	r1
      000281 87 06            [24]  695 	mov	ar6,@r1
      000283 19               [12]  696 	dec	r1
      000284 19               [12]  697 	dec	r1
      000285 78r05            [12]  698 	mov	r0,#_value
      000287 EA               [12]  699 	mov	a,r2
      000288 F2               [24]  700 	movx	@r0,a
      000289 08               [12]  701 	inc	r0
      00028A EB               [12]  702 	mov	a,r3
      00028B F2               [24]  703 	movx	@r0,a
      00028C 08               [12]  704 	inc	r0
      00028D EE               [12]  705 	mov	a,r6
      00028E F2               [24]  706 	movx	@r0,a
                                    707 ;	printf_large.c:582: length = strlen(PTR);
      00028F 8A 82            [24]  708 	mov	dpl,r2
      000291 8B 83            [24]  709 	mov	dph,r3
      000293 8E F0            [24]  710 	mov	b,r6
      000295 C0 04            [24]  711 	push	ar4
      000297 12r00r00         [24]  712 	lcall	_strlen
      00029A AB 82            [24]  713 	mov	r3,dpl
      00029C AE 83            [24]  714 	mov	r6,dph
      00029E D0 04            [24]  715 	pop	ar4
                                    716 ;	printf_large.c:584: if ( decimals == -1 )
      0002A0 BC FF 02         [24]  717 	cjne	r4,#0xFF,00135$
                                    718 ;	printf_large.c:586: decimals = length;
      0002A3 8B 04            [24]  719 	mov	ar4,r3
      0002A5                        720 00135$:
                                    721 ;	printf_large.c:588: if ( ( !left_justify ) && (length < width) )
      0002A5 20*01 33         [24]  722 	jb	__print_format_left_justify_1_67,00289$
      0002A8 78r14            [12]  723 	mov	r0,#__print_format_width_1_67
      0002AA C3               [12]  724 	clr	c
      0002AB E2               [24]  725 	movx	a,@r0
      0002AC F5 F0            [12]  726 	mov	b,a
      0002AE EB               [12]  727 	mov	a,r3
      0002AF 95 F0            [12]  728 	subb	a,b
      0002B1 50 28            [24]  729 	jnc	00289$
                                    730 ;	printf_large.c:590: width -= length;
      0002B3 78r14            [12]  731 	mov	r0,#__print_format_width_1_67
      0002B5 E2               [24]  732 	movx	a,@r0
      0002B6 C3               [12]  733 	clr	c
      0002B7 9B               [12]  734 	subb	a,r3
      0002B8 F2               [24]  735 	movx	@r0,a
                                    736 ;	printf_large.c:591: while( width-- != 0 )
      0002B9 78r14            [12]  737 	mov	r0,#__print_format_width_1_67
      0002BB E2               [24]  738 	movx	a,@r0
      0002BC FE               [12]  739 	mov	r6,a
      0002BD                        740 00136$:
      0002BD 8E 02            [24]  741 	mov	ar2,r6
      0002BF 1E               [12]  742 	dec	r6
      0002C0 EA               [12]  743 	mov	a,r2
      0002C1 60 14            [24]  744 	jz	00329$
                                    745 ;	printf_large.c:593: OUTPUT_CHAR( ' ', p );
      0002C3 75 82 20         [24]  746 	mov	dpl,#0x20
      0002C6 C0 06            [24]  747 	push	ar6
      0002C8 C0 04            [24]  748 	push	ar4
      0002CA C0 03            [24]  749 	push	ar3
      0002CC 12r00r00         [24]  750 	lcall	__output_char
      0002CF D0 03            [24]  751 	pop	ar3
      0002D1 D0 04            [24]  752 	pop	ar4
      0002D3 D0 06            [24]  753 	pop	ar6
                                    754 ;	printf_large.c:597: while ( (c = *PTR)  && (decimals-- > 0))
      0002D5 80 E6            [24]  755 	sjmp	00136$
      0002D7                        756 00329$:
      0002D7 78r14            [12]  757 	mov	r0,#__print_format_width_1_67
      0002D9 EE               [12]  758 	mov	a,r6
      0002DA F2               [24]  759 	movx	@r0,a
      0002DB                        760 00289$:
      0002DB 8C 06            [24]  761 	mov	ar6,r4
      0002DD                        762 00143$:
      0002DD C0 03            [24]  763 	push	ar3
      0002DF 78r05            [12]  764 	mov	r0,#_value
      0002E1 E2               [24]  765 	movx	a,@r0
      0002E2 FA               [12]  766 	mov	r2,a
      0002E3 08               [12]  767 	inc	r0
      0002E4 E2               [24]  768 	movx	a,@r0
      0002E5 FB               [12]  769 	mov	r3,a
      0002E6 08               [12]  770 	inc	r0
      0002E7 E2               [24]  771 	movx	a,@r0
      0002E8 FC               [12]  772 	mov	r4,a
      0002E9 8A 82            [24]  773 	mov	dpl,r2
      0002EB 8B 83            [24]  774 	mov	dph,r3
      0002ED 8C F0            [24]  775 	mov	b,r4
      0002EF 12r00r00         [24]  776 	lcall	__gptrget
      0002F2 FA               [12]  777 	mov	r2,a
      0002F3 FF               [12]  778 	mov	r7,a
      0002F4 D0 03            [24]  779 	pop	ar3
      0002F6 EA               [12]  780 	mov	a,r2
      0002F7 60 3B            [24]  781 	jz	00145$
      0002F9 8E 04            [24]  782 	mov	ar4,r6
      0002FB 1E               [12]  783 	dec	r6
      0002FC C3               [12]  784 	clr	c
      0002FD 74 80            [12]  785 	mov	a,#(0x00 ^ 0x80)
      0002FF 8C F0            [24]  786 	mov	b,r4
      000301 63 F0 80         [24]  787 	xrl	b,#0x80
      000304 95 F0            [12]  788 	subb	a,b
      000306 50 2C            [24]  789 	jnc	00145$
                                    790 ;	printf_large.c:599: OUTPUT_CHAR( c, p );
      000308 C0 03            [24]  791 	push	ar3
      00030A 8F 82            [24]  792 	mov	dpl,r7
      00030C C0 06            [24]  793 	push	ar6
      00030E C0 03            [24]  794 	push	ar3
      000310 12r00r00         [24]  795 	lcall	__output_char
      000313 D0 03            [24]  796 	pop	ar3
      000315 D0 06            [24]  797 	pop	ar6
                                    798 ;	printf_large.c:600: PTR++;
      000317 78r05            [12]  799 	mov	r0,#_value
      000319 E2               [24]  800 	movx	a,@r0
      00031A FA               [12]  801 	mov	r2,a
      00031B 08               [12]  802 	inc	r0
      00031C E2               [24]  803 	movx	a,@r0
      00031D FB               [12]  804 	mov	r3,a
      00031E 08               [12]  805 	inc	r0
      00031F E2               [24]  806 	movx	a,@r0
      000320 FC               [12]  807 	mov	r4,a
      000321 0A               [12]  808 	inc	r2
      000322 BA 00 01         [24]  809 	cjne	r2,#0x00,00542$
      000325 0B               [12]  810 	inc	r3
      000326                        811 00542$:
      000326 78r05            [12]  812 	mov	r0,#_value
      000328 EA               [12]  813 	mov	a,r2
      000329 F2               [24]  814 	movx	@r0,a
      00032A 08               [12]  815 	inc	r0
      00032B EB               [12]  816 	mov	a,r3
      00032C F2               [24]  817 	movx	@r0,a
      00032D 08               [12]  818 	inc	r0
      00032E EC               [12]  819 	mov	a,r4
      00032F F2               [24]  820 	movx	@r0,a
      000330 D0 03            [24]  821 	pop	ar3
      000332 80 A9            [24]  822 	sjmp	00143$
      000334                        823 00145$:
                                    824 ;	printf_large.c:603: if ( left_justify && (length < width))
      000334 20*01 03         [24]  825 	jb	__print_format_left_justify_1_67,00543$
      000337 02r04r0B         [24]  826 	ljmp	00172$
      00033A                        827 00543$:
      00033A 78r14            [12]  828 	mov	r0,#__print_format_width_1_67
      00033C C3               [12]  829 	clr	c
      00033D E2               [24]  830 	movx	a,@r0
      00033E F5 F0            [12]  831 	mov	b,a
      000340 EB               [12]  832 	mov	a,r3
      000341 95 F0            [12]  833 	subb	a,b
      000343 40 03            [24]  834 	jc	00544$
      000345 02r04r0B         [24]  835 	ljmp	00172$
      000348                        836 00544$:
                                    837 ;	printf_large.c:605: width -= length;
      000348 78r14            [12]  838 	mov	r0,#__print_format_width_1_67
      00034A E2               [24]  839 	movx	a,@r0
      00034B C3               [12]  840 	clr	c
      00034C 9B               [12]  841 	subb	a,r3
      00034D F2               [24]  842 	movx	@r0,a
                                    843 ;	printf_large.c:606: while( width-- != 0 )
      00034E 78r14            [12]  844 	mov	r0,#__print_format_width_1_67
      000350 E2               [24]  845 	movx	a,@r0
      000351 FE               [12]  846 	mov	r6,a
      000352                        847 00146$:
      000352 8E 04            [24]  848 	mov	ar4,r6
      000354 1E               [12]  849 	dec	r6
      000355 EC               [12]  850 	mov	a,r4
      000356 70 03            [24]  851 	jnz	00545$
      000358 02r04r07         [24]  852 	ljmp	00331$
      00035B                        853 00545$:
                                    854 ;	printf_large.c:608: OUTPUT_CHAR( ' ', p );
      00035B 75 82 20         [24]  855 	mov	dpl,#0x20
      00035E C0 06            [24]  856 	push	ar6
      000360 12r00r00         [24]  857 	lcall	__output_char
      000363 D0 06            [24]  858 	pop	ar6
                                    859 ;	printf_large.c:613: case 'P':
      000365 80 EB            [24]  860 	sjmp	00146$
      000367                        861 00152$:
                                    862 ;	printf_large.c:614: PTR = va_arg(ap,ptr_t);
      000367 78r12            [12]  863 	mov	r0,#__print_format_PARM_4
      000369 E2               [24]  864 	movx	a,@r0
      00036A 24 FD            [12]  865 	add	a,#0xFD
      00036C FC               [12]  866 	mov	r4,a
      00036D 78r12            [12]  867 	mov	r0,#__print_format_PARM_4
      00036F F2               [24]  868 	movx	@r0,a
      000370 8C 01            [24]  869 	mov	ar1,r4
      000372 87 02            [24]  870 	mov	ar2,@r1
      000374 09               [12]  871 	inc	r1
      000375 87 04            [24]  872 	mov	ar4,@r1
      000377 09               [12]  873 	inc	r1
      000378 87 05            [24]  874 	mov	ar5,@r1
      00037A 19               [12]  875 	dec	r1
      00037B 19               [12]  876 	dec	r1
      00037C 78r05            [12]  877 	mov	r0,#_value
      00037E EA               [12]  878 	mov	a,r2
      00037F F2               [24]  879 	movx	@r0,a
      000380 08               [12]  880 	inc	r0
      000381 EC               [12]  881 	mov	a,r4
      000382 F2               [24]  882 	movx	@r0,a
      000383 08               [12]  883 	inc	r0
      000384 ED               [12]  884 	mov	a,r5
      000385 F2               [24]  885 	movx	@r0,a
                                    886 ;	printf_large.c:637: unsigned char memtype = value.byte[2];
      000386 78r07            [12]  887 	mov	r0,#(_value + 0x0002)
      000388 E2               [24]  888 	movx	a,@r0
      000389 FF               [12]  889 	mov	r7,a
                                    890 ;	printf_large.c:638: if (memtype >= 0x80)
      00038A BF 80 00         [24]  891 	cjne	r7,#0x80,00546$
      00038D                        892 00546$:
      00038D 40 04            [24]  893 	jc	00160$
                                    894 ;	printf_large.c:639: c = 'C';
      00038F 7F 43            [12]  895 	mov	r7,#0x43
      000391 80 14            [24]  896 	sjmp	00161$
      000393                        897 00160$:
                                    898 ;	printf_large.c:640: else if (memtype >= 0x60)
      000393 BF 60 00         [24]  899 	cjne	r7,#0x60,00548$
      000396                        900 00548$:
      000396 40 04            [24]  901 	jc	00157$
                                    902 ;	printf_large.c:641: c = 'P';
      000398 7F 50            [12]  903 	mov	r7,#0x50
      00039A 80 0B            [24]  904 	sjmp	00161$
      00039C                        905 00157$:
                                    906 ;	printf_large.c:642: else if (memtype >= 0x40)
      00039C BF 40 00         [24]  907 	cjne	r7,#0x40,00550$
      00039F                        908 00550$:
      00039F 40 04            [24]  909 	jc	00154$
                                    910 ;	printf_large.c:643: c = 'I';
      0003A1 7F 49            [12]  911 	mov	r7,#0x49
      0003A3 80 02            [24]  912 	sjmp	00161$
      0003A5                        913 00154$:
                                    914 ;	printf_large.c:645: c = 'X';
      0003A5 7F 58            [12]  915 	mov	r7,#0x58
      0003A7                        916 00161$:
                                    917 ;	printf_large.c:647: OUTPUT_CHAR(c, p);
      0003A7 8F 82            [24]  918 	mov	dpl,r7
      0003A9 C0 07            [24]  919 	push	ar7
      0003AB 12r00r00         [24]  920 	lcall	__output_char
                                    921 ;	printf_large.c:648: OUTPUT_CHAR(':', p);
      0003AE 75 82 3A         [24]  922 	mov	dpl,#0x3A
      0003B1 12r00r00         [24]  923 	lcall	__output_char
                                    924 ;	printf_large.c:649: OUTPUT_CHAR('0', p);
      0003B4 75 82 30         [24]  925 	mov	dpl,#0x30
      0003B7 12r00r00         [24]  926 	lcall	__output_char
                                    927 ;	printf_large.c:650: OUTPUT_CHAR('x', p);
      0003BA 75 82 78         [24]  928 	mov	dpl,#0x78
      0003BD 12r00r00         [24]  929 	lcall	__output_char
      0003C0 D0 07            [24]  930 	pop	ar7
                                    931 ;	printf_large.c:651: if ((c != 'I' /* idata */) &&
      0003C2 BF 49 02         [24]  932 	cjne	r7,#0x49,00552$
      0003C5 80 0D            [24]  933 	sjmp	00163$
      0003C7                        934 00552$:
                                    935 ;	printf_large.c:652: (c != 'P' /* pdata */))
      0003C7 BF 50 02         [24]  936 	cjne	r7,#0x50,00553$
      0003CA 80 08            [24]  937 	sjmp	00163$
      0003CC                        938 00553$:
                                    939 ;	printf_large.c:654: OUTPUT_2DIGITS( value.byte[1] );
      0003CC 78r06            [12]  940 	mov	r0,#(_value + 0x0001)
      0003CE E2               [24]  941 	movx	a,@r0
      0003CF F5 82            [12]  942 	mov	dpl,a
      0003D1 12r00r4B         [24]  943 	lcall	_output_2digits
      0003D4                        944 00163$:
                                    945 ;	printf_large.c:656: OUTPUT_2DIGITS( value.byte[0] );
      0003D4 78r05            [12]  946 	mov	r0,#_value
      0003D6 E2               [24]  947 	movx	a,@r0
      0003D7 F5 82            [12]  948 	mov	dpl,a
      0003D9 12r00r4B         [24]  949 	lcall	_output_2digits
                                    950 ;	printf_large.c:663: break;
                                    951 ;	printf_large.c:666: case 'I':
      0003DC 80 2D            [24]  952 	sjmp	00172$
      0003DE                        953 00166$:
                                    954 ;	printf_large.c:667: signed_argument = 1;
      0003DE D2*05            [12]  955 	setb	__print_format_signed_argument_1_67
                                    956 ;	printf_large.c:668: radix = 10;
      0003E0 78r13            [12]  957 	mov	r0,#__print_format_radix_1_67
      0003E2 74 0A            [12]  958 	mov	a,#0x0A
      0003E4 F2               [24]  959 	movx	@r0,a
                                    960 ;	printf_large.c:669: break;
                                    961 ;	printf_large.c:671: case 'O':
      0003E5 80 24            [24]  962 	sjmp	00172$
      0003E7                        963 00167$:
                                    964 ;	printf_large.c:672: radix = 8;
      0003E7 78r13            [12]  965 	mov	r0,#__print_format_radix_1_67
      0003E9 74 08            [12]  966 	mov	a,#0x08
      0003EB F2               [24]  967 	movx	@r0,a
                                    968 ;	printf_large.c:673: break;
                                    969 ;	printf_large.c:675: case 'U':
      0003EC 80 1D            [24]  970 	sjmp	00172$
      0003EE                        971 00168$:
                                    972 ;	printf_large.c:676: radix = 10;
      0003EE 78r13            [12]  973 	mov	r0,#__print_format_radix_1_67
      0003F0 74 0A            [12]  974 	mov	a,#0x0A
      0003F2 F2               [24]  975 	movx	@r0,a
                                    976 ;	printf_large.c:677: break;
                                    977 ;	printf_large.c:679: case 'X':
      0003F3 80 16            [24]  978 	sjmp	00172$
      0003F5                        979 00169$:
                                    980 ;	printf_large.c:680: radix = 16;
      0003F5 78r13            [12]  981 	mov	r0,#__print_format_radix_1_67
      0003F7 74 10            [12]  982 	mov	a,#0x10
      0003F9 F2               [24]  983 	movx	@r0,a
                                    984 ;	printf_large.c:681: break;
                                    985 ;	printf_large.c:683: case 'F':
      0003FA 80 0F            [24]  986 	sjmp	00172$
      0003FC                        987 00170$:
                                    988 ;	printf_large.c:684: float_argument=1;
      0003FC D2*08            [12]  989 	setb	__print_format_float_argument_1_67
                                    990 ;	printf_large.c:685: break;
                                    991 ;	printf_large.c:687: default:
      0003FE 80 0B            [24]  992 	sjmp	00172$
      000400                        993 00171$:
                                    994 ;	printf_large.c:689: OUTPUT_CHAR( c, p );
      000400 8F 82            [24]  995 	mov	dpl,r7
      000402 12r00r00         [24]  996 	lcall	__output_char
                                    997 ;	printf_large.c:872: return charsOutputted;
                                    998 ;	printf_large.c:691: }
      000405 80 04            [24]  999 	sjmp	00172$
      000407                       1000 00331$:
      000407 78r14            [12] 1001 	mov	r0,#__print_format_width_1_67
      000409 EE               [12] 1002 	mov	a,r6
      00040A F2               [24] 1003 	movx	@r0,a
      00040B                       1004 00172$:
                                   1005 ;	printf_large.c:693: if (float_argument)
      00040B 30*08 73         [24] 1006 	jnb	__print_format_float_argument_1_67,00238$
                                   1007 ;	printf_large.c:695: value.f = va_arg(ap, float);
      00040E 78r12            [12] 1008 	mov	r0,#__print_format_PARM_4
      000410 E2               [24] 1009 	movx	a,@r0
      000411 24 FC            [12] 1010 	add	a,#0xFC
      000413 FE               [12] 1011 	mov	r6,a
      000414 78r12            [12] 1012 	mov	r0,#__print_format_PARM_4
      000416 F2               [24] 1013 	movx	@r0,a
      000417 8E 01            [24] 1014 	mov	ar1,r6
      000419 87*01            [24] 1015 	mov	__print_format_sloc1_1_0,@r1
      00041B 09               [12] 1016 	inc	r1
      00041C 87*02            [24] 1017 	mov	(__print_format_sloc1_1_0 + 1),@r1
      00041E 09               [12] 1018 	inc	r1
      00041F 87*03            [24] 1019 	mov	(__print_format_sloc1_1_0 + 2),@r1
      000421 09               [12] 1020 	inc	r1
      000422 87*04            [24] 1021 	mov	(__print_format_sloc1_1_0 + 3),@r1
      000424 19               [12] 1022 	dec	r1
      000425 19               [12] 1023 	dec	r1
      000426 19               [12] 1024 	dec	r1
      000427 78r05            [12] 1025 	mov	r0,#_value
      000429 E5*01            [12] 1026 	mov	a,__print_format_sloc1_1_0
      00042B F2               [24] 1027 	movx	@r0,a
      00042C 08               [12] 1028 	inc	r0
      00042D E5*02            [12] 1029 	mov	a,(__print_format_sloc1_1_0 + 1)
      00042F F2               [24] 1030 	movx	@r0,a
      000430 08               [12] 1031 	inc	r0
      000431 E5*03            [12] 1032 	mov	a,(__print_format_sloc1_1_0 + 2)
      000433 F2               [24] 1033 	movx	@r0,a
      000434 08               [12] 1034 	inc	r0
      000435 E5*04            [12] 1035 	mov	a,(__print_format_sloc1_1_0 + 3)
      000437 F2               [24] 1036 	movx	@r0,a
                                   1037 ;	printf_large.c:697: PTR="<NO FLOAT>";
      000438 78r05            [12] 1038 	mov	r0,#_value
      00043A 74r00            [12] 1039 	mov	a,#___str_0
      00043C F2               [24] 1040 	movx	@r0,a
      00043D 08               [12] 1041 	inc	r0
      00043E 74s00            [12] 1042 	mov	a,#(___str_0 >> 8)
      000440 F2               [24] 1043 	movx	@r0,a
      000441 08               [12] 1044 	inc	r0
      000442 74 80            [12] 1045 	mov	a,#0x80
      000444 F2               [24] 1046 	movx	@r0,a
                                   1047 ;	printf_large.c:698: while (c=*PTR++)
      000445                       1048 00173$:
      000445 78r05            [12] 1049 	mov	r0,#_value
      000447 E2               [24] 1050 	movx	a,@r0
      000448 F5*01            [12] 1051 	mov	__print_format_sloc1_1_0,a
      00044A 08               [12] 1052 	inc	r0
      00044B E2               [24] 1053 	movx	a,@r0
      00044C F5*02            [12] 1054 	mov	(__print_format_sloc1_1_0 + 1),a
      00044E 08               [12] 1055 	inc	r0
      00044F E2               [24] 1056 	movx	a,@r0
      000450 F5*03            [12] 1057 	mov	(__print_format_sloc1_1_0 + 2),a
      000452 74 01            [12] 1058 	mov	a,#0x01
      000454 25*01            [12] 1059 	add	a,__print_format_sloc1_1_0
      000456 FA               [12] 1060 	mov	r2,a
      000457 E4               [12] 1061 	clr	a
      000458 35*02            [12] 1062 	addc	a,(__print_format_sloc1_1_0 + 1)
      00045A FC               [12] 1063 	mov	r4,a
      00045B AE*03            [24] 1064 	mov	r6,(__print_format_sloc1_1_0 + 2)
      00045D 78r05            [12] 1065 	mov	r0,#_value
      00045F EA               [12] 1066 	mov	a,r2
      000460 F2               [24] 1067 	movx	@r0,a
      000461 08               [12] 1068 	inc	r0
      000462 EC               [12] 1069 	mov	a,r4
      000463 F2               [24] 1070 	movx	@r0,a
      000464 08               [12] 1071 	inc	r0
      000465 EE               [12] 1072 	mov	a,r6
      000466 F2               [24] 1073 	movx	@r0,a
      000467 85*01 82         [24] 1074 	mov	dpl,__print_format_sloc1_1_0
      00046A 85*02 83         [24] 1075 	mov	dph,(__print_format_sloc1_1_0 + 1)
      00046D 85*03 F0         [24] 1076 	mov	b,(__print_format_sloc1_1_0 + 2)
      000470 12r00r00         [24] 1077 	lcall	__gptrget
      000473 FE               [12] 1078 	mov	r6,a
      000474 FF               [12] 1079 	mov	r7,a
      000475 70 03            [24] 1080 	jnz	00555$
      000477 02r00rED         [24] 1081 	ljmp	00243$
      00047A                       1082 00555$:
                                   1083 ;	printf_large.c:700: OUTPUT_CHAR (c, p);
      00047A 8F 82            [24] 1084 	mov	dpl,r7
      00047C 12r00r00         [24] 1085 	lcall	__output_char
      00047F 80 C4            [24] 1086 	sjmp	00173$
      000481                       1087 00238$:
                                   1088 ;	printf_large.c:718: else if (radix != 0)
      000481 78r13            [12] 1089 	mov	r0,#__print_format_radix_1_67
      000483 E2               [24] 1090 	movx	a,@r0
      000484 70 03            [24] 1091 	jnz	00556$
      000486 02r00rED         [24] 1092 	ljmp	00243$
      000489                       1093 00556$:
                                   1094 ;	printf_large.c:723: unsigned char MEM_SPACE_BUF_PP *pstore = &store[5];
      000489 7Er1A            [12] 1095 	mov	r6,#(__print_format_store_4_88 + 0x0005)
                                   1096 ;	printf_large.c:726: if (char_argument)
      00048B 30*06 4C         [24] 1097 	jnb	__print_format_char_argument_1_67,00184$
                                   1098 ;	printf_large.c:728: value.l = va_arg(ap, char);
      00048E C0 06            [24] 1099 	push	ar6
      000490 78r12            [12] 1100 	mov	r0,#__print_format_PARM_4
      000492 E2               [24] 1101 	movx	a,@r0
      000493 14               [12] 1102 	dec	a
      000494 FC               [12] 1103 	mov	r4,a
      000495 78r12            [12] 1104 	mov	r0,#__print_format_PARM_4
      000497 F2               [24] 1105 	movx	@r0,a
      000498 8C 01            [24] 1106 	mov	ar1,r4
      00049A E7               [12] 1107 	mov	a,@r1
      00049B FA               [12] 1108 	mov	r2,a
      00049C 33               [12] 1109 	rlc	a
      00049D 95 E0            [12] 1110 	subb	a,acc
      00049F FC               [12] 1111 	mov	r4,a
      0004A0 FD               [12] 1112 	mov	r5,a
      0004A1 FE               [12] 1113 	mov	r6,a
      0004A2 78r05            [12] 1114 	mov	r0,#_value
      0004A4 EA               [12] 1115 	mov	a,r2
      0004A5 F2               [24] 1116 	movx	@r0,a
      0004A6 08               [12] 1117 	inc	r0
      0004A7 EC               [12] 1118 	mov	a,r4
      0004A8 F2               [24] 1119 	movx	@r0,a
      0004A9 08               [12] 1120 	inc	r0
      0004AA ED               [12] 1121 	mov	a,r5
      0004AB F2               [24] 1122 	movx	@r0,a
      0004AC 08               [12] 1123 	inc	r0
      0004AD EE               [12] 1124 	mov	a,r6
      0004AE F2               [24] 1125 	movx	@r0,a
                                   1126 ;	printf_large.c:729: if (!signed_argument)
      0004AF D0 06            [24] 1127 	pop	ar6
      0004B1 30*05 03         [24] 1128 	jnb	__print_format_signed_argument_1_67,00558$
      0004B4 02r05r55         [24] 1129 	ljmp	00185$
      0004B7                       1130 00558$:
                                   1131 ;	printf_large.c:731: value.l &= 0xFF;
      0004B7 C0 06            [24] 1132 	push	ar6
      0004B9 78r05            [12] 1133 	mov	r0,#_value
      0004BB E2               [24] 1134 	movx	a,@r0
      0004BC FA               [12] 1135 	mov	r2,a
      0004BD 08               [12] 1136 	inc	r0
      0004BE E2               [24] 1137 	movx	a,@r0
      0004BF 08               [12] 1138 	inc	r0
      0004C0 E2               [24] 1139 	movx	a,@r0
      0004C1 08               [12] 1140 	inc	r0
      0004C2 E2               [24] 1141 	movx	a,@r0
      0004C3 7C 00            [12] 1142 	mov	r4,#0x00
      0004C5 7D 00            [12] 1143 	mov	r5,#0x00
      0004C7 7E 00            [12] 1144 	mov	r6,#0x00
      0004C9 78r05            [12] 1145 	mov	r0,#_value
      0004CB EA               [12] 1146 	mov	a,r2
      0004CC F2               [24] 1147 	movx	@r0,a
      0004CD 08               [12] 1148 	inc	r0
      0004CE EC               [12] 1149 	mov	a,r4
      0004CF F2               [24] 1150 	movx	@r0,a
      0004D0 08               [12] 1151 	inc	r0
      0004D1 ED               [12] 1152 	mov	a,r5
      0004D2 F2               [24] 1153 	movx	@r0,a
      0004D3 08               [12] 1154 	inc	r0
      0004D4 EE               [12] 1155 	mov	a,r6
      0004D5 F2               [24] 1156 	movx	@r0,a
      0004D6 D0 06            [24] 1157 	pop	ar6
      0004D8 80 7B            [24] 1158 	sjmp	00185$
      0004DA                       1159 00184$:
                                   1160 ;	printf_large.c:734: else if (long_argument)
      0004DA 30*07 2C         [24] 1161 	jnb	__print_format_long_argument_1_67,00181$
                                   1162 ;	printf_large.c:736: value.l = va_arg(ap, long);
      0004DD C0 06            [24] 1163 	push	ar6
      0004DF 78r12            [12] 1164 	mov	r0,#__print_format_PARM_4
      0004E1 E2               [24] 1165 	movx	a,@r0
      0004E2 24 FC            [12] 1166 	add	a,#0xFC
      0004E4 FD               [12] 1167 	mov	r5,a
      0004E5 78r12            [12] 1168 	mov	r0,#__print_format_PARM_4
      0004E7 F2               [24] 1169 	movx	@r0,a
      0004E8 8D 01            [24] 1170 	mov	ar1,r5
      0004EA 87 02            [24] 1171 	mov	ar2,@r1
      0004EC 09               [12] 1172 	inc	r1
      0004ED 87 04            [24] 1173 	mov	ar4,@r1
      0004EF 09               [12] 1174 	inc	r1
      0004F0 87 05            [24] 1175 	mov	ar5,@r1
      0004F2 09               [12] 1176 	inc	r1
      0004F3 87 06            [24] 1177 	mov	ar6,@r1
      0004F5 19               [12] 1178 	dec	r1
      0004F6 19               [12] 1179 	dec	r1
      0004F7 19               [12] 1180 	dec	r1
      0004F8 78r05            [12] 1181 	mov	r0,#_value
      0004FA EA               [12] 1182 	mov	a,r2
      0004FB F2               [24] 1183 	movx	@r0,a
      0004FC 08               [12] 1184 	inc	r0
      0004FD EC               [12] 1185 	mov	a,r4
      0004FE F2               [24] 1186 	movx	@r0,a
      0004FF 08               [12] 1187 	inc	r0
      000500 ED               [12] 1188 	mov	a,r5
      000501 F2               [24] 1189 	movx	@r0,a
      000502 08               [12] 1190 	inc	r0
      000503 EE               [12] 1191 	mov	a,r6
      000504 F2               [24] 1192 	movx	@r0,a
      000505 D0 06            [24] 1193 	pop	ar6
      000507 80 4C            [24] 1194 	sjmp	00185$
      000509                       1195 00181$:
                                   1196 ;	printf_large.c:740: value.l = va_arg(ap, int);
      000509 C0 06            [24] 1197 	push	ar6
      00050B 78r12            [12] 1198 	mov	r0,#__print_format_PARM_4
      00050D E2               [24] 1199 	movx	a,@r0
      00050E 24 FE            [12] 1200 	add	a,#0xFE
      000510 FD               [12] 1201 	mov	r5,a
      000511 78r12            [12] 1202 	mov	r0,#__print_format_PARM_4
      000513 F2               [24] 1203 	movx	@r0,a
      000514 8D 01            [24] 1204 	mov	ar1,r5
      000516 87 04            [24] 1205 	mov	ar4,@r1
      000518 09               [12] 1206 	inc	r1
      000519 87 05            [24] 1207 	mov	ar5,@r1
      00051B 19               [12] 1208 	dec	r1
      00051C ED               [12] 1209 	mov	a,r5
      00051D FA               [12] 1210 	mov	r2,a
      00051E 33               [12] 1211 	rlc	a
      00051F 95 E0            [12] 1212 	subb	a,acc
      000521 FD               [12] 1213 	mov	r5,a
      000522 FE               [12] 1214 	mov	r6,a
      000523 78r05            [12] 1215 	mov	r0,#_value
      000525 EC               [12] 1216 	mov	a,r4
      000526 F2               [24] 1217 	movx	@r0,a
      000527 08               [12] 1218 	inc	r0
      000528 EA               [12] 1219 	mov	a,r2
      000529 F2               [24] 1220 	movx	@r0,a
      00052A 08               [12] 1221 	inc	r0
      00052B ED               [12] 1222 	mov	a,r5
      00052C F2               [24] 1223 	movx	@r0,a
      00052D 08               [12] 1224 	inc	r0
      00052E EE               [12] 1225 	mov	a,r6
      00052F F2               [24] 1226 	movx	@r0,a
                                   1227 ;	printf_large.c:741: if (!signed_argument)
      000530 D0 06            [24] 1228 	pop	ar6
      000532 20*05 20         [24] 1229 	jb	__print_format_signed_argument_1_67,00185$
                                   1230 ;	printf_large.c:743: value.l &= 0xFFFF;
      000535 C0 06            [24] 1231 	push	ar6
      000537 78r05            [12] 1232 	mov	r0,#_value
      000539 E2               [24] 1233 	movx	a,@r0
      00053A FA               [12] 1234 	mov	r2,a
      00053B 08               [12] 1235 	inc	r0
      00053C E2               [24] 1236 	movx	a,@r0
      00053D FC               [12] 1237 	mov	r4,a
      00053E 08               [12] 1238 	inc	r0
      00053F E2               [24] 1239 	movx	a,@r0
      000540 08               [12] 1240 	inc	r0
      000541 E2               [24] 1241 	movx	a,@r0
      000542 7D 00            [12] 1242 	mov	r5,#0x00
      000544 7E 00            [12] 1243 	mov	r6,#0x00
      000546 78r05            [12] 1244 	mov	r0,#_value
      000548 EA               [12] 1245 	mov	a,r2
      000549 F2               [24] 1246 	movx	@r0,a
      00054A 08               [12] 1247 	inc	r0
      00054B EC               [12] 1248 	mov	a,r4
      00054C F2               [24] 1249 	movx	@r0,a
      00054D 08               [12] 1250 	inc	r0
      00054E ED               [12] 1251 	mov	a,r5
      00054F F2               [24] 1252 	movx	@r0,a
      000550 08               [12] 1253 	inc	r0
      000551 EE               [12] 1254 	mov	a,r6
      000552 F2               [24] 1255 	movx	@r0,a
                                   1256 ;	printf_large.c:872: return charsOutputted;
      000553 D0 06            [24] 1257 	pop	ar6
                                   1258 ;	printf_large.c:743: value.l &= 0xFFFF;
      000555                       1259 00185$:
                                   1260 ;	printf_large.c:747: if ( signed_argument )
      000555 30*05 42         [24] 1261 	jnb	__print_format_signed_argument_1_67,00190$
                                   1262 ;	printf_large.c:749: if (value.l < 0)
      000558 C0 06            [24] 1263 	push	ar6
      00055A 78r05            [12] 1264 	mov	r0,#_value
      00055C E2               [24] 1265 	movx	a,@r0
      00055D FA               [12] 1266 	mov	r2,a
      00055E 08               [12] 1267 	inc	r0
      00055F E2               [24] 1268 	movx	a,@r0
      000560 FC               [12] 1269 	mov	r4,a
      000561 08               [12] 1270 	inc	r0
      000562 E2               [24] 1271 	movx	a,@r0
      000563 FD               [12] 1272 	mov	r5,a
      000564 08               [12] 1273 	inc	r0
      000565 E2               [24] 1274 	movx	a,@r0
      000566 D0 06            [24] 1275 	pop	ar6
      000568 30 E7 2D         [24] 1276 	jnb	acc.7,00187$
                                   1277 ;	printf_large.c:750: value.l = -value.l;
      00056B C0 06            [24] 1278 	push	ar6
      00056D 78r05            [12] 1279 	mov	r0,#_value
      00056F E2               [24] 1280 	movx	a,@r0
      000570 FA               [12] 1281 	mov	r2,a
      000571 08               [12] 1282 	inc	r0
      000572 E2               [24] 1283 	movx	a,@r0
      000573 FC               [12] 1284 	mov	r4,a
      000574 08               [12] 1285 	inc	r0
      000575 E2               [24] 1286 	movx	a,@r0
      000576 FD               [12] 1287 	mov	r5,a
      000577 08               [12] 1288 	inc	r0
      000578 E2               [24] 1289 	movx	a,@r0
      000579 FE               [12] 1290 	mov	r6,a
      00057A C3               [12] 1291 	clr	c
      00057B E4               [12] 1292 	clr	a
      00057C 9A               [12] 1293 	subb	a,r2
      00057D FA               [12] 1294 	mov	r2,a
      00057E E4               [12] 1295 	clr	a
      00057F 9C               [12] 1296 	subb	a,r4
      000580 FC               [12] 1297 	mov	r4,a
      000581 E4               [12] 1298 	clr	a
      000582 9D               [12] 1299 	subb	a,r5
      000583 FD               [12] 1300 	mov	r5,a
      000584 E4               [12] 1301 	clr	a
      000585 9E               [12] 1302 	subb	a,r6
      000586 FE               [12] 1303 	mov	r6,a
      000587 78r05            [12] 1304 	mov	r0,#_value
      000589 EA               [12] 1305 	mov	a,r2
      00058A F2               [24] 1306 	movx	@r0,a
      00058B 08               [12] 1307 	inc	r0
      00058C EC               [12] 1308 	mov	a,r4
      00058D F2               [24] 1309 	movx	@r0,a
      00058E 08               [12] 1310 	inc	r0
      00058F ED               [12] 1311 	mov	a,r5
      000590 F2               [24] 1312 	movx	@r0,a
      000591 08               [12] 1313 	inc	r0
      000592 EE               [12] 1314 	mov	a,r6
      000593 F2               [24] 1315 	movx	@r0,a
      000594 D0 06            [24] 1316 	pop	ar6
      000596 80 02            [24] 1317 	sjmp	00190$
      000598                       1318 00187$:
                                   1319 ;	printf_large.c:752: signed_argument = 0;
      000598 C2*05            [12] 1320 	clr	__print_format_signed_argument_1_67
      00059A                       1321 00190$:
                                   1322 ;	printf_large.c:756: lsd = 1;
      00059A D2*09            [12] 1323 	setb	__print_format_lsd_1_67
                                   1324 ;	printf_large.c:758: do {
      00059C 8E*01            [24] 1325 	mov	__print_format_sloc1_1_0,r6
      00059E 7F 00            [12] 1326 	mov	r7,#0x00
      0005A0                       1327 00194$:
                                   1328 ;	printf_large.c:759: value.byte[4] = 0;
      0005A0 78r09            [12] 1329 	mov	r0,#(_value + 0x0004)
      0005A2 E4               [12] 1330 	clr	a
      0005A3 F2               [24] 1331 	movx	@r0,a
                                   1332 ;	printf_large.c:763: calculate_digit(radix);
      0005A4 78r13            [12] 1333 	mov	r0,#__print_format_radix_1_67
      0005A6 E2               [24] 1334 	movx	a,@r0
      0005A7 F5 82            [12] 1335 	mov	dpl,a
      0005A9 C0 07            [24] 1336 	push	ar7
      0005AB 12r00r62         [24] 1337 	lcall	_calculate_digit
      0005AE D0 07            [24] 1338 	pop	ar7
                                   1339 ;	printf_large.c:765: if (!lsd)
      0005B0 20*09 11         [24] 1340 	jb	__print_format_lsd_1_67,00192$
                                   1341 ;	printf_large.c:767: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
      0005B3 78r09            [12] 1342 	mov	r0,#(_value + 0x0004)
      0005B5 E2               [24] 1343 	movx	a,@r0
      0005B6 C4               [12] 1344 	swap	a
      0005B7 FC               [12] 1345 	mov	r4,a
      0005B8 A8*01            [24] 1346 	mov	r0,__print_format_sloc1_1_0
      0005BA E2               [24] 1347 	movx	a,@r0
      0005BB FA               [12] 1348 	mov	r2,a
      0005BC 4C               [12] 1349 	orl	a,r4
      0005BD A8*01            [24] 1350 	mov	r0,__print_format_sloc1_1_0
      0005BF F2               [24] 1351 	movx	@r0,a
                                   1352 ;	printf_large.c:768: pstore--;
      0005C0 15*01            [12] 1353 	dec	__print_format_sloc1_1_0
      0005C2 80 07            [24] 1354 	sjmp	00193$
      0005C4                       1355 00192$:
                                   1356 ;	printf_large.c:772: *pstore = value.byte[4];
      0005C4 78r09            [12] 1357 	mov	r0,#(_value + 0x0004)
      0005C6 E2               [24] 1358 	movx	a,@r0
      0005C7 FC               [12] 1359 	mov	r4,a
      0005C8 A8*01            [24] 1360 	mov	r0,__print_format_sloc1_1_0
      0005CA F2               [24] 1361 	movx	@r0,a
      0005CB                       1362 00193$:
                                   1363 ;	printf_large.c:774: length++;
      0005CB 0F               [12] 1364 	inc	r7
                                   1365 ;	printf_large.c:775: lsd = !lsd;
      0005CC B2*09            [12] 1366 	cpl	__print_format_lsd_1_67
                                   1367 ;	printf_large.c:776: } while( value.ul );
      0005CE 78r05            [12] 1368 	mov	r0,#_value
      0005D0 E2               [24] 1369 	movx	a,@r0
      0005D1 F5*05            [12] 1370 	mov	__print_format_sloc2_1_0,a
      0005D3 08               [12] 1371 	inc	r0
      0005D4 E2               [24] 1372 	movx	a,@r0
      0005D5 F5*06            [12] 1373 	mov	(__print_format_sloc2_1_0 + 1),a
      0005D7 08               [12] 1374 	inc	r0
      0005D8 E2               [24] 1375 	movx	a,@r0
      0005D9 F5*07            [12] 1376 	mov	(__print_format_sloc2_1_0 + 2),a
      0005DB 08               [12] 1377 	inc	r0
      0005DC E2               [24] 1378 	movx	a,@r0
      0005DD F5*08            [12] 1379 	mov	(__print_format_sloc2_1_0 + 3),a
      0005DF E5*05            [12] 1380 	mov	a,__print_format_sloc2_1_0
      0005E1 45*06            [12] 1381 	orl	a,(__print_format_sloc2_1_0 + 1)
      0005E3 45*07            [12] 1382 	orl	a,(__print_format_sloc2_1_0 + 2)
      0005E5 45*08            [12] 1383 	orl	a,(__print_format_sloc2_1_0 + 3)
      0005E7 70 B7            [24] 1384 	jnz	00194$
                                   1385 ;	printf_large.c:778: if (width == 0)
      0005E9 AE*01            [24] 1386 	mov	r6,__print_format_sloc1_1_0
      0005EB 8F 03            [24] 1387 	mov	ar3,r7
      0005ED 78r14            [12] 1388 	mov	r0,#__print_format_width_1_67
      0005EF E2               [24] 1389 	movx	a,@r0
      0005F0 70 05            [24] 1390 	jnz	00198$
                                   1391 ;	printf_large.c:783: width = 1;
      0005F2 78r14            [12] 1392 	mov	r0,#__print_format_width_1_67
      0005F4 74 01            [12] 1393 	mov	a,#0x01
      0005F6 F2               [24] 1394 	movx	@r0,a
      0005F7                       1395 00198$:
                                   1396 ;	printf_large.c:787: if (!zero_padding && !left_justify)
      0005F7 20*02 2C         [24] 1397 	jb	__print_format_zero_padding_1_67,00203$
      0005FA 20*01 29         [24] 1398 	jb	__print_format_left_justify_1_67,00203$
                                   1399 ;	printf_large.c:789: while ( width > (unsigned char) (length+1) )
      0005FD EB               [12] 1400 	mov	a,r3
      0005FE 04               [12] 1401 	inc	a
      0005FF FD               [12] 1402 	mov	r5,a
      000600 78r14            [12] 1403 	mov	r0,#__print_format_width_1_67
      000602 E2               [24] 1404 	movx	a,@r0
      000603 FC               [12] 1405 	mov	r4,a
      000604                       1406 00199$:
      000604 C3               [12] 1407 	clr	c
      000605 ED               [12] 1408 	mov	a,r5
      000606 9C               [12] 1409 	subb	a,r4
      000607 50 19            [24] 1410 	jnc	00333$
                                   1411 ;	printf_large.c:791: OUTPUT_CHAR( ' ', p );
      000609 75 82 20         [24] 1412 	mov	dpl,#0x20
      00060C C0 06            [24] 1413 	push	ar6
      00060E C0 05            [24] 1414 	push	ar5
      000610 C0 04            [24] 1415 	push	ar4
      000612 C0 03            [24] 1416 	push	ar3
      000614 12r00r00         [24] 1417 	lcall	__output_char
      000617 D0 03            [24] 1418 	pop	ar3
      000619 D0 04            [24] 1419 	pop	ar4
      00061B D0 05            [24] 1420 	pop	ar5
      00061D D0 06            [24] 1421 	pop	ar6
                                   1422 ;	printf_large.c:792: width--;
      00061F 1C               [12] 1423 	dec	r4
      000620 80 E2            [24] 1424 	sjmp	00199$
      000622                       1425 00333$:
      000622 78r14            [12] 1426 	mov	r0,#__print_format_width_1_67
      000624 EC               [12] 1427 	mov	a,r4
      000625 F2               [24] 1428 	movx	@r0,a
      000626                       1429 00203$:
                                   1430 ;	printf_large.c:796: if (signed_argument) // this now means the original value was negative
      000626 30*05 15         [24] 1431 	jnb	__print_format_signed_argument_1_67,00213$
                                   1432 ;	printf_large.c:798: OUTPUT_CHAR( '-', p );
      000629 75 82 2D         [24] 1433 	mov	dpl,#0x2D
      00062C C0 06            [24] 1434 	push	ar6
      00062E C0 03            [24] 1435 	push	ar3
      000630 12r00r00         [24] 1436 	lcall	__output_char
      000633 D0 03            [24] 1437 	pop	ar3
      000635 D0 06            [24] 1438 	pop	ar6
                                   1439 ;	printf_large.c:800: width--;
      000637 78r14            [12] 1440 	mov	r0,#__print_format_width_1_67
      000639 E2               [24] 1441 	movx	a,@r0
      00063A 14               [12] 1442 	dec	a
      00063B F2               [24] 1443 	movx	@r0,a
      00063C 80 31            [24] 1444 	sjmp	00214$
      00063E                       1445 00213$:
                                   1446 ;	printf_large.c:802: else if (length != 0)
      00063E EB               [12] 1447 	mov	a,r3
      00063F 60 2E            [24] 1448 	jz	00214$
                                   1449 ;	printf_large.c:805: if (prefix_sign)
      000641 30*03 15         [24] 1450 	jnb	__print_format_prefix_sign_1_67,00208$
                                   1451 ;	printf_large.c:807: OUTPUT_CHAR( '+', p );
      000644 75 82 2B         [24] 1452 	mov	dpl,#0x2B
      000647 C0 06            [24] 1453 	push	ar6
      000649 C0 03            [24] 1454 	push	ar3
      00064B 12r00r00         [24] 1455 	lcall	__output_char
      00064E D0 03            [24] 1456 	pop	ar3
      000650 D0 06            [24] 1457 	pop	ar6
                                   1458 ;	printf_large.c:809: width--;
      000652 78r14            [12] 1459 	mov	r0,#__print_format_width_1_67
      000654 E2               [24] 1460 	movx	a,@r0
      000655 14               [12] 1461 	dec	a
      000656 F2               [24] 1462 	movx	@r0,a
      000657 80 16            [24] 1463 	sjmp	00214$
      000659                       1464 00208$:
                                   1465 ;	printf_large.c:811: else if (prefix_space)
      000659 30*04 13         [24] 1466 	jnb	__print_format_prefix_space_1_67,00214$
                                   1467 ;	printf_large.c:813: OUTPUT_CHAR( ' ', p );
      00065C 75 82 20         [24] 1468 	mov	dpl,#0x20
      00065F C0 06            [24] 1469 	push	ar6
      000661 C0 03            [24] 1470 	push	ar3
      000663 12r00r00         [24] 1471 	lcall	__output_char
      000666 D0 03            [24] 1472 	pop	ar3
      000668 D0 06            [24] 1473 	pop	ar6
                                   1474 ;	printf_large.c:815: width--;
      00066A 78r14            [12] 1475 	mov	r0,#__print_format_width_1_67
      00066C E2               [24] 1476 	movx	a,@r0
      00066D 14               [12] 1477 	dec	a
      00066E F2               [24] 1478 	movx	@r0,a
      00066F                       1479 00214$:
                                   1480 ;	printf_large.c:820: if (!left_justify)
      00066F 20*01 28         [24] 1481 	jb	__print_format_left_justify_1_67,00222$
                                   1482 ;	printf_large.c:822: while ( width-- > length )
      000672 78r14            [12] 1483 	mov	r0,#__print_format_width_1_67
      000674 E2               [24] 1484 	movx	a,@r0
      000675 FD               [12] 1485 	mov	r5,a
      000676                       1486 00215$:
      000676 8D 04            [24] 1487 	mov	ar4,r5
      000678 1D               [12] 1488 	dec	r5
      000679 C3               [12] 1489 	clr	c
      00067A EB               [12] 1490 	mov	a,r3
      00067B 9C               [12] 1491 	subb	a,r4
      00067C 50 35            [24] 1492 	jnc	00334$
                                   1493 ;	printf_large.c:824: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
      00067E 30*02 04         [24] 1494 	jnb	__print_format_zero_padding_1_67,00248$
      000681 7C 30            [12] 1495 	mov	r4,#0x30
      000683 80 02            [24] 1496 	sjmp	00249$
      000685                       1497 00248$:
      000685 7C 20            [12] 1498 	mov	r4,#0x20
      000687                       1499 00249$:
      000687 8C 82            [24] 1500 	mov	dpl,r4
      000689 C0 06            [24] 1501 	push	ar6
      00068B C0 05            [24] 1502 	push	ar5
      00068D C0 03            [24] 1503 	push	ar3
      00068F 12r00r00         [24] 1504 	lcall	__output_char
      000692 D0 03            [24] 1505 	pop	ar3
      000694 D0 05            [24] 1506 	pop	ar5
      000696 D0 06            [24] 1507 	pop	ar6
      000698 80 DC            [24] 1508 	sjmp	00215$
      00069A                       1509 00222$:
                                   1510 ;	printf_large.c:830: if (width > length)
      00069A 78r14            [12] 1511 	mov	r0,#__print_format_width_1_67
      00069C C3               [12] 1512 	clr	c
      00069D E2               [24] 1513 	movx	a,@r0
      00069E F5 F0            [12] 1514 	mov	b,a
      0006A0 EB               [12] 1515 	mov	a,r3
      0006A1 95 F0            [12] 1516 	subb	a,b
      0006A3 50 08            [24] 1517 	jnc	00219$
                                   1518 ;	printf_large.c:831: width -= length;
      0006A5 78r14            [12] 1519 	mov	r0,#__print_format_width_1_67
      0006A7 E2               [24] 1520 	movx	a,@r0
      0006A8 C3               [12] 1521 	clr	c
      0006A9 9B               [12] 1522 	subb	a,r3
      0006AA F2               [24] 1523 	movx	@r0,a
      0006AB 80 0A            [24] 1524 	sjmp	00326$
      0006AD                       1525 00219$:
                                   1526 ;	printf_large.c:833: width = 0;
      0006AD 78r14            [12] 1527 	mov	r0,#__print_format_width_1_67
      0006AF E4               [12] 1528 	clr	a
      0006B0 F2               [24] 1529 	movx	@r0,a
                                   1530 ;	printf_large.c:872: return charsOutputted;
                                   1531 ;	printf_large.c:837: while( length-- )
      0006B1 80 04            [24] 1532 	sjmp	00326$
      0006B3                       1533 00334$:
      0006B3 78r14            [12] 1534 	mov	r0,#__print_format_width_1_67
      0006B5 ED               [12] 1535 	mov	a,r5
      0006B6 F2               [24] 1536 	movx	@r0,a
      0006B7                       1537 00326$:
      0006B7 8E 01            [24] 1538 	mov	ar1,r6
      0006B9 8B 06            [24] 1539 	mov	ar6,r3
      0006BB                       1540 00227$:
      0006BB 8E 05            [24] 1541 	mov	ar5,r6
      0006BD 1E               [12] 1542 	dec	r6
      0006BE ED               [12] 1543 	mov	a,r5
      0006BF 60 2B            [24] 1544 	jz	00229$
                                   1545 ;	printf_large.c:839: lsd = !lsd;
      0006C1 B2*09            [12] 1546 	cpl	__print_format_lsd_1_67
                                   1547 ;	printf_large.c:840: if (!lsd)
      0006C3 20*09 0B         [24] 1548 	jb	__print_format_lsd_1_67,00225$
                                   1549 ;	printf_large.c:842: pstore++;
      0006C6 09               [12] 1550 	inc	r1
                                   1551 ;	printf_large.c:843: value.byte[4] = *pstore >> 4;
      0006C7 E3               [24] 1552 	movx	a,@r1
      0006C8 C4               [12] 1553 	swap	a
      0006C9 54 0F            [12] 1554 	anl	a,#0x0F
      0006CB FD               [12] 1555 	mov	r5,a
      0006CC 78r09            [12] 1556 	mov	r0,#(_value + 0x0004)
      0006CE F2               [24] 1557 	movx	@r0,a
      0006CF 80 09            [24] 1558 	sjmp	00226$
      0006D1                       1559 00225$:
                                   1560 ;	printf_large.c:847: value.byte[4] = *pstore & 0x0F;
      0006D1 E3               [24] 1561 	movx	a,@r1
      0006D2 FD               [12] 1562 	mov	r5,a
      0006D3 53 05 0F         [24] 1563 	anl	ar5,#0x0F
      0006D6 78r09            [12] 1564 	mov	r0,#(_value + 0x0004)
      0006D8 ED               [12] 1565 	mov	a,r5
      0006D9 F2               [24] 1566 	movx	@r0,a
      0006DA                       1567 00226$:
                                   1568 ;	printf_large.c:853: output_digit( value.byte[4] );
      0006DA 78r09            [12] 1569 	mov	r0,#(_value + 0x0004)
      0006DC E2               [24] 1570 	movx	a,@r0
      0006DD F5 82            [12] 1571 	mov	dpl,a
      0006DF C0 06            [24] 1572 	push	ar6
      0006E1 C0 01            [24] 1573 	push	ar1
      0006E3 12r00r32         [24] 1574 	lcall	_output_digit
      0006E6 D0 01            [24] 1575 	pop	ar1
      0006E8 D0 06            [24] 1576 	pop	ar6
      0006EA 80 CF            [24] 1577 	sjmp	00227$
      0006EC                       1578 00229$:
                                   1579 ;	printf_large.c:856: if (left_justify)
      0006EC 20*01 03         [24] 1580 	jb	__print_format_left_justify_1_67,00579$
      0006EF 02r00rED         [24] 1581 	ljmp	00243$
      0006F2                       1582 00579$:
                                   1583 ;	printf_large.c:858: while (width-- > 0)
      0006F2 78r14            [12] 1584 	mov	r0,#__print_format_width_1_67
      0006F4 E2               [24] 1585 	movx	a,@r0
      0006F5 FE               [12] 1586 	mov	r6,a
      0006F6                       1587 00230$:
      0006F6 8E 05            [24] 1588 	mov	ar5,r6
      0006F8 1E               [12] 1589 	dec	r6
      0006F9 ED               [12] 1590 	mov	a,r5
      0006FA 70 03            [24] 1591 	jnz	00580$
      0006FC 02r00rED         [24] 1592 	ljmp	00243$
      0006FF                       1593 00580$:
                                   1594 ;	printf_large.c:860: OUTPUT_CHAR(' ', p);
      0006FF 75 82 20         [24] 1595 	mov	dpl,#0x20
      000702 C0 06            [24] 1596 	push	ar6
      000704 12r00r00         [24] 1597 	lcall	__output_char
      000707 D0 06            [24] 1598 	pop	ar6
      000709 80 EB            [24] 1599 	sjmp	00230$
      00070B                       1600 00241$:
                                   1601 ;	printf_large.c:868: OUTPUT_CHAR( c, p );
      00070B 8F 82            [24] 1602 	mov	dpl,r7
      00070D 12r00r00         [24] 1603 	lcall	__output_char
      000710 02r00rED         [24] 1604 	ljmp	00243$
      000713                       1605 00245$:
                                   1606 ;	printf_large.c:872: return charsOutputted;
      000713 78r0A            [12] 1607 	mov	r0,#_charsOutputted
      000715 E2               [24] 1608 	movx	a,@r0
      000716 F5 82            [12] 1609 	mov	dpl,a
      000718 08               [12] 1610 	inc	r0
      000719 E2               [24] 1611 	movx	a,@r0
      00071A F5 83            [12] 1612 	mov	dph,a
      00071C 22               [24] 1613 	ret
                                   1614 	.area CSEG    (CODE)
                                   1615 	.area CONST   (CODE)
      000000                       1616 ___str_0:
      000000 3C 4E 4F 20 46 4C 4F  1617 	.ascii "<NO FLOAT>"
             41 54 3E
      00000A 00                    1618 	.db 0x00
                                   1619 	.area XINIT   (CODE)
                                   1620 	.area CABS    (ABS,CODE)
