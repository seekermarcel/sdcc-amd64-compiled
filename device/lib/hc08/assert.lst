                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:10:35 2022
                              5 ;--------------------------------------------------------
                              6 	.module assert
                              7 	.optsdcc -mhc08
                              8 	
                              9 	.area HOME    (CODE)
                             10 	.area GSINIT0 (CODE)
                             11 	.area GSINIT  (CODE)
                             12 	.area GSFINAL (CODE)
                             13 	.area CSEG    (CODE)
                             14 	.area XINIT   (CODE)
                             15 	.area CONST   (CODE)
                             16 	.area DSEG    (PAG)
                             17 	.area OSEG    (PAG, OVR)
                             18 	.area XSEG
                             19 	.area XISEG
                             20 ;--------------------------------------------------------
                             21 ; Public variables in this module
                             22 ;--------------------------------------------------------
                             23 	.globl __assert
                             24 	.globl _printf
                             25 	.globl __assert_PARM_3
                             26 	.globl __assert_PARM_2
                             27 ;--------------------------------------------------------
                             28 ; ram data
                             29 ;--------------------------------------------------------
                             30 	.area DSEG    (PAG)
                             31 ;--------------------------------------------------------
                             32 ; overlayable items in ram 
                             33 ;--------------------------------------------------------
                             34 ;--------------------------------------------------------
                             35 ; absolute ram data
                             36 ;--------------------------------------------------------
                             37 	.area IABS    (ABS)
                             38 	.area IABS    (ABS)
                             39 ;--------------------------------------------------------
                             40 ; absolute external ram data
                             41 ;--------------------------------------------------------
                             42 	.area XABS    (ABS)
                             43 ;--------------------------------------------------------
                             44 ; external initialized ram data
                             45 ;--------------------------------------------------------
                             46 	.area XISEG
                             47 ;--------------------------------------------------------
                             48 ; extended address mode data
                             49 ;--------------------------------------------------------
                             50 	.area XSEG
   0000                      51 __assert_PARM_2:
   0000                      52 	.ds 2
   0002                      53 __assert_PARM_3:
   0002                      54 	.ds 2
                             55 ;--------------------------------------------------------
                             56 ; global & static initialisations
                             57 ;--------------------------------------------------------
                             58 	.area HOME    (CODE)
                             59 	.area GSINIT  (CODE)
                             60 	.area GSFINAL (CODE)
                             61 	.area GSINIT  (CODE)
                             62 ;--------------------------------------------------------
                             63 ; Home
                             64 ;--------------------------------------------------------
                             65 	.area HOME    (CODE)
                             66 	.area HOME    (CODE)
                             67 ;--------------------------------------------------------
                             68 ; code
                             69 ;--------------------------------------------------------
                             70 	.area CSEG    (CODE)
                             71 ;------------------------------------------------------------
                             72 ;Allocation info for local variables in function '_assert'
                             73 ;------------------------------------------------------------
                             74 ;filename                  Allocated with name '__assert_PARM_2'
                             75 ;linenumber                Allocated with name '__assert_PARM_3'
                             76 ;expr                      Allocated to registers x h 
                             77 ;------------------------------------------------------------
                             78 ;../assert.c:32: void _assert(char *expr, const char *filename, unsigned int linenumber)
                             79 ;	-----------------------------------------
                             80 ;	 function _assert
                             81 ;	-----------------------------------------
                             82 ;	Register assignment is optimal.
                             83 ;	Stack space usage: 0 bytes.
   0000                      84 __assert:
   0000 89            [ 2]   85 	pshx
   0001 97            [ 1]   86 	tax
   0002 8A            [ 2]   87 	pulh
                             88 ;../assert.c:34: printf("Assert(%s) failed at line %u in file %s.\n",
   0003 C6r00r01      [ 4]   89 	lda	(__assert_PARM_2 + 1)
   0006 87            [ 2]   90 	psha
   0007 C6r00r00      [ 4]   91 	lda	__assert_PARM_2
   000A 87            [ 2]   92 	psha
   000B C6r00r03      [ 4]   93 	lda	(__assert_PARM_3 + 1)
   000E 87            [ 2]   94 	psha
   000F C6r00r02      [ 4]   95 	lda	__assert_PARM_3
   0012 87            [ 2]   96 	psha
   0013 89            [ 2]   97 	pshx
   0014 8B            [ 2]   98 	pshh
   0015 A6r00         [ 2]   99 	lda	#___str_0
   0017 87            [ 2]  100 	psha
   0018 A6s00         [ 2]  101 	lda	#>___str_0
   001A 87            [ 2]  102 	psha
   001B CDr00r00      [ 5]  103 	jsr	_printf
   001E A7 08         [ 2]  104 	ais	#8
                            105 ;../assert.c:36: while(1);
   0020                     106 00102$:
   0020 20 FE         [ 3]  107 	bra	00102$
   0022 81            [ 4]  108 	rts
                            109 	.area CSEG    (CODE)
                            110 	.area CONST   (CODE)
   0000                     111 ___str_0:
   0000 41 73 73 65 72 74   112 	.ascii "Assert(%s) failed at line %u in file %s."
        28 25 73 29 20 66
        61 69 6C 65 64 20
        61 74 20 6C 69 6E
        65 20 25 75 20 69
        6E 20 66 69 6C 65
        20 25 73 2E
   0028 0A                  113 	.db 0x0A
   0029 00                  114 	.db 0x00
                            115 	.area XINIT   (CODE)
                            116 	.area CABS    (ABS,CODE)
