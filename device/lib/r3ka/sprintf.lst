                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:16:25 2022
                              5 ;--------------------------------------------------------
                              6 	.r3k
                              7 	.module sprintf
                              8 	.optsdcc -mr3ka
                              9 	
                             10 ;--------------------------------------------------------
                             11 ; Public variables in this module
                             12 ;--------------------------------------------------------
                             13 	.globl __print_format
                             14 	.globl _vsprintf
                             15 	.globl _sprintf
                             16 ;--------------------------------------------------------
                             17 ; special function registers
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; ram data
                             21 ;--------------------------------------------------------
                             22 	.area _DATA
                             23 ;--------------------------------------------------------
                             24 ; ram data
                             25 ;--------------------------------------------------------
                             26 	.area _INITIALIZED
                             27 ;--------------------------------------------------------
                             28 ; absolute external ram data
                             29 ;--------------------------------------------------------
                             30 	.area _DABS (ABS)
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _HOME
                             35 	.area _GSINIT
                             36 	.area _GSFINAL
                             37 	.area _GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _HOME
                             42 	.area _HOME
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area _CODE
                             47 ;../sprintf.c:34: put_char_to_string (char c, void* p) _REENTRANT
                             48 ;	---------------------------------
                             49 ; Function put_char_to_string
                             50 ; ---------------------------------
   0000                      51 _put_char_to_string:
   0000 DD E5                52 	push	ix
   0002 DD 21 00 00          53 	ld	ix,#0
   0006 DD 39                54 	add	ix,sp
                             55 ;../sprintf.c:36: char **buf = (char **)p;
   0008 C4 05                56 	ld	hl, 5 (sp)
                             57 ;../sprintf.c:37: *(*buf)++ = c;
   000A E5                   58 	push	hl
   000B 5E                   59 	ld	e,(hl)
   000C 23                   60 	inc	hl
   000D 56                   61 	ld	d,(hl)
   000E E1                   62 	pop	hl
   000F 4B                   63 	ld	c, e
   0010 42                   64 	ld	b, d
   0011 03                   65 	inc	bc
   0012 71                   66 	ld	(hl),c
   0013 23                   67 	inc	hl
   0014 70                   68 	ld	(hl),b
   0015 DD 7E 04             69 	ld	a,4 (ix)
   0018 12                   70 	ld	(de),a
   0019 DD E1                71 	pop	ix
   001B C9                   72 	ret
                             73 ;../sprintf.c:41: vsprintf (char *buf, const char *format, va_list ap)
                             74 ;	---------------------------------
                             75 ; Function vsprintf
                             76 ; ---------------------------------
   001C                      77 _vsprintf::
                             78 ;../sprintf.c:44: i = _print_format (put_char_to_string, &buf, format, ap);
   001C 21 02 00             79 	ld	hl,#0x0002
   001F 39                   80 	add	hl,sp
   0020 EB                   81 	ex	de,hl
   0021 C4 06                82 	ld	hl, 6 (sp)
   0023 E5                   83 	push	hl
   0024 C4 06                84 	ld	hl, 6 (sp)
   0026 E5                   85 	push	hl
   0027 D5                   86 	push	de
   0028 21r00r00             87 	ld	hl,#_put_char_to_string
   002B E5                   88 	push	hl
   002C CDr00r00             89 	call	__print_format
   002F 27 08                90 	add	sp, #8
   0031 55                   91 	ld	d,l
   0032 5C                   92 	ld	e,h
                             93 ;../sprintf.c:45: *buf = 0;
   0033 C4 02                94 	ld	hl, 2 (sp)
   0035 36 00                95 	ld	(hl),#0x00
                             96 ;../sprintf.c:46: return i;
   0037 6A                   97 	ld	l, d
   0038 63                   98 	ld	h, e
   0039 C9                   99 	ret
                            100 ;../sprintf.c:50: sprintf (char *buf, const char *format, ...)
                            101 ;	---------------------------------
                            102 ; Function sprintf
                            103 ; ---------------------------------
   003A                     104 _sprintf::
   003A DD E5               105 	push	ix
   003C DD 21 00 00         106 	ld	ix,#0
   0040 DD 39               107 	add	ix,sp
   0042 27 FE               108 	add	sp, #-2
                            109 ;../sprintf.c:55: va_start (arg, format);
   0044 21 0A 00            110 	ld	hl,#0x0008+1+1
   0047 39                  111 	add	hl,sp
   0048 D4 00               112 	ld	0 (sp), hl
                            113 ;../sprintf.c:56: i = _print_format (put_char_to_string, &buf, format, arg);
   004A 21 06 00            114 	ld	hl,#0x0006
   004D 39                  115 	add	hl,sp
   004E EB                  116 	ex	de,hl
   004F C4 00               117 	ld	hl, 0 (sp)
   0051 E5                  118 	push	hl
   0052 C4 0A               119 	ld	hl, 10 (sp)
   0054 E5                  120 	push	hl
   0055 D5                  121 	push	de
   0056 21r00r00            122 	ld	hl,#_put_char_to_string
   0059 E5                  123 	push	hl
   005A CDr00r00            124 	call	__print_format
   005D 27 08               125 	add	sp, #8
                            126 ;../sprintf.c:57: *buf = 0;
   005F FD C4 06            127 	ld	iy, 6 (sp)
   0062 FD 36 00 00         128 	ld	0 (iy), #0x00
                            129 ;../sprintf.c:60: return i;
   0066 DD F9               130 	ld	sp, ix
   0068 DD E1               131 	pop	ix
   006A C9                  132 	ret
                            133 	.area _CODE
                            134 	.area _INITIALIZER
                            135 	.area _CABS (ABS)
