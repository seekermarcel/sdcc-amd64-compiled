                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:16:32 2022
                              5 ;--------------------------------------------------------
                              6 	.module asinf
                              7 	.optsdcc -mtlcs90
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _asincosf
                             13 	.globl _asinf
                             14 ;--------------------------------------------------------
                             15 ; ram data
                             16 ;--------------------------------------------------------
                             17 	.area _DATA
                             18 ;--------------------------------------------------------
                             19 ; ram data
                             20 ;--------------------------------------------------------
                             21 	.area _INITIALIZED
                             22 ;--------------------------------------------------------
                             23 ; absolute external ram data
                             24 ;--------------------------------------------------------
                             25 	.area _DABS (ABS)
                             26 ;--------------------------------------------------------
                             27 ; global & static initialisations
                             28 ;--------------------------------------------------------
                             29 	.area _HOME
                             30 	.area _GSINIT
                             31 	.area _GSFINAL
                             32 	.area _GSINIT
                             33 ;--------------------------------------------------------
                             34 ; Home
                             35 ;--------------------------------------------------------
                             36 	.area _HOME
                             37 	.area _HOME
                             38 ;--------------------------------------------------------
                             39 ; code
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 ;../asinf.c:36: float asinf(float x) _FLOAT_FUNC_REENTRANT
                             43 ;	---------------------------------
                             44 ; Function asinf
                             45 ; ---------------------------------
   0000                      46 _asinf::
                             47 ;../asinf.c:38: if (x == 1.0) return  HALF_PI;
   0000 3A 80 3F      [13]   48 	ld	hl,#0x3F80
   0003 52            [ 4]   49 	push	hl
   0004 3A 00 00      [13]   50 	ld	hl,#0x0000
   0007 52            [ 4]   51 	push	hl
   0008 F2 08 4A      [10]   52 	ld	hl, 8 (sp)
   000B 52            [ 4]   53 	push	hl
   000C F2 08 4A      [10]   54 	ld	hl, 8 (sp)
   000F 52            [ 4]   55 	push	hl
   0010 1Cr00r00      [ 4]   56 	call	___fseq
   0013 16 08 00      [ 7]   57 	add	sp, #8
   0016 25            [ 4]   58 	ld	a,l
   0017 FE 66         [ 7]   59 	or	a, a
   0019 C6 07         [ 7]   60 	jr	Z,00108$
   001B 3A DB 0F      [13]   61 	ld	hl,#0x0FDB
   001E 39 C9 3F      [11]   62 	ld	de,#0x3FC9
   0021 1E            [ 7]   63 	ret
   0022                      64 00108$:
                             65 ;../asinf.c:39: else if (x ==-1.0) return -HALF_PI;
   0022 3A 80 BF      [13]   66 	ld	hl,#0xBF80
   0025 52            [ 4]   67 	push	hl
   0026 3A 00 00      [13]   68 	ld	hl,#0x0000
   0029 52            [ 4]   69 	push	hl
   002A F2 08 4A      [10]   70 	ld	hl, 8 (sp)
   002D 52            [ 4]   71 	push	hl
   002E F2 08 4A      [10]   72 	ld	hl, 8 (sp)
   0031 52            [ 4]   73 	push	hl
   0032 1Cr00r00      [ 4]   74 	call	___fseq
   0035 16 08 00      [ 7]   75 	add	sp, #8
   0038 25            [ 4]   76 	ld	a,l
   0039 FE 66         [ 7]   77 	or	a, a
   003B C6 07         [ 7]   78 	jr	Z,00105$
   003D 3A DB 0F      [13]   79 	ld	hl,#0x0FDB
   0040 39 C9 BF      [11]   80 	ld	de,#0xBFC9
   0043 1E            [ 7]   81 	ret
   0044                      82 00105$:
                             83 ;../asinf.c:40: else if (x == 0.0) return 0.0;
   0044 3D 02 00      [ 4]   84 	ld	iy,#2
   0047 FE 15         [ 7]   85 	add	iy,sp
   0049 F1 03 2E      [10]   86 	ld	a,3 (iy)
   004C FE B7         [ 7]   87 	res	7, a
   004E F1 02 66      [10]   88 	or	a, 2 (iy)
   0051 F1 01 66      [10]   89 	or	a, 1 (iy)
   0054 E5 66         [11]   90 	or	a,0 (iy)
   0056 CE 08         [ 7]   91 	jr	NZ,00102$
   0058 3A 00 00      [13]   92 	ld	hl,#0x0000
   005B FD 33                93 	ld	e,l
   005D FC 32         [17]   94 	ld	d,h
   005F 1E            [ 7]   95 	ret
   0060                      96 00102$:
                             97 ;../asinf.c:41: else               return asincosf(x, false);
   0060 FE 65         [ 7]   98 	xor	a, a
   0062 56            [ 7]   99 	push	af
   0063 96            [ 7]  100 	inc	sp
   0064 F2 05 4A      [10]  101 	ld	hl, 5 (sp)
   0067 52            [ 4]  102 	push	hl
   0068 F2 05 4A      [10]  103 	ld	hl, 5 (sp)
   006B 52            [ 4]  104 	push	hl
   006C 1Cr00r00      [ 4]  105 	call	_asincosf
   006F 16 05 00      [ 7]  106 	add	sp, #5
   0072 1E            [ 7]  107 	ret
                            108 	.area _CODE
                            109 	.area _INITIALIZER
                            110 	.area _CABS (ABS)
