                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:26 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _strncpy
                                      7 	.optsdcc -mds390 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _strncpy_PARM_3
                                     35 	.globl _strncpy_PARM_2
                                     36 	.globl _strncpy
                                     37 ;--------------------------------------------------------
                                     38 ; special function registers
                                     39 ;--------------------------------------------------------
                                     40 ;--------------------------------------------------------
                                     41 ; special function bits
                                     42 ;--------------------------------------------------------
                                     43 ;--------------------------------------------------------
                                     44 ; overlayable register banks
                                     45 ;--------------------------------------------------------
                                     46 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         47 	.ds 8
                                     48 ;--------------------------------------------------------
                                     49 ; internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area DSEG    (DATA)
                                     52 ;--------------------------------------------------------
                                     53 ; overlayable items in internal ram 
                                     54 ;--------------------------------------------------------
                                     55 ;--------------------------------------------------------
                                     56 ; indirectly addressable internal ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area ISEG    (DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; absolute internal ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area IABS    (ABS,DATA)
                                     63 	.area IABS    (ABS,DATA)
                                     64 ;--------------------------------------------------------
                                     65 ; bit data
                                     66 ;--------------------------------------------------------
                                     67 	.area BSEG    (BIT)
                                     68 ;--------------------------------------------------------
                                     69 ; paged external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area PSEG    (PAG,XDATA)
                                     72 ;--------------------------------------------------------
                                     73 ; external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area XSEG    (XDATA)
      000000                         76 _strncpy_PARM_2:
      000000                         77 	.ds 4
      000004                         78 _strncpy_PARM_3:
      000004                         79 	.ds 2
      000006                         80 _strncpy_d_1_22:
      000006                         81 	.ds 4
      00000A                         82 _strncpy_sloc0_1_0:
      00000A                         83 	.ds 4
      00000E                         84 _strncpy_sloc1_1_0:
      00000E                         85 	.ds 4
                                     86 ;--------------------------------------------------------
                                     87 ; absolute external ram data
                                     88 ;--------------------------------------------------------
                                     89 	.area XABS    (ABS,XDATA)
                                     90 ;--------------------------------------------------------
                                     91 ; external initialized ram data
                                     92 ;--------------------------------------------------------
                                     93 	.area XISEG   (XDATA)
                                     94 ;--------------------------------------------------------
                                     95 ; global & static initialisations
                                     96 ;--------------------------------------------------------
                                     97 	.area HOME    (CODE)
                                     98 	.area GSINIT  (CODE)
                                     99 	.area GSFINAL (CODE)
                                    100 	.area GSINIT  (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; Home
                                    103 ;--------------------------------------------------------
                                    104 	.area HOME    (CODE)
                                    105 	.area HOME    (CODE)
                                    106 ;--------------------------------------------------------
                                    107 ; code
                                    108 ;--------------------------------------------------------
                                    109 	.area CSEG    (CODE)
                                    110 ;------------------------------------------------------------
                                    111 ;Allocation info for local variables in function 'strncpy'
                                    112 ;------------------------------------------------------------
                                    113 ;s                         Allocated with name '_strncpy_PARM_2'
                                    114 ;n                         Allocated with name '_strncpy_PARM_3'
                                    115 ;d                         Allocated with name '_strncpy_d_1_22'
                                    116 ;d1                        Allocated to registers r6 r7 r0 r1 
                                    117 ;sloc0                     Allocated with name '_strncpy_sloc0_1_0'
                                    118 ;sloc1                     Allocated with name '_strncpy_sloc1_1_0'
                                    119 ;------------------------------------------------------------
                                    120 ;	_strncpy.c:33: char *strncpy ( char * d, const char * s, size_t n )
                                    121 ;	-----------------------------------------
                                    122 ;	 function strncpy
                                    123 ;	-----------------------------------------
      000000                        124 _strncpy:
                           000002   125 	ar2 = 0x02
                           000003   126 	ar3 = 0x03
                           000004   127 	ar4 = 0x04
                           000005   128 	ar5 = 0x05
                           000006   129 	ar6 = 0x06
                           000007   130 	ar7 = 0x07
                           000000   131 	ar0 = 0x00
                           000001   132 	ar1 = 0x01
      000000 75 86 01         [12]  133 	mov     dps, #1
      000003 90s00r00r06      [12]  134 	mov     dptr, #_strncpy_d_1_22
      000007 E5 82            [ 8]  135 	mov	a,dpl
      000009 F0               [ 8]  136 	movx	@dptr,a
      00000A A3               [12]  137 	inc	dptr
      00000B E5 83            [ 8]  138 	mov	a,dph
      00000D F0               [ 8]  139 	movx	@dptr,a
      00000E A3               [12]  140 	inc	dptr
      00000F E5 93            [ 8]  141 	mov	a,dpx
      000011 F0               [ 8]  142 	movx	@dptr,a
      000012 A3               [12]  143 	inc	dptr
      000013 E5 F0            [ 8]  144 	mov	a,b
      000015 F0               [ 8]  145 	movx	@dptr,a
      000016 75 86 00         [12]  146 	mov	dps,#0
                                    147 ;	_strncpy.c:35: register char * d1 =  d;
      000019 90s00r00r06      [12]  148 	mov	dptr,#_strncpy_d_1_22
                                    149 ;	genAssign: resultIsFar = TRUE
      00001D E0               [ 8]  150 	movx	a,@dptr
      00001E FE               [ 4]  151 	mov	r6,a
      00001F A3               [12]  152 	inc	dptr
      000020 E0               [ 8]  153 	movx	a,@dptr
      000021 FF               [ 4]  154 	mov	r7,a
      000022 A3               [12]  155 	inc	dptr
      000023 E0               [ 8]  156 	movx	a,@dptr
      000024 F8               [ 4]  157 	mov	r0,a
      000025 A3               [12]  158 	inc	dptr
      000026 E0               [ 8]  159 	movx	a,@dptr
      000027 F9               [ 4]  160 	mov	r1,a
                                    161 ;	_strncpy.c:37: while ( n && *s )
      000028 90s00r00r04      [12]  162 	mov	dptr,#_strncpy_PARM_3
                                    163 ;	genAssign: resultIsFar = FALSE
      00002C E0               [ 8]  164 	movx	a,@dptr
      00002D FA               [ 4]  165 	mov	r2,a
      00002E A3               [12]  166 	inc	dptr
      00002F E0               [ 8]  167 	movx	a,@dptr
      000030 FB               [ 4]  168 	mov	r3,a
      000031 90s00r00r00      [12]  169 	mov	dptr,#_strncpy_PARM_2
                                    170 ;	genAssign: resultIsFar = TRUE
      000035 75 86 21         [12]  171 	mov	dps,#0x21
      000038 90s00r00r0A      [12]  172 	mov	dptr,#_strncpy_sloc0_1_0
      00003C E0               [ 8]  173 	movx	a,@dptr
      00003D F0               [ 8]  174 	movx	@dptr,a
      00003E A3               [12]  175 	inc	dptr
      00003F A3               [12]  176 	inc	dptr
      000040 E0               [ 8]  177 	movx	a,@dptr
      000041 F0               [ 8]  178 	movx	@dptr,a
      000042 A3               [12]  179 	inc	dptr
      000043 A3               [12]  180 	inc	dptr
      000044 E0               [ 8]  181 	movx	a,@dptr
      000045 F0               [ 8]  182 	movx	@dptr,a
      000046 A3               [12]  183 	inc	dptr
      000047 A3               [12]  184 	inc	dptr
      000048 E0               [ 8]  185 	movx	a,@dptr
      000049 F0               [ 8]  186 	movx	@dptr,a
      00004A 75 86 00         [12]  187 	mov	dps,#0
      00004D 90s00r00r06      [12]  188 	mov	dptr,#_strncpy_d_1_22
                                    189 ;	genAssign: resultIsFar = TRUE
      000051 75 86 21         [12]  190 	mov	dps,#0x21
      000054 90s00r00r0E      [12]  191 	mov	dptr,#_strncpy_sloc1_1_0
      000058 E0               [ 8]  192 	movx	a,@dptr
      000059 F0               [ 8]  193 	movx	@dptr,a
      00005A A3               [12]  194 	inc	dptr
      00005B A3               [12]  195 	inc	dptr
      00005C E0               [ 8]  196 	movx	a,@dptr
      00005D F0               [ 8]  197 	movx	@dptr,a
      00005E A3               [12]  198 	inc	dptr
      00005F A3               [12]  199 	inc	dptr
      000060 E0               [ 8]  200 	movx	a,@dptr
      000061 F0               [ 8]  201 	movx	@dptr,a
      000062 A3               [12]  202 	inc	dptr
      000063 A3               [12]  203 	inc	dptr
      000064 E0               [ 8]  204 	movx	a,@dptr
      000065 F0               [ 8]  205 	movx	@dptr,a
      000066 75 86 00         [12]  206 	mov	dps,#0
      000069                        207 00102$:
      000069 EA               [ 4]  208 	mov	a,r2
      00006A 4B               [ 4]  209 	orl	a,r3
      00006B 60 6F            [12]  210 	jz  00114$
      00006D                        211 00127$:
      00006D 90s00r00r0A      [12]  212 	mov	dptr,#_strncpy_sloc0_1_0
      000071 E0               [ 8]  213 	movx	a,@dptr
      000072 C0 E0            [ 8]  214 	push	acc
      000074 A3               [12]  215 	inc	dptr
      000075 E0               [ 8]  216 	movx	a,@dptr
      000076 C0 E0            [ 8]  217 	push	acc
      000078 A3               [12]  218 	inc	dptr
      000079 E0               [ 8]  219 	movx	a,@dptr
      00007A C0 E0            [ 8]  220 	push	acc
      00007C A3               [12]  221 	inc	dptr
      00007D E0               [ 8]  222 	movx	a,@dptr
      00007E F5 F0            [ 8]  223 	mov	b,a
      000080 D0 93            [ 8]  224 	pop	dpx
      000082 D0 83            [ 8]  225 	pop	dph
      000084 D0 82            [ 8]  226 	pop	dpl
      000086 12s00r00r00      [16]  227 	lcall	__gptrget
      00008A FC               [ 4]  228 	mov  r4,a
      00008B 60 4F            [12]  229 	jz  00114$
      00008D                        230 00128$:
                                    231 ;	_strncpy.c:39: n-- ;
      00008D 1A               [ 4]  232 	dec	r2
      00008E BA FF 01         [16]  233 	cjne	r2,#0xFF,00129$
      000091 1B               [ 4]  234 	dec	r3
      000092                        235 00129$:
                                    236 ;	_strncpy.c:40: *d++ = *s++ ;
      000092 90s00r00r0A      [12]  237 	mov	dptr,#_strncpy_sloc0_1_0
      000096 E0               [ 8]  238 	movx	a,@dptr
      000097 24 01            [ 8]  239 	add	a,#0x01
      000099 F0               [ 8]  240 	movx	@dptr,a
      00009A A3               [12]  241 	inc	dptr
      00009B E0               [ 8]  242 	movx	a,@dptr
      00009C 34 00            [ 8]  243 	addc	a,#0x00
      00009E F0               [ 8]  244 	movx	@dptr,a
      00009F A3               [12]  245 	inc	dptr
      0000A0 E0               [ 8]  246 	movx	a,@dptr
      0000A1 34 00            [ 8]  247 	addc	a,#0x00
      0000A3 F0               [ 8]  248 	movx	@dptr,a
      0000A4 A3               [12]  249 	inc	dptr
      0000A5 E0               [ 8]  250 	movx	a,@dptr
      0000A6 F0               [ 8]  251 	movx	@dptr,a
      0000A7 90s00r00r0E      [12]  252 	mov	dptr,#_strncpy_sloc1_1_0
      0000AB E0               [ 8]  253 	movx	a,@dptr
      0000AC C0 E0            [ 8]  254 	push	acc
      0000AE A3               [12]  255 	inc	dptr
      0000AF E0               [ 8]  256 	movx	a,@dptr
      0000B0 C0 E0            [ 8]  257 	push	acc
      0000B2 A3               [12]  258 	inc	dptr
      0000B3 E0               [ 8]  259 	movx	a,@dptr
      0000B4 C0 E0            [ 8]  260 	push	acc
      0000B6 A3               [12]  261 	inc	dptr
      0000B7 E0               [ 8]  262 	movx	a,@dptr
      0000B8 F5 F0            [ 8]  263 	mov	b,a
      0000BA D0 93            [ 8]  264 	pop	dpx
      0000BC D0 83            [ 8]  265 	pop	dph
      0000BE D0 82            [ 8]  266 	pop	dpl
      0000C0 EC               [ 4]  267 	mov	a,r4
      0000C1 12s00r00r00      [16]  268 	lcall	__gptrput
      0000C5 90s00r00r0E      [12]  269 	mov	dptr,#_strncpy_sloc1_1_0
      0000C9 E0               [ 8]  270 	movx	a,@dptr
      0000CA 24 01            [ 8]  271 	add	a,#0x01
      0000CC F0               [ 8]  272 	movx	@dptr,a
      0000CD A3               [12]  273 	inc	dptr
      0000CE E0               [ 8]  274 	movx	a,@dptr
      0000CF 34 00            [ 8]  275 	addc	a,#0x00
      0000D1 F0               [ 8]  276 	movx	@dptr,a
      0000D2 A3               [12]  277 	inc	dptr
      0000D3 E0               [ 8]  278 	movx	a,@dptr
      0000D4 34 00            [ 8]  279 	addc	a,#0x00
      0000D6 F0               [ 8]  280 	movx	@dptr,a
      0000D7 A3               [12]  281 	inc	dptr
      0000D8 E0               [ 8]  282 	movx	a,@dptr
      0000D9 F0               [ 8]  283 	movx	@dptr,a
                                    284 ;	_strncpy.c:42: while ( n-- )
      0000DA 80 8D            [12]  285 	sjmp 00102$
      0000DC                        286 00114$:
                                    287 ;	genAssign: resultIsFar = FALSE
      0000DC 75 86 01         [12]  288 	mov     dps, #1
      0000DF 90s00r00r0E      [12]  289 	mov     dptr, #_strncpy_sloc1_1_0
      0000E3 E0               [ 8]  290 	movx	a,@dptr
      0000E4 F5 82            [ 8]  291 	mov	dpl,a
      0000E6 A3               [12]  292 	inc	dptr
      0000E7 E0               [ 8]  293 	movx	a,@dptr
      0000E8 F5 83            [ 8]  294 	mov	dph,a
      0000EA A3               [12]  295 	inc	dptr
      0000EB E0               [ 8]  296 	movx	a,@dptr
      0000EC F5 93            [ 8]  297 	mov	dpx,a
      0000EE 75 86 01         [12]  298 	mov     dps, #1
      0000F1 A3               [12]  299 	inc	dptr
      0000F2 E0               [ 8]  300 	movx	a,@dptr
      0000F3 75 86 00         [12]  301 	mov	dps,#0
      0000F6 F5 F0            [ 8]  302 	mov	b,a
                                    303 ;	genAssign: resultIsFar = FALSE
      0000F8                        304 00105$:
                                    305 ;	genAssign: resultIsFar = FALSE
      0000F8 8A 04            [ 8]  306 	mov	ar4,r2
      0000FA 8B 05            [ 8]  307 	mov	ar5,r3
      0000FC 1A               [ 4]  308 	dec	r2
      0000FD BA FF 01         [16]  309 	cjne	r2,#0xFF,00130$
      000100 1B               [ 4]  310 	dec	r3
      000101                        311 00130$:
      000101 EC               [ 4]  312 	mov	a,r4
      000102 4D               [ 4]  313 	orl	a,r5
      000103 60 08            [12]  314 	jz  00107$
      000105                        315 00131$:
                                    316 ;	_strncpy.c:44: *d++ = '\0' ;
      000105 E4               [ 4]  317 	clr	a
      000106 12s00r00r00      [16]  318 	lcall	__gptrput
      00010A A3               [12]  319 	inc	dptr
      00010B 80 EB            [12]  320 	sjmp 00105$
      00010D                        321 00107$:
                                    322 ;	_strncpy.c:46: return d1;
      00010D 8E 82            [ 8]  323 	mov	dpl,r6
      00010F 8F 83            [ 8]  324 	mov	dph,r7
      000111 88 93            [ 8]  325 	mov	dpx,r0
      000113 89 F0            [ 8]  326 	mov	b,r1
      000115                        327 00108$:
      000115 22               [16]  328 	ret
                                    329 	.area CSEG    (CODE)
                                    330 	.area CONST   (CODE)
                                    331 	.area XINIT   (CODE)
                                    332 	.area CABS    (ABS,CODE)
