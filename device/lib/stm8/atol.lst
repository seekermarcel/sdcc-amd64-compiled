                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:17:15 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module atol
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _atol
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area INITIALIZED
                                     21 ;--------------------------------------------------------
                                     22 ; absolute external ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DABS (ABS)
                                     25 ;--------------------------------------------------------
                                     26 ; global & static initialisations
                                     27 ;--------------------------------------------------------
                                     28 	.area HOME
                                     29 	.area GSINIT
                                     30 	.area GSFINAL
                                     31 	.area GSINIT
                                     32 ;--------------------------------------------------------
                                     33 ; Home
                                     34 ;--------------------------------------------------------
                                     35 	.area HOME
                                     36 	.area HOME
                                     37 ;--------------------------------------------------------
                                     38 ; code
                                     39 ;--------------------------------------------------------
                                     40 	.area CODE
                                     41 ;	../atol.c: 34: long int atol(const char *nptr)
                                     42 ;	-----------------------------------------
                                     43 ;	 function atol
                                     44 ;	-----------------------------------------
      000000                         45 _atol:
      000000 52 16            [ 2]   46 	sub	sp, #22
                                     47 ;	../atol.c: 36: long int ret = 0;
      000002 5F               [ 1]   48 	clrw	x
      000003 1F 04            [ 2]   49 	ldw	(0x04, sp), x
      000005 1F 02            [ 2]   50 	ldw	(0x02, sp), x
                                     51 ;	../atol.c: 39: while (isblank (*nptr))
      000007 16 19            [ 2]   52 	ldw	y, (0x19, sp)
      000009 17 09            [ 2]   53 	ldw	(0x09, sp), y
      00000B                         54 00101$:
      00000B 1E 09            [ 2]   55 	ldw	x, (0x09, sp)
      00000D F6               [ 1]   56 	ld	a, (x)
      00000E 6B 08            [ 1]   57 	ld	(0x08, sp), a
      000010 7B 08            [ 1]   58 	ld	a, (0x08, sp)
      000012 95               [ 1]   59 	ld	xh, a
      000013 49               [ 1]   60 	rlc	a
      000014 4F               [ 1]   61 	clr	a
      000015 A2 00            [ 1]   62 	sbc	a, #0x00
                                     63 ;	./../../include/ctype.h: 53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
      000017 9E               [ 1]   64 	ld	a, xh
      000018 A1 20            [ 1]   65 	cp	a, #0x20
      00001A 27 04            [ 1]   66 	jreq	00115$
      00001C A1 09            [ 1]   67 	cp	a, #0x09
      00001E 26 07            [ 1]   68 	jrne	00131$
      000020                         69 00115$:
                                     70 ;	../atol.c: 40: nptr++;
      000020 1E 09            [ 2]   71 	ldw	x, (0x09, sp)
      000022 5C               [ 2]   72 	incw	x
      000023 1F 09            [ 2]   73 	ldw	(0x09, sp), x
      000025 20 E4            [ 2]   74 	jra	00101$
      000027                         75 00131$:
      000027 16 09            [ 2]   76 	ldw	y, (0x09, sp)
      000029 17 19            [ 2]   77 	ldw	(0x19, sp), y
                                     78 ;	../atol.c: 42: neg = (*nptr == '-');
      00002B 1E 09            [ 2]   79 	ldw	x, (0x09, sp)
      00002D 7B 08            [ 1]   80 	ld	a, (0x08, sp)
      00002F A1 2D            [ 1]   81 	cp	a, #0x2d
      000031 26 03            [ 1]   82 	jrne	00161$
      000033 A6 01            [ 1]   83 	ld	a, #0x01
      000035 21                      84 	.byte 0x21
      000036                         85 00161$:
      000036 4F               [ 1]   86 	clr	a
      000037                         87 00162$:
      000037 6B 01            [ 1]   88 	ld	(0x01, sp), a
                                     89 ;	../atol.c: 44: if (*nptr == '-' || *nptr == '+')
      000039 4D               [ 1]   90 	tnz	a
      00003A 26 06            [ 1]   91 	jrne	00104$
      00003C 7B 08            [ 1]   92 	ld	a, (0x08, sp)
      00003E A1 2B            [ 1]   93 	cp	a, #0x2b
      000040 26 03            [ 1]   94 	jrne	00129$
      000042                         95 00104$:
                                     96 ;	../atol.c: 45: nptr++;
      000042 5C               [ 2]   97 	incw	x
      000043 1F 19            [ 2]   98 	ldw	(0x19, sp), x
                                     99 ;	../atol.c: 47: while (isdigit (*nptr))
      000045                        100 00129$:
      000045 16 19            [ 2]  101 	ldw	y, (0x19, sp)
      000047 17 06            [ 2]  102 	ldw	(0x06, sp), y
      000049                        103 00107$:
      000049 1E 06            [ 2]  104 	ldw	x, (0x06, sp)
      00004B F6               [ 1]  105 	ld	a, (x)
      00004C 97               [ 1]  106 	ld	xl, a
      00004D 49               [ 1]  107 	rlc	a
      00004E 4F               [ 1]  108 	clr	a
      00004F A2 00            [ 1]  109 	sbc	a, #0x00
      000051 95               [ 1]  110 	ld	xh, a
      000052 90 93            [ 1]  111 	ldw	y, x
      000054 9F               [ 1]  112 	ld	a, xl
                                    113 ;	./../../include/ctype.h: 62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      000055 A1 30            [ 1]  114 	cp	a, #0x30
      000057 25 42            [ 1]  115 	jrc	00109$
      000059 A1 39            [ 1]  116 	cp	a, #0x39
      00005B 22 3E            [ 1]  117 	jrugt	00109$
                                    118 ;	../atol.c: 48: ret = ret * 10 + (*(nptr++) - '0');
      00005D 89               [ 2]  119 	pushw	x
      00005E 16 06            [ 2]  120 	ldw	y, (0x06, sp)
      000060 90 89            [ 2]  121 	pushw	y
      000062 16 06            [ 2]  122 	ldw	y, (0x06, sp)
      000064 90 89            [ 2]  123 	pushw	y
      000066 4B 0A            [ 1]  124 	push	#0x0a
      000068 4B 00            [ 1]  125 	push	#0x00
      00006A 4B 00            [ 1]  126 	push	#0x00
      00006C 4B 00            [ 1]  127 	push	#0x00
      00006E CDr00r00         [ 4]  128 	call	__mullong
      000071 5B 08            [ 2]  129 	addw	sp, #8
      000073 1F 17            [ 2]  130 	ldw	(0x17, sp), x
      000075 17 15            [ 2]  131 	ldw	(0x15, sp), y
      000077 85               [ 2]  132 	popw	x
      000078 16 06            [ 2]  133 	ldw	y, (0x06, sp)
      00007A 90 5C            [ 2]  134 	incw	y
      00007C 17 06            [ 2]  135 	ldw	(0x06, sp), y
      00007E 1D 00 30         [ 2]  136 	subw	x, #0x0030
      000081 1F 11            [ 2]  137 	ldw	(0x11, sp), x
      000083 5F               [ 1]  138 	clrw	x
      000084 0D 11            [ 1]  139 	tnz	(0x11, sp)
      000086 2A 01            [ 1]  140 	jrpl	00169$
      000088 5A               [ 2]  141 	decw	x
      000089                        142 00169$:
      000089 16 11            [ 2]  143 	ldw	y, (0x11, sp)
      00008B 72 F9 15         [ 2]  144 	addw	y, (0x15, sp)
      00008E 9F               [ 1]  145 	ld	a, xl
      00008F 19 14            [ 1]  146 	adc	a, (0x14, sp)
      000091 02               [ 1]  147 	rlwa	x
      000092 19 13            [ 1]  148 	adc	a, (0x13, sp)
      000094 95               [ 1]  149 	ld	xh, a
      000095 17 04            [ 2]  150 	ldw	(0x04, sp), y
      000097 1F 02            [ 2]  151 	ldw	(0x02, sp), x
      000099 20 AE            [ 2]  152 	jra	00107$
      00009B                        153 00109$:
                                    154 ;	../atol.c: 50: return (neg ? -ret : ret); // Since -LONG_MIN is LONG_MIN in sdcc, the result value always turns out ok.
      00009B 0D 01            [ 1]  155 	tnz	(0x01, sp)
      00009D 27 11            [ 1]  156 	jreq	00120$
      00009F 1E 04            [ 2]  157 	ldw	x, (0x04, sp)
      0000A1 50               [ 2]  158 	negw	x
      0000A2 4F               [ 1]  159 	clr	a
      0000A3 12 03            [ 1]  160 	sbc	a, (0x03, sp)
      0000A5 90 97            [ 1]  161 	ld	yl, a
      0000A7 4F               [ 1]  162 	clr	a
      0000A8 12 02            [ 1]  163 	sbc	a, (0x02, sp)
      0000AA 90 95            [ 1]  164 	ld	yh, a
      0000AC 1F 0D            [ 2]  165 	ldw	(0x0d, sp), x
      0000AE 20 06            [ 2]  166 	jra	00121$
      0000B0                        167 00120$:
      0000B0 16 04            [ 2]  168 	ldw	y, (0x04, sp)
      0000B2 17 0D            [ 2]  169 	ldw	(0x0d, sp), y
      0000B4 16 02            [ 2]  170 	ldw	y, (0x02, sp)
      0000B6                        171 00121$:
      0000B6 1E 0D            [ 2]  172 	ldw	x, (0x0d, sp)
      0000B8 5B 16            [ 2]  173 	addw	sp, #22
      0000BA 81               [ 4]  174 	ret
                                    175 	.area CODE
                                    176 	.area INITIALIZER
                                    177 	.area CABS (ABS)
