                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:25 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module expf
                                      7 	.optsdcc -mds390 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _ldexpf
                                     35 	.globl _expf
                                     36 ;--------------------------------------------------------
                                     37 ; special function registers
                                     38 ;--------------------------------------------------------
                                     39 ;--------------------------------------------------------
                                     40 ; special function bits
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; overlayable register banks
                                     44 ;--------------------------------------------------------
                                     45 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         46 	.ds 8
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable bit register bank
                                     49 ;--------------------------------------------------------
                                     50 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         51 bits:
      000000                         52 	.ds 1
                           008000    53 	b0 = bits[0]
                           008100    54 	b1 = bits[1]
                           008200    55 	b2 = bits[2]
                           008300    56 	b3 = bits[3]
                           008400    57 	b4 = bits[4]
                           008500    58 	b5 = bits[5]
                           008600    59 	b6 = bits[6]
                           008700    60 	b7 = bits[7]
                                     61 ;--------------------------------------------------------
                                     62 ; internal ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area DSEG    (DATA)
                                     65 ;--------------------------------------------------------
                                     66 ; overlayable items in internal ram 
                                     67 ;--------------------------------------------------------
                                     68 ;--------------------------------------------------------
                                     69 ; indirectly addressable internal ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area ISEG    (DATA)
                                     72 ;--------------------------------------------------------
                                     73 ; absolute internal ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area IABS    (ABS,DATA)
                                     76 	.area IABS    (ABS,DATA)
                                     77 ;--------------------------------------------------------
                                     78 ; bit data
                                     79 ;--------------------------------------------------------
                                     80 	.area BSEG    (BIT)
                                     81 ;--------------------------------------------------------
                                     82 ; paged external ram data
                                     83 ;--------------------------------------------------------
                                     84 	.area PSEG    (PAG,XDATA)
                                     85 ;--------------------------------------------------------
                                     86 ; external ram data
                                     87 ;--------------------------------------------------------
                                     88 	.area XSEG    (XDATA)
                                     89 ;--------------------------------------------------------
                                     90 ; absolute external ram data
                                     91 ;--------------------------------------------------------
                                     92 	.area XABS    (ABS,XDATA)
                                     93 ;--------------------------------------------------------
                                     94 ; external initialized ram data
                                     95 ;--------------------------------------------------------
                                     96 	.area XISEG   (XDATA)
                                     97 ;--------------------------------------------------------
                                     98 ; global & static initialisations
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME    (CODE)
                                    101 	.area GSINIT  (CODE)
                                    102 	.area GSFINAL (CODE)
                                    103 	.area GSINIT  (CODE)
                                    104 ;--------------------------------------------------------
                                    105 ; Home
                                    106 ;--------------------------------------------------------
                                    107 	.area HOME    (CODE)
                                    108 	.area HOME    (CODE)
                                    109 ;--------------------------------------------------------
                                    110 ; code
                                    111 ;--------------------------------------------------------
                                    112 	.area CSEG    (CODE)
                                    113 ;------------------------------------------------------------
                                    114 ;Allocation info for local variables in function 'expf'
                                    115 ;------------------------------------------------------------
                                    116 ;x                         Allocated to registers r2 r3 r4 r5 
                                    117 ;n                         Allocated to stack - _bp +5
                                    118 ;xn                        Allocated to registers r2 r3 r4 r5 
                                    119 ;g                         Allocated to stack - _bp +7
                                    120 ;r                         Allocated to stack - _bp +11
                                    121 ;z                         Allocated to registers r2 r3 r4 r5 
                                    122 ;y                         Allocated to stack - _bp +15
                                    123 ;sign                      Allocated to registers b0 
                                    124 ;sloc0                     Allocated to stack - _bp +1
                                    125 ;------------------------------------------------------------
                                    126 ;	expf.c:330: float expf(float x) _FLOAT_FUNC_REENTRANT
                                    127 ;	-----------------------------------------
                                    128 ;	 function expf
                                    129 ;	-----------------------------------------
      000000                        130 _expf:
                           000002   131 	ar2 = 0x02
                           000003   132 	ar3 = 0x03
                           000004   133 	ar4 = 0x04
                           000005   134 	ar5 = 0x05
                           000006   135 	ar6 = 0x06
                           000007   136 	ar7 = 0x07
                           000000   137 	ar0 = 0x00
                           000001   138 	ar1 = 0x01
      000000 C0*00            [ 8]  139 	push	_bpx
      000002 C0*01            [ 8]  140 	push	_bpx+1
      000004 85 81*00         [12]  141 	mov	_bpx,sp
      000007 85 9B*01         [12]  142 	mov	_bpx+1,esp
      00000A 53*01 03         [12]  143 	anl	_bpx+1,#3
      00000D E5 81            [ 8]  144 	mov	a,sp
      00000F 24 12            [ 8]  145 	add	a,#0x12
      000011 F5 81            [ 8]  146 	mov	sp,a
      000013 E5 9B            [ 8]  147 	mov	a,esp
      000015 54 03            [ 8]  148 	anl	a,#3
      000017 34 00            [ 8]  149 	addc	a,#0x00
      000019 F5 9B            [ 8]  150 	mov	esp,a
      00001B AA 82            [ 8]  151 	mov	r2,dpl
      00001D AB 83            [ 8]  152 	mov	r3,dph
      00001F AC 93            [ 8]  153 	mov	r4,dpx
      000021 AD F0            [ 8]  154 	mov	r5,b
                                    155 ;	expf.c:336: if(x>=0.0)
                                    156 ;	genAssign: resultIsFar = TRUE
      000023 90s00r00r00      [12]  157 	mov	dptr,#___fslt_PARM_2
      000027 E4               [ 4]  158 	clr	a
      000028 F0               [ 8]  159 	movx	@dptr,a
      000029 A3               [12]  160 	inc	dptr
      00002A F0               [ 8]  161 	movx	@dptr,a
      00002B A3               [12]  162 	inc	dptr
      00002C F0               [ 8]  163 	movx	@dptr,a
      00002D A3               [12]  164 	inc	dptr
      00002E F0               [ 8]  165 	movx	@dptr,a
      00002F C0 02            [ 8]  166 	push	ar2
      000031 C0 03            [ 8]  167 	push	ar3
      000033 C0 04            [ 8]  168 	push	ar4
      000035 C0 05            [ 8]  169 	push	ar5
      000037 8A 82            [ 8]  170 	mov	dpl,r2
      000039 8B 83            [ 8]  171 	mov	dph,r3
      00003B 8C 93            [ 8]  172 	mov	dpx,r4
      00003D 8D F0            [ 8]  173 	mov	b,r5
      00003F 12s00r00r00      [16]  174 	lcall	___fslt
      000043 D0 05            [ 8]  175 	pop	ar5
      000045 D0 04            [ 8]  176 	pop	ar4
      000047 D0 03            [ 8]  177 	pop	ar3
      000049 D0 02            [ 8]  178 	pop	ar2
      00004B E5 82            [ 8]  179 	mov	a,dpl
      00004D 70 1F            [12]  180 	jnz  00102$
      00004F                        181 00141$:
                                    182 ;	expf.c:337: { y=x;  sign=0; }
                                    183 ;	genAssign: resultIsFar = TRUE
      00004F E5*00            [ 8]  184 	mov	a,_bpx
      000051 C3               [ 4]  185 	clr	c
      000052 94 F1            [ 8]  186 	subb	a,#0xF1
      000054 F5 82            [ 8]  187 	mov	dpl,a
      000056 E5*01            [ 8]  188 	mov	a,_bpx+1
      000058 94 FF            [ 8]  189 	subb	a,#0xFF
      00005A F5 83            [ 8]  190 	mov	dph,a
      00005C 75 93 40         [12]  191 	mov	dpx,#0x40
      00005F EA               [ 4]  192 	mov	a,r2
      000060 F0               [ 8]  193 	movx	@dptr,a
      000061 A3               [12]  194 	inc	dptr
      000062 EB               [ 4]  195 	mov	a,r3
      000063 F0               [ 8]  196 	movx	@dptr,a
      000064 A3               [12]  197 	inc	dptr
      000065 EC               [ 4]  198 	mov	a,r4
      000066 F0               [ 8]  199 	movx	@dptr,a
      000067 A3               [12]  200 	inc	dptr
      000068 ED               [ 4]  201 	mov	a,r5
      000069 F0               [ 8]  202 	movx	@dptr,a
                                    203 ;	genAssign: resultIsFar = TRUE
      00006A C2*00            [ 8]  204 	clr	b0
      00006C 80 21            [12]  205 	sjmp 00103$
      00006E                        206 00102$:
                                    207 ;	expf.c:339: { y=-x; sign=1; }
      00006E ED               [ 4]  208 	mov	a,r5
      00006F B2 E7            [ 8]  209 	cpl	acc[7]
      000071 FD               [ 4]  210 	mov	r5,a
                                    211 ;	genAssign: resultIsFar = TRUE
      000072 E5*00            [ 8]  212 	mov	a,_bpx
      000074 C3               [ 4]  213 	clr	c
      000075 94 F1            [ 8]  214 	subb	a,#0xF1
      000077 F5 82            [ 8]  215 	mov	dpl,a
      000079 E5*01            [ 8]  216 	mov	a,_bpx+1
      00007B 94 FF            [ 8]  217 	subb	a,#0xFF
      00007D F5 83            [ 8]  218 	mov	dph,a
      00007F 75 93 40         [12]  219 	mov	dpx,#0x40
      000082 EA               [ 4]  220 	mov	a,r2
      000083 F0               [ 8]  221 	movx	@dptr,a
      000084 A3               [12]  222 	inc	dptr
      000085 EB               [ 4]  223 	mov	a,r3
      000086 F0               [ 8]  224 	movx	@dptr,a
      000087 A3               [12]  225 	inc	dptr
      000088 EC               [ 4]  226 	mov	a,r4
      000089 F0               [ 8]  227 	movx	@dptr,a
      00008A A3               [12]  228 	inc	dptr
      00008B ED               [ 4]  229 	mov	a,r5
      00008C F0               [ 8]  230 	movx	@dptr,a
                                    231 ;	genAssign: resultIsFar = TRUE
      00008D D2*00            [ 8]  232 	setb	b0
      00008F                        233 00103$:
                                    234 ;	expf.c:341: if(y<EXPEPS) return 1.0;
                                    235 ;	genAssign: resultIsFar = TRUE
      00008F 90s00r00r00      [12]  236 	mov	dptr,#___fslt_PARM_2
      000093 74 95            [ 8]  237 	mov	a,#0x95
      000095 F0               [ 8]  238 	movx	@dptr,a
      000096 A3               [12]  239 	inc	dptr
      000097 74 BF            [ 8]  240 	mov	a,#0xBF
      000099 F0               [ 8]  241 	movx	@dptr,a
      00009A A3               [12]  242 	inc	dptr
      00009B 74 D6            [ 8]  243 	mov	a,#0xD6
      00009D F0               [ 8]  244 	movx	@dptr,a
      00009E A3               [12]  245 	inc	dptr
      00009F 74 33            [ 8]  246 	mov	a,#0x33
      0000A1 F0               [ 8]  247 	movx	@dptr,a
      0000A2 C0*00            [ 8]  248 	push	bits
      0000A4 E5*00            [ 8]  249 	mov	a,_bpx
      0000A6 C3               [ 4]  250 	clr	c
      0000A7 94 F1            [ 8]  251 	subb	a,#0xF1
      0000A9 F5 84            [ 8]  252 	mov	dpl1,a
      0000AB E5*01            [ 8]  253 	mov	a,_bpx+1
      0000AD 94 FF            [ 8]  254 	subb	a,#0xFF
      0000AF F5 85            [ 8]  255 	mov	dph1,a
      0000B1 75 95 40         [12]  256 	mov	dpx1,#0x40
      0000B4 05 86            [ 8]  257 	inc	dps
      0000B6 E0               [ 8]  258 	movx	a,@dptr
      0000B7 F5 82            [ 8]  259 	mov	dpl,a
      0000B9 A3               [12]  260 	inc	dptr
      0000BA E0               [ 8]  261 	movx	a,@dptr
      0000BB F5 83            [ 8]  262 	mov	dph,a
      0000BD A3               [12]  263 	inc	dptr
      0000BE E0               [ 8]  264 	movx	a,@dptr
      0000BF F5 93            [ 8]  265 	mov	dpx,a
      0000C1 A3               [12]  266 	inc	dptr
      0000C2 E0               [ 8]  267 	movx	a,@dptr
      0000C3 F5 F0            [ 8]  268 	mov	b,a
      0000C5 75 86 00         [12]  269 	mov	dps,#0
      0000C8 12s00r00r00      [16]  270 	lcall	___fslt
      0000CC D0*00            [ 8]  271 	pop	bits
      0000CE E5 82            [ 8]  272 	mov	a,dpl
      0000D0 60 0E            [12]  273 	jz  00105$
      0000D2                        274 00142$:
      0000D2 90 00 00 00      [12]  275 	mov  dptr,#0x0000
      0000D6 75 93 80         [12]  276 	mov	dpx,#0x80
      0000D9 75 F0 3F         [12]  277 	mov	b,#0x3F
      0000DC 02s00r06rDE      [16]  278 	ljmp	00118$
      0000E0                        279 00105$:
                                    280 ;	expf.c:343: if(y>BIGX)
                                    281 ;	genAssign: resultIsFar = TRUE
      0000E0 90s00r00r00      [12]  282 	mov	dptr,#___fsgt_PARM_2
      0000E4 74 18            [ 8]  283 	mov	a,#0x18
      0000E6 F0               [ 8]  284 	movx	@dptr,a
      0000E7 A3               [12]  285 	inc	dptr
      0000E8 74 72            [ 8]  286 	mov	a,#0x72
      0000EA F0               [ 8]  287 	movx	@dptr,a
      0000EB A3               [12]  288 	inc	dptr
      0000EC 74 B1            [ 8]  289 	mov	a,#0xB1
      0000EE F0               [ 8]  290 	movx	@dptr,a
      0000EF A3               [12]  291 	inc	dptr
      0000F0 74 42            [ 8]  292 	mov	a,#0x42
      0000F2 F0               [ 8]  293 	movx	@dptr,a
      0000F3 C0*00            [ 8]  294 	push	bits
      0000F5 E5*00            [ 8]  295 	mov	a,_bpx
      0000F7 C3               [ 4]  296 	clr	c
      0000F8 94 F1            [ 8]  297 	subb	a,#0xF1
      0000FA F5 84            [ 8]  298 	mov	dpl1,a
      0000FC E5*01            [ 8]  299 	mov	a,_bpx+1
      0000FE 94 FF            [ 8]  300 	subb	a,#0xFF
      000100 F5 85            [ 8]  301 	mov	dph1,a
      000102 75 95 40         [12]  302 	mov	dpx1,#0x40
      000105 05 86            [ 8]  303 	inc	dps
      000107 E0               [ 8]  304 	movx	a,@dptr
      000108 F5 82            [ 8]  305 	mov	dpl,a
      00010A A3               [12]  306 	inc	dptr
      00010B E0               [ 8]  307 	movx	a,@dptr
      00010C F5 83            [ 8]  308 	mov	dph,a
      00010E A3               [12]  309 	inc	dptr
      00010F E0               [ 8]  310 	movx	a,@dptr
      000110 F5 93            [ 8]  311 	mov	dpx,a
      000112 A3               [12]  312 	inc	dptr
      000113 E0               [ 8]  313 	movx	a,@dptr
      000114 F5 F0            [ 8]  314 	mov	b,a
      000116 75 86 00         [12]  315 	mov	dps,#0
      000119 12s00r00r00      [16]  316 	lcall	___fsgt
      00011D D0*00            [ 8]  317 	pop	bits
      00011F E5 82            [ 8]  318 	mov	a,dpl
      000121 60 23            [12]  319 	jz  00110$
      000123                        320 00143$:
                                    321 ;	expf.c:345: if(sign)
      000123 30*00 15         [12]  322 	jnb  b0,00107$
      000126                        323 00144$:
                                    324 ;	expf.c:347: errno=ERANGE;
                                    325 ;	genAssign: resultIsFar = TRUE
      000126 90s00r00r00      [12]  326 	mov	dptr,#_errno
      00012A 74 22            [ 8]  327 	mov	a,#0x22
      00012C F0               [ 8]  328 	movx	@dptr,a
      00012D E4               [ 4]  329 	clr	a
      00012E A3               [12]  330 	inc	dptr
      00012F F0               [ 8]  331 	movx	@dptr,a
                                    332 ;	expf.c:349: ;
      000130 90 7F FF FF      [12]  333 	mov	dptr,#0x7FFFFF
      000134 75 F0 7F         [12]  334 	mov	b,#0x7F
      000137 02s00r06rDE      [16]  335 	ljmp	00118$
      00013B                        336 00107$:
                                    337 ;	expf.c:353: return 0.0;
      00013B 90 00 00 00      [12]  338 	mov  dptr,#0x0000
      00013F 75 F0 00         [12]  339 	mov	b,#0x00
      000142 02s00r06rDE      [16]  340 	ljmp	00118$
      000146                        341 00110$:
                                    342 ;	expf.c:357: z=y*K1;
      000146 E5*00            [ 8]  343 	mov	a,_bpx
      000148 C3               [ 4]  344 	clr	c
      000149 94 F1            [ 8]  345 	subb	a,#0xF1
      00014B F5 82            [ 8]  346 	mov	dpl,a
      00014D E5*01            [ 8]  347 	mov	a,_bpx+1
      00014F 94 FF            [ 8]  348 	subb	a,#0xFF
      000151 F5 83            [ 8]  349 	mov	dph,a
      000153 75 93 40         [12]  350 	mov	dpx,#0x40
                                    351 ;	genAssign: resultIsFar = TRUE
      000156 75 86 21         [12]  352 	mov	dps,#0x21
      000159 90s00r00r00      [12]  353 	mov	dptr,#___fsmul_PARM_2
      00015D E0               [ 8]  354 	movx	a,@dptr
      00015E F0               [ 8]  355 	movx	@dptr,a
      00015F A3               [12]  356 	inc	dptr
      000160 A3               [12]  357 	inc	dptr
      000161 E0               [ 8]  358 	movx	a,@dptr
      000162 F0               [ 8]  359 	movx	@dptr,a
      000163 A3               [12]  360 	inc	dptr
      000164 A3               [12]  361 	inc	dptr
      000165 E0               [ 8]  362 	movx	a,@dptr
      000166 F0               [ 8]  363 	movx	@dptr,a
      000167 A3               [12]  364 	inc	dptr
      000168 A3               [12]  365 	inc	dptr
      000169 E0               [ 8]  366 	movx	a,@dptr
      00016A F0               [ 8]  367 	movx	@dptr,a
      00016B 75 86 00         [12]  368 	mov	dps,#0
      00016E C0*00            [ 8]  369 	push	bits
      000170 90 B8 AA 3B      [12]  370 	mov	dptr,#0xB8AA3B
      000174 75 F0 3F         [12]  371 	mov	b,#0x3F
      000177 12s00r00r00      [16]  372 	lcall	___fsmul
      00017B AA 82            [ 8]  373 	mov	r2,dpl
      00017D AB 83            [ 8]  374 	mov	r3,dph
      00017F AC 93            [ 8]  375 	mov	r4,dpx
      000181 AD F0            [ 8]  376 	mov	r5,b
      000183 D0*00            [ 8]  377 	pop	bits
                                    378 ;	genAssign: resultIsFar = TRUE
                                    379 ;	expf.c:358: n=z;
      000185 C0 02            [ 8]  380 	push	ar2
      000187 C0 03            [ 8]  381 	push	ar3
      000189 C0 04            [ 8]  382 	push	ar4
      00018B C0 05            [ 8]  383 	push	ar5
      00018D C0*00            [ 8]  384 	push	bits
      00018F 8A 82            [ 8]  385 	mov	dpl,r2
      000191 8B 83            [ 8]  386 	mov	dph,r3
      000193 8C 93            [ 8]  387 	mov	dpx,r4
      000195 8D F0            [ 8]  388 	mov	b,r5
      000197 12s00r00r00      [16]  389 	lcall	___fs2sint
      00019B AE 82            [ 8]  390 	mov	r6,dpl
      00019D AF 83            [ 8]  391 	mov	r7,dph
      00019F D0*00            [ 8]  392 	pop	bits
      0001A1 D0 05            [ 8]  393 	pop	ar5
      0001A3 D0 04            [ 8]  394 	pop	ar4
      0001A5 D0 03            [ 8]  395 	pop	ar3
      0001A7 D0 02            [ 8]  396 	pop	ar2
                                    397 ;	genAssign: resultIsFar = TRUE
      0001A9 E5*00            [ 8]  398 	mov	a,_bpx
      0001AB C3               [ 4]  399 	clr	c
      0001AC 94 FB            [ 8]  400 	subb	a,#0xFB
      0001AE F5 82            [ 8]  401 	mov	dpl,a
      0001B0 E5*01            [ 8]  402 	mov	a,_bpx+1
      0001B2 94 FF            [ 8]  403 	subb	a,#0xFF
      0001B4 F5 83            [ 8]  404 	mov	dph,a
      0001B6 75 93 40         [12]  405 	mov	dpx,#0x40
      0001B9 EE               [ 4]  406 	mov	a,r6
      0001BA F0               [ 8]  407 	movx	@dptr,a
      0001BB A3               [12]  408 	inc	dptr
      0001BC EF               [ 4]  409 	mov	a,r7
      0001BD F0               [ 8]  410 	movx	@dptr,a
                                    411 ;	expf.c:360: if(n<0) --n;
      0001BE E5*00            [ 8]  412 	mov	a,_bpx
      0001C0 C3               [ 4]  413 	clr	c
      0001C1 94 FB            [ 8]  414 	subb	a,#0xFB
      0001C3 F5 82            [ 8]  415 	mov	dpl,a
      0001C5 E5*01            [ 8]  416 	mov	a,_bpx+1
      0001C7 94 FF            [ 8]  417 	subb	a,#0xFF
      0001C9 F5 83            [ 8]  418 	mov	dph,a
      0001CB 75 93 40         [12]  419 	mov	dpx,#0x40
      0001CE A3               [12]  420 	inc	dptr
      0001CF E0               [ 8]  421 	movx	a,@dptr
      0001D0 30 E7 2E         [12]  422 	jnb  acc[7],00112$
      0001D3                        423 00145$:
      0001D3 E5*00            [ 8]  424 	mov	a,_bpx
      0001D5 C3               [ 4]  425 	clr	c
      0001D6 94 FB            [ 8]  426 	subb	a,#0xFB
      0001D8 F5 82            [ 8]  427 	mov	dpl,a
      0001DA E5*01            [ 8]  428 	mov	a,_bpx+1
      0001DC 94 FF            [ 8]  429 	subb	a,#0xFF
      0001DE F5 83            [ 8]  430 	mov	dph,a
      0001E0 75 93 40         [12]  431 	mov	dpx,#0x40
      0001E3 E0               [ 8]  432 	movx	a,@dptr
      0001E4 24 FF            [ 8]  433 	add	a,#0xFF
      0001E6 F8               [ 4]  434 	mov	r0,a
      0001E7 A3               [12]  435 	inc	dptr
      0001E8 E0               [ 8]  436 	movx	a,@dptr
      0001E9 34 FF            [ 8]  437 	addc	a,#0xFF
      0001EB F9               [ 4]  438 	mov	r1,a
                                    439 ;	genAssign: resultIsFar = TRUE
      0001EC E5*00            [ 8]  440 	mov	a,_bpx
      0001EE C3               [ 4]  441 	clr	c
      0001EF 94 FB            [ 8]  442 	subb	a,#0xFB
      0001F1 F5 82            [ 8]  443 	mov	dpl,a
      0001F3 E5*01            [ 8]  444 	mov	a,_bpx+1
      0001F5 94 FF            [ 8]  445 	subb	a,#0xFF
      0001F7 F5 83            [ 8]  446 	mov	dph,a
      0001F9 75 93 40         [12]  447 	mov	dpx,#0x40
      0001FC E8               [ 4]  448 	mov	a,r0
      0001FD F0               [ 8]  449 	movx	@dptr,a
      0001FE A3               [12]  450 	inc	dptr
      0001FF E9               [ 4]  451 	mov	a,r1
      000200 F0               [ 8]  452 	movx	@dptr,a
      000201                        453 00112$:
                                    454 ;	expf.c:361: if(z-n>=0.5) ++n;
      000201 C0 02            [ 8]  455 	push	ar2
      000203 C0 03            [ 8]  456 	push	ar3
      000205 C0 04            [ 8]  457 	push	ar4
      000207 C0 05            [ 8]  458 	push	ar5
      000209 C0*00            [ 8]  459 	push	bits
      00020B E5*00            [ 8]  460 	mov	a,_bpx
      00020D C3               [ 4]  461 	clr	c
      00020E 94 FB            [ 8]  462 	subb	a,#0xFB
      000210 F5 84            [ 8]  463 	mov	dpl1,a
      000212 E5*01            [ 8]  464 	mov	a,_bpx+1
      000214 94 FF            [ 8]  465 	subb	a,#0xFF
      000216 F5 85            [ 8]  466 	mov	dph1,a
      000218 75 95 40         [12]  467 	mov	dpx1,#0x40
      00021B 05 86            [ 8]  468 	inc	dps
      00021D E0               [ 8]  469 	movx	a,@dptr
      00021E F5 82            [ 8]  470 	mov	dpl,a
      000220 A3               [12]  471 	inc	dptr
      000221 E0               [ 8]  472 	movx	a,@dptr
      000222 F5 83            [ 8]  473 	mov	dph,a
      000224 75 86 00         [12]  474 	mov	dps,#0
      000227 12s00r00r00      [16]  475 	lcall	___sint2fs
      00022B A8 82            [ 8]  476 	mov	r0,dpl
      00022D A9 83            [ 8]  477 	mov	r1,dph
      00022F AE 93            [ 8]  478 	mov	r6,dpx
      000231 AF F0            [ 8]  479 	mov	r7,b
      000233 D0*00            [ 8]  480 	pop	bits
      000235 D0 05            [ 8]  481 	pop	ar5
      000237 D0 04            [ 8]  482 	pop	ar4
      000239 D0 03            [ 8]  483 	pop	ar3
      00023B D0 02            [ 8]  484 	pop	ar2
                                    485 ;	genAssign: resultIsFar = TRUE
      00023D 90s00r00r00      [12]  486 	mov	dptr,#___fssub_PARM_2
      000241 E8               [ 4]  487 	mov	a,r0
      000242 F0               [ 8]  488 	movx	@dptr,a
      000243 A3               [12]  489 	inc	dptr
      000244 E9               [ 4]  490 	mov	a,r1
      000245 F0               [ 8]  491 	movx	@dptr,a
      000246 A3               [12]  492 	inc	dptr
      000247 EE               [ 4]  493 	mov	a,r6
      000248 F0               [ 8]  494 	movx	@dptr,a
      000249 A3               [12]  495 	inc	dptr
      00024A EF               [ 4]  496 	mov	a,r7
      00024B F0               [ 8]  497 	movx	@dptr,a
      00024C C0*00            [ 8]  498 	push	bits
      00024E 8A 82            [ 8]  499 	mov	dpl,r2
      000250 8B 83            [ 8]  500 	mov	dph,r3
      000252 8C 93            [ 8]  501 	mov	dpx,r4
      000254 8D F0            [ 8]  502 	mov	b,r5
      000256 12s00r00r00      [16]  503 	lcall	___fssub
      00025A AE 82            [ 8]  504 	mov	r6,dpl
      00025C AF 83            [ 8]  505 	mov	r7,dph
      00025E A8 93            [ 8]  506 	mov	r0,dpx
      000260 A9 F0            [ 8]  507 	mov	r1,b
      000262 D0*00            [ 8]  508 	pop	bits
                                    509 ;	genAssign: resultIsFar = TRUE
      000264 90s00r00r00      [12]  510 	mov	dptr,#___fslt_PARM_2
      000268 E4               [ 4]  511 	clr	a
      000269 F0               [ 8]  512 	movx	@dptr,a
      00026A A3               [12]  513 	inc	dptr
      00026B E4               [ 4]  514 	clr	a
      00026C F0               [ 8]  515 	movx	@dptr,a
      00026D A3               [12]  516 	inc	dptr
      00026E E4               [ 4]  517 	clr	a
      00026F F0               [ 8]  518 	movx	@dptr,a
      000270 A3               [12]  519 	inc	dptr
      000271 74 3F            [ 8]  520 	mov	a,#0x3F
      000273 F0               [ 8]  521 	movx	@dptr,a
      000274 C0*00            [ 8]  522 	push	bits
      000276 8E 82            [ 8]  523 	mov	dpl,r6
      000278 8F 83            [ 8]  524 	mov	dph,r7
      00027A 88 93            [ 8]  525 	mov	dpx,r0
      00027C 89 F0            [ 8]  526 	mov	b,r1
      00027E 12s00r00r00      [16]  527 	lcall	___fslt
      000282 D0*00            [ 8]  528 	pop	bits
      000284 E5 82            [ 8]  529 	mov	a,dpl
      000286 70 19            [12]  530 	jnz  00114$
      000288                        531 00146$:
      000288 E5*00            [ 8]  532 	mov	a,_bpx
      00028A C3               [ 4]  533 	clr	c
      00028B 94 FB            [ 8]  534 	subb	a,#0xFB
      00028D F5 82            [ 8]  535 	mov	dpl,a
      00028F E5*01            [ 8]  536 	mov	a,_bpx+1
      000291 94 FF            [ 8]  537 	subb	a,#0xFF
      000293 F5 83            [ 8]  538 	mov	dph,a
      000295 75 93 40         [12]  539 	mov	dpx,#0x40
      000298 E0               [ 8]  540 	movx	a,@dptr
      000299 24 01            [ 8]  541 	add	a,#0x01
      00029B F0               [ 8]  542 	movx	@dptr,a
      00029C A3               [12]  543 	inc	dptr
      00029D E0               [ 8]  544 	movx	a,@dptr
      00029E 34 00            [ 8]  545 	addc	a,#0x00
      0002A0 F0               [ 8]  546 	movx	@dptr,a
      0002A1                        547 00114$:
                                    548 ;	expf.c:362: xn=n;
      0002A1 C0*00            [ 8]  549 	push	bits
      0002A3 E5*00            [ 8]  550 	mov	a,_bpx
      0002A5 C3               [ 4]  551 	clr	c
      0002A6 94 FB            [ 8]  552 	subb	a,#0xFB
      0002A8 F5 84            [ 8]  553 	mov	dpl1,a
      0002AA E5*01            [ 8]  554 	mov	a,_bpx+1
      0002AC 94 FF            [ 8]  555 	subb	a,#0xFF
      0002AE F5 85            [ 8]  556 	mov	dph1,a
      0002B0 75 95 40         [12]  557 	mov	dpx1,#0x40
      0002B3 05 86            [ 8]  558 	inc	dps
      0002B5 E0               [ 8]  559 	movx	a,@dptr
      0002B6 F5 82            [ 8]  560 	mov	dpl,a
      0002B8 A3               [12]  561 	inc	dptr
      0002B9 E0               [ 8]  562 	movx	a,@dptr
      0002BA F5 83            [ 8]  563 	mov	dph,a
      0002BC 75 86 00         [12]  564 	mov	dps,#0
      0002BF 12s00r00r00      [16]  565 	lcall	___sint2fs
      0002C3 AE 82            [ 8]  566 	mov	r6,dpl
      0002C5 AF 83            [ 8]  567 	mov	r7,dph
      0002C7 A8 93            [ 8]  568 	mov	r0,dpx
      0002C9 A9 F0            [ 8]  569 	mov	r1,b
      0002CB D0*00            [ 8]  570 	pop	bits
                                    571 ;	genAssign: resultIsFar = FALSE
      0002CD 8E 02            [ 8]  572 	mov	ar2,r6
      0002CF 8F 03            [ 8]  573 	mov	ar3,r7
      0002D1 88 04            [ 8]  574 	mov	ar4,r0
      0002D3 89 05            [ 8]  575 	mov	ar5,r1
                                    576 ;	expf.c:363: g=((y-xn*C1))-xn*C2;
                                    577 ;	genAssign: resultIsFar = TRUE
      0002D5 90s00r00r00      [12]  578 	mov	dptr,#___fsmul_PARM_2
      0002D9 EA               [ 4]  579 	mov	a,r2
      0002DA F0               [ 8]  580 	movx	@dptr,a
      0002DB A3               [12]  581 	inc	dptr
      0002DC EB               [ 4]  582 	mov	a,r3
      0002DD F0               [ 8]  583 	movx	@dptr,a
      0002DE A3               [12]  584 	inc	dptr
      0002DF EC               [ 4]  585 	mov	a,r4
      0002E0 F0               [ 8]  586 	movx	@dptr,a
      0002E1 A3               [12]  587 	inc	dptr
      0002E2 ED               [ 4]  588 	mov	a,r5
      0002E3 F0               [ 8]  589 	movx	@dptr,a
      0002E4 C0 02            [ 8]  590 	push	ar2
      0002E6 C0 03            [ 8]  591 	push	ar3
      0002E8 C0 04            [ 8]  592 	push	ar4
      0002EA C0 05            [ 8]  593 	push	ar5
      0002EC C0*00            [ 8]  594 	push	bits
      0002EE 90 31 80 00      [12]  595 	mov	dptr,#0x318000
      0002F2 75 F0 3F         [12]  596 	mov	b,#0x3F
      0002F5 12s00r00r00      [16]  597 	lcall	___fsmul
      0002F9 AE 82            [ 8]  598 	mov	r6,dpl
      0002FB AF 83            [ 8]  599 	mov	r7,dph
      0002FD A8 93            [ 8]  600 	mov	r0,dpx
      0002FF A9 F0            [ 8]  601 	mov	r1,b
      000301 D0*00            [ 8]  602 	pop	bits
      000303 D0 05            [ 8]  603 	pop	ar5
      000305 D0 04            [ 8]  604 	pop	ar4
      000307 D0 03            [ 8]  605 	pop	ar3
      000309 D0 02            [ 8]  606 	pop	ar2
                                    607 ;	genAssign: resultIsFar = TRUE
      00030B 90s00r00r00      [12]  608 	mov	dptr,#___fssub_PARM_2
      00030F EE               [ 4]  609 	mov	a,r6
      000310 F0               [ 8]  610 	movx	@dptr,a
      000311 A3               [12]  611 	inc	dptr
      000312 EF               [ 4]  612 	mov	a,r7
      000313 F0               [ 8]  613 	movx	@dptr,a
      000314 A3               [12]  614 	inc	dptr
      000315 E8               [ 4]  615 	mov	a,r0
      000316 F0               [ 8]  616 	movx	@dptr,a
      000317 A3               [12]  617 	inc	dptr
      000318 E9               [ 4]  618 	mov	a,r1
      000319 F0               [ 8]  619 	movx	@dptr,a
      00031A C0 02            [ 8]  620 	push	ar2
      00031C C0 03            [ 8]  621 	push	ar3
      00031E C0 04            [ 8]  622 	push	ar4
      000320 C0 05            [ 8]  623 	push	ar5
      000322 C0*00            [ 8]  624 	push	bits
      000324 E5*00            [ 8]  625 	mov	a,_bpx
      000326 C3               [ 4]  626 	clr	c
      000327 94 F1            [ 8]  627 	subb	a,#0xF1
      000329 F5 84            [ 8]  628 	mov	dpl1,a
      00032B E5*01            [ 8]  629 	mov	a,_bpx+1
      00032D 94 FF            [ 8]  630 	subb	a,#0xFF
      00032F F5 85            [ 8]  631 	mov	dph1,a
      000331 75 95 40         [12]  632 	mov	dpx1,#0x40
      000334 05 86            [ 8]  633 	inc	dps
      000336 E0               [ 8]  634 	movx	a,@dptr
      000337 F5 82            [ 8]  635 	mov	dpl,a
      000339 A3               [12]  636 	inc	dptr
      00033A E0               [ 8]  637 	movx	a,@dptr
      00033B F5 83            [ 8]  638 	mov	dph,a
      00033D A3               [12]  639 	inc	dptr
      00033E E0               [ 8]  640 	movx	a,@dptr
      00033F F5 93            [ 8]  641 	mov	dpx,a
      000341 A3               [12]  642 	inc	dptr
      000342 E0               [ 8]  643 	movx	a,@dptr
      000343 F5 F0            [ 8]  644 	mov	b,a
      000345 75 86 00         [12]  645 	mov	dps,#0
      000348 12s00r00r00      [16]  646 	lcall	___fssub
      00034C 75 95 40         [12]  647 	mov	dpx1,#0x40
      00034F 85*01 85         [12]  648 	mov	dph1,_bpx+1
      000352 85*00 84         [12]  649 	mov	dpl1,_bpx
      000355 75 86 01         [12]  650 	mov	dps,#1
      000358 A3               [12]  651 	inc	dptr
      000359 75 86 01         [12]  652 	mov	dps, #1
      00035C E5 82            [ 8]  653 	mov	a,dpl
      00035E F0               [ 8]  654 	movx	@dptr,a
      00035F A3               [12]  655 	inc	dptr
      000360 E5 83            [ 8]  656 	mov	a,dph
      000362 F0               [ 8]  657 	movx	@dptr,a
      000363 A3               [12]  658 	inc	dptr
      000364 E5 93            [ 8]  659 	mov	a,dpx
      000366 F0               [ 8]  660 	movx	@dptr,a
      000367 A3               [12]  661 	inc	dptr
      000368 E5 F0            [ 8]  662 	mov	a,b
      00036A F0               [ 8]  663 	movx	@dptr,a
      00036B 75 86 00         [12]  664 	mov	dps,#0
      00036E D0*00            [ 8]  665 	pop	bits
      000370 D0 05            [ 8]  666 	pop	ar5
      000372 D0 04            [ 8]  667 	pop	ar4
      000374 D0 03            [ 8]  668 	pop	ar3
      000376 D0 02            [ 8]  669 	pop	ar2
                                    670 ;	genAssign: resultIsFar = TRUE
      000378 90s00r00r00      [12]  671 	mov	dptr,#___fsmul_PARM_2
      00037C EA               [ 4]  672 	mov	a,r2
      00037D F0               [ 8]  673 	movx	@dptr,a
      00037E A3               [12]  674 	inc	dptr
      00037F EB               [ 4]  675 	mov	a,r3
      000380 F0               [ 8]  676 	movx	@dptr,a
      000381 A3               [12]  677 	inc	dptr
      000382 EC               [ 4]  678 	mov	a,r4
      000383 F0               [ 8]  679 	movx	@dptr,a
      000384 A3               [12]  680 	inc	dptr
      000385 ED               [ 4]  681 	mov	a,r5
      000386 F0               [ 8]  682 	movx	@dptr,a
      000387 C0*00            [ 8]  683 	push	bits
      000389 90 5E 80 83      [12]  684 	mov	dptr,#0x5E8083
      00038D 75 F0 B9         [12]  685 	mov	b,#0xB9
      000390 12s00r00r00      [16]  686 	lcall	___fsmul
      000394 AE 82            [ 8]  687 	mov	r6,dpl
      000396 AF 83            [ 8]  688 	mov	r7,dph
      000398 A8 93            [ 8]  689 	mov	r0,dpx
      00039A A9 F0            [ 8]  690 	mov	r1,b
      00039C D0*00            [ 8]  691 	pop	bits
                                    692 ;	genAssign: resultIsFar = TRUE
      00039E 90s00r00r00      [12]  693 	mov	dptr,#___fssub_PARM_2
      0003A2 EE               [ 4]  694 	mov	a,r6
      0003A3 F0               [ 8]  695 	movx	@dptr,a
      0003A4 A3               [12]  696 	inc	dptr
      0003A5 EF               [ 4]  697 	mov	a,r7
      0003A6 F0               [ 8]  698 	movx	@dptr,a
      0003A7 A3               [12]  699 	inc	dptr
      0003A8 E8               [ 4]  700 	mov	a,r0
      0003A9 F0               [ 8]  701 	movx	@dptr,a
      0003AA A3               [12]  702 	inc	dptr
      0003AB E9               [ 4]  703 	mov	a,r1
      0003AC F0               [ 8]  704 	movx	@dptr,a
      0003AD C0*00            [ 8]  705 	push	bits
      0003AF 75 95 40         [12]  706 	mov	dpx1,#0x40
      0003B2 85*01 85         [12]  707 	mov	dph1,_bpx+1
      0003B5 85*00 84         [12]  708 	mov	dpl1,_bpx
      0003B8 75 86 01         [12]  709 	mov	dps,#1
      0003BB A3               [12]  710 	inc	dptr
      0003BC 75 86 01         [12]  711 	mov	dps, #1
      0003BF E0               [ 8]  712 	movx	a,@dptr
      0003C0 F5 82            [ 8]  713 	mov	dpl,a
      0003C2 A3               [12]  714 	inc	dptr
      0003C3 E0               [ 8]  715 	movx	a,@dptr
      0003C4 F5 83            [ 8]  716 	mov	dph,a
      0003C6 A3               [12]  717 	inc	dptr
      0003C7 E0               [ 8]  718 	movx	a,@dptr
      0003C8 F5 93            [ 8]  719 	mov	dpx,a
      0003CA A3               [12]  720 	inc	dptr
      0003CB E0               [ 8]  721 	movx	a,@dptr
      0003CC F5 F0            [ 8]  722 	mov	b,a
      0003CE 75 86 00         [12]  723 	mov	dps,#0
      0003D1 12s00r00r00      [16]  724 	lcall	___fssub
      0003D5 AE 82            [ 8]  725 	mov	r6,dpl
      0003D7 AF 83            [ 8]  726 	mov	r7,dph
      0003D9 A8 93            [ 8]  727 	mov	r0,dpx
      0003DB A9 F0            [ 8]  728 	mov	r1,b
      0003DD D0*00            [ 8]  729 	pop	bits
                                    730 ;	genAssign: resultIsFar = TRUE
      0003DF E5*00            [ 8]  731 	mov	a,_bpx
      0003E1 C3               [ 4]  732 	clr	c
      0003E2 94 F9            [ 8]  733 	subb	a,#0xF9
      0003E4 F5 82            [ 8]  734 	mov	dpl,a
      0003E6 E5*01            [ 8]  735 	mov	a,_bpx+1
      0003E8 94 FF            [ 8]  736 	subb	a,#0xFF
      0003EA F5 83            [ 8]  737 	mov	dph,a
      0003EC 75 93 40         [12]  738 	mov	dpx,#0x40
      0003EF EE               [ 4]  739 	mov	a,r6
      0003F0 F0               [ 8]  740 	movx	@dptr,a
      0003F1 A3               [12]  741 	inc	dptr
      0003F2 EF               [ 4]  742 	mov	a,r7
      0003F3 F0               [ 8]  743 	movx	@dptr,a
      0003F4 A3               [12]  744 	inc	dptr
      0003F5 E8               [ 4]  745 	mov	a,r0
      0003F6 F0               [ 8]  746 	movx	@dptr,a
      0003F7 A3               [12]  747 	inc	dptr
      0003F8 E9               [ 4]  748 	mov	a,r1
      0003F9 F0               [ 8]  749 	movx	@dptr,a
                                    750 ;	expf.c:364: z=g*g;
      0003FA E5*00            [ 8]  751 	mov	a,_bpx
      0003FC C3               [ 4]  752 	clr	c
      0003FD 94 F9            [ 8]  753 	subb	a,#0xF9
      0003FF F5 82            [ 8]  754 	mov	dpl,a
      000401 E5*01            [ 8]  755 	mov	a,_bpx+1
      000403 94 FF            [ 8]  756 	subb	a,#0xFF
      000405 F5 83            [ 8]  757 	mov	dph,a
      000407 75 93 40         [12]  758 	mov	dpx,#0x40
                                    759 ;	genAssign: resultIsFar = TRUE
      00040A 75 86 21         [12]  760 	mov	dps,#0x21
      00040D 90s00r00r00      [12]  761 	mov	dptr,#___fsmul_PARM_2
      000411 E0               [ 8]  762 	movx	a,@dptr
      000412 F0               [ 8]  763 	movx	@dptr,a
      000413 A3               [12]  764 	inc	dptr
      000414 A3               [12]  765 	inc	dptr
      000415 E0               [ 8]  766 	movx	a,@dptr
      000416 F0               [ 8]  767 	movx	@dptr,a
      000417 A3               [12]  768 	inc	dptr
      000418 A3               [12]  769 	inc	dptr
      000419 E0               [ 8]  770 	movx	a,@dptr
      00041A F0               [ 8]  771 	movx	@dptr,a
      00041B A3               [12]  772 	inc	dptr
      00041C A3               [12]  773 	inc	dptr
      00041D E0               [ 8]  774 	movx	a,@dptr
      00041E F0               [ 8]  775 	movx	@dptr,a
      00041F 75 86 00         [12]  776 	mov	dps,#0
      000422 C0*00            [ 8]  777 	push	bits
      000424 E5*00            [ 8]  778 	mov	a,_bpx
      000426 C3               [ 4]  779 	clr	c
      000427 94 F9            [ 8]  780 	subb	a,#0xF9
      000429 F5 84            [ 8]  781 	mov	dpl1,a
      00042B E5*01            [ 8]  782 	mov	a,_bpx+1
      00042D 94 FF            [ 8]  783 	subb	a,#0xFF
      00042F F5 85            [ 8]  784 	mov	dph1,a
      000431 75 95 40         [12]  785 	mov	dpx1,#0x40
      000434 05 86            [ 8]  786 	inc	dps
      000436 E0               [ 8]  787 	movx	a,@dptr
      000437 F5 82            [ 8]  788 	mov	dpl,a
      000439 A3               [12]  789 	inc	dptr
      00043A E0               [ 8]  790 	movx	a,@dptr
      00043B F5 83            [ 8]  791 	mov	dph,a
      00043D A3               [12]  792 	inc	dptr
      00043E E0               [ 8]  793 	movx	a,@dptr
      00043F F5 93            [ 8]  794 	mov	dpx,a
      000441 A3               [12]  795 	inc	dptr
      000442 E0               [ 8]  796 	movx	a,@dptr
      000443 F5 F0            [ 8]  797 	mov	b,a
      000445 75 86 00         [12]  798 	mov	dps,#0
      000448 12s00r00r00      [16]  799 	lcall	___fsmul
      00044C AE 82            [ 8]  800 	mov	r6,dpl
      00044E AF 83            [ 8]  801 	mov	r7,dph
      000450 A8 93            [ 8]  802 	mov	r0,dpx
      000452 A9 F0            [ 8]  803 	mov	r1,b
      000454 D0*00            [ 8]  804 	pop	bits
                                    805 ;	genAssign: resultIsFar = TRUE
      000456 8E 02            [ 8]  806 	mov	ar2,r6
      000458 8F 03            [ 8]  807 	mov	ar3,r7
      00045A 88 04            [ 8]  808 	mov	ar4,r0
      00045C 89 05            [ 8]  809 	mov	ar5,r1
                                    810 ;	expf.c:365: r=P(z)*g;
                                    811 ;	genAssign: resultIsFar = TRUE
      00045E 90s00r00r00      [12]  812 	mov	dptr,#___fsmul_PARM_2
      000462 EA               [ 4]  813 	mov	a,r2
      000463 F0               [ 8]  814 	movx	@dptr,a
      000464 A3               [12]  815 	inc	dptr
      000465 EB               [ 4]  816 	mov	a,r3
      000466 F0               [ 8]  817 	movx	@dptr,a
      000467 A3               [12]  818 	inc	dptr
      000468 EC               [ 4]  819 	mov	a,r4
      000469 F0               [ 8]  820 	movx	@dptr,a
      00046A A3               [12]  821 	inc	dptr
      00046B ED               [ 4]  822 	mov	a,r5
      00046C F0               [ 8]  823 	movx	@dptr,a
      00046D C0 02            [ 8]  824 	push	ar2
      00046F C0 03            [ 8]  825 	push	ar3
      000471 C0 04            [ 8]  826 	push	ar4
      000473 C0 05            [ 8]  827 	push	ar5
      000475 C0*00            [ 8]  828 	push	bits
      000477 90 88 53 08      [12]  829 	mov	dptr,#0x885308
      00047B 75 F0 3B         [12]  830 	mov	b,#0x3B
      00047E 12s00r00r00      [16]  831 	lcall	___fsmul
      000482 AE 82            [ 8]  832 	mov	r6,dpl
      000484 AF 83            [ 8]  833 	mov	r7,dph
      000486 A8 93            [ 8]  834 	mov	r0,dpx
      000488 A9 F0            [ 8]  835 	mov	r1,b
      00048A D0*00            [ 8]  836 	pop	bits
      00048C D0 05            [ 8]  837 	pop	ar5
      00048E D0 04            [ 8]  838 	pop	ar4
      000490 D0 03            [ 8]  839 	pop	ar3
      000492 D0 02            [ 8]  840 	pop	ar2
                                    841 ;	genAssign: resultIsFar = TRUE
      000494 90s00r00r00      [12]  842 	mov	dptr,#___fsadd_PARM_2
      000498 E4               [ 4]  843 	clr	a
      000499 F0               [ 8]  844 	movx	@dptr,a
      00049A A3               [12]  845 	inc	dptr
      00049B E4               [ 4]  846 	clr	a
      00049C F0               [ 8]  847 	movx	@dptr,a
      00049D A3               [12]  848 	inc	dptr
      00049E 74 80            [ 8]  849 	mov	a,#0x80
      0004A0 F0               [ 8]  850 	movx	@dptr,a
      0004A1 A3               [12]  851 	inc	dptr
      0004A2 74 3E            [ 8]  852 	mov	a,#0x3E
      0004A4 F0               [ 8]  853 	movx	@dptr,a
      0004A5 C0 02            [ 8]  854 	push	ar2
      0004A7 C0 03            [ 8]  855 	push	ar3
      0004A9 C0 04            [ 8]  856 	push	ar4
      0004AB C0 05            [ 8]  857 	push	ar5
      0004AD C0*00            [ 8]  858 	push	bits
      0004AF 8E 82            [ 8]  859 	mov	dpl,r6
      0004B1 8F 83            [ 8]  860 	mov	dph,r7
      0004B3 88 93            [ 8]  861 	mov	dpx,r0
      0004B5 89 F0            [ 8]  862 	mov	b,r1
      0004B7 12s00r00r00      [16]  863 	lcall	___fsadd
      0004BB AE 82            [ 8]  864 	mov	r6,dpl
      0004BD AF 83            [ 8]  865 	mov	r7,dph
      0004BF A8 93            [ 8]  866 	mov	r0,dpx
      0004C1 A9 F0            [ 8]  867 	mov	r1,b
      0004C3 D0*00            [ 8]  868 	pop	bits
      0004C5 D0 05            [ 8]  869 	pop	ar5
      0004C7 D0 04            [ 8]  870 	pop	ar4
      0004C9 D0 03            [ 8]  871 	pop	ar3
      0004CB D0 02            [ 8]  872 	pop	ar2
      0004CD E5*00            [ 8]  873 	mov	a,_bpx
      0004CF C3               [ 4]  874 	clr	c
      0004D0 94 F9            [ 8]  875 	subb	a,#0xF9
      0004D2 F5 82            [ 8]  876 	mov	dpl,a
      0004D4 E5*01            [ 8]  877 	mov	a,_bpx+1
      0004D6 94 FF            [ 8]  878 	subb	a,#0xFF
      0004D8 F5 83            [ 8]  879 	mov	dph,a
      0004DA 75 93 40         [12]  880 	mov	dpx,#0x40
                                    881 ;	genAssign: resultIsFar = TRUE
      0004DD 75 86 21         [12]  882 	mov	dps,#0x21
      0004E0 90s00r00r00      [12]  883 	mov	dptr,#___fsmul_PARM_2
      0004E4 E0               [ 8]  884 	movx	a,@dptr
      0004E5 F0               [ 8]  885 	movx	@dptr,a
      0004E6 A3               [12]  886 	inc	dptr
      0004E7 A3               [12]  887 	inc	dptr
      0004E8 E0               [ 8]  888 	movx	a,@dptr
      0004E9 F0               [ 8]  889 	movx	@dptr,a
      0004EA A3               [12]  890 	inc	dptr
      0004EB A3               [12]  891 	inc	dptr
      0004EC E0               [ 8]  892 	movx	a,@dptr
      0004ED F0               [ 8]  893 	movx	@dptr,a
      0004EE A3               [12]  894 	inc	dptr
      0004EF A3               [12]  895 	inc	dptr
      0004F0 E0               [ 8]  896 	movx	a,@dptr
      0004F1 F0               [ 8]  897 	movx	@dptr,a
      0004F2 75 86 00         [12]  898 	mov	dps,#0
      0004F5 C0 02            [ 8]  899 	push	ar2
      0004F7 C0 03            [ 8]  900 	push	ar3
      0004F9 C0 04            [ 8]  901 	push	ar4
      0004FB C0 05            [ 8]  902 	push	ar5
      0004FD C0*00            [ 8]  903 	push	bits
      0004FF 8E 82            [ 8]  904 	mov	dpl,r6
      000501 8F 83            [ 8]  905 	mov	dph,r7
      000503 88 93            [ 8]  906 	mov	dpx,r0
      000505 89 F0            [ 8]  907 	mov	b,r1
      000507 12s00r00r00      [16]  908 	lcall	___fsmul
      00050B AE 82            [ 8]  909 	mov	r6,dpl
      00050D AF 83            [ 8]  910 	mov	r7,dph
      00050F A8 93            [ 8]  911 	mov	r0,dpx
      000511 A9 F0            [ 8]  912 	mov	r1,b
      000513 D0*00            [ 8]  913 	pop	bits
      000515 D0 05            [ 8]  914 	pop	ar5
      000517 D0 04            [ 8]  915 	pop	ar4
      000519 D0 03            [ 8]  916 	pop	ar3
      00051B D0 02            [ 8]  917 	pop	ar2
                                    918 ;	genAssign: resultIsFar = TRUE
      00051D E5*00            [ 8]  919 	mov	a,_bpx
      00051F C3               [ 4]  920 	clr	c
      000520 94 F5            [ 8]  921 	subb	a,#0xF5
      000522 F5 82            [ 8]  922 	mov	dpl,a
      000524 E5*01            [ 8]  923 	mov	a,_bpx+1
      000526 94 FF            [ 8]  924 	subb	a,#0xFF
      000528 F5 83            [ 8]  925 	mov	dph,a
      00052A 75 93 40         [12]  926 	mov	dpx,#0x40
      00052D EE               [ 4]  927 	mov	a,r6
      00052E F0               [ 8]  928 	movx	@dptr,a
      00052F A3               [12]  929 	inc	dptr
      000530 EF               [ 4]  930 	mov	a,r7
      000531 F0               [ 8]  931 	movx	@dptr,a
      000532 A3               [12]  932 	inc	dptr
      000533 E8               [ 4]  933 	mov	a,r0
      000534 F0               [ 8]  934 	movx	@dptr,a
      000535 A3               [12]  935 	inc	dptr
      000536 E9               [ 4]  936 	mov	a,r1
      000537 F0               [ 8]  937 	movx	@dptr,a
                                    938 ;	expf.c:366: r=0.5+(r/(Q(z)-r));
                                    939 ;	genAssign: resultIsFar = TRUE
      000538 90s00r00r00      [12]  940 	mov	dptr,#___fsmul_PARM_2
      00053C EA               [ 4]  941 	mov	a,r2
      00053D F0               [ 8]  942 	movx	@dptr,a
      00053E A3               [12]  943 	inc	dptr
      00053F EB               [ 4]  944 	mov	a,r3
      000540 F0               [ 8]  945 	movx	@dptr,a
      000541 A3               [12]  946 	inc	dptr
      000542 EC               [ 4]  947 	mov	a,r4
      000543 F0               [ 8]  948 	movx	@dptr,a
      000544 A3               [12]  949 	inc	dptr
      000545 ED               [ 4]  950 	mov	a,r5
      000546 F0               [ 8]  951 	movx	@dptr,a
      000547 C0*00            [ 8]  952 	push	bits
      000549 90 4C BF 5B      [12]  953 	mov	dptr,#0x4CBF5B
      00054D 75 F0 3D         [12]  954 	mov	b,#0x3D
      000550 12s00r00r00      [16]  955 	lcall	___fsmul
      000554 AE 82            [ 8]  956 	mov	r6,dpl
      000556 AF 83            [ 8]  957 	mov	r7,dph
      000558 A8 93            [ 8]  958 	mov	r0,dpx
      00055A A9 F0            [ 8]  959 	mov	r1,b
      00055C D0*00            [ 8]  960 	pop	bits
                                    961 ;	genAssign: resultIsFar = TRUE
      00055E 90s00r00r00      [12]  962 	mov	dptr,#___fsadd_PARM_2
      000562 E4               [ 4]  963 	clr	a
      000563 F0               [ 8]  964 	movx	@dptr,a
      000564 A3               [12]  965 	inc	dptr
      000565 E4               [ 4]  966 	clr	a
      000566 F0               [ 8]  967 	movx	@dptr,a
      000567 A3               [12]  968 	inc	dptr
      000568 E4               [ 4]  969 	clr	a
      000569 F0               [ 8]  970 	movx	@dptr,a
      00056A A3               [12]  971 	inc	dptr
      00056B 74 3F            [ 8]  972 	mov	a,#0x3F
      00056D F0               [ 8]  973 	movx	@dptr,a
      00056E C0*00            [ 8]  974 	push	bits
      000570 8E 82            [ 8]  975 	mov	dpl,r6
      000572 8F 83            [ 8]  976 	mov	dph,r7
      000574 88 93            [ 8]  977 	mov	dpx,r0
      000576 89 F0            [ 8]  978 	mov	b,r1
      000578 12s00r00r00      [16]  979 	lcall	___fsadd
      00057C AE 82            [ 8]  980 	mov	r6,dpl
      00057E AF 83            [ 8]  981 	mov	r7,dph
      000580 A8 93            [ 8]  982 	mov	r0,dpx
      000582 A9 F0            [ 8]  983 	mov	r1,b
      000584 D0*00            [ 8]  984 	pop	bits
      000586 E5*00            [ 8]  985 	mov	a,_bpx
      000588 C3               [ 4]  986 	clr	c
      000589 94 F5            [ 8]  987 	subb	a,#0xF5
      00058B F5 82            [ 8]  988 	mov	dpl,a
      00058D E5*01            [ 8]  989 	mov	a,_bpx+1
      00058F 94 FF            [ 8]  990 	subb	a,#0xFF
      000591 F5 83            [ 8]  991 	mov	dph,a
      000593 75 93 40         [12]  992 	mov	dpx,#0x40
                                    993 ;	genAssign: resultIsFar = TRUE
      000596 75 86 21         [12]  994 	mov	dps,#0x21
      000599 90s00r00r00      [12]  995 	mov	dptr,#___fssub_PARM_2
      00059D E0               [ 8]  996 	movx	a,@dptr
      00059E F0               [ 8]  997 	movx	@dptr,a
      00059F A3               [12]  998 	inc	dptr
      0005A0 A3               [12]  999 	inc	dptr
      0005A1 E0               [ 8] 1000 	movx	a,@dptr
      0005A2 F0               [ 8] 1001 	movx	@dptr,a
      0005A3 A3               [12] 1002 	inc	dptr
      0005A4 A3               [12] 1003 	inc	dptr
      0005A5 E0               [ 8] 1004 	movx	a,@dptr
      0005A6 F0               [ 8] 1005 	movx	@dptr,a
      0005A7 A3               [12] 1006 	inc	dptr
      0005A8 A3               [12] 1007 	inc	dptr
      0005A9 E0               [ 8] 1008 	movx	a,@dptr
      0005AA F0               [ 8] 1009 	movx	@dptr,a
      0005AB 75 86 00         [12] 1010 	mov	dps,#0
      0005AE C0*00            [ 8] 1011 	push	bits
      0005B0 8E 82            [ 8] 1012 	mov	dpl,r6
      0005B2 8F 83            [ 8] 1013 	mov	dph,r7
      0005B4 88 93            [ 8] 1014 	mov	dpx,r0
      0005B6 89 F0            [ 8] 1015 	mov	b,r1
      0005B8 12s00r00r00      [16] 1016 	lcall	___fssub
      0005BC AE 82            [ 8] 1017 	mov	r6,dpl
      0005BE AF 83            [ 8] 1018 	mov	r7,dph
      0005C0 A8 93            [ 8] 1019 	mov	r0,dpx
      0005C2 A9 F0            [ 8] 1020 	mov	r1,b
      0005C4 D0*00            [ 8] 1021 	pop	bits
                                   1022 ;	genAssign: resultIsFar = TRUE
      0005C6 90s00r00r00      [12] 1023 	mov	dptr,#___fsdiv_PARM_2
      0005CA EE               [ 4] 1024 	mov	a,r6
      0005CB F0               [ 8] 1025 	movx	@dptr,a
      0005CC A3               [12] 1026 	inc	dptr
      0005CD EF               [ 4] 1027 	mov	a,r7
      0005CE F0               [ 8] 1028 	movx	@dptr,a
      0005CF A3               [12] 1029 	inc	dptr
      0005D0 E8               [ 4] 1030 	mov	a,r0
      0005D1 F0               [ 8] 1031 	movx	@dptr,a
      0005D2 A3               [12] 1032 	inc	dptr
      0005D3 E9               [ 4] 1033 	mov	a,r1
      0005D4 F0               [ 8] 1034 	movx	@dptr,a
      0005D5 C0*00            [ 8] 1035 	push	bits
      0005D7 E5*00            [ 8] 1036 	mov	a,_bpx
      0005D9 C3               [ 4] 1037 	clr	c
      0005DA 94 F5            [ 8] 1038 	subb	a,#0xF5
      0005DC F5 84            [ 8] 1039 	mov	dpl1,a
      0005DE E5*01            [ 8] 1040 	mov	a,_bpx+1
      0005E0 94 FF            [ 8] 1041 	subb	a,#0xFF
      0005E2 F5 85            [ 8] 1042 	mov	dph1,a
      0005E4 75 95 40         [12] 1043 	mov	dpx1,#0x40
      0005E7 05 86            [ 8] 1044 	inc	dps
      0005E9 E0               [ 8] 1045 	movx	a,@dptr
      0005EA F5 82            [ 8] 1046 	mov	dpl,a
      0005EC A3               [12] 1047 	inc	dptr
      0005ED E0               [ 8] 1048 	movx	a,@dptr
      0005EE F5 83            [ 8] 1049 	mov	dph,a
      0005F0 A3               [12] 1050 	inc	dptr
      0005F1 E0               [ 8] 1051 	movx	a,@dptr
      0005F2 F5 93            [ 8] 1052 	mov	dpx,a
      0005F4 A3               [12] 1053 	inc	dptr
      0005F5 E0               [ 8] 1054 	movx	a,@dptr
      0005F6 F5 F0            [ 8] 1055 	mov	b,a
      0005F8 75 86 00         [12] 1056 	mov	dps,#0
      0005FB 12s00r00r00      [16] 1057 	lcall	___fsdiv
      0005FF AE 82            [ 8] 1058 	mov	r6,dpl
      000601 AF 83            [ 8] 1059 	mov	r7,dph
      000603 A8 93            [ 8] 1060 	mov	r0,dpx
      000605 A9 F0            [ 8] 1061 	mov	r1,b
      000607 D0*00            [ 8] 1062 	pop	bits
                                   1063 ;	genAssign: resultIsFar = TRUE
      000609 90s00r00r00      [12] 1064 	mov	dptr,#___fsadd_PARM_2
      00060D E4               [ 4] 1065 	clr	a
      00060E F0               [ 8] 1066 	movx	@dptr,a
      00060F A3               [12] 1067 	inc	dptr
      000610 E4               [ 4] 1068 	clr	a
      000611 F0               [ 8] 1069 	movx	@dptr,a
      000612 A3               [12] 1070 	inc	dptr
      000613 E4               [ 4] 1071 	clr	a
      000614 F0               [ 8] 1072 	movx	@dptr,a
      000615 A3               [12] 1073 	inc	dptr
      000616 74 3F            [ 8] 1074 	mov	a,#0x3F
      000618 F0               [ 8] 1075 	movx	@dptr,a
      000619 C0*00            [ 8] 1076 	push	bits
      00061B 8E 82            [ 8] 1077 	mov	dpl,r6
      00061D 8F 83            [ 8] 1078 	mov	dph,r7
      00061F 88 93            [ 8] 1079 	mov	dpx,r0
      000621 89 F0            [ 8] 1080 	mov	b,r1
      000623 12s00r00r00      [16] 1081 	lcall	___fsadd
      000627 AE 82            [ 8] 1082 	mov	r6,dpl
      000629 AF 83            [ 8] 1083 	mov	r7,dph
      00062B A8 93            [ 8] 1084 	mov	r0,dpx
      00062D A9 F0            [ 8] 1085 	mov	r1,b
      00062F D0*00            [ 8] 1086 	pop	bits
                                   1087 ;	genAssign: resultIsFar = TRUE
      000631 E5*00            [ 8] 1088 	mov	a,_bpx
      000633 C3               [ 4] 1089 	clr	c
      000634 94 F5            [ 8] 1090 	subb	a,#0xF5
      000636 F5 82            [ 8] 1091 	mov	dpl,a
      000638 E5*01            [ 8] 1092 	mov	a,_bpx+1
      00063A 94 FF            [ 8] 1093 	subb	a,#0xFF
      00063C F5 83            [ 8] 1094 	mov	dph,a
      00063E 75 93 40         [12] 1095 	mov	dpx,#0x40
      000641 EE               [ 4] 1096 	mov	a,r6
      000642 F0               [ 8] 1097 	movx	@dptr,a
      000643 A3               [12] 1098 	inc	dptr
      000644 EF               [ 4] 1099 	mov	a,r7
      000645 F0               [ 8] 1100 	movx	@dptr,a
      000646 A3               [12] 1101 	inc	dptr
      000647 E8               [ 4] 1102 	mov	a,r0
      000648 F0               [ 8] 1103 	movx	@dptr,a
      000649 A3               [12] 1104 	inc	dptr
      00064A E9               [ 4] 1105 	mov	a,r1
      00064B F0               [ 8] 1106 	movx	@dptr,a
                                   1107 ;	expf.c:368: n++;
      00064C E5*00            [ 8] 1108 	mov	a,_bpx
      00064E C3               [ 4] 1109 	clr	c
      00064F 94 FB            [ 8] 1110 	subb	a,#0xFB
      000651 F5 82            [ 8] 1111 	mov	dpl,a
      000653 E5*01            [ 8] 1112 	mov	a,_bpx+1
      000655 94 FF            [ 8] 1113 	subb	a,#0xFF
      000657 F5 83            [ 8] 1114 	mov	dph,a
      000659 75 93 40         [12] 1115 	mov	dpx,#0x40
      00065C 75 86 01         [12] 1116 	mov	dps, #1
      00065F 90s00r00r00      [12] 1117 	mov	dptr, #_ldexpf_PARM_2
      000663 15 86            [ 8] 1118 	dec	dps
      000665 E0               [ 8] 1119 	movx	a,@dptr
      000666 24 01            [ 8] 1120 	add	a,#0x01
      000668 05 86            [ 8] 1121 	inc	dps
      00066A F0               [ 8] 1122 	movx	@dptr,a
      00066B 15 86            [ 8] 1123 	dec	dps
      00066D A3               [12] 1124 	inc	dptr
      00066E E0               [ 8] 1125 	movx	a,@dptr
      00066F 34 00            [ 8] 1126 	addc	a,#0x00
      000671 05 86            [ 8] 1127 	inc	dps
      000673 A3               [12] 1128 	inc	dptr
      000674 F0               [ 8] 1129 	movx	@dptr,a
      000675 75 86 00         [12] 1130 	mov	dps,#0
                                   1131 ;	expf.c:369: z=ldexpf(r, n);
      000678 C0*00            [ 8] 1132 	push	bits
      00067A E5*00            [ 8] 1133 	mov	a,_bpx
      00067C C3               [ 4] 1134 	clr	c
      00067D 94 F5            [ 8] 1135 	subb	a,#0xF5
      00067F F5 84            [ 8] 1136 	mov	dpl1,a
      000681 E5*01            [ 8] 1137 	mov	a,_bpx+1
      000683 94 FF            [ 8] 1138 	subb	a,#0xFF
      000685 F5 85            [ 8] 1139 	mov	dph1,a
      000687 75 95 40         [12] 1140 	mov	dpx1,#0x40
      00068A 05 86            [ 8] 1141 	inc	dps
      00068C E0               [ 8] 1142 	movx	a,@dptr
      00068D F5 82            [ 8] 1143 	mov	dpl,a
      00068F A3               [12] 1144 	inc	dptr
      000690 E0               [ 8] 1145 	movx	a,@dptr
      000691 F5 83            [ 8] 1146 	mov	dph,a
      000693 A3               [12] 1147 	inc	dptr
      000694 E0               [ 8] 1148 	movx	a,@dptr
      000695 F5 93            [ 8] 1149 	mov	dpx,a
      000697 A3               [12] 1150 	inc	dptr
      000698 E0               [ 8] 1151 	movx	a,@dptr
      000699 F5 F0            [ 8] 1152 	mov	b,a
      00069B 75 86 00         [12] 1153 	mov	dps,#0
      00069E 12s00r00r00      [16] 1154 	lcall	_ldexpf
      0006A2 AE 82            [ 8] 1155 	mov	r6,dpl
      0006A4 AF 83            [ 8] 1156 	mov	r7,dph
      0006A6 A8 93            [ 8] 1157 	mov	r0,dpx
      0006A8 A9 F0            [ 8] 1158 	mov	r1,b
      0006AA D0*00            [ 8] 1159 	pop	bits
                                   1160 ;	genAssign: resultIsFar = TRUE
      0006AC 8E 02            [ 8] 1161 	mov	ar2,r6
      0006AE 8F 03            [ 8] 1162 	mov	ar3,r7
      0006B0 88 04            [ 8] 1163 	mov	ar4,r0
      0006B2 89 05            [ 8] 1164 	mov	ar5,r1
                                   1165 ;	expf.c:370: if(sign)
      0006B4 30*00 1F         [12] 1166 	jnb  b0,00116$
      0006B7                       1167 00147$:
                                   1168 ;	expf.c:371: return 1.0/z;
                                   1169 ;	genAssign: resultIsFar = TRUE
      0006B7 90s00r00r00      [12] 1170 	mov	dptr,#___fsdiv_PARM_2
      0006BB EA               [ 4] 1171 	mov	a,r2
      0006BC F0               [ 8] 1172 	movx	@dptr,a
      0006BD A3               [12] 1173 	inc	dptr
      0006BE EB               [ 4] 1174 	mov	a,r3
      0006BF F0               [ 8] 1175 	movx	@dptr,a
      0006C0 A3               [12] 1176 	inc	dptr
      0006C1 EC               [ 4] 1177 	mov	a,r4
      0006C2 F0               [ 8] 1178 	movx	@dptr,a
      0006C3 A3               [12] 1179 	inc	dptr
      0006C4 ED               [ 4] 1180 	mov	a,r5
      0006C5 F0               [ 8] 1181 	movx	@dptr,a
      0006C6 90 00 00 00      [12] 1182 	mov  dptr,#0x0000
      0006CA 75 93 80         [12] 1183 	mov	dpx,#0x80
      0006CD 75 F0 3F         [12] 1184 	mov	b,#0x3F
      0006D0 12s00r00r00      [16] 1185 	lcall	___fsdiv
      0006D4 80 08            [12] 1186 	sjmp 00118$
      0006D6                       1187 00116$:
                                   1188 ;	expf.c:373: return z;
      0006D6 8A 82            [ 8] 1189 	mov	dpl,r2
      0006D8 8B 83            [ 8] 1190 	mov	dph,r3
      0006DA 8C 93            [ 8] 1191 	mov	dpx,r4
      0006DC 8D F0            [ 8] 1192 	mov	b,r5
      0006DE                       1193 00118$:
      0006DE 85*00 81         [12] 1194 	mov	sp,_bpx
      0006E1 85*01 9B         [12] 1195 	mov	esp,_bpx+1
      0006E4 D0*01            [ 8] 1196 	pop	_bpx+1
      0006E6 D0*00            [ 8] 1197 	pop	_bpx
      0006E8 22               [16] 1198 	ret
                                   1199 	.area CSEG    (CODE)
                                   1200 	.area CONST   (CODE)
                                   1201 	.area XINIT   (CODE)
                                   1202 	.area CABS    (ABS,CODE)
