                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:17:26 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module gets
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _putchar
                                     13 	.globl _getchar
                                     14 	.globl _gets
                                     15 ;--------------------------------------------------------
                                     16 ; ram data
                                     17 ;--------------------------------------------------------
                                     18 	.area DATA
                                     19 ;--------------------------------------------------------
                                     20 ; ram data
                                     21 ;--------------------------------------------------------
                                     22 	.area INITIALIZED
                                     23 ;--------------------------------------------------------
                                     24 ; absolute external ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area DABS (ABS)
                                     27 ;--------------------------------------------------------
                                     28 ; global & static initialisations
                                     29 ;--------------------------------------------------------
                                     30 	.area HOME
                                     31 	.area GSINIT
                                     32 	.area GSFINAL
                                     33 	.area GSINIT
                                     34 ;--------------------------------------------------------
                                     35 ; Home
                                     36 ;--------------------------------------------------------
                                     37 	.area HOME
                                     38 	.area HOME
                                     39 ;--------------------------------------------------------
                                     40 ; code
                                     41 ;--------------------------------------------------------
                                     42 	.area CODE
                                     43 ;	../gets.c: 32: gets (char *s)
                                     44 ;	-----------------------------------------
                                     45 ;	 function gets
                                     46 ;	-----------------------------------------
      000000                         47 _gets:
      000000 52 02            [ 2]   48 	sub	sp, #2
                                     49 ;	../gets.c: 35: unsigned int count = 0;
      000002 5F               [ 1]   50 	clrw	x
      000003 1F 01            [ 2]   51 	ldw	(0x01, sp), x
                                     52 ;	../gets.c: 37: while (1)
      000005                         53 00109$:
                                     54 ;	../gets.c: 39: c = getchar ();
      000005 CDr00r00         [ 4]   55 	call	_getchar
                                     56 ;	../gets.c: 40: switch(c)
      000008 A1 08            [ 1]   57 	cp	a, #0x08
      00000A 27 0C            [ 1]   58 	jreq	00101$
                                     59 ;	../gets.c: 57: *s = 0;
      00000C 1E 05            [ 2]   60 	ldw	x, (0x05, sp)
                                     61 ;	../gets.c: 40: switch(c)
      00000E A1 0A            [ 1]   62 	cp	a, #0x0a
      000010 27 28            [ 1]   63 	jreq	00105$
      000012 A1 0D            [ 1]   64 	cp	a, #0x0d
      000014 27 24            [ 1]   65 	jreq	00105$
      000016 20 33            [ 2]   66 	jra	00106$
                                     67 ;	../gets.c: 42: case '\b': /* backspace */
      000018                         68 00101$:
                                     69 ;	../gets.c: 43: if (count)
      000018 1E 01            [ 2]   70 	ldw	x, (0x01, sp)
      00001A 27 E9            [ 1]   71 	jreq	00109$
                                     72 ;	../gets.c: 45: putchar ('\b');
      00001C 4B 08            [ 1]   73 	push	#0x08
      00001E CDr00r00         [ 4]   74 	call	_putchar
      000021 84               [ 1]   75 	pop	a
                                     76 ;	../gets.c: 46: putchar (' ');
      000022 4B 20            [ 1]   77 	push	#0x20
      000024 CDr00r00         [ 4]   78 	call	_putchar
      000027 84               [ 1]   79 	pop	a
                                     80 ;	../gets.c: 47: putchar ('\b');
      000028 4B 08            [ 1]   81 	push	#0x08
      00002A CDr00r00         [ 4]   82 	call	_putchar
      00002D 84               [ 1]   83 	pop	a
                                     84 ;	../gets.c: 48: --s;
      00002E 1E 05            [ 2]   85 	ldw	x, (0x05, sp)
      000030 5A               [ 2]   86 	decw	x
      000031 1F 05            [ 2]   87 	ldw	(0x05, sp), x
                                     88 ;	../gets.c: 49: --count;
      000033 1E 01            [ 2]   89 	ldw	x, (0x01, sp)
      000035 5A               [ 2]   90 	decw	x
      000036 1F 01            [ 2]   91 	ldw	(0x01, sp), x
                                     92 ;	../gets.c: 51: break;
      000038 20 CB            [ 2]   93 	jra	00109$
                                     94 ;	../gets.c: 54: case '\r': /* CR or LF */
      00003A                         95 00105$:
                                     96 ;	../gets.c: 55: putchar ('\r');
      00003A 89               [ 2]   97 	pushw	x
      00003B 4B 0D            [ 1]   98 	push	#0x0d
      00003D CDr00r00         [ 4]   99 	call	_putchar
      000040 84               [ 1]  100 	pop	a
      000041 4B 0A            [ 1]  101 	push	#0x0a
      000043 CDr00r00         [ 4]  102 	call	_putchar
      000046 84               [ 1]  103 	pop	a
      000047 85               [ 2]  104 	popw	x
                                    105 ;	../gets.c: 57: *s = 0;
      000048 7F               [ 1]  106 	clr	(x)
                                    107 ;	../gets.c: 58: return s;
      000049 20 10            [ 2]  108 	jra	00111$
                                    109 ;	../gets.c: 60: default:
      00004B                        110 00106$:
                                    111 ;	../gets.c: 61: *s++ = c;
      00004B F7               [ 1]  112 	ld	(x), a
      00004C 5C               [ 2]  113 	incw	x
      00004D 1F 05            [ 2]  114 	ldw	(0x05, sp), x
                                    115 ;	../gets.c: 62: ++count;
      00004F 1E 01            [ 2]  116 	ldw	x, (0x01, sp)
      000051 5C               [ 2]  117 	incw	x
      000052 1F 01            [ 2]  118 	ldw	(0x01, sp), x
                                    119 ;	../gets.c: 63: putchar (c);
      000054 88               [ 1]  120 	push	a
      000055 CDr00r00         [ 4]  121 	call	_putchar
      000058 84               [ 1]  122 	pop	a
                                    123 ;	../gets.c: 65: }
      000059 20 AA            [ 2]  124 	jra	00109$
      00005B                        125 00111$:
      00005B 5B 02            [ 2]  126 	addw	sp, #2
      00005D 81               [ 4]  127 	ret
                                    128 	.area CODE
                                    129 	.area INITIALIZER
                                    130 	.area CABS (ABS)
