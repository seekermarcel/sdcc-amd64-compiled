                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:27 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module printf_large
                                      7 	.optsdcc -mds390 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _strlen
                                     35 	.globl __print_format_PARM_4
                                     36 	.globl __print_format_PARM_3
                                     37 	.globl __print_format_PARM_2
                                     38 	.globl __print_format
                                     39 ;--------------------------------------------------------
                                     40 ; special function registers
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; special function bits
                                     44 ;--------------------------------------------------------
                                     45 ;--------------------------------------------------------
                                     46 ; overlayable register banks
                                     47 ;--------------------------------------------------------
                                     48 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         49 	.ds 8
                                     50 ;--------------------------------------------------------
                                     51 ; internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area DSEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; overlayable items in internal ram 
                                     56 ;--------------------------------------------------------
                                     57 	.area	OSEG    (OVR,DATA)
      000000                         58 _calculate_digit_i_1_61:
      000000                         59 	.ds 1
                                     60 ;--------------------------------------------------------
                                     61 ; indirectly addressable internal ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area ISEG    (DATA)
                                     64 ;--------------------------------------------------------
                                     65 ; absolute internal ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area IABS    (ABS,DATA)
                                     68 	.area IABS    (ABS,DATA)
                                     69 ;--------------------------------------------------------
                                     70 ; bit data
                                     71 ;--------------------------------------------------------
                                     72 	.area BSEG    (BIT)
      000000                         73 _lower_case:
      000000                         74 	.ds 1
      000001                         75 _output_float_PARM_4:
      000001                         76 	.ds 1
      000002                         77 _output_float_PARM_5:
      000002                         78 	.ds 1
      000003                         79 _output_float_PARM_6:
      000003                         80 	.ds 1
      000004                         81 _output_float_PARM_7:
      000004                         82 	.ds 1
      000005                         83 _output_float_negative_1_65:
      000005                         84 	.ds 1
      000006                         85 __print_format_left_justify_1_98:
      000006                         86 	.ds 1
      000007                         87 __print_format_zero_padding_1_98:
      000007                         88 	.ds 1
      000008                         89 __print_format_prefix_sign_1_98:
      000008                         90 	.ds 1
      000009                         91 __print_format_prefix_space_1_98:
      000009                         92 	.ds 1
      00000A                         93 __print_format_signed_argument_1_98:
      00000A                         94 	.ds 1
      00000B                         95 __print_format_char_argument_1_98:
      00000B                         96 	.ds 1
      00000C                         97 __print_format_long_argument_1_98:
      00000C                         98 	.ds 1
      00000D                         99 __print_format_float_argument_1_98:
      00000D                        100 	.ds 1
      00000E                        101 __print_format_lsd_1_98:
      00000E                        102 	.ds 1
                                    103 ;--------------------------------------------------------
                                    104 ; paged external ram data
                                    105 ;--------------------------------------------------------
                                    106 	.area PSEG    (PAG,XDATA)
                                    107 ;--------------------------------------------------------
                                    108 ; external ram data
                                    109 ;--------------------------------------------------------
                                    110 	.area XSEG    (XDATA)
      000000                        111 _output_char:
      000000                        112 	.ds 3
      000003                        113 _p:
      000003                        114 	.ds 4
      000007                        115 _value:
      000007                        116 	.ds 5
      00000C                        117 _charsOutputted:
      00000C                        118 	.ds 2
      00000E                        119 _output_float_PARM_2:
      00000E                        120 	.ds 1
      00000F                        121 _output_float_PARM_3:
      00000F                        122 	.ds 1
      000010                        123 _output_float_f_1_64:
      000010                        124 	.ds 4
      000014                        125 _output_float_fpBuffer_1_65:
      000014                        126 	.ds 128
      000094                        127 _output_float_integerPart_1_65:
      000094                        128 	.ds 4
      000098                        129 _output_float_rounding_1_65:
      000098                        130 	.ds 4
      00009C                        131 _output_float_decimalPart_1_65:
      00009C                        132 	.ds 4
      0000A0                        133 __print_format_PARM_2:
      0000A0                        134 	.ds 4
      0000A4                        135 __print_format_PARM_3:
      0000A4                        136 	.ds 4
      0000A8                        137 __print_format_PARM_4:
      0000A8                        138 	.ds 4
      0000AC                        139 __print_format_radix_1_98:
      0000AC                        140 	.ds 1
      0000AD                        141 __print_format_width_1_98:
      0000AD                        142 	.ds 1
      0000AE                        143 __print_format_length_1_98:
      0000AE                        144 	.ds 1
      0000AF                        145 __print_format_store_4_120:
      0000AF                        146 	.ds 6
      0000B5                        147 __print_format_pstore_4_120:
      0000B5                        148 	.ds 3
                                    149 ;--------------------------------------------------------
                                    150 ; absolute external ram data
                                    151 ;--------------------------------------------------------
                                    152 	.area XABS    (ABS,XDATA)
                                    153 ;--------------------------------------------------------
                                    154 ; external initialized ram data
                                    155 ;--------------------------------------------------------
                                    156 	.area XISEG   (XDATA)
                                    157 ;--------------------------------------------------------
                                    158 ; global & static initialisations
                                    159 ;--------------------------------------------------------
                                    160 	.area HOME    (CODE)
                                    161 	.area GSINIT  (CODE)
                                    162 	.area GSFINAL (CODE)
                                    163 	.area GSINIT  (CODE)
                                    164 ;--------------------------------------------------------
                                    165 ; Home
                                    166 ;--------------------------------------------------------
                                    167 	.area HOME    (CODE)
                                    168 	.area HOME    (CODE)
                                    169 ;--------------------------------------------------------
                                    170 ; code
                                    171 ;--------------------------------------------------------
                                    172 	.area CSEG    (CODE)
                                    173 ;------------------------------------------------------------
                                    174 ;Allocation info for local variables in function '_output_char'
                                    175 ;------------------------------------------------------------
                                    176 ;c                         Allocated to registers r2 
                                    177 ;------------------------------------------------------------
                                    178 ;	printf_large.c:105: _output_char (unsigned char c)
                                    179 ;	-----------------------------------------
                                    180 ;	 function _output_char
                                    181 ;	-----------------------------------------
      000000                        182 __output_char:
                           000002   183 	ar2 = 0x02
                           000003   184 	ar3 = 0x03
                           000004   185 	ar4 = 0x04
                           000005   186 	ar5 = 0x05
                           000006   187 	ar6 = 0x06
                           000007   188 	ar7 = 0x07
                           000000   189 	ar0 = 0x00
                           000001   190 	ar1 = 0x01
      000000 AA 82            [ 8]  191 	mov	r2,dpl
                                    192 ;	printf_large.c:107: output_char( c, p );
      000002 90s00r00r03      [12]  193 	mov	dptr,#_p
      000006 E0               [ 8]  194 	movx	a,@dptr
      000007 C0 E0            [ 8]  195 	push	acc
      000009 A3               [12]  196 	inc	dptr
      00000A E0               [ 8]  197 	movx	a,@dptr
      00000B C0 E0            [ 8]  198 	push	acc
      00000D A3               [12]  199 	inc	dptr
      00000E E0               [ 8]  200 	movx	a,@dptr
      00000F C0 E0            [ 8]  201 	push	acc
      000011 A3               [12]  202 	inc	dptr
      000012 E0               [ 8]  203 	movx	a,@dptr
      000013 C0 E0            [ 8]  204 	push	acc
      000015 74r33            [ 8]  205 	mov	a,#00103$
      000017 C0 E0            [ 8]  206 	push	acc
      000019 74s00            [ 8]  207 	mov	a,#(00103$ >> 8)
      00001B C0 E0            [ 8]  208 	push	acc
      00001D 74s00            [ 8]  209 	mov	a,#(00103$ >> 16)
      00001F C0 E0            [ 8]  210 	push	acc
      000021 90s00r00r00      [12]  211 	mov	dptr,#_output_char
      000025 E0               [ 8]  212 	movx	a,@dptr
      000026 C0 E0            [ 8]  213 	push	acc
      000028 A3               [12]  214 	inc	dptr
      000029 E0               [ 8]  215 	movx	a,@dptr
      00002A C0 E0            [ 8]  216 	push	acc
      00002C A3               [12]  217 	inc	dptr
      00002D E0               [ 8]  218 	movx	a,@dptr
      00002E C0 E0            [ 8]  219 	push	acc
      000030 8A 82            [ 8]  220 	mov	dpl,r2
      000032 22               [16]  221 	ret
      000033                        222 00103$:
                                    223 ;	stack adjustment for parms
      000033 D0 E0            [ 8]  224 	pop	acc
      000035 D0 E0            [ 8]  225 	pop	acc
      000037 D0 E0            [ 8]  226 	pop	acc
      000039 D0 E0            [ 8]  227 	pop	acc
                                    228 ;	printf_large.c:108: charsOutputted++;
      00003B 90s00r00r0C      [12]  229 	mov	dptr,#_charsOutputted
      00003F E0               [ 8]  230 	movx	a,@dptr
      000040 24 01            [ 8]  231 	add	a,#0x01
      000042 F0               [ 8]  232 	movx	@dptr,a
      000043 A3               [12]  233 	inc	dptr
      000044 E0               [ 8]  234 	movx	a,@dptr
      000045 34 00            [ 8]  235 	addc	a,#0x00
      000047 F0               [ 8]  236 	movx	@dptr,a
      000048                        237 00101$:
      000048 22               [16]  238 	ret
                                    239 ;------------------------------------------------------------
                                    240 ;Allocation info for local variables in function 'output_digit'
                                    241 ;------------------------------------------------------------
                                    242 ;c                         Allocated to registers r2 
                                    243 ;n                         Allocated to registers r2 
                                    244 ;------------------------------------------------------------
                                    245 ;	printf_large.c:130: output_digit (unsigned char n)
                                    246 ;	-----------------------------------------
                                    247 ;	 function output_digit
                                    248 ;	-----------------------------------------
      000049                        249 _output_digit:
      000049 AA 82            [ 8]  250 	mov	r2,dpl
                                    251 ;	printf_large.c:132: register unsigned char c = n + (unsigned char)'0';
      00004B 74 30            [ 8]  252 	mov	a,#0x30
      00004D 2A               [ 4]  253 	add	a,r2
      00004E FA               [ 4]  254 	mov	r2,a
                                    255 ;	printf_large.c:134: if (c > (unsigned char)'9')
      00004F C3               [ 4]  256 	clr	c
      000050 74 39            [ 8]  257 	mov	a,#0x39
      000052 9A               [ 4]  258 	subb	a,r2
      000053 50 0A            [12]  259 	jnc  00104$
      000055                        260 00113$:
                                    261 ;	printf_large.c:136: c += (unsigned char)('A' - '0' - 10);
      000055 74 07            [ 8]  262 	mov	a,#0x07
      000057 2A               [ 4]  263 	add	a,r2
      000058 FA               [ 4]  264 	mov	r2,a
                                    265 ;	printf_large.c:137: if (lower_case)
      000059 30*00 03         [12]  266 	jnb  _lower_case,00104$
      00005C                        267 00114$:
                                    268 ;	printf_large.c:138: c = tolower(c);
      00005C 43 02 20         [12]  269 	orl	ar2,#0x20
      00005F                        270 00104$:
                                    271 ;	printf_large.c:140: _output_char( c );
      00005F 8A 82            [ 8]  272 	mov	dpl,r2
      000061 12s00r00r00      [16]  273 	lcall	__output_char
      000065                        274 00105$:
      000065 22               [16]  275 	ret
                                    276 ;------------------------------------------------------------
                                    277 ;Allocation info for local variables in function 'output_2digits'
                                    278 ;------------------------------------------------------------
                                    279 ;b                         Allocated to registers r2 
                                    280 ;------------------------------------------------------------
                                    281 ;	printf_large.c:157: output_2digits (unsigned char b)
                                    282 ;	-----------------------------------------
                                    283 ;	 function output_2digits
                                    284 ;	-----------------------------------------
      000066                        285 _output_2digits:
      000066 AA 82            [ 8]  286 	mov	r2,dpl
                                    287 ;	printf_large.c:159: output_digit( b>>4   );
      000068 EA               [ 4]  288 	mov	a,r2
      000069 C4               [ 4]  289 	swap	a
      00006A 54 0F            [ 8]  290 	anl	a,#0x0F
      00006C FB               [ 4]  291 	mov	r3,a
      00006D C0 02            [ 8]  292 	push	ar2
      00006F 8B 82            [ 8]  293 	mov	dpl,r3
      000071 12s00r00r49      [16]  294 	lcall	_output_digit
      000075 D0 02            [ 8]  295 	pop	ar2
                                    296 ;	printf_large.c:160: output_digit( b&0x0F );
      000077 53 02 0F         [12]  297 	anl	ar2,#0x0F
      00007A 8A 82            [ 8]  298 	mov	dpl,r2
      00007C 12s00r00r49      [16]  299 	lcall	_output_digit
      000080                        300 00101$:
      000080 22               [16]  301 	ret
                                    302 ;------------------------------------------------------------
                                    303 ;Allocation info for local variables in function 'calculate_digit'
                                    304 ;------------------------------------------------------------
                                    305 ;radix                     Allocated to registers r2 
                                    306 ;ul                        Allocated to registers r3 r4 r5 r6 
                                    307 ;b4                        Allocated to registers r7 
                                    308 ;i                         Allocated with name '_calculate_digit_i_1_61'
                                    309 ;------------------------------------------------------------
                                    310 ;	printf_large.c:189: calculate_digit (unsigned char radix)
                                    311 ;	-----------------------------------------
                                    312 ;	 function calculate_digit
                                    313 ;	-----------------------------------------
      000081                        314 _calculate_digit:
      000081 AA 82            [ 8]  315 	mov	r2,dpl
                                    316 ;	printf_large.c:191: register unsigned long ul = value.ul;
      000083 90s00r00r07      [12]  317 	mov	dptr,#_value
      000087 E0               [ 8]  318 	movx	a,@dptr
      000088 A3               [12]  319 	inc	dptr
      000089 FB               [ 4]  320 	mov	r3,a
      00008A E0               [ 8]  321 	movx	a,@dptr
      00008B A3               [12]  322 	inc	dptr
      00008C FC               [ 4]  323 	mov	r4,a
      00008D E0               [ 8]  324 	movx	a,@dptr
      00008E A3               [12]  325 	inc	dptr
      00008F FD               [ 4]  326 	mov	r5,a
      000090 E0               [ 8]  327 	movx	a,@dptr
      000091 FE               [ 4]  328 	mov	r6,a
                                    329 ;	printf_large.c:192: register unsigned char b4 = value.byte[4];
      000092 90s00r00r0B      [12]  330 	mov	dptr,#(_value + 0x000004)
      000096 E0               [ 8]  331 	movx	a,@dptr
      000097 FF               [ 4]  332 	mov	r7,a
                                    333 ;	printf_large.c:193: register unsigned char i = 32;
                                    334 ;	genAssign: resultIsFar = FALSE
      000098 75*00 20         [12]  335 	mov	_calculate_digit_i_1_61,#0x20
                                    336 ;	printf_large.c:195: do
      00009B                        337 00103$:
                                    338 ;	printf_large.c:197: b4 = (b4 << 1);
      00009B EF               [ 4]  339 	mov	a,r7
      00009C 25 E0            [ 8]  340 	add	a,acc
      00009E FF               [ 4]  341 	mov	r7,a
                                    342 ;	printf_large.c:198: b4 |= (ul >> 31) & 0x01;
      00009F EE               [ 4]  343 	mov	a,r6
      0000A0 23               [ 4]  344 	rl	a
      0000A1 54 01            [ 8]  345 	anl	a,#0x01
      0000A3 F9               [ 4]  346 	mov	r1,a
      0000A4 8F 00            [ 8]  347 	mov	ar0,r7
      0000A6 E9               [ 4]  348 	mov	a,r1
      0000A7 48               [ 4]  349 	orl	a,r0
      0000A8 FF               [ 4]  350 	mov	r7,a
                                    351 ;	printf_large.c:199: ul <<= 1;
      0000A9 EB               [ 4]  352 	mov	a,r3
      0000AA 25 E0            [ 8]  353 	add	a,acc
      0000AC FB               [ 4]  354 	mov	r3,a
      0000AD EC               [ 4]  355 	mov	a,r4
      0000AE 33               [ 4]  356 	rlc	a
      0000AF FC               [ 4]  357 	mov	r4,a
      0000B0 ED               [ 4]  358 	mov	a,r5
      0000B1 33               [ 4]  359 	rlc	a
      0000B2 FD               [ 4]  360 	mov	r5,a
      0000B3 EE               [ 4]  361 	mov	a,r6
      0000B4 33               [ 4]  362 	rlc	a
      0000B5 FE               [ 4]  363 	mov	r6,a
                                    364 ;	printf_large.c:201: if (radix <= b4 )
      0000B6 C3               [ 4]  365 	clr	c
      0000B7 EF               [ 4]  366 	mov	a,r7
      0000B8 9A               [ 4]  367 	subb	a,r2
      0000B9 40 07            [12]  368 	jc   00104$
      0000BB                        369 00117$:
                                    370 ;	printf_large.c:203: b4 -= radix;
      0000BB C3               [ 4]  371 	clr	c
      0000BC EF               [ 4]  372 	mov	a,r7
      0000BD 9A               [ 4]  373 	subb	a,r2
      0000BE FF               [ 4]  374 	mov	r7,a
                                    375 ;	printf_large.c:204: ul |= 1;
      0000BF 43 03 01         [12]  376 	orl	ar3,#0x01
      0000C2                        377 00104$:
                                    378 ;	printf_large.c:206: } while (--i);
      0000C2 E5*00            [ 8]  379 	mov	a,_calculate_digit_i_1_61
      0000C4 14               [ 4]  380 	dec	a
                                    381 ;	genAssign: resultIsFar = FALSE
      0000C5 F8               [ 4]  382 	mov  r0,a
      0000C6 88*00            [ 8]  383 	mov  _calculate_digit_i_1_61,r0 
      0000C8 70 D1            [12]  384 	jnz  00103$
      0000CA                        385 00118$:
                                    386 ;	printf_large.c:207: value.ul = ul;
      0000CA 90s00r00r07      [12]  387 	mov	dptr,#_value
      0000CE EB               [ 4]  388 	mov	a,r3
      0000CF F0               [ 8]  389 	movx	@dptr,a
      0000D0 A3               [12]  390 	inc	dptr
      0000D1 EC               [ 4]  391 	mov	a,r4
      0000D2 F0               [ 8]  392 	movx	@dptr,a
      0000D3 A3               [12]  393 	inc	dptr
      0000D4 ED               [ 4]  394 	mov	a,r5
      0000D5 F0               [ 8]  395 	movx	@dptr,a
      0000D6 A3               [12]  396 	inc	dptr
      0000D7 EE               [ 4]  397 	mov	a,r6
      0000D8 F0               [ 8]  398 	movx	@dptr,a
                                    399 ;	printf_large.c:208: value.byte[4] = b4;
      0000D9 90s00r00r0B      [12]  400 	mov	dptr,#(_value + 0x000004)
      0000DD EF               [ 4]  401 	mov	a,r7
      0000DE F0               [ 8]  402 	movx	@dptr,a
      0000DF                        403 00106$:
      0000DF 22               [16]  404 	ret
                                    405 ;------------------------------------------------------------
                                    406 ;Allocation info for local variables in function 'output_float'
                                    407 ;------------------------------------------------------------
                                    408 ;reqWidth                  Allocated with name '_output_float_PARM_2'
                                    409 ;reqDecimals               Allocated with name '_output_float_PARM_3'
                                    410 ;f                         Allocated with name '_output_float_f_1_64'
                                    411 ;fpBuffer                  Allocated with name '_output_float_fpBuffer_1_65'
                                    412 ;integerPart               Allocated with name '_output_float_integerPart_1_65'
                                    413 ;rounding                  Allocated with name '_output_float_rounding_1_65'
                                    414 ;decimalPart               Allocated with name '_output_float_decimalPart_1_65'
                                    415 ;fpBI                      Allocated to registers r2 
                                    416 ;fpBD                      Allocated to registers 
                                    417 ;minWidth                  Allocated to registers r3 
                                    418 ;i                         Allocated to registers r7 
                                    419 ;exp                       Allocated to registers r6 
                                    420 ;sloc0                     Allocated with name '_output_float_sloc0_1_0'
                                    421 ;sloc1                     Allocated with name '_output_float_sloc1_1_0'
                                    422 ;sloc2                     Allocated with name '_output_float_sloc2_1_0'
                                    423 ;------------------------------------------------------------
                                    424 ;	printf_large.c:241: output_float (float f, unsigned char reqWidth,
                                    425 ;	-----------------------------------------
                                    426 ;	 function output_float
                                    427 ;	-----------------------------------------
      0000E0                        428 _output_float:
      0000E0 75 86 01         [12]  429 	mov     dps, #1
      0000E3 90s00r00r10      [12]  430 	mov     dptr, #_output_float_f_1_64
      0000E7 E5 82            [ 8]  431 	mov	a,dpl
      0000E9 F0               [ 8]  432 	movx	@dptr,a
      0000EA A3               [12]  433 	inc	dptr
      0000EB E5 83            [ 8]  434 	mov	a,dph
      0000ED F0               [ 8]  435 	movx	@dptr,a
      0000EE A3               [12]  436 	inc	dptr
      0000EF E5 93            [ 8]  437 	mov	a,dpx
      0000F1 F0               [ 8]  438 	movx	@dptr,a
      0000F2 A3               [12]  439 	inc	dptr
      0000F3 E5 F0            [ 8]  440 	mov	a,b
      0000F5 F0               [ 8]  441 	movx	@dptr,a
      0000F6 75 86 00         [12]  442 	mov	dps,#0
                                    443 ;	printf_large.c:247: bool negative = 0;
                                    444 ;	genAssign: resultIsFar = FALSE
      0000F9 C2*05            [ 8]  445 	clr	_output_float_negative_1_65
                                    446 ;	printf_large.c:253: signed char exp = -128;
                                    447 ;	genAssign: resultIsFar = TRUE
      0000FB 7E 80            [ 8]  448 	mov	r6,#0x80
                                    449 ;	printf_large.c:256: if (f<0)
                                    450 ;	genAssign: resultIsFar = TRUE
      0000FD 90s00r00r00      [12]  451 	mov	dptr,#___fslt_PARM_2
      000101 E4               [ 4]  452 	clr	a
      000102 F0               [ 8]  453 	movx	@dptr,a
      000103 A3               [12]  454 	inc	dptr
      000104 F0               [ 8]  455 	movx	@dptr,a
      000105 A3               [12]  456 	inc	dptr
      000106 F0               [ 8]  457 	movx	@dptr,a
      000107 A3               [12]  458 	inc	dptr
      000108 F0               [ 8]  459 	movx	@dptr,a
      000109 C0 06            [ 8]  460 	push	ar6
      00010B 05 86            [ 8]  461 	inc	dps
      00010D 90s00r00r10      [12]  462 	mov	dptr,#_output_float_f_1_64
      000111 E0               [ 8]  463 	movx	a,@dptr
      000112 F5 82            [ 8]  464 	mov	dpl,a
      000114 A3               [12]  465 	inc	dptr
      000115 E0               [ 8]  466 	movx	a,@dptr
      000116 F5 83            [ 8]  467 	mov	dph,a
      000118 A3               [12]  468 	inc	dptr
      000119 E0               [ 8]  469 	movx	a,@dptr
      00011A F5 93            [ 8]  470 	mov	dpx,a
      00011C A3               [12]  471 	inc	dptr
      00011D E0               [ 8]  472 	movx	a,@dptr
      00011E F5 F0            [ 8]  473 	mov	b,a
      000120 75 86 00         [12]  474 	mov	dps,#0
      000123 12s00r00r00      [16]  475 	lcall	___fslt
      000127 D0 06            [ 8]  476 	pop	ar6
      000129 E5 82            [ 8]  477 	mov	a,dpl
      00012B 60 30            [12]  478 	jz  00102$
      00012D                        479 00347$:
                                    480 ;	printf_large.c:258: negative=1;
                                    481 ;	genAssign: resultIsFar = FALSE
      00012D D2*05            [ 8]  482 	setb	_output_float_negative_1_65
                                    483 ;	printf_large.c:259: f=-f;
      00012F 90s00r00r10      [12]  484 	mov	dptr,#_output_float_f_1_64
      000133 75 86 01         [12]  485 	mov	dps, #1
      000136 90s00r00r10      [12]  486 	mov	dptr, #_output_float_f_1_64
      00013A 15 86            [ 8]  487 	dec	dps
      00013C E0               [ 8]  488 	movx	a,@dptr
      00013D 05 86            [ 8]  489 	inc	dps
      00013F F0               [ 8]  490 	movx	@dptr,a
      000140 15 86            [ 8]  491 	dec	dps
      000142 A3               [12]  492 	inc	dptr
      000143 E0               [ 8]  493 	movx	a,@dptr
      000144 05 86            [ 8]  494 	inc	dps
      000146 A3               [12]  495 	inc	dptr
      000147 F0               [ 8]  496 	movx	@dptr,a
      000148 15 86            [ 8]  497 	dec	dps
      00014A A3               [12]  498 	inc	dptr
      00014B E0               [ 8]  499 	movx	a,@dptr
      00014C 05 86            [ 8]  500 	inc	dps
      00014E A3               [12]  501 	inc	dptr
      00014F F0               [ 8]  502 	movx	@dptr,a
      000150 15 86            [ 8]  503 	dec	dps
      000152 A3               [12]  504 	inc	dptr
      000153 E0               [ 8]  505 	movx	a,@dptr
      000154 B2 E7            [ 8]  506 	cpl	acc[7]
      000156 05 86            [ 8]  507 	inc	dps
      000158 A3               [12]  508 	inc	dptr
      000159 F0               [ 8]  509 	movx	@dptr,a
      00015A 75 86 00         [12]  510 	mov	dps,#0
      00015D                        511 00102$:
                                    512 ;	printf_large.c:262: if (f>0x00ffffff)
                                    513 ;	genAssign: resultIsFar = TRUE
      00015D 90s00r00r00      [12]  514 	mov	dptr,#___fsgt_PARM_2
      000161 74 FF            [ 8]  515 	mov  a,#0xFF
      000163 F0               [ 8]  516 	movx @dptr,a
      000164 A3               [12]  517 	inc  dptr
      000165 F0               [ 8]  518 	movx @dptr,a
      000166 A3               [12]  519 	inc	dptr
      000167 74 7F            [ 8]  520 	mov	a,#0x7F
      000169 F0               [ 8]  521 	movx	@dptr,a
      00016A A3               [12]  522 	inc	dptr
      00016B 74 4B            [ 8]  523 	mov	a,#0x4B
      00016D F0               [ 8]  524 	movx	@dptr,a
      00016E C0 06            [ 8]  525 	push	ar6
      000170 05 86            [ 8]  526 	inc	dps
      000172 90s00r00r10      [12]  527 	mov	dptr,#_output_float_f_1_64
      000176 E0               [ 8]  528 	movx	a,@dptr
      000177 F5 82            [ 8]  529 	mov	dpl,a
      000179 A3               [12]  530 	inc	dptr
      00017A E0               [ 8]  531 	movx	a,@dptr
      00017B F5 83            [ 8]  532 	mov	dph,a
      00017D A3               [12]  533 	inc	dptr
      00017E E0               [ 8]  534 	movx	a,@dptr
      00017F F5 93            [ 8]  535 	mov	dpx,a
      000181 A3               [12]  536 	inc	dptr
      000182 E0               [ 8]  537 	movx	a,@dptr
      000183 F5 F0            [ 8]  538 	mov	b,a
      000185 75 86 00         [12]  539 	mov	dps,#0
      000188 12s00r00r00      [16]  540 	lcall	___fsgt
      00018C D0 06            [ 8]  541 	pop	ar6
      00018E E5 82            [ 8]  542 	mov	a,dpl
      000190 70 04            [12]  543 	jnz	00348$
      000192 02s00r02rC9      [16]  544 	ljmp	00111$
      000196                        545 00348$:
                                    546 ;	printf_large.c:266: for (exp = 0; f >= 10.0; exp++) f /=10.0;
                                    547 ;	genAssign: resultIsFar = FALSE
      000196 7E 00            [ 8]  548 	mov	r6,#0x00
      000198                        549 00181$:
                                    550 ;	genAssign: resultIsFar = TRUE
      000198 90s00r00r00      [12]  551 	mov	dptr,#___fslt_PARM_2
      00019C E4               [ 4]  552 	clr	a
      00019D F0               [ 8]  553 	movx	@dptr,a
      00019E A3               [12]  554 	inc	dptr
      00019F E4               [ 4]  555 	clr	a
      0001A0 F0               [ 8]  556 	movx	@dptr,a
      0001A1 A3               [12]  557 	inc	dptr
      0001A2 74 20            [ 8]  558 	mov	a,#0x20
      0001A4 F0               [ 8]  559 	movx	@dptr,a
      0001A5 A3               [12]  560 	inc	dptr
      0001A6 74 41            [ 8]  561 	mov	a,#0x41
      0001A8 F0               [ 8]  562 	movx	@dptr,a
      0001A9 C0 06            [ 8]  563 	push	ar6
      0001AB 05 86            [ 8]  564 	inc	dps
      0001AD 90s00r00r10      [12]  565 	mov	dptr,#_output_float_f_1_64
      0001B1 E0               [ 8]  566 	movx	a,@dptr
      0001B2 F5 82            [ 8]  567 	mov	dpl,a
      0001B4 A3               [12]  568 	inc	dptr
      0001B5 E0               [ 8]  569 	movx	a,@dptr
      0001B6 F5 83            [ 8]  570 	mov	dph,a
      0001B8 A3               [12]  571 	inc	dptr
      0001B9 E0               [ 8]  572 	movx	a,@dptr
      0001BA F5 93            [ 8]  573 	mov	dpx,a
      0001BC A3               [12]  574 	inc	dptr
      0001BD E0               [ 8]  575 	movx	a,@dptr
      0001BE F5 F0            [ 8]  576 	mov	b,a
      0001C0 75 86 00         [12]  577 	mov	dps,#0
      0001C3 12s00r00r00      [16]  578 	lcall	___fslt
      0001C7 D0 06            [ 8]  579 	pop	ar6
      0001C9 E5 82            [ 8]  580 	mov	a,dpl
      0001CB 70 4D            [12]  581 	jnz  00205$
      0001CD                        582 00349$:
                                    583 ;	genAssign: resultIsFar = TRUE
      0001CD 90s00r00r00      [12]  584 	mov	dptr,#___fsdiv_PARM_2
      0001D1 E4               [ 4]  585 	clr	a
      0001D2 F0               [ 8]  586 	movx	@dptr,a
      0001D3 A3               [12]  587 	inc	dptr
      0001D4 E4               [ 4]  588 	clr	a
      0001D5 F0               [ 8]  589 	movx	@dptr,a
      0001D6 A3               [12]  590 	inc	dptr
      0001D7 74 20            [ 8]  591 	mov	a,#0x20
      0001D9 F0               [ 8]  592 	movx	@dptr,a
      0001DA A3               [12]  593 	inc	dptr
      0001DB 74 41            [ 8]  594 	mov	a,#0x41
      0001DD F0               [ 8]  595 	movx	@dptr,a
      0001DE C0 06            [ 8]  596 	push	ar6
      0001E0 05 86            [ 8]  597 	inc	dps
      0001E2 90s00r00r10      [12]  598 	mov	dptr,#_output_float_f_1_64
      0001E6 E0               [ 8]  599 	movx	a,@dptr
      0001E7 F5 82            [ 8]  600 	mov	dpl,a
      0001E9 A3               [12]  601 	inc	dptr
      0001EA E0               [ 8]  602 	movx	a,@dptr
      0001EB F5 83            [ 8]  603 	mov	dph,a
      0001ED A3               [12]  604 	inc	dptr
      0001EE E0               [ 8]  605 	movx	a,@dptr
      0001EF F5 93            [ 8]  606 	mov	dpx,a
      0001F1 A3               [12]  607 	inc	dptr
      0001F2 E0               [ 8]  608 	movx	a,@dptr
      0001F3 F5 F0            [ 8]  609 	mov	b,a
      0001F5 75 86 00         [12]  610 	mov	dps,#0
      0001F8 12s00r00r00      [16]  611 	lcall	___fsdiv
      0001FC AA 82            [ 8]  612 	mov	r2,dpl
      0001FE AB 83            [ 8]  613 	mov	r3,dph
      000200 AC 93            [ 8]  614 	mov	r4,dpx
      000202 AD F0            [ 8]  615 	mov	r5,b
      000204 D0 06            [ 8]  616 	pop	ar6
                                    617 ;	genAssign: resultIsFar = TRUE
      000206 90s00r00r10      [12]  618 	mov	dptr,#_output_float_f_1_64
      00020A EA               [ 4]  619 	mov	a,r2
      00020B F0               [ 8]  620 	movx	@dptr,a
      00020C A3               [12]  621 	inc	dptr
      00020D EB               [ 4]  622 	mov	a,r3
      00020E F0               [ 8]  623 	movx	@dptr,a
      00020F A3               [12]  624 	inc	dptr
      000210 EC               [ 4]  625 	mov	a,r4
      000211 F0               [ 8]  626 	movx	@dptr,a
      000212 A3               [12]  627 	inc	dptr
      000213 ED               [ 4]  628 	mov	a,r5
      000214 F0               [ 8]  629 	movx	@dptr,a
      000215 0E               [ 4]  630 	inc	r6
      000216 02s00r01r98      [16]  631 	ljmp	00181$
      00021A                        632 00205$:
                                    633 ;	genAssign: resultIsFar = FALSE
      00021A 8E 07            [ 8]  634 	mov	ar7,r6
      00021C                        635 00184$:
                                    636 ;	printf_large.c:267: for (       ; f < 1.0;   exp--) f *=10.0;
                                    637 ;	genAssign: resultIsFar = TRUE
      00021C 90s00r00r00      [12]  638 	mov	dptr,#___fslt_PARM_2
      000220 E4               [ 4]  639 	clr	a
      000221 F0               [ 8]  640 	movx	@dptr,a
      000222 A3               [12]  641 	inc	dptr
      000223 E4               [ 4]  642 	clr	a
      000224 F0               [ 8]  643 	movx	@dptr,a
      000225 A3               [12]  644 	inc	dptr
      000226 74 80            [ 8]  645 	mov	a,#0x80
      000228 F0               [ 8]  646 	movx	@dptr,a
      000229 A3               [12]  647 	inc	dptr
      00022A 74 3F            [ 8]  648 	mov	a,#0x3F
      00022C F0               [ 8]  649 	movx	@dptr,a
      00022D C0 07            [ 8]  650 	push	ar7
      00022F 05 86            [ 8]  651 	inc	dps
      000231 90s00r00r10      [12]  652 	mov	dptr,#_output_float_f_1_64
      000235 E0               [ 8]  653 	movx	a,@dptr
      000236 F5 82            [ 8]  654 	mov	dpl,a
      000238 A3               [12]  655 	inc	dptr
      000239 E0               [ 8]  656 	movx	a,@dptr
      00023A F5 83            [ 8]  657 	mov	dph,a
      00023C A3               [12]  658 	inc	dptr
      00023D E0               [ 8]  659 	movx	a,@dptr
      00023E F5 93            [ 8]  660 	mov	dpx,a
      000240 A3               [12]  661 	inc	dptr
      000241 E0               [ 8]  662 	movx	a,@dptr
      000242 F5 F0            [ 8]  663 	mov	b,a
      000244 75 86 00         [12]  664 	mov	dps,#0
      000247 12s00r00r00      [16]  665 	lcall	___fslt
      00024B D0 07            [ 8]  666 	pop	ar7
      00024D E5 82            [ 8]  667 	mov	a,dpl
      00024F 60 4A            [12]  668 	jz  00246$
      000251                        669 00350$:
      000251 90s00r00r10      [12]  670 	mov	dptr,#_output_float_f_1_64
                                    671 ;	genAssign: resultIsFar = TRUE
      000255 75 86 21         [12]  672 	mov	dps,#0x21
      000258 90s00r00r00      [12]  673 	mov	dptr,#___fsmul_PARM_2
      00025C E0               [ 8]  674 	movx	a,@dptr
      00025D F0               [ 8]  675 	movx	@dptr,a
      00025E A3               [12]  676 	inc	dptr
      00025F A3               [12]  677 	inc	dptr
      000260 E0               [ 8]  678 	movx	a,@dptr
      000261 F0               [ 8]  679 	movx	@dptr,a
      000262 A3               [12]  680 	inc	dptr
      000263 A3               [12]  681 	inc	dptr
      000264 E0               [ 8]  682 	movx	a,@dptr
      000265 F0               [ 8]  683 	movx	@dptr,a
      000266 A3               [12]  684 	inc	dptr
      000267 A3               [12]  685 	inc	dptr
      000268 E0               [ 8]  686 	movx	a,@dptr
      000269 F0               [ 8]  687 	movx	@dptr,a
      00026A 75 86 00         [12]  688 	mov	dps,#0
      00026D C0 07            [ 8]  689 	push	ar7
      00026F 90 00 00 00      [12]  690 	mov  dptr,#0x0000
      000273 75 93 20         [12]  691 	mov	dpx,#0x20
      000276 75 F0 41         [12]  692 	mov	b,#0x41
      000279 12s00r00r00      [16]  693 	lcall	___fsmul
      00027D AA 82            [ 8]  694 	mov	r2,dpl
      00027F AB 83            [ 8]  695 	mov	r3,dph
      000281 AC 93            [ 8]  696 	mov	r4,dpx
      000283 AD F0            [ 8]  697 	mov	r5,b
      000285 D0 07            [ 8]  698 	pop	ar7
                                    699 ;	genAssign: resultIsFar = TRUE
      000287 90s00r00r10      [12]  700 	mov	dptr,#_output_float_f_1_64
      00028B EA               [ 4]  701 	mov	a,r2
      00028C F0               [ 8]  702 	movx	@dptr,a
      00028D A3               [12]  703 	inc	dptr
      00028E EB               [ 4]  704 	mov	a,r3
      00028F F0               [ 8]  705 	movx	@dptr,a
      000290 A3               [12]  706 	inc	dptr
      000291 EC               [ 4]  707 	mov	a,r4
      000292 F0               [ 8]  708 	movx	@dptr,a
      000293 A3               [12]  709 	inc	dptr
      000294 ED               [ 4]  710 	mov	a,r5
      000295 F0               [ 8]  711 	movx	@dptr,a
      000296 1F               [ 4]  712 	dec	r7
      000297 02s00r02r1C      [16]  713 	ljmp	00184$
      00029B                        714 00246$:
                                    715 ;	genAssign: resultIsFar = TRUE
      00029B 8F 06            [ 8]  716 	mov	ar6,r7
                                    717 ;	printf_large.c:269: if (negative)
      00029D 30*05 0D         [12]  718 	jnb  _output_float_negative_1_65,00108$
      0002A0                        719 00351$:
                                    720 ;	printf_large.c:271: OUTPUT_CHAR ('-', p);
      0002A0 C0 06            [ 8]  721 	push	ar6
      0002A2 75 82 2D         [12]  722 	mov	dpl,#0x2D
      0002A5 12s00r00r00      [16]  723 	lcall	__output_char
      0002A9 D0 06            [ 8]  724 	pop	ar6
      0002AB 80 0E            [12]  725 	sjmp 00109$
      0002AD                        726 00108$:
                                    727 ;	printf_large.c:275: if (sign)
      0002AD 30*03 0B         [12]  728 	jnb  _output_float_PARM_6,00109$
      0002B0                        729 00352$:
                                    730 ;	printf_large.c:277: OUTPUT_CHAR ('+', p);
      0002B0 C0 06            [ 8]  731 	push	ar6
      0002B2 75 82 2B         [12]  732 	mov	dpl,#0x2B
      0002B5 12s00r00r00      [16]  733 	lcall	__output_char
      0002B9 D0 06            [ 8]  734 	pop	ar6
      0002BB                        735 00109$:
                                    736 ;	printf_large.c:280: reqWidth = 0;
                                    737 ;	genAssign: resultIsFar = TRUE
      0002BB 90s00r00r0E      [12]  738 	mov	dptr,#_output_float_PARM_2
      0002BF E4               [ 4]  739 	clr	a
      0002C0 F0               [ 8]  740 	movx	@dptr,a
                                    741 ;	printf_large.c:281: left = 0;
                                    742 ;	genAssign: resultIsFar = FALSE
      0002C1 C2*01            [ 8]  743 	clr	_output_float_PARM_4
                                    744 ;	printf_large.c:282: zero = 0;
                                    745 ;	genAssign: resultIsFar = FALSE
      0002C3 C2*02            [ 8]  746 	clr	_output_float_PARM_5
                                    747 ;	printf_large.c:283: sign = 0;
                                    748 ;	genAssign: resultIsFar = FALSE
      0002C5 C2*03            [ 8]  749 	clr	_output_float_PARM_6
                                    750 ;	printf_large.c:284: space = 0;
                                    751 ;	genAssign: resultIsFar = FALSE
      0002C7 C2*04            [ 8]  752 	clr	_output_float_PARM_7
      0002C9                        753 00111$:
                                    754 ;	printf_large.c:288: if (reqDecimals==-1)
      0002C9 90s00r00r0F      [12]  755 	mov	dptr,#_output_float_PARM_3
      0002CD E0               [ 8]  756 	movx	a,@dptr
      0002CE B4 FF 07         [16]  757 	cjne a,#0xFF,00113$
      0002D1                        758 00354$:
                                    759 ;	printf_large.c:289: reqDecimals=DEFAULT_FLOAT_PRECISION;
                                    760 ;	genAssign: resultIsFar = TRUE
      0002D1 90s00r00r0F      [12]  761 	mov	dptr,#_output_float_PARM_3
      0002D5 74 06            [ 8]  762 	mov	a,#0x06
      0002D7 F0               [ 8]  763 	movx	@dptr,a
      0002D8                        764 00113$:
                                    765 ;	printf_large.c:292: rounding = 0.5;
                                    766 ;	genAssign: resultIsFar = TRUE
      0002D8 90s00r00r98      [12]  767 	mov	dptr,#_output_float_rounding_1_65
      0002DC E4               [ 4]  768 	clr	a
      0002DD F0               [ 8]  769 	movx	@dptr,a
      0002DE A3               [12]  770 	inc	dptr
      0002DF E4               [ 4]  771 	clr	a
      0002E0 F0               [ 8]  772 	movx	@dptr,a
      0002E1 A3               [12]  773 	inc	dptr
      0002E2 E4               [ 4]  774 	clr	a
      0002E3 F0               [ 8]  775 	movx	@dptr,a
      0002E4 A3               [12]  776 	inc	dptr
      0002E5 74 3F            [ 8]  777 	mov	a,#0x3F
      0002E7 F0               [ 8]  778 	movx	@dptr,a
                                    779 ;	printf_large.c:293: for (i=reqDecimals; i>0; i--)
      0002E8 90s00r00r0F      [12]  780 	mov	dptr,#_output_float_PARM_3
                                    781 ;	genAssign: resultIsFar = TRUE
      0002EC E0               [ 8]  782 	movx	a,@dptr
      0002ED FF               [ 4]  783 	mov	r7,a
                                    784 ;	genAssign: resultIsFar = FALSE
      0002EE 8F 00            [ 8]  785 	mov	ar0,r7
      0002F0                        786 00187$:
      0002F0 E8               [ 4]  787 	mov	a,r0
      0002F1 60 4F            [12]  788 	jz  00114$
      0002F3                        789 00355$:
                                    790 ;	printf_large.c:295: rounding /= 10.0;
      0002F3 C0 06            [ 8]  791 	push	ar6
                                    792 ;	genAssign: resultIsFar = TRUE
      0002F5 90s00r00r00      [12]  793 	mov	dptr,#___fsdiv_PARM_2
      0002F9 E4               [ 4]  794 	clr	a
      0002FA F0               [ 8]  795 	movx	@dptr,a
      0002FB A3               [12]  796 	inc	dptr
      0002FC E4               [ 4]  797 	clr	a
      0002FD F0               [ 8]  798 	movx	@dptr,a
      0002FE A3               [12]  799 	inc	dptr
      0002FF 74 20            [ 8]  800 	mov	a,#0x20
      000301 F0               [ 8]  801 	movx	@dptr,a
      000302 A3               [12]  802 	inc	dptr
      000303 74 41            [ 8]  803 	mov	a,#0x41
      000305 F0               [ 8]  804 	movx	@dptr,a
      000306 C0 00            [ 8]  805 	push	ar0
      000308 05 86            [ 8]  806 	inc	dps
      00030A 90s00r00r98      [12]  807 	mov	dptr,#_output_float_rounding_1_65
      00030E E0               [ 8]  808 	movx	a,@dptr
      00030F F5 82            [ 8]  809 	mov	dpl,a
      000311 A3               [12]  810 	inc	dptr
      000312 E0               [ 8]  811 	movx	a,@dptr
      000313 F5 83            [ 8]  812 	mov	dph,a
      000315 A3               [12]  813 	inc	dptr
      000316 E0               [ 8]  814 	movx	a,@dptr
      000317 F5 93            [ 8]  815 	mov	dpx,a
      000319 A3               [12]  816 	inc	dptr
      00031A E0               [ 8]  817 	movx	a,@dptr
      00031B F5 F0            [ 8]  818 	mov	b,a
      00031D 75 86 00         [12]  819 	mov	dps,#0
      000320 12s00r00r00      [16]  820 	lcall	___fsdiv
      000324 A9 82            [ 8]  821 	mov	r1,dpl
      000326 AE 83            [ 8]  822 	mov	r6,dph
      000328 AA 93            [ 8]  823 	mov	r2,dpx
      00032A AB F0            [ 8]  824 	mov	r3,b
      00032C D0 00            [ 8]  825 	pop	ar0
                                    826 ;	genAssign: resultIsFar = TRUE
      00032E 90s00r00r98      [12]  827 	mov	dptr,#_output_float_rounding_1_65
      000332 E9               [ 4]  828 	mov	a,r1
      000333 F0               [ 8]  829 	movx	@dptr,a
      000334 A3               [12]  830 	inc	dptr
      000335 EE               [ 4]  831 	mov	a,r6
      000336 F0               [ 8]  832 	movx	@dptr,a
      000337 A3               [12]  833 	inc	dptr
      000338 EA               [ 4]  834 	mov	a,r2
      000339 F0               [ 8]  835 	movx	@dptr,a
      00033A A3               [12]  836 	inc	dptr
      00033B EB               [ 4]  837 	mov	a,r3
      00033C F0               [ 8]  838 	movx	@dptr,a
                                    839 ;	printf_large.c:293: for (i=reqDecimals; i>0; i--)
      00033D 18               [ 4]  840 	dec	r0
      00033E D0 06            [ 8]  841 	pop	ar6
      000340 80 AE            [12]  842 	sjmp 00187$
      000342                        843 00114$:
                                    844 ;	printf_large.c:297: f += rounding;
      000342 C0 06            [ 8]  845 	push	ar6
      000344 90s00r00r98      [12]  846 	mov	dptr,#_output_float_rounding_1_65
                                    847 ;	genAssign: resultIsFar = TRUE
      000348 75 86 21         [12]  848 	mov	dps,#0x21
      00034B 90s00r00r00      [12]  849 	mov	dptr,#___fsadd_PARM_2
      00034F E0               [ 8]  850 	movx	a,@dptr
      000350 F0               [ 8]  851 	movx	@dptr,a
      000351 A3               [12]  852 	inc	dptr
      000352 A3               [12]  853 	inc	dptr
      000353 E0               [ 8]  854 	movx	a,@dptr
      000354 F0               [ 8]  855 	movx	@dptr,a
      000355 A3               [12]  856 	inc	dptr
      000356 A3               [12]  857 	inc	dptr
      000357 E0               [ 8]  858 	movx	a,@dptr
      000358 F0               [ 8]  859 	movx	@dptr,a
      000359 A3               [12]  860 	inc	dptr
      00035A A3               [12]  861 	inc	dptr
      00035B E0               [ 8]  862 	movx	a,@dptr
      00035C F0               [ 8]  863 	movx	@dptr,a
      00035D 75 86 00         [12]  864 	mov	dps,#0
      000360 C0 06            [ 8]  865 	push	ar6
      000362 05 86            [ 8]  866 	inc	dps
      000364 90s00r00r10      [12]  867 	mov	dptr,#_output_float_f_1_64
      000368 E0               [ 8]  868 	movx	a,@dptr
      000369 F5 82            [ 8]  869 	mov	dpl,a
      00036B A3               [12]  870 	inc	dptr
      00036C E0               [ 8]  871 	movx	a,@dptr
      00036D F5 83            [ 8]  872 	mov	dph,a
      00036F A3               [12]  873 	inc	dptr
      000370 E0               [ 8]  874 	movx	a,@dptr
      000371 F5 93            [ 8]  875 	mov	dpx,a
      000373 A3               [12]  876 	inc	dptr
      000374 E0               [ 8]  877 	movx	a,@dptr
      000375 F5 F0            [ 8]  878 	mov	b,a
      000377 75 86 00         [12]  879 	mov	dps,#0
      00037A 12s00r00r00      [16]  880 	lcall	___fsadd
      00037E AA 82            [ 8]  881 	mov	r2,dpl
      000380 AB 83            [ 8]  882 	mov	r3,dph
      000382 AC 93            [ 8]  883 	mov	r4,dpx
      000384 AD F0            [ 8]  884 	mov	r5,b
      000386 D0 06            [ 8]  885 	pop	ar6
                                    886 ;	genAssign: resultIsFar = TRUE
      000388 90s00r00r10      [12]  887 	mov	dptr,#_output_float_f_1_64
      00038C EA               [ 4]  888 	mov	a,r2
      00038D F0               [ 8]  889 	movx	@dptr,a
      00038E A3               [12]  890 	inc	dptr
      00038F EB               [ 4]  891 	mov	a,r3
      000390 F0               [ 8]  892 	movx	@dptr,a
      000391 A3               [12]  893 	inc	dptr
      000392 EC               [ 4]  894 	mov	a,r4
      000393 F0               [ 8]  895 	movx	@dptr,a
      000394 A3               [12]  896 	inc	dptr
      000395 ED               [ 4]  897 	mov	a,r5
      000396 F0               [ 8]  898 	movx	@dptr,a
                                    899 ;	printf_large.c:300: integerPart = f;
      000397 C0 06            [ 8]  900 	push	ar6
      000399 05 86            [ 8]  901 	inc	dps
      00039B 90s00r00r10      [12]  902 	mov	dptr,#_output_float_f_1_64
      00039F E0               [ 8]  903 	movx	a,@dptr
      0003A0 F5 82            [ 8]  904 	mov	dpl,a
      0003A2 A3               [12]  905 	inc	dptr
      0003A3 E0               [ 8]  906 	movx	a,@dptr
      0003A4 F5 83            [ 8]  907 	mov	dph,a
      0003A6 A3               [12]  908 	inc	dptr
      0003A7 E0               [ 8]  909 	movx	a,@dptr
      0003A8 F5 93            [ 8]  910 	mov	dpx,a
      0003AA A3               [12]  911 	inc	dptr
      0003AB E0               [ 8]  912 	movx	a,@dptr
      0003AC F5 F0            [ 8]  913 	mov	b,a
      0003AE 75 86 00         [12]  914 	mov	dps,#0
      0003B1 12s00r00r00      [16]  915 	lcall	___fs2ulong
      0003B5 AA 82            [ 8]  916 	mov	r2,dpl
      0003B7 AB 83            [ 8]  917 	mov	r3,dph
      0003B9 AC 93            [ 8]  918 	mov	r4,dpx
      0003BB AD F0            [ 8]  919 	mov	r5,b
      0003BD D0 06            [ 8]  920 	pop	ar6
                                    921 ;	genAssign: resultIsFar = TRUE
      0003BF 90s00r00r94      [12]  922 	mov	dptr,#_output_float_integerPart_1_65
      0003C3 EA               [ 4]  923 	mov	a,r2
      0003C4 F0               [ 8]  924 	movx	@dptr,a
      0003C5 A3               [12]  925 	inc	dptr
      0003C6 EB               [ 4]  926 	mov	a,r3
      0003C7 F0               [ 8]  927 	movx	@dptr,a
      0003C8 A3               [12]  928 	inc	dptr
      0003C9 EC               [ 4]  929 	mov	a,r4
      0003CA F0               [ 8]  930 	movx	@dptr,a
      0003CB A3               [12]  931 	inc	dptr
      0003CC ED               [ 4]  932 	mov	a,r5
      0003CD F0               [ 8]  933 	movx	@dptr,a
                                    934 ;	printf_large.c:301: decimalPart = f - integerPart;
      0003CE 05 86            [ 8]  935 	inc	dps
      0003D0 90s00r00r94      [12]  936 	mov	dptr,#_output_float_integerPart_1_65
      0003D4 E0               [ 8]  937 	movx	a,@dptr
      0003D5 F5 82            [ 8]  938 	mov	dpl,a
      0003D7 A3               [12]  939 	inc	dptr
      0003D8 E0               [ 8]  940 	movx	a,@dptr
      0003D9 F5 83            [ 8]  941 	mov	dph,a
      0003DB A3               [12]  942 	inc	dptr
      0003DC E0               [ 8]  943 	movx	a,@dptr
      0003DD F5 93            [ 8]  944 	mov	dpx,a
      0003DF A3               [12]  945 	inc	dptr
      0003E0 E0               [ 8]  946 	movx	a,@dptr
      0003E1 F5 F0            [ 8]  947 	mov	b,a
      0003E3 75 86 00         [12]  948 	mov	dps,#0
      0003E6 12s00r00r00      [16]  949 	lcall	___ulong2fs
      0003EA A8 82            [ 8]  950 	mov	r0,dpl
      0003EC A9 83            [ 8]  951 	mov	r1,dph
      0003EE AE 93            [ 8]  952 	mov	r6,dpx
      0003F0 AA F0            [ 8]  953 	mov	r2,b
                                    954 ;	genAssign: resultIsFar = TRUE
      0003F2 90s00r00r00      [12]  955 	mov	dptr,#___fssub_PARM_2
      0003F6 E8               [ 4]  956 	mov	a,r0
      0003F7 F0               [ 8]  957 	movx	@dptr,a
      0003F8 A3               [12]  958 	inc	dptr
      0003F9 E9               [ 4]  959 	mov	a,r1
      0003FA F0               [ 8]  960 	movx	@dptr,a
      0003FB A3               [12]  961 	inc	dptr
      0003FC EE               [ 4]  962 	mov	a,r6
      0003FD F0               [ 8]  963 	movx	@dptr,a
      0003FE A3               [12]  964 	inc	dptr
      0003FF EA               [ 4]  965 	mov	a,r2
      000400 F0               [ 8]  966 	movx	@dptr,a
      000401 C0 06            [ 8]  967 	push	ar6
      000403 05 86            [ 8]  968 	inc	dps
      000405 90s00r00r10      [12]  969 	mov	dptr,#_output_float_f_1_64
      000409 E0               [ 8]  970 	movx	a,@dptr
      00040A F5 82            [ 8]  971 	mov	dpl,a
      00040C A3               [12]  972 	inc	dptr
      00040D E0               [ 8]  973 	movx	a,@dptr
      00040E F5 83            [ 8]  974 	mov	dph,a
      000410 A3               [12]  975 	inc	dptr
      000411 E0               [ 8]  976 	movx	a,@dptr
      000412 F5 93            [ 8]  977 	mov	dpx,a
      000414 A3               [12]  978 	inc	dptr
      000415 E0               [ 8]  979 	movx	a,@dptr
      000416 F5 F0            [ 8]  980 	mov	b,a
      000418 75 86 00         [12]  981 	mov	dps,#0
      00041B 12s00r00r00      [16]  982 	lcall	___fssub
      00041F AA 82            [ 8]  983 	mov	r2,dpl
      000421 AB 83            [ 8]  984 	mov	r3,dph
      000423 AC 93            [ 8]  985 	mov	r4,dpx
      000425 AD F0            [ 8]  986 	mov	r5,b
      000427 D0 06            [ 8]  987 	pop	ar6
                                    988 ;	genAssign: resultIsFar = TRUE
      000429 90s00r00r9C      [12]  989 	mov	dptr,#_output_float_decimalPart_1_65
      00042D EA               [ 4]  990 	mov	a,r2
      00042E F0               [ 8]  991 	movx	@dptr,a
      00042F A3               [12]  992 	inc	dptr
      000430 EB               [ 4]  993 	mov	a,r3
      000431 F0               [ 8]  994 	movx	@dptr,a
      000432 A3               [12]  995 	inc	dptr
      000433 EC               [ 4]  996 	mov	a,r4
      000434 F0               [ 8]  997 	movx	@dptr,a
      000435 A3               [12]  998 	inc	dptr
      000436 ED               [ 4]  999 	mov	a,r5
      000437 F0               [ 8] 1000 	movx	@dptr,a
                                   1001 ;	printf_large.c:304: while (integerPart)
                                   1002 ;	genAssign: resultIsFar = FALSE
      000438 7F 00            [ 8] 1003 	mov	r7,#0x00
                                   1004 ;	printf_large.c:428: return;
      00043A D0 06            [ 8] 1005 	pop	ar6
                                   1006 ;	printf_large.c:304: while (integerPart)
      00043C                       1007 00115$:
      00043C 90s00r00r94      [12] 1008 	mov	dptr,#_output_float_integerPart_1_65
      000440 E0               [ 8] 1009 	movx	a,@dptr
      000441 F5 F0            [ 8] 1010 	mov	b,a
      000443 A3               [12] 1011 	inc	dptr
      000444 E0               [ 8] 1012 	movx	a,@dptr
      000445 42 F0            [ 8] 1013 	orl	b,a
      000447 A3               [12] 1014 	inc	dptr
      000448 E0               [ 8] 1015 	movx	a,@dptr
      000449 42 F0            [ 8] 1016 	orl	b,a
      00044B A3               [12] 1017 	inc	dptr
      00044C E0               [ 8] 1018 	movx	a,@dptr
      00044D 45 F0            [ 8] 1019 	orl	a,b
      00044F 70 04            [12] 1020 	jnz	00356$
      000451 02s00r04rFC      [16] 1021 	ljmp	00248$
      000455                       1022 00356$:
                                   1023 ;	printf_large.c:306: fpBuffer[fpBI++]='0' + integerPart%10;
                                   1024 ;	genAssign: resultIsFar = FALSE
      000455 8F 02            [ 8] 1025 	mov	ar2,r7
      000457 0F               [ 4] 1026 	inc	r7
      000458 EA               [ 4] 1027 	mov	a,r2
      000459 24r14            [ 8] 1028 	add	a,#_output_float_fpBuffer_1_65
      00045B FA               [ 4] 1029 	mov	r2,a
      00045C E4               [ 4] 1030 	clr	a
      00045D 34s00            [ 8] 1031 	addc	a,#(_output_float_fpBuffer_1_65 >> 8)
      00045F FB               [ 4] 1032 	mov	r3,a
      000460 E4               [ 4] 1033 	clr	a
      000461 34s00            [ 8] 1034 	addc	a,#(_output_float_fpBuffer_1_65 >> 16)
      000463 FC               [ 4] 1035 	mov	r4,a
                                   1036 ;	genAssign: resultIsFar = TRUE
      000464 90s00r00r00      [12] 1037 	mov	dptr,#__modulong_PARM_2
      000468 74 0A            [ 8] 1038 	mov	a,#0x0A
      00046A F0               [ 8] 1039 	movx	@dptr,a
      00046B E4               [ 4] 1040 	clr	a
      00046C A3               [12] 1041 	inc	dptr
      00046D F0               [ 8] 1042 	movx	@dptr,a
      00046E A3               [12] 1043 	inc	dptr
      00046F F0               [ 8] 1044 	movx	@dptr,a
      000470 A3               [12] 1045 	inc	dptr
      000471 F0               [ 8] 1046 	movx	@dptr,a
      000472 C0 02            [ 8] 1047 	push	ar2
      000474 C0 03            [ 8] 1048 	push	ar3
      000476 C0 04            [ 8] 1049 	push	ar4
      000478 C0 06            [ 8] 1050 	push	ar6
      00047A C0 07            [ 8] 1051 	push	ar7
      00047C 05 86            [ 8] 1052 	inc	dps
      00047E 90s00r00r94      [12] 1053 	mov	dptr,#_output_float_integerPart_1_65
      000482 E0               [ 8] 1054 	movx	a,@dptr
      000483 F5 82            [ 8] 1055 	mov	dpl,a
      000485 A3               [12] 1056 	inc	dptr
      000486 E0               [ 8] 1057 	movx	a,@dptr
      000487 F5 83            [ 8] 1058 	mov	dph,a
      000489 A3               [12] 1059 	inc	dptr
      00048A E0               [ 8] 1060 	movx	a,@dptr
      00048B F5 93            [ 8] 1061 	mov	dpx,a
      00048D A3               [12] 1062 	inc	dptr
      00048E E0               [ 8] 1063 	movx	a,@dptr
      00048F F5 F0            [ 8] 1064 	mov	b,a
      000491 75 86 00         [12] 1065 	mov	dps,#0
      000494 12s00r00r00      [16] 1066 	lcall	__modulong
      000498 D0 07            [ 8] 1067 	pop	ar7
      00049A D0 06            [ 8] 1068 	pop	ar6
      00049C D0 04            [ 8] 1069 	pop	ar4
      00049E D0 03            [ 8] 1070 	pop	ar3
      0004A0 D0 02            [ 8] 1071 	pop	ar2
      0004A2 AD 82            [ 8] 1072 	mov	r5,dpl
      0004A4 74 30            [ 8] 1073 	mov	a,#0x30
      0004A6 2D               [ 4] 1074 	add	a,r5
      0004A7 FD               [ 4] 1075 	mov  r5,a
      0004A8 8A 82            [ 8] 1076 	mov  dpl,r2
      0004AA 8B 83            [ 8] 1077 	mov  dph,r3
      0004AC 8C 93            [ 8] 1078 	mov  dpx,r4
      0004AE F0               [ 8] 1079 	movx	@dptr,a
                                   1080 ;	printf_large.c:307: integerPart /= 10;
                                   1081 ;	genAssign: resultIsFar = TRUE
      0004AF 90s00r00r00      [12] 1082 	mov	dptr,#__divulong_PARM_2
      0004B3 74 0A            [ 8] 1083 	mov	a,#0x0A
      0004B5 F0               [ 8] 1084 	movx	@dptr,a
      0004B6 E4               [ 4] 1085 	clr	a
      0004B7 A3               [12] 1086 	inc	dptr
      0004B8 F0               [ 8] 1087 	movx	@dptr,a
      0004B9 A3               [12] 1088 	inc	dptr
      0004BA F0               [ 8] 1089 	movx	@dptr,a
      0004BB A3               [12] 1090 	inc	dptr
      0004BC F0               [ 8] 1091 	movx	@dptr,a
      0004BD C0 06            [ 8] 1092 	push	ar6
      0004BF C0 07            [ 8] 1093 	push	ar7
      0004C1 05 86            [ 8] 1094 	inc	dps
      0004C3 90s00r00r94      [12] 1095 	mov	dptr,#_output_float_integerPart_1_65
      0004C7 E0               [ 8] 1096 	movx	a,@dptr
      0004C8 F5 82            [ 8] 1097 	mov	dpl,a
      0004CA A3               [12] 1098 	inc	dptr
      0004CB E0               [ 8] 1099 	movx	a,@dptr
      0004CC F5 83            [ 8] 1100 	mov	dph,a
      0004CE A3               [12] 1101 	inc	dptr
      0004CF E0               [ 8] 1102 	movx	a,@dptr
      0004D0 F5 93            [ 8] 1103 	mov	dpx,a
      0004D2 A3               [12] 1104 	inc	dptr
      0004D3 E0               [ 8] 1105 	movx	a,@dptr
      0004D4 F5 F0            [ 8] 1106 	mov	b,a
      0004D6 75 86 00         [12] 1107 	mov	dps,#0
      0004D9 12s00r00r00      [16] 1108 	lcall	__divulong
      0004DD AA 82            [ 8] 1109 	mov	r2,dpl
      0004DF AB 83            [ 8] 1110 	mov	r3,dph
      0004E1 AC 93            [ 8] 1111 	mov	r4,dpx
      0004E3 AD F0            [ 8] 1112 	mov	r5,b
      0004E5 D0 07            [ 8] 1113 	pop	ar7
      0004E7 D0 06            [ 8] 1114 	pop	ar6
                                   1115 ;	genAssign: resultIsFar = TRUE
      0004E9 90s00r00r94      [12] 1116 	mov	dptr,#_output_float_integerPart_1_65
      0004ED EA               [ 4] 1117 	mov	a,r2
      0004EE F0               [ 8] 1118 	movx	@dptr,a
      0004EF A3               [12] 1119 	inc	dptr
      0004F0 EB               [ 4] 1120 	mov	a,r3
      0004F1 F0               [ 8] 1121 	movx	@dptr,a
      0004F2 A3               [12] 1122 	inc	dptr
      0004F3 EC               [ 4] 1123 	mov	a,r4
      0004F4 F0               [ 8] 1124 	movx	@dptr,a
      0004F5 A3               [12] 1125 	inc	dptr
      0004F6 ED               [ 4] 1126 	mov	a,r5
      0004F7 F0               [ 8] 1127 	movx	@dptr,a
      0004F8 02s00r04r3C      [16] 1128 	ljmp	00115$
      0004FC                       1129 00248$:
                                   1130 ;	genAssign: resultIsFar = TRUE
      0004FC 8F 02            [ 8] 1131 	mov	ar2,r7
                                   1132 ;	printf_large.c:309: if (!fpBI)
      0004FE EF               [ 4] 1133 	mov	a,r7
      0004FF 70 16            [12] 1134 	jnz  00119$
      000501                       1135 00357$:
                                   1136 ;	printf_large.c:312: fpBuffer[fpBI++]='0';
      000501 74 01            [ 8] 1137 	mov	a,#0x01
      000503 2F               [ 4] 1138 	add	a,r7
      000504 FA               [ 4] 1139 	mov	r2,a
      000505 EF               [ 4] 1140 	mov	a,r7
      000506 24r14            [ 8] 1141 	add	a,#_output_float_fpBuffer_1_65
      000508 F5 82            [ 8] 1142 	mov	dpl,a
      00050A E4               [ 4] 1143 	clr	a
      00050B 34s00            [ 8] 1144 	addc	a,#(_output_float_fpBuffer_1_65 >> 8)
      00050D F5 83            [ 8] 1145 	mov	dph,a
      00050F E4               [ 4] 1146 	clr	a
      000510 34s00            [ 8] 1147 	addc	a,#(_output_float_fpBuffer_1_65 >> 16)
      000512 F5 93            [ 8] 1148 	mov	dpx,a
      000514 74 30            [ 8] 1149 	mov	a,#0x30
      000516 F0               [ 8] 1150 	movx	@dptr,a
      000517                       1151 00119$:
                                   1152 ;	printf_large.c:318: for (i=reqDecimals; i>0; i--)
      000517 90s00r00r0F      [12] 1153 	mov	dptr,#_output_float_PARM_3
                                   1154 ;	genAssign: resultIsFar = TRUE
      00051B E0               [ 8] 1155 	movx	a,@dptr
      00051C FF               [ 4] 1156 	mov	r7,a
                                   1157 ;	genAssign: resultIsFar = FALSE
      00051D 8A 03            [ 8] 1158 	mov	ar3,r2
                                   1159 ;	genAssign: resultIsFar = FALSE
      00051F 8F 04            [ 8] 1160 	mov	ar4,r7
      000521                       1161 00190$:
      000521 EC               [ 4] 1162 	mov	a,r4
      000522 70 06            [12] 1163 	jnz  00189$
      000524                       1164 00358$:
                                   1165 ;	genAssign: resultIsFar = TRUE
      000524 8C 07            [ 8] 1166 	mov	ar7,r4
      000526 02s00r06r5D      [16] 1167 	ljmp	00120$
      00052A                       1168 00189$:
                                   1169 ;	printf_large.c:320: decimalPart *= 10.0;
      00052A C0 02            [ 8] 1170 	push	ar2
      00052C 90s00r00r9C      [12] 1171 	mov	dptr,#_output_float_decimalPart_1_65
                                   1172 ;	genAssign: resultIsFar = TRUE
      000530 75 86 21         [12] 1173 	mov	dps,#0x21
      000533 90s00r00r00      [12] 1174 	mov	dptr,#___fsmul_PARM_2
      000537 E0               [ 8] 1175 	movx	a,@dptr
      000538 F0               [ 8] 1176 	movx	@dptr,a
      000539 A3               [12] 1177 	inc	dptr
      00053A A3               [12] 1178 	inc	dptr
      00053B E0               [ 8] 1179 	movx	a,@dptr
      00053C F0               [ 8] 1180 	movx	@dptr,a
      00053D A3               [12] 1181 	inc	dptr
      00053E A3               [12] 1182 	inc	dptr
      00053F E0               [ 8] 1183 	movx	a,@dptr
      000540 F0               [ 8] 1184 	movx	@dptr,a
      000541 A3               [12] 1185 	inc	dptr
      000542 A3               [12] 1186 	inc	dptr
      000543 E0               [ 8] 1187 	movx	a,@dptr
      000544 F0               [ 8] 1188 	movx	@dptr,a
      000545 75 86 00         [12] 1189 	mov	dps,#0
      000548 C0 03            [ 8] 1190 	push	ar3
      00054A C0 04            [ 8] 1191 	push	ar4
      00054C C0 06            [ 8] 1192 	push	ar6
      00054E 90 00 00 00      [12] 1193 	mov  dptr,#0x0000
      000552 75 93 20         [12] 1194 	mov	dpx,#0x20
      000555 75 F0 41         [12] 1195 	mov	b,#0x41
      000558 12s00r00r00      [16] 1196 	lcall	___fsmul
      00055C AD 82            [ 8] 1197 	mov	r5,dpl
      00055E A8 83            [ 8] 1198 	mov	r0,dph
      000560 A9 93            [ 8] 1199 	mov	r1,dpx
      000562 AA F0            [ 8] 1200 	mov	r2,b
      000564 D0 06            [ 8] 1201 	pop	ar6
      000566 D0 04            [ 8] 1202 	pop	ar4
      000568 D0 03            [ 8] 1203 	pop	ar3
                                   1204 ;	genAssign: resultIsFar = TRUE
      00056A 90s00r00r9C      [12] 1205 	mov	dptr,#_output_float_decimalPart_1_65
      00056E ED               [ 4] 1206 	mov	a,r5
      00056F F0               [ 8] 1207 	movx	@dptr,a
      000570 A3               [12] 1208 	inc	dptr
      000571 E8               [ 4] 1209 	mov	a,r0
      000572 F0               [ 8] 1210 	movx	@dptr,a
      000573 A3               [12] 1211 	inc	dptr
      000574 E9               [ 4] 1212 	mov	a,r1
      000575 F0               [ 8] 1213 	movx	@dptr,a
      000576 A3               [12] 1214 	inc	dptr
      000577 EA               [ 4] 1215 	mov	a,r2
      000578 F0               [ 8] 1216 	movx	@dptr,a
                                   1217 ;	printf_large.c:322: integerPart = decimalPart;
      000579 C0 03            [ 8] 1218 	push	ar3
      00057B C0 04            [ 8] 1219 	push	ar4
      00057D C0 06            [ 8] 1220 	push	ar6
      00057F 05 86            [ 8] 1221 	inc	dps
      000581 90s00r00r9C      [12] 1222 	mov	dptr,#_output_float_decimalPart_1_65
      000585 E0               [ 8] 1223 	movx	a,@dptr
      000586 F5 82            [ 8] 1224 	mov	dpl,a
      000588 A3               [12] 1225 	inc	dptr
      000589 E0               [ 8] 1226 	movx	a,@dptr
      00058A F5 83            [ 8] 1227 	mov	dph,a
      00058C A3               [12] 1228 	inc	dptr
      00058D E0               [ 8] 1229 	movx	a,@dptr
      00058E F5 93            [ 8] 1230 	mov	dpx,a
      000590 A3               [12] 1231 	inc	dptr
      000591 E0               [ 8] 1232 	movx	a,@dptr
      000592 F5 F0            [ 8] 1233 	mov	b,a
      000594 75 86 00         [12] 1234 	mov	dps,#0
      000597 12s00r00r00      [16] 1235 	lcall	___fs2ulong
      00059B AA 82            [ 8] 1236 	mov	r2,dpl
      00059D AD 83            [ 8] 1237 	mov	r5,dph
      00059F A8 93            [ 8] 1238 	mov	r0,dpx
      0005A1 A9 F0            [ 8] 1239 	mov	r1,b
      0005A3 D0 06            [ 8] 1240 	pop	ar6
      0005A5 D0 04            [ 8] 1241 	pop	ar4
      0005A7 D0 03            [ 8] 1242 	pop	ar3
                                   1243 ;	genAssign: resultIsFar = TRUE
      0005A9 90s00r00r94      [12] 1244 	mov	dptr,#_output_float_integerPart_1_65
      0005AD EA               [ 4] 1245 	mov	a,r2
      0005AE F0               [ 8] 1246 	movx	@dptr,a
      0005AF A3               [12] 1247 	inc	dptr
      0005B0 ED               [ 4] 1248 	mov	a,r5
      0005B1 F0               [ 8] 1249 	movx	@dptr,a
      0005B2 A3               [12] 1250 	inc	dptr
      0005B3 E8               [ 4] 1251 	mov	a,r0
      0005B4 F0               [ 8] 1252 	movx	@dptr,a
      0005B5 A3               [12] 1253 	inc	dptr
      0005B6 E9               [ 4] 1254 	mov	a,r1
      0005B7 F0               [ 8] 1255 	movx	@dptr,a
                                   1256 ;	printf_large.c:323: fpBuffer[fpBD++] = '0' + integerPart;
                                   1257 ;	genAssign: resultIsFar = FALSE
      0005B8 8B 02            [ 8] 1258 	mov	ar2,r3
      0005BA 0B               [ 4] 1259 	inc	r3
      0005BB EA               [ 4] 1260 	mov	a,r2
      0005BC 24r14            [ 8] 1261 	add	a,#_output_float_fpBuffer_1_65
      0005BE F5 84            [ 8] 1262 	mov	dpl1,a
      0005C0 E4               [ 4] 1263 	clr	a
      0005C1 34s00            [ 8] 1264 	addc	a,#(_output_float_fpBuffer_1_65 >> 8)
      0005C3 F5 85            [ 8] 1265 	mov	dph1,a
      0005C5 E4               [ 4] 1266 	clr	a
      0005C6 34s00            [ 8] 1267 	addc	a,#(_output_float_fpBuffer_1_65 >> 16)
      0005C8 F5 95            [ 8] 1268 	mov	dpx1,a
      0005CA 90s00r00r94      [12] 1269 	mov	dptr,#_output_float_integerPart_1_65
      0005CE E0               [ 8] 1270 	movx	a,@dptr
      0005CF 24 30            [ 8] 1271 	add  a,#0x30
      0005D1 F9               [ 4] 1272 	mov  r1,a
      0005D2 05 86            [ 8] 1273 	inc	dps
      0005D4 F0               [ 8] 1274 	movx	@dptr,a
      0005D5 75 86 00         [12] 1275 	mov	dps,#0
                                   1276 ;	printf_large.c:324: decimalPart -= integerPart;
      0005D8 C0 03            [ 8] 1277 	push	ar3
      0005DA C0 04            [ 8] 1278 	push	ar4
      0005DC C0 06            [ 8] 1279 	push	ar6
      0005DE 05 86            [ 8] 1280 	inc	dps
      0005E0 90s00r00r94      [12] 1281 	mov	dptr,#_output_float_integerPart_1_65
      0005E4 E0               [ 8] 1282 	movx	a,@dptr
      0005E5 F5 82            [ 8] 1283 	mov	dpl,a
      0005E7 A3               [12] 1284 	inc	dptr
      0005E8 E0               [ 8] 1285 	movx	a,@dptr
      0005E9 F5 83            [ 8] 1286 	mov	dph,a
      0005EB A3               [12] 1287 	inc	dptr
      0005EC E0               [ 8] 1288 	movx	a,@dptr
      0005ED F5 93            [ 8] 1289 	mov	dpx,a
      0005EF A3               [12] 1290 	inc	dptr
      0005F0 E0               [ 8] 1291 	movx	a,@dptr
      0005F1 F5 F0            [ 8] 1292 	mov	b,a
      0005F3 75 86 00         [12] 1293 	mov	dps,#0
      0005F6 12s00r00r00      [16] 1294 	lcall	___ulong2fs
      0005FA AA 82            [ 8] 1295 	mov	r2,dpl
      0005FC AD 83            [ 8] 1296 	mov	r5,dph
      0005FE A8 93            [ 8] 1297 	mov	r0,dpx
      000600 A9 F0            [ 8] 1298 	mov	r1,b
      000602 D0 06            [ 8] 1299 	pop	ar6
      000604 D0 04            [ 8] 1300 	pop	ar4
      000606 D0 03            [ 8] 1301 	pop	ar3
                                   1302 ;	genAssign: resultIsFar = TRUE
      000608 90s00r00r00      [12] 1303 	mov	dptr,#___fssub_PARM_2
      00060C EA               [ 4] 1304 	mov	a,r2
      00060D F0               [ 8] 1305 	movx	@dptr,a
      00060E A3               [12] 1306 	inc	dptr
      00060F ED               [ 4] 1307 	mov	a,r5
      000610 F0               [ 8] 1308 	movx	@dptr,a
      000611 A3               [12] 1309 	inc	dptr
      000612 E8               [ 4] 1310 	mov	a,r0
      000613 F0               [ 8] 1311 	movx	@dptr,a
      000614 A3               [12] 1312 	inc	dptr
      000615 E9               [ 4] 1313 	mov	a,r1
      000616 F0               [ 8] 1314 	movx	@dptr,a
      000617 C0 03            [ 8] 1315 	push	ar3
      000619 C0 04            [ 8] 1316 	push	ar4
      00061B C0 06            [ 8] 1317 	push	ar6
      00061D 05 86            [ 8] 1318 	inc	dps
      00061F 90s00r00r9C      [12] 1319 	mov	dptr,#_output_float_decimalPart_1_65
      000623 E0               [ 8] 1320 	movx	a,@dptr
      000624 F5 82            [ 8] 1321 	mov	dpl,a
      000626 A3               [12] 1322 	inc	dptr
      000627 E0               [ 8] 1323 	movx	a,@dptr
      000628 F5 83            [ 8] 1324 	mov	dph,a
      00062A A3               [12] 1325 	inc	dptr
      00062B E0               [ 8] 1326 	movx	a,@dptr
      00062C F5 93            [ 8] 1327 	mov	dpx,a
      00062E A3               [12] 1328 	inc	dptr
      00062F E0               [ 8] 1329 	movx	a,@dptr
      000630 F5 F0            [ 8] 1330 	mov	b,a
      000632 75 86 00         [12] 1331 	mov	dps,#0
      000635 12s00r00r00      [16] 1332 	lcall	___fssub
      000639 AA 82            [ 8] 1333 	mov	r2,dpl
      00063B AD 83            [ 8] 1334 	mov	r5,dph
      00063D A8 93            [ 8] 1335 	mov	r0,dpx
      00063F A9 F0            [ 8] 1336 	mov	r1,b
      000641 D0 06            [ 8] 1337 	pop	ar6
      000643 D0 04            [ 8] 1338 	pop	ar4
      000645 D0 03            [ 8] 1339 	pop	ar3
                                   1340 ;	genAssign: resultIsFar = TRUE
      000647 90s00r00r9C      [12] 1341 	mov	dptr,#_output_float_decimalPart_1_65
      00064B EA               [ 4] 1342 	mov	a,r2
      00064C F0               [ 8] 1343 	movx	@dptr,a
      00064D A3               [12] 1344 	inc	dptr
      00064E ED               [ 4] 1345 	mov	a,r5
      00064F F0               [ 8] 1346 	movx	@dptr,a
      000650 A3               [12] 1347 	inc	dptr
      000651 E8               [ 4] 1348 	mov	a,r0
      000652 F0               [ 8] 1349 	movx	@dptr,a
      000653 A3               [12] 1350 	inc	dptr
      000654 E9               [ 4] 1351 	mov	a,r1
      000655 F0               [ 8] 1352 	movx	@dptr,a
                                   1353 ;	printf_large.c:318: for (i=reqDecimals; i>0; i--)
      000656 1C               [ 4] 1354 	dec	r4
      000657 D0 02            [ 8] 1355 	pop	ar2
      000659 02s00r05r21      [16] 1356 	ljmp	00190$
      00065D                       1357 00120$:
                                   1358 ;	printf_large.c:327: minWidth=fpBI; // we need at least these
                                   1359 ;	genAssign: resultIsFar = TRUE
      00065D 8A 03            [ 8] 1360 	mov	ar3,r2
                                   1361 ;	printf_large.c:328: minWidth+=reqDecimals?reqDecimals+1:0; // maybe these
      00065F 90s00r00r0F      [12] 1362 	mov	dptr,#_output_float_PARM_3
      000663 E0               [ 8] 1363 	movx	a,@dptr
      000664 60 0A            [12] 1364 	jz  00198$
      000666                       1365 00359$:
      000666 90s00r00r0F      [12] 1366 	mov	dptr,#_output_float_PARM_3
      00066A E0               [ 8] 1367 	movx	a,@dptr
      00066B 24 01            [ 8] 1368 	add	a,#0x01
      00066D FC               [ 4] 1369 	mov	r4,a
      00066E 80 02            [12] 1370 	sjmp 00199$
      000670                       1371 00198$:
                                   1372 ;	genAssign: resultIsFar = FALSE
      000670 7C 00            [ 8] 1373 	mov	r4,#0x00
      000672                       1374 00199$:
      000672 8B 05            [ 8] 1375 	mov	ar5,r3
      000674 EC               [ 4] 1376 	mov	a,r4
      000675 2D               [ 4] 1377 	add	a,r5
      000676 FB               [ 4] 1378 	mov	r3,a
                                   1379 ;	printf_large.c:329: if (negative || sign || space)
      000677 20*05 06         [12] 1380 	jb   _output_float_negative_1_65,00121$
      00067A                       1381 00360$:
      00067A 20*03 03         [12] 1382 	jb   _output_float_PARM_6,00121$
      00067D                       1383 00361$:
      00067D 30*04 01         [12] 1384 	jnb  _output_float_PARM_7,00122$
      000680                       1385 00362$:
      000680                       1386 00121$:
                                   1387 ;	printf_large.c:330: minWidth++; // and maybe even this :)
      000680 0B               [ 4] 1388 	inc	r3
      000681                       1389 00122$:
                                   1390 ;	printf_large.c:332: if (!left && reqWidth>i)
      000681 30*01 04         [12] 1391 	jnb	_output_float_PARM_4,00363$
      000684 02s00r07r86      [16] 1392 	ljmp	00159$
      000688                       1393 00363$:
      000688 90s00r00r0E      [12] 1394 	mov	dptr,#_output_float_PARM_2
      00068C C3               [ 4] 1395 	clr	c
      00068D EF               [ 4] 1396 	mov	a,r7
      00068E C5 F0            [ 8] 1397 	xch	a, b
      000690 E0               [ 8] 1398 	movx	a,@dptr
      000691 C5 F0            [ 8] 1399 	xch	a, b
      000693 95 F0            [ 8] 1400 	subb	a,b
      000695 40 04            [12] 1401 	jc	00364$
      000697 02s00r07r86      [16] 1402 	ljmp	00159$
      00069B                       1403 00364$:
                                   1404 ;	printf_large.c:334: if (zero)
      00069B 30*02 71         [12] 1405 	jnb  _output_float_PARM_5,00228$
      00069E                       1406 00365$:
                                   1407 ;	printf_large.c:336: if (negative)
      00069E 30*05 15         [12] 1408 	jnb  _output_float_negative_1_65,00131$
      0006A1                       1409 00366$:
                                   1410 ;	printf_large.c:338: OUTPUT_CHAR('-', p);
      0006A1 C0 02            [ 8] 1411 	push	ar2
      0006A3 C0 03            [ 8] 1412 	push	ar3
      0006A5 C0 06            [ 8] 1413 	push	ar6
      0006A7 75 82 2D         [12] 1414 	mov	dpl,#0x2D
      0006AA 12s00r00r00      [16] 1415 	lcall	__output_char
      0006AE D0 06            [ 8] 1416 	pop	ar6
      0006B0 D0 03            [ 8] 1417 	pop	ar3
      0006B2 D0 02            [ 8] 1418 	pop	ar2
      0006B4 80 2E            [12] 1419 	sjmp 00226$
      0006B6                       1420 00131$:
                                   1421 ;	printf_large.c:340: else if (sign)
      0006B6 30*03 15         [12] 1422 	jnb  _output_float_PARM_6,00128$
      0006B9                       1423 00367$:
                                   1424 ;	printf_large.c:342: OUTPUT_CHAR('+', p);
      0006B9 C0 02            [ 8] 1425 	push	ar2
      0006BB C0 03            [ 8] 1426 	push	ar3
      0006BD C0 06            [ 8] 1427 	push	ar6
      0006BF 75 82 2B         [12] 1428 	mov	dpl,#0x2B
      0006C2 12s00r00r00      [16] 1429 	lcall	__output_char
      0006C6 D0 06            [ 8] 1430 	pop	ar6
      0006C8 D0 03            [ 8] 1431 	pop	ar3
      0006CA D0 02            [ 8] 1432 	pop	ar2
      0006CC 80 16            [12] 1433 	sjmp 00226$
      0006CE                       1434 00128$:
                                   1435 ;	printf_large.c:344: else if (space)
      0006CE 30*04 13         [12] 1436 	jnb  _output_float_PARM_7,00226$
      0006D1                       1437 00368$:
                                   1438 ;	printf_large.c:346: OUTPUT_CHAR(' ', p);
      0006D1 C0 02            [ 8] 1439 	push	ar2
      0006D3 C0 03            [ 8] 1440 	push	ar3
      0006D5 C0 06            [ 8] 1441 	push	ar6
      0006D7 75 82 20         [12] 1442 	mov	dpl,#0x20
      0006DA 12s00r00r00      [16] 1443 	lcall	__output_char
      0006DE D0 06            [ 8] 1444 	pop	ar6
      0006E0 D0 03            [ 8] 1445 	pop	ar3
      0006E2 D0 02            [ 8] 1446 	pop	ar2
                                   1447 ;	printf_large.c:348: while (reqWidth-->minWidth)
      0006E4                       1448 00226$:
      0006E4 90s00r00r0E      [12] 1449 	mov	dptr,#_output_float_PARM_2
                                   1450 ;	genAssign: resultIsFar = FALSE
      0006E8 E0               [ 8] 1451 	movx	a,@dptr
      0006E9 FC               [ 4] 1452 	mov	r4,a
      0006EA                       1453 00133$:
                                   1454 ;	genAssign: resultIsFar = FALSE
      0006EA 8C 05            [ 8] 1455 	mov	ar5,r4
      0006EC 1C               [ 4] 1456 	dec	r4
      0006ED C3               [ 4] 1457 	clr	c
      0006EE EB               [ 4] 1458 	mov	a,r3
      0006EF 9D               [ 4] 1459 	subb	a,r5
      0006F0 40 04            [12] 1460 	jc	00369$
      0006F2 02s00r07rCE      [16] 1461 	ljmp	00250$
      0006F6                       1462 00369$:
                                   1463 ;	printf_large.c:350: OUTPUT_CHAR('0', p);
      0006F6 C0 02            [ 8] 1464 	push	ar2
      0006F8 C0 03            [ 8] 1465 	push	ar3
      0006FA C0 04            [ 8] 1466 	push	ar4
      0006FC C0 06            [ 8] 1467 	push	ar6
      0006FE 75 82 30         [12] 1468 	mov	dpl,#0x30
      000701 12s00r00r00      [16] 1469 	lcall	__output_char
      000705 D0 06            [ 8] 1470 	pop	ar6
      000707 D0 04            [ 8] 1471 	pop	ar4
      000709 D0 03            [ 8] 1472 	pop	ar3
      00070B D0 02            [ 8] 1473 	pop	ar2
                                   1474 ;	printf_large.c:355: while (reqWidth-->minWidth)
      00070D 80 DB            [12] 1475 	sjmp 00133$
      00070F                       1476 00228$:
      00070F 90s00r00r0E      [12] 1477 	mov	dptr,#_output_float_PARM_2
                                   1478 ;	genAssign: resultIsFar = FALSE
      000713 E0               [ 8] 1479 	movx	a,@dptr
      000714 FD               [ 4] 1480 	mov	r5,a
      000715                       1481 00136$:
                                   1482 ;	genAssign: resultIsFar = FALSE
      000715 8D 07            [ 8] 1483 	mov	ar7,r5
      000717 1D               [ 4] 1484 	dec	r5
      000718 C3               [ 4] 1485 	clr	c
      000719 EB               [ 4] 1486 	mov	a,r3
      00071A 9F               [ 4] 1487 	subb	a,r7
      00071B 50 19            [12] 1488 	jnc  00251$
      00071D                       1489 00370$:
                                   1490 ;	printf_large.c:357: OUTPUT_CHAR(' ', p);
      00071D C0 02            [ 8] 1491 	push	ar2
      00071F C0 03            [ 8] 1492 	push	ar3
      000721 C0 05            [ 8] 1493 	push	ar5
      000723 C0 06            [ 8] 1494 	push	ar6
      000725 75 82 20         [12] 1495 	mov	dpl,#0x20
      000728 12s00r00r00      [16] 1496 	lcall	__output_char
      00072C D0 06            [ 8] 1497 	pop	ar6
      00072E D0 05            [ 8] 1498 	pop	ar5
      000730 D0 03            [ 8] 1499 	pop	ar3
      000732 D0 02            [ 8] 1500 	pop	ar2
      000734 80 DF            [12] 1501 	sjmp 00136$
      000736                       1502 00251$:
                                   1503 ;	genAssign: resultIsFar = TRUE
      000736 90s00r00r0E      [12] 1504 	mov	dptr,#_output_float_PARM_2
      00073A ED               [ 4] 1505 	mov	a,r5
      00073B F0               [ 8] 1506 	movx	@dptr,a
                                   1507 ;	printf_large.c:359: if (negative)
      00073C 30*05 17         [12] 1508 	jnb  _output_float_negative_1_65,00145$
      00073F                       1509 00371$:
                                   1510 ;	printf_large.c:361: OUTPUT_CHAR('-', p);
      00073F C0 02            [ 8] 1511 	push	ar2
      000741 C0 03            [ 8] 1512 	push	ar3
      000743 C0 06            [ 8] 1513 	push	ar6
      000745 75 82 2D         [12] 1514 	mov	dpl,#0x2D
      000748 12s00r00r00      [16] 1515 	lcall	__output_char
      00074C D0 06            [ 8] 1516 	pop	ar6
      00074E D0 03            [ 8] 1517 	pop	ar3
      000750 D0 02            [ 8] 1518 	pop	ar2
      000752 02s00r07rD4      [16] 1519 	ljmp	00160$
      000756                       1520 00145$:
                                   1521 ;	printf_large.c:363: else if (sign)
      000756 30*03 15         [12] 1522 	jnb  _output_float_PARM_6,00142$
      000759                       1523 00372$:
                                   1524 ;	printf_large.c:365: OUTPUT_CHAR('+', p);
      000759 C0 02            [ 8] 1525 	push	ar2
      00075B C0 03            [ 8] 1526 	push	ar3
      00075D C0 06            [ 8] 1527 	push	ar6
      00075F 75 82 2B         [12] 1528 	mov	dpl,#0x2B
      000762 12s00r00r00      [16] 1529 	lcall	__output_char
      000766 D0 06            [ 8] 1530 	pop	ar6
      000768 D0 03            [ 8] 1531 	pop	ar3
      00076A D0 02            [ 8] 1532 	pop	ar2
      00076C 80 66            [12] 1533 	sjmp 00160$
      00076E                       1534 00142$:
                                   1535 ;	printf_large.c:367: else if (space)
      00076E 30*04 63         [12] 1536 	jnb  _output_float_PARM_7,00160$
      000771                       1537 00373$:
                                   1538 ;	printf_large.c:369: OUTPUT_CHAR(' ', p);
      000771 C0 02            [ 8] 1539 	push	ar2
      000773 C0 03            [ 8] 1540 	push	ar3
      000775 C0 06            [ 8] 1541 	push	ar6
      000777 75 82 20         [12] 1542 	mov	dpl,#0x20
      00077A 12s00r00r00      [16] 1543 	lcall	__output_char
      00077E D0 06            [ 8] 1544 	pop	ar6
      000780 D0 03            [ 8] 1545 	pop	ar3
      000782 D0 02            [ 8] 1546 	pop	ar2
      000784 80 4E            [12] 1547 	sjmp 00160$
      000786                       1548 00159$:
                                   1549 ;	printf_large.c:375: if (negative)
      000786 30*05 15         [12] 1550 	jnb  _output_float_negative_1_65,00156$
      000789                       1551 00374$:
                                   1552 ;	printf_large.c:377: OUTPUT_CHAR('-', p);
      000789 C0 02            [ 8] 1553 	push	ar2
      00078B C0 03            [ 8] 1554 	push	ar3
      00078D C0 06            [ 8] 1555 	push	ar6
      00078F 75 82 2D         [12] 1556 	mov	dpl,#0x2D
      000792 12s00r00r00      [16] 1557 	lcall	__output_char
      000796 D0 06            [ 8] 1558 	pop	ar6
      000798 D0 03            [ 8] 1559 	pop	ar3
      00079A D0 02            [ 8] 1560 	pop	ar2
      00079C 80 36            [12] 1561 	sjmp 00160$
      00079E                       1562 00156$:
                                   1563 ;	printf_large.c:379: else if (sign)
      00079E 30*03 15         [12] 1564 	jnb  _output_float_PARM_6,00153$
      0007A1                       1565 00375$:
                                   1566 ;	printf_large.c:381: OUTPUT_CHAR('+', p);
      0007A1 C0 02            [ 8] 1567 	push	ar2
      0007A3 C0 03            [ 8] 1568 	push	ar3
      0007A5 C0 06            [ 8] 1569 	push	ar6
      0007A7 75 82 2B         [12] 1570 	mov	dpl,#0x2B
      0007AA 12s00r00r00      [16] 1571 	lcall	__output_char
      0007AE D0 06            [ 8] 1572 	pop	ar6
      0007B0 D0 03            [ 8] 1573 	pop	ar3
      0007B2 D0 02            [ 8] 1574 	pop	ar2
      0007B4 80 1E            [12] 1575 	sjmp 00160$
      0007B6                       1576 00153$:
                                   1577 ;	printf_large.c:383: else if (space)
      0007B6 30*04 1B         [12] 1578 	jnb  _output_float_PARM_7,00160$
      0007B9                       1579 00376$:
                                   1580 ;	printf_large.c:385: OUTPUT_CHAR(' ', p);
      0007B9 C0 02            [ 8] 1581 	push	ar2
      0007BB C0 03            [ 8] 1582 	push	ar3
      0007BD C0 06            [ 8] 1583 	push	ar6
      0007BF 75 82 20         [12] 1584 	mov	dpl,#0x20
      0007C2 12s00r00r00      [16] 1585 	lcall	__output_char
      0007C6 D0 06            [ 8] 1586 	pop	ar6
      0007C8 D0 03            [ 8] 1587 	pop	ar3
      0007CA D0 02            [ 8] 1588 	pop	ar2
                                   1589 ;	printf_large.c:428: return;
                                   1590 ;	printf_large.c:385: OUTPUT_CHAR(' ', p);
      0007CC 80 06            [12] 1591 	sjmp 00160$
      0007CE                       1592 00250$:
                                   1593 ;	genAssign: resultIsFar = TRUE
      0007CE 90s00r00r0E      [12] 1594 	mov	dptr,#_output_float_PARM_2
      0007D2 EC               [ 4] 1595 	mov	a,r4
      0007D3 F0               [ 8] 1596 	movx	@dptr,a
      0007D4                       1597 00160$:
                                   1598 ;	printf_large.c:390: i=fpBI-1;
      0007D4 EA               [ 4] 1599 	mov	a,r2
      0007D5 14               [ 4] 1600 	dec	a
      0007D6 FC               [ 4] 1601 	mov	r4,a
                                   1602 ;	printf_large.c:391: do {
      0007D7                       1603 00162$:
                                   1604 ;	printf_large.c:392: OUTPUT_CHAR (fpBuffer[i], p);
      0007D7 EC               [ 4] 1605 	mov	a,r4
      0007D8 24r14            [ 8] 1606 	add	a,#_output_float_fpBuffer_1_65
      0007DA F5 82            [ 8] 1607 	mov	dpl,a
      0007DC E4               [ 4] 1608 	clr	a
      0007DD 34s00            [ 8] 1609 	addc	a,#(_output_float_fpBuffer_1_65 >> 8)
      0007DF F5 83            [ 8] 1610 	mov	dph,a
      0007E1 E4               [ 4] 1611 	clr	a
      0007E2 34s00            [ 8] 1612 	addc	a,#(_output_float_fpBuffer_1_65 >> 16)
      0007E4 F5 93            [ 8] 1613 	mov	dpx,a
      0007E6 E0               [ 8] 1614 	movx	a,@dptr
      0007E7 FD               [ 4] 1615 	mov	r5,a
      0007E8 C0 02            [ 8] 1616 	push	ar2
      0007EA C0 03            [ 8] 1617 	push	ar3
      0007EC C0 04            [ 8] 1618 	push	ar4
      0007EE C0 06            [ 8] 1619 	push	ar6
      0007F0 8D 82            [ 8] 1620 	mov	dpl,r5
      0007F2 12s00r00r00      [16] 1621 	lcall	__output_char
      0007F6 D0 06            [ 8] 1622 	pop	ar6
      0007F8 D0 04            [ 8] 1623 	pop	ar4
      0007FA D0 03            [ 8] 1624 	pop	ar3
      0007FC D0 02            [ 8] 1625 	pop	ar2
                                   1626 ;	printf_large.c:393: } while (i--);
                                   1627 ;	genAssign: resultIsFar = FALSE
      0007FE 8C 05            [ 8] 1628 	mov	ar5,r4
      000800 1C               [ 4] 1629 	dec	r4
      000801 ED               [ 4] 1630 	mov	a,r5
      000802 70 D3            [12] 1631 	jnz  00162$
      000804                       1632 00377$:
                                   1633 ;	printf_large.c:396: if (reqDecimals)
      000804 90s00r00r0F      [12] 1634 	mov	dptr,#_output_float_PARM_3
      000808 E0               [ 8] 1635 	movx	a,@dptr
      000809 60 4B            [12] 1636 	jz  00169$
      00080B                       1637 00378$:
                                   1638 ;	printf_large.c:398: OUTPUT_CHAR ('.', p);
      00080B C0 02            [ 8] 1639 	push	ar2
      00080D C0 03            [ 8] 1640 	push	ar3
      00080F C0 06            [ 8] 1641 	push	ar6
      000811 75 82 2E         [12] 1642 	mov	dpl,#0x2E
      000814 12s00r00r00      [16] 1643 	lcall	__output_char
      000818 D0 06            [ 8] 1644 	pop	ar6
      00081A D0 03            [ 8] 1645 	pop	ar3
      00081C D0 02            [ 8] 1646 	pop	ar2
                                   1647 ;	printf_large.c:400: while (reqDecimals--)
                                   1648 ;	genAssign: resultIsFar = FALSE
      00081E 90s00r00r0F      [12] 1649 	mov	dptr,#_output_float_PARM_3
                                   1650 ;	genAssign: resultIsFar = FALSE
      000822 E0               [ 8] 1651 	movx	a,@dptr
      000823 FC               [ 4] 1652 	mov	r4,a
      000824                       1653 00165$:
                                   1654 ;	genAssign: resultIsFar = FALSE
      000824 8C 05            [ 8] 1655 	mov	ar5,r4
      000826 1C               [ 4] 1656 	dec	r4
      000827 ED               [ 4] 1657 	mov	a,r5
      000828 60 2C            [12] 1658 	jz  00169$
      00082A                       1659 00379$:
                                   1660 ;	printf_large.c:402: OUTPUT_CHAR (fpBuffer[i++], p);
                                   1661 ;	genAssign: resultIsFar = FALSE
      00082A 8A 05            [ 8] 1662 	mov	ar5,r2
      00082C 0A               [ 4] 1663 	inc	r2
      00082D ED               [ 4] 1664 	mov	a,r5
      00082E 24r14            [ 8] 1665 	add	a,#_output_float_fpBuffer_1_65
      000830 F5 82            [ 8] 1666 	mov	dpl,a
      000832 E4               [ 4] 1667 	clr	a
      000833 34s00            [ 8] 1668 	addc	a,#(_output_float_fpBuffer_1_65 >> 8)
      000835 F5 83            [ 8] 1669 	mov	dph,a
      000837 E4               [ 4] 1670 	clr	a
      000838 34s00            [ 8] 1671 	addc	a,#(_output_float_fpBuffer_1_65 >> 16)
      00083A F5 93            [ 8] 1672 	mov	dpx,a
      00083C E0               [ 8] 1673 	movx	a,@dptr
      00083D FD               [ 4] 1674 	mov	r5,a
      00083E C0 02            [ 8] 1675 	push	ar2
      000840 C0 03            [ 8] 1676 	push	ar3
      000842 C0 04            [ 8] 1677 	push	ar4
      000844 C0 06            [ 8] 1678 	push	ar6
      000846 8D 82            [ 8] 1679 	mov	dpl,r5
      000848 12s00r00r00      [16] 1680 	lcall	__output_char
      00084C D0 06            [ 8] 1681 	pop	ar6
      00084E D0 04            [ 8] 1682 	pop	ar4
      000850 D0 03            [ 8] 1683 	pop	ar3
      000852 D0 02            [ 8] 1684 	pop	ar2
      000854 80 CE            [12] 1685 	sjmp 00165$
      000856                       1686 00169$:
                                   1687 ;	printf_large.c:406: if (left && reqWidth>minWidth)
      000856 30*01 32         [12] 1688 	jnb  _output_float_PARM_4,00174$
      000859                       1689 00380$:
      000859 90s00r00r0E      [12] 1690 	mov	dptr,#_output_float_PARM_2
      00085D C3               [ 4] 1691 	clr	c
      00085E EB               [ 4] 1692 	mov	a,r3
      00085F C5 F0            [ 8] 1693 	xch	a, b
      000861 E0               [ 8] 1694 	movx	a,@dptr
      000862 C5 F0            [ 8] 1695 	xch	a, b
      000864 95 F0            [ 8] 1696 	subb	a,b
      000866 50 23            [12] 1697 	jnc  00174$
      000868                       1698 00381$:
                                   1699 ;	printf_large.c:408: while (reqWidth-->minWidth)
      000868 90s00r00r0E      [12] 1700 	mov	dptr,#_output_float_PARM_2
                                   1701 ;	genAssign: resultIsFar = FALSE
      00086C E0               [ 8] 1702 	movx	a,@dptr
      00086D FA               [ 4] 1703 	mov	r2,a
      00086E                       1704 00170$:
                                   1705 ;	genAssign: resultIsFar = FALSE
      00086E 8A 04            [ 8] 1706 	mov	ar4,r2
      000870 1A               [ 4] 1707 	dec	r2
      000871 C3               [ 4] 1708 	clr	c
      000872 EB               [ 4] 1709 	mov	a,r3
      000873 9C               [ 4] 1710 	subb	a,r4
      000874 50 15            [12] 1711 	jnc  00174$
      000876                       1712 00382$:
                                   1713 ;	printf_large.c:410: OUTPUT_CHAR(' ', p);
      000876 C0 02            [ 8] 1714 	push	ar2
      000878 C0 03            [ 8] 1715 	push	ar3
      00087A C0 06            [ 8] 1716 	push	ar6
      00087C 75 82 20         [12] 1717 	mov	dpl,#0x20
      00087F 12s00r00r00      [16] 1718 	lcall	__output_char
      000883 D0 06            [ 8] 1719 	pop	ar6
      000885 D0 03            [ 8] 1720 	pop	ar3
      000887 D0 02            [ 8] 1721 	pop	ar2
      000889 80 E3            [12] 1722 	sjmp 00170$
      00088B                       1723 00174$:
                                   1724 ;	printf_large.c:414: if (exp != -128)
      00088B BE 80 02         [16] 1725 	cjne	r6,#0x80,00383$
      00088E 80 5E            [12] 1726 	sjmp 00179$
      000890                       1727 00383$:
                                   1728 ;	printf_large.c:416: OUTPUT_CHAR ('e', p);
      000890 C0 06            [ 8] 1729 	push	ar6
      000892 75 82 65         [12] 1730 	mov	dpl,#0x65
      000895 12s00r00r00      [16] 1731 	lcall	__output_char
      000899 D0 06            [ 8] 1732 	pop	ar6
                                   1733 ;	printf_large.c:417: if (exp<0)
      00089B EE               [ 4] 1734 	mov	a,r6
      00089C 30 E7 0F         [12] 1735 	jnb  acc[7],00177$
      00089F                       1736 00384$:
                                   1737 ;	printf_large.c:419: OUTPUT_CHAR ('-', p);
      00089F C0 06            [ 8] 1738 	push	ar6
      0008A1 75 82 2D         [12] 1739 	mov	dpl,#0x2D
      0008A4 12s00r00r00      [16] 1740 	lcall	__output_char
      0008A8 D0 06            [ 8] 1741 	pop	ar6
                                   1742 ;	printf_large.c:420: exp = -exp;
      0008AA C3               [ 4] 1743 	clr	c
      0008AB E4               [ 4] 1744 	clr	a
      0008AC 9E               [ 4] 1745 	subb	a,r6
      0008AD FE               [ 4] 1746 	mov	r6,a
      0008AE                       1747 00177$:
                                   1748 ;	printf_large.c:422: OUTPUT_CHAR ('0'+exp/10, p);
      0008AE C2 D5            [ 8] 1749 	clr	F0
      0008B0 75 F0 0A         [12] 1750 	mov	b,#0x0a
      0008B3 EE               [ 4] 1751 	mov	a,r6
      0008B4 30 E7 04         [12] 1752 	jnb	acc[7],00385$
      0008B7 B2 D5            [ 8] 1753 	cpl	F0
      0008B9 F4               [ 4] 1754 	cpl	a
      0008BA 04               [ 4] 1755 	inc	a
      0008BB                       1756 00385$:
      0008BB 00               [ 4] 1757 	nop	; workaround for DS80C390 div bug.
      0008BC 84               [20] 1758 	div	ab
      0008BD 30 D5 02         [12] 1759 	jnb	F0,00386$
      0008C0 F4               [ 4] 1760 	cpl	a
      0008C1 04               [ 4] 1761 	inc	a
      0008C2                       1762 00386$:
      0008C2 24 30            [ 8] 1763 	add  a,#0x30
      0008C4 FA               [ 4] 1764 	mov  r2,a
      0008C5 C0 06            [ 8] 1765 	push	ar6
      0008C7 8A 82            [ 8] 1766 	mov	dpl,r2
      0008C9 12s00r00r00      [16] 1767 	lcall	__output_char
      0008CD D0 06            [ 8] 1768 	pop	ar6
                                   1769 ;	printf_large.c:423: OUTPUT_CHAR ('0'+exp%10, p);
      0008CF 75 F0 0A         [12] 1770 	mov	b,#0x0a
      0008D2 EE               [ 4] 1771 	mov	a,r6
      0008D3 C2 D5            [ 8] 1772 	clr	F0
      0008D5 30 E7 04         [12] 1773 	jnb	acc[7],00387$
      0008D8 D2 D5            [ 8] 1774 	setb	F0
      0008DA F4               [ 4] 1775 	cpl	a
      0008DB 04               [ 4] 1776 	inc	a
      0008DC                       1777 00387$:
      0008DC 00               [ 4] 1778 	nop	; workaround for DS80C390 div bug.
      0008DD 84               [20] 1779 	div	ab
      0008DE E5 F0            [ 8] 1780 	mov	a,b
      0008E0 30 D5 02         [12] 1781 	jnb	F0,00388$
      0008E3 F4               [ 4] 1782 	cpl	a
      0008E4 04               [ 4] 1783 	inc	a
      0008E5                       1784 00388$:
      0008E5 24 30            [ 8] 1785 	add  a,#0x30
      0008E7 FE               [ 4] 1786 	mov  r6,a
      0008E8 8E 82            [ 8] 1787 	mov	dpl,r6
      0008EA 12s00r00r00      [16] 1788 	lcall	__output_char
      0008EE                       1789 00179$:
                                   1790 ;	printf_large.c:428: return;
      0008EE                       1791 00192$:
      0008EE 22               [16] 1792 	ret
                                   1793 ;------------------------------------------------------------
                                   1794 ;Allocation info for local variables in function '_print_format'
                                   1795 ;------------------------------------------------------------
                                   1796 ;pvoid                     Allocated with name '__print_format_PARM_2'
                                   1797 ;format                    Allocated with name '__print_format_PARM_3'
                                   1798 ;ap                        Allocated with name '__print_format_PARM_4'
                                   1799 ;pfn                       Allocated to registers 
                                   1800 ;radix                     Allocated with name '__print_format_radix_1_98'
                                   1801 ;width                     Allocated with name '__print_format_width_1_98'
                                   1802 ;decimals                  Allocated to registers r5 
                                   1803 ;length                    Allocated with name '__print_format_length_1_98'
                                   1804 ;c                         Allocated to registers r2 
                                   1805 ;memtype                   Allocated to registers r2 
                                   1806 ;store                     Allocated with name '__print_format_store_4_120'
                                   1807 ;pstore                    Allocated with name '__print_format_pstore_4_120'
                                   1808 ;sloc0                     Allocated with name '__print_format_sloc0_1_0'
                                   1809 ;------------------------------------------------------------
                                   1810 ;	printf_large.c:434: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                                   1811 ;	-----------------------------------------
                                   1812 ;	 function _print_format
                                   1813 ;	-----------------------------------------
      0008EF                       1814 __print_format:
      0008EF 75 86 01         [12] 1815 	mov     dps, #1
      0008F2 90s00r00r00      [12] 1816 	mov     dptr, #_output_char
      0008F6 E5 82            [ 8] 1817 	mov	a,dpl
      0008F8 F0               [ 8] 1818 	movx	@dptr,a
      0008F9 A3               [12] 1819 	inc	dptr
      0008FA E5 83            [ 8] 1820 	mov	a,dph
      0008FC F0               [ 8] 1821 	movx	@dptr,a
      0008FD A3               [12] 1822 	inc	dptr
      0008FE E5 93            [ 8] 1823 	mov	a,dpx
      000900 F0               [ 8] 1824 	movx	@dptr,a
      000901 75 86 00         [12] 1825 	mov	dps,#0
                                   1826 ;	printf_large.c:462: p = pvoid;
      000904 90s00r00rA0      [12] 1827 	mov	dptr,#__print_format_PARM_2
                                   1828 ;	genAssign: resultIsFar = FALSE
      000908 E0               [ 8] 1829 	movx	a,@dptr
      000909 FA               [ 4] 1830 	mov	r2,a
      00090A A3               [12] 1831 	inc	dptr
      00090B E0               [ 8] 1832 	movx	a,@dptr
      00090C FB               [ 4] 1833 	mov	r3,a
      00090D A3               [12] 1834 	inc	dptr
      00090E E0               [ 8] 1835 	movx	a,@dptr
      00090F FC               [ 4] 1836 	mov	r4,a
      000910 A3               [12] 1837 	inc	dptr
      000911 E0               [ 8] 1838 	movx	a,@dptr
      000912 FD               [ 4] 1839 	mov	r5,a
                                   1840 ;	genAssign: resultIsFar = TRUE
      000913 90s00r00r03      [12] 1841 	mov	dptr,#_p
      000917 EA               [ 4] 1842 	mov	a,r2
      000918 F0               [ 8] 1843 	movx	@dptr,a
      000919 A3               [12] 1844 	inc	dptr
      00091A EB               [ 4] 1845 	mov	a,r3
      00091B F0               [ 8] 1846 	movx	@dptr,a
      00091C A3               [12] 1847 	inc	dptr
      00091D EC               [ 4] 1848 	mov	a,r4
      00091E F0               [ 8] 1849 	movx	@dptr,a
      00091F A3               [12] 1850 	inc	dptr
      000920 ED               [ 4] 1851 	mov	a,r5
      000921 F0               [ 8] 1852 	movx	@dptr,a
                                   1853 ;	printf_large.c:466: charsOutputted = 0;
                                   1854 ;	genAssign: resultIsFar = TRUE
      000922 90s00r00r0C      [12] 1855 	mov	dptr,#_charsOutputted
      000926 E4               [ 4] 1856 	clr	a
      000927 F0               [ 8] 1857 	movx	@dptr,a
      000928 A3               [12] 1858 	inc	dptr
      000929 F0               [ 8] 1859 	movx	@dptr,a
                                   1860 ;	printf_large.c:469: if (format==0)
      00092A 90s00r00rA4      [12] 1861 	mov	dptr,#__print_format_PARM_3
      00092E E0               [ 8] 1862 	movx	a,@dptr
      00092F F5 F0            [ 8] 1863 	mov	b,a
      000931 A3               [12] 1864 	inc	dptr
      000932 E0               [ 8] 1865 	movx	a,@dptr
      000933 42 F0            [ 8] 1866 	orl	b,a
      000935 A3               [12] 1867 	inc	dptr
      000936 E0               [ 8] 1868 	movx	a,@dptr
      000937 45 F0            [ 8] 1869 	orl	a,b
      000939 70 13            [12] 1870 	jnz  00253$
      00093B                       1871 00493$:
                                   1872 ;	printf_large.c:471: format=NULL_STRING;
      00093B 90s00r00rA4      [12] 1873 	mov	dptr,#__print_format_PARM_3
      00093F 74r00            [ 8] 1874 	mov	a,#___str_0
      000941 F0               [ 8] 1875 	movx	@dptr,a
      000942 A3               [12] 1876 	inc	dptr
      000943 74s00            [ 8] 1877 	mov	a,#(___str_0 >> 8)
      000945 F0               [ 8] 1878 	movx	@dptr,a
      000946 A3               [12] 1879 	inc	dptr
      000947 74s00            [ 8] 1880 	mov	a,#(___str_0 >> 16)
      000949 F0               [ 8] 1881 	movx	@dptr,a
      00094A A3               [12] 1882 	inc	dptr
      00094B 74 80            [ 8] 1883 	mov	a,#0x80
      00094D F0               [ 8] 1884 	movx	@dptr,a
                                   1885 ;	printf_large.c:475: while( c=*format++ )
      00094E                       1886 00253$:
      00094E                       1887 00242$:
      00094E 90s00r00rA4      [12] 1888 	mov	dptr,#__print_format_PARM_3
                                   1889 ;	genAssign: resultIsFar = FALSE
      000952 E0               [ 8] 1890 	movx	a,@dptr
      000953 FA               [ 4] 1891 	mov	r2,a
      000954 A3               [12] 1892 	inc	dptr
      000955 E0               [ 8] 1893 	movx	a,@dptr
      000956 FB               [ 4] 1894 	mov	r3,a
      000957 A3               [12] 1895 	inc	dptr
      000958 E0               [ 8] 1896 	movx	a,@dptr
      000959 FC               [ 4] 1897 	mov	r4,a
      00095A A3               [12] 1898 	inc	dptr
      00095B E0               [ 8] 1899 	movx	a,@dptr
      00095C FD               [ 4] 1900 	mov	r5,a
      00095D 8A 82            [ 8] 1901 	mov	dpl,r2
      00095F 8B 83            [ 8] 1902 	mov	dph,r3
      000961 8C 93            [ 8] 1903 	mov	dpx,r4
      000963 8D F0            [ 8] 1904 	mov	b,r5
      000965 12s00r00r00      [16] 1905 	lcall	__gptrget
      000969 FE               [ 4] 1906 	mov	r6,a
      00096A 90s00r00rA4      [12] 1907 	mov	dptr,#__print_format_PARM_3
      00096E 74 01            [ 8] 1908 	mov	a,#0x01
      000970 2A               [ 4] 1909 	add	a,r2
      000971 F0               [ 8] 1910 	movx	@dptr,a
      000972 E4               [ 4] 1911 	clr	a
      000973 3B               [ 4] 1912 	addc	a,r3
      000974 A3               [12] 1913 	inc	dptr
      000975 F0               [ 8] 1914 	movx	@dptr,a
      000976 E4               [ 4] 1915 	clr	a
      000977 3C               [ 4] 1916 	addc	a,r4
      000978 A3               [12] 1917 	inc	dptr
      000979 F0               [ 8] 1918 	movx	@dptr,a
      00097A A3               [12] 1919 	inc	dptr
      00097B ED               [ 4] 1920 	mov	a,r5
      00097C F0               [ 8] 1921 	movx	@dptr,a
                                   1922 ;	genAssign: resultIsFar = TRUE
      00097D 8E 02            [ 8] 1923 	mov	ar2,r6
      00097F EE               [ 4] 1924 	mov	a,r6
      000980 70 04            [12] 1925 	jnz	00494$
      000982 02s00r12rE6      [16] 1926 	ljmp	00244$
      000986                       1927 00494$:
                                   1928 ;	printf_large.c:477: if ( c=='%' )
      000986 BA 25 02         [16] 1929 	cjne	r2,#0x25,00495$
      000989 80 04            [12] 1930 	sjmp	00496$
      00098B                       1931 00495$:
      00098B 02s00r12rDC      [16] 1932 	ljmp	00240$
      00098F                       1933 00496$:
                                   1934 ;	printf_large.c:479: left_justify    = 0;
                                   1935 ;	genAssign: resultIsFar = FALSE
      00098F C2*06            [ 8] 1936 	clr	__print_format_left_justify_1_98
                                   1937 ;	printf_large.c:480: zero_padding    = 0;
                                   1938 ;	genAssign: resultIsFar = FALSE
      000991 C2*07            [ 8] 1939 	clr	__print_format_zero_padding_1_98
                                   1940 ;	printf_large.c:481: prefix_sign     = 0;
                                   1941 ;	genAssign: resultIsFar = FALSE
      000993 C2*08            [ 8] 1942 	clr	__print_format_prefix_sign_1_98
                                   1943 ;	printf_large.c:482: prefix_space    = 0;
                                   1944 ;	genAssign: resultIsFar = FALSE
      000995 C2*09            [ 8] 1945 	clr	__print_format_prefix_space_1_98
                                   1946 ;	printf_large.c:483: signed_argument = 0;
                                   1947 ;	genAssign: resultIsFar = FALSE
      000997 C2*0A            [ 8] 1948 	clr	__print_format_signed_argument_1_98
                                   1949 ;	printf_large.c:484: char_argument   = 0;
                                   1950 ;	genAssign: resultIsFar = FALSE
      000999 C2*0B            [ 8] 1951 	clr	__print_format_char_argument_1_98
                                   1952 ;	printf_large.c:485: long_argument   = 0;
                                   1953 ;	genAssign: resultIsFar = FALSE
      00099B C2*0C            [ 8] 1954 	clr	__print_format_long_argument_1_98
                                   1955 ;	printf_large.c:486: float_argument  = 0;
                                   1956 ;	genAssign: resultIsFar = FALSE
      00099D C2*0D            [ 8] 1957 	clr	__print_format_float_argument_1_98
                                   1958 ;	printf_large.c:487: radix           = 0;
                                   1959 ;	genAssign: resultIsFar = TRUE
      00099F 90s00r00rAC      [12] 1960 	mov	dptr,#__print_format_radix_1_98
                                   1961 ;	printf_large.c:488: width           = 0;
                                   1962 ;	genAssign: resultIsFar = TRUE
      0009A3 E4               [ 4] 1963 	clr   a
      0009A4 F0               [ 8] 1964 	movx  @dptr,a
      0009A5 90s00r00rAD      [12] 1965 	mov   dptr,#__print_format_width_1_98
      0009A9 F0               [ 8] 1966 	movx  @dptr,a
                                   1967 ;	printf_large.c:489: decimals        = -1;
                                   1968 ;	genAssign: resultIsFar = TRUE
      0009AA 7D FF            [ 8] 1969 	mov	r5,#0xFF
                                   1970 ;	printf_large.c:491: get_conversion_spec:
      0009AC 90s00r00rA4      [12] 1971 	mov	dptr,#__print_format_PARM_3
                                   1972 ;	genAssign: resultIsFar = FALSE
      0009B0 E0               [ 8] 1973 	movx	a,@dptr
      0009B1 FE               [ 4] 1974 	mov	r6,a
      0009B2 A3               [12] 1975 	inc	dptr
      0009B3 E0               [ 8] 1976 	movx	a,@dptr
      0009B4 FF               [ 4] 1977 	mov	r7,a
      0009B5 A3               [12] 1978 	inc	dptr
      0009B6 E0               [ 8] 1979 	movx	a,@dptr
      0009B7 F8               [ 4] 1980 	mov	r0,a
      0009B8 A3               [12] 1981 	inc	dptr
      0009B9 E0               [ 8] 1982 	movx	a,@dptr
      0009BA F9               [ 4] 1983 	mov	r1,a
      0009BB                       1984 00103$:
                                   1985 ;	printf_large.c:493: c = *format++;
      0009BB 8E 82            [ 8] 1986 	mov	dpl,r6
      0009BD 8F 83            [ 8] 1987 	mov	dph,r7
      0009BF 88 93            [ 8] 1988 	mov	dpx,r0
      0009C1 89 F0            [ 8] 1989 	mov	b,r1
      0009C3 12s00r00r00      [16] 1990 	lcall	__gptrget
      0009C7 FB               [ 4] 1991 	mov	r3,a
      0009C8 A3               [12] 1992 	inc	dptr
      0009C9 AE 82            [ 8] 1993 	mov	r6,dpl
      0009CB AF 83            [ 8] 1994 	mov	r7,dph
      0009CD A8 93            [ 8] 1995 	mov	r0,dpx
      0009CF A9 F0            [ 8] 1996 	mov	r1,b
                                   1997 ;	genAssign: resultIsFar = TRUE
      0009D1 90s00r00rA4      [12] 1998 	mov	dptr,#__print_format_PARM_3
      0009D5 EE               [ 4] 1999 	mov	a,r6
      0009D6 F0               [ 8] 2000 	movx	@dptr,a
      0009D7 A3               [12] 2001 	inc	dptr
      0009D8 EF               [ 4] 2002 	mov	a,r7
      0009D9 F0               [ 8] 2003 	movx	@dptr,a
      0009DA A3               [12] 2004 	inc	dptr
      0009DB E8               [ 4] 2005 	mov	a,r0
      0009DC F0               [ 8] 2006 	movx	@dptr,a
      0009DD A3               [12] 2007 	inc	dptr
      0009DE E9               [ 4] 2008 	mov	a,r1
      0009DF F0               [ 8] 2009 	movx	@dptr,a
                                   2010 ;	genAssign: resultIsFar = TRUE
      0009E0 8B 02            [ 8] 2011 	mov	ar2,r3
                                   2012 ;	printf_large.c:495: if (c=='%')
      0009E2 BA 25 0A         [16] 2013 	cjne r2,#0x25,00105$
      0009E5                       2014 00498$:
                                   2015 ;	printf_large.c:497: OUTPUT_CHAR(c, p);
      0009E5 8A 82            [ 8] 2016 	mov	dpl,r2
      0009E7 12s00r00r00      [16] 2017 	lcall	__output_char
                                   2018 ;	printf_large.c:498: continue;
      0009EB 02s00r09r4E      [16] 2019 	ljmp	00242$
      0009EF                       2020 00105$:
                                   2021 ;	printf_large.c:501: if (isdigit(c))
      0009EF 8A 03            [ 8] 2022 	mov	ar3,r2
      0009F1 BB 30 00         [16] 2023 	cjne	r3,#0x30,00499$
      0009F4                       2024 00499$:
      0009F4 40 42            [12] 2025 	jc   00112$
      0009F6                       2026 00500$:
      0009F6 C3               [ 4] 2027 	clr	c
      0009F7 74 39            [ 8] 2028 	mov	a,#0x39
      0009F9 9B               [ 4] 2029 	subb	a,r3
      0009FA 40 3C            [12] 2030 	jc   00112$
      0009FC                       2031 00501$:
                                   2032 ;	printf_large.c:503: if (decimals==-1)
      0009FC BD FF 1D         [16] 2033 	cjne r5,#0xFF,00109$
      0009FF                       2034 00503$:
                                   2035 ;	printf_large.c:505: width = 10*width + c - '0';
      0009FF 90s00r00rAD      [12] 2036 	mov	dptr,#__print_format_width_1_98
      000A03 75 F0 0A         [12] 2037 	mov	b,#0x0A
      000A06 E0               [ 8] 2038 	movx	a,@dptr
      000A07 A4               [20] 2039 	mul	ab
      000A08 2A               [ 4] 2040 	add  a,r2
      000A09 FB               [ 4] 2041 	mov  r3,a
      000A0A 24 D0            [ 8] 2042 	add	a,#0xD0
                                   2043 ;	genAssign: resultIsFar = TRUE
      000A0C 90s00r00rAD      [12] 2044 	mov	dptr,#__print_format_width_1_98
      000A10 F0               [ 8] 2045 	movx	@dptr,a
                                   2046 ;	printf_large.c:506: if (width == 0)
      000A11 90s00r00rAD      [12] 2047 	mov	dptr,#__print_format_width_1_98
      000A15 E0               [ 8] 2048 	movx	a,@dptr
      000A16 70 A3            [12] 2049 	jnz  00103$
      000A18                       2050 00504$:
                                   2051 ;	printf_large.c:509: zero_padding = 1;
                                   2052 ;	genAssign: resultIsFar = FALSE
      000A18 D2*07            [ 8] 2053 	setb	__print_format_zero_padding_1_98
      000A1A 80 9F            [12] 2054 	sjmp 00103$
      000A1C                       2055 00109$:
                                   2056 ;	printf_large.c:514: decimals = 10*decimals + c - '0';
      000A1C C2 D5            [ 8] 2057 	clr	F0
      000A1E 75 F0 0A         [12] 2058 	mov	b,#0x0A
      000A21 ED               [ 4] 2059 	mov	a,r5
      000A22 30 E7 04         [12] 2060 	jnb	acc[7],00505$
      000A25 B2 D5            [ 8] 2061 	cpl	F0
      000A27 F4               [ 4] 2062 	cpl	a
      000A28 04               [ 4] 2063 	inc	a
      000A29                       2064 00505$:
      000A29 A4               [20] 2065 	mul	ab
      000A2A 30 D5 02         [12] 2066 	jnb	F0,00506$
      000A2D F4               [ 4] 2067 	cpl	a
      000A2E 04               [ 4] 2068 	inc	a
      000A2F                       2069 00506$:
      000A2F 2A               [ 4] 2070 	add	a,r2
      000A30 FB               [ 4] 2071 	mov  r3,a
      000A31 24 D0            [ 8] 2072 	add	a,#0xD0
                                   2073 ;	genAssign: resultIsFar = TRUE
      000A33 FD               [ 4] 2074 	mov	r5,a
                                   2075 ;	printf_large.c:516: goto get_conversion_spec;
      000A34 02s00r09rBB      [16] 2076 	ljmp	00103$
      000A38                       2077 00112$:
                                   2078 ;	printf_large.c:519: if (c=='.')
      000A38 BA 2E 0F         [16] 2079 	cjne r2,#0x2E,00117$
      000A3B                       2080 00508$:
                                   2081 ;	printf_large.c:521: if (decimals==-1)
      000A3B BD FF 02         [16] 2082 	cjne	r5,#0xFF,00509$
      000A3E 80 04            [12] 2083 	sjmp	00510$
      000A40                       2084 00509$:
      000A40 02s00r09rBB      [16] 2085 	ljmp	00103$
      000A44                       2086 00510$:
                                   2087 ;	printf_large.c:522: decimals=0;
                                   2088 ;	genAssign: resultIsFar = TRUE
      000A44 7D 00            [ 8] 2089 	mov	r5,#0x00
                                   2090 ;	printf_large.c:525: goto get_conversion_spec;
      000A46 02s00r09rBB      [16] 2091 	ljmp	00103$
      000A4A                       2092 00117$:
                                   2093 ;	printf_large.c:528: if (islower(c))
      000A4A 8A 03            [ 8] 2094 	mov	ar3,r2
      000A4C BB 61 00         [16] 2095 	cjne	r3,#0x61,00511$
      000A4F                       2096 00511$:
      000A4F 40 0D            [12] 2097 	jc   00119$
      000A51                       2098 00512$:
      000A51 C3               [ 4] 2099 	clr	c
      000A52 74 7A            [ 8] 2100 	mov	a,#0x7A
      000A54 9B               [ 4] 2101 	subb	a,r3
      000A55 40 07            [12] 2102 	jc   00119$
      000A57                       2103 00513$:
                                   2104 ;	printf_large.c:530: c = toupper(c);
      000A57 53 02 DF         [12] 2105 	anl	ar2,#0xDF
                                   2106 ;	printf_large.c:531: lower_case = 1;
                                   2107 ;	genAssign: resultIsFar = FALSE
      000A5A D2*00            [ 8] 2108 	setb	_lower_case
      000A5C 80 02            [12] 2109 	sjmp 00120$
      000A5E                       2110 00119$:
                                   2111 ;	printf_large.c:534: lower_case = 0;
                                   2112 ;	genAssign: resultIsFar = FALSE
      000A5E C2*00            [ 8] 2113 	clr	_lower_case
      000A60                       2114 00120$:
                                   2115 ;	printf_large.c:536: switch( c )
      000A60 BA 20 04         [16] 2116 	cjne	r2,#0x20,00514$
      000A63 02s00r0ArE6      [16] 2117 	ljmp	00124$
      000A67                       2118 00514$:
      000A67 BA 2B 02         [16] 2119 	cjne	r2,#0x2B,00515$
      000A6A 80 74            [12] 2120 	sjmp 00123$
      000A6C                       2121 00515$:
      000A6C BA 2D 02         [16] 2122 	cjne	r2,#0x2D,00516$
      000A6F 80 69            [12] 2123 	sjmp 00122$
      000A71                       2124 00516$:
      000A71 BA 42 02         [16] 2125 	cjne	r2,#0x42,00517$
      000A74 80 76            [12] 2126 	sjmp 00125$
      000A76                       2127 00517$:
      000A76 BA 43 04         [16] 2128 	cjne	r2,#0x43,00518$
      000A79 02s00r0ArF8      [16] 2129 	ljmp	00131$
      000A7D                       2130 00518$:
      000A7D BA 44 04         [16] 2131 	cjne	r2,#0x44,00519$
      000A80 02s00r0Er36      [16] 2132 	ljmp	00168$
      000A84                       2133 00519$:
      000A84 BA 46 04         [16] 2134 	cjne	r2,#0x46,00520$
      000A87 02s00r0Er5C      [16] 2135 	ljmp	00172$
      000A8B                       2136 00520$:
      000A8B BA 48 04         [16] 2137 	cjne	r2,#0x48,00521$
      000A8E 02s00r09rBB      [16] 2138 	ljmp	00103$
      000A92                       2139 00521$:
      000A92 BA 49 04         [16] 2140 	cjne	r2,#0x49,00522$
      000A95 02s00r0Er36      [16] 2141 	ljmp	00168$
      000A99                       2142 00522$:
      000A99 BA 4A 04         [16] 2143 	cjne	r2,#0x4A,00523$
      000A9C 02s00r09rBB      [16] 2144 	ljmp	00103$
      000AA0                       2145 00523$:
      000AA0 BA 4C 02         [16] 2146 	cjne	r2,#0x4C,00524$
      000AA3 80 4D            [12] 2147 	sjmp 00130$
      000AA5                       2148 00524$:
      000AA5 BA 4F 04         [16] 2149 	cjne	r2,#0x4F,00525$
      000AA8 02s00r0Er41      [16] 2150 	ljmp	00169$
      000AAC                       2151 00525$:
      000AAC BA 50 04         [16] 2152 	cjne	r2,#0x50,00526$
      000AAF 02s00r0Dr58      [16] 2153 	ljmp	00157$
      000AB3                       2154 00526$:
      000AB3 BA 53 04         [16] 2155 	cjne	r2,#0x53,00527$
      000AB6 02s00r0Br80      [16] 2156 	ljmp	00135$
      000ABA                       2157 00527$:
      000ABA BA 54 04         [16] 2158 	cjne	r2,#0x54,00528$
      000ABD 02s00r09rBB      [16] 2159 	ljmp	00103$
      000AC1                       2160 00528$:
      000AC1 BA 55 04         [16] 2161 	cjne	r2,#0x55,00529$
      000AC4 02s00r0Er4A      [16] 2162 	ljmp	00170$
      000AC8                       2163 00529$:
      000AC8 BA 58 04         [16] 2164 	cjne	r2,#0x58,00530$
      000ACB 02s00r0Er53      [16] 2165 	ljmp	00171$
      000ACF                       2166 00530$:
      000ACF BA 5A 04         [16] 2167 	cjne	r2,#0x5A,00531$
      000AD2 02s00r09rBB      [16] 2168 	ljmp	00103$
      000AD6                       2169 00531$:
      000AD6 02s00r0Er60      [16] 2170 	ljmp	00173$
                                   2171 ;	printf_large.c:538: case '-':
      000ADA                       2172 00122$:
                                   2173 ;	printf_large.c:539: left_justify = 1;
                                   2174 ;	genAssign: resultIsFar = FALSE
      000ADA D2*06            [ 8] 2175 	setb	__print_format_left_justify_1_98
                                   2176 ;	printf_large.c:540: goto get_conversion_spec;
      000ADC 02s00r09rBB      [16] 2177 	ljmp	00103$
                                   2178 ;	printf_large.c:541: case '+':
      000AE0                       2179 00123$:
                                   2180 ;	printf_large.c:542: prefix_sign = 1;
                                   2181 ;	genAssign: resultIsFar = FALSE
      000AE0 D2*08            [ 8] 2182 	setb	__print_format_prefix_sign_1_98
                                   2183 ;	printf_large.c:543: goto get_conversion_spec;
      000AE2 02s00r09rBB      [16] 2184 	ljmp	00103$
                                   2185 ;	printf_large.c:544: case ' ':
      000AE6                       2186 00124$:
                                   2187 ;	printf_large.c:545: prefix_space = 1;
                                   2188 ;	genAssign: resultIsFar = FALSE
      000AE6 D2*09            [ 8] 2189 	setb	__print_format_prefix_space_1_98
                                   2190 ;	printf_large.c:546: goto get_conversion_spec;
      000AE8 02s00r09rBB      [16] 2191 	ljmp	00103$
                                   2192 ;	printf_large.c:547: case 'B': /* byte */
      000AEC                       2193 00125$:
                                   2194 ;	printf_large.c:548: char_argument = 1;
                                   2195 ;	genAssign: resultIsFar = FALSE
      000AEC D2*0B            [ 8] 2196 	setb	__print_format_char_argument_1_98
                                   2197 ;	printf_large.c:549: goto get_conversion_spec;
      000AEE 02s00r09rBB      [16] 2198 	ljmp	00103$
                                   2199 ;	printf_large.c:556: case 'L': /* long */
      000AF2                       2200 00130$:
                                   2201 ;	printf_large.c:557: long_argument = 1;
                                   2202 ;	genAssign: resultIsFar = FALSE
      000AF2 D2*0C            [ 8] 2203 	setb	__print_format_long_argument_1_98
                                   2204 ;	printf_large.c:558: goto get_conversion_spec;
      000AF4 02s00r09rBB      [16] 2205 	ljmp	00103$
                                   2206 ;	printf_large.c:560: case 'C':
      000AF8                       2207 00131$:
                                   2208 ;	printf_large.c:561: if( char_argument )
      000AF8 30*0B 38         [12] 2209 	jnb  __print_format_char_argument_1_98,00133$
      000AFB                       2210 00532$:
                                   2211 ;	printf_large.c:562: c = va_arg(ap,char);
      000AFB 90s00r00rA8      [12] 2212 	mov	dptr,#__print_format_PARM_4
                                   2213 ;	genAssign: resultIsFar = FALSE
      000AFF E0               [ 8] 2214 	movx	a,@dptr
      000B00 FE               [ 4] 2215 	mov	r6,a
      000B01 A3               [12] 2216 	inc	dptr
      000B02 E0               [ 8] 2217 	movx	a,@dptr
      000B03 FF               [ 4] 2218 	mov	r7,a
      000B04 A3               [12] 2219 	inc	dptr
      000B05 E0               [ 8] 2220 	movx	a,@dptr
      000B06 F8               [ 4] 2221 	mov	r0,a
      000B07 A3               [12] 2222 	inc	dptr
      000B08 E0               [ 8] 2223 	movx	a,@dptr
      000B09 F9               [ 4] 2224 	mov	r1,a
      000B0A 1E               [ 4] 2225 	dec	r6
      000B0B BE FF 05         [16] 2226 	cjne	r6,#0xFF,00533$
      000B0E 1F               [ 4] 2227 	dec	r7
      000B0F BF FF 01         [16] 2228 	cjne	r7,#0xFF,00533$
      000B12 18               [ 4] 2229 	dec	r0
      000B13                       2230 00533$:
                                   2231 ;	genAssign: resultIsFar = TRUE
      000B13 90s00r00rA8      [12] 2232 	mov	dptr,#__print_format_PARM_4
      000B17 EE               [ 4] 2233 	mov	a,r6
      000B18 F0               [ 8] 2234 	movx	@dptr,a
      000B19 A3               [12] 2235 	inc	dptr
      000B1A EF               [ 4] 2236 	mov	a,r7
      000B1B F0               [ 8] 2237 	movx	@dptr,a
      000B1C A3               [12] 2238 	inc	dptr
      000B1D E8               [ 4] 2239 	mov	a,r0
      000B1E F0               [ 8] 2240 	movx	@dptr,a
      000B1F A3               [12] 2241 	inc	dptr
      000B20 E9               [ 4] 2242 	mov	a,r1
      000B21 F0               [ 8] 2243 	movx	@dptr,a
      000B22 8E 82            [ 8] 2244 	mov	dpl,r6
      000B24 8F 83            [ 8] 2245 	mov	dph,r7
      000B26 88 93            [ 8] 2246 	mov	dpx,r0
      000B28 89 F0            [ 8] 2247 	mov	b,r1
      000B2A 12s00r00r00      [16] 2248 	lcall	__gptrget
      000B2E FE               [ 4] 2249 	mov	r6,a
                                   2250 ;	genAssign: resultIsFar = TRUE
      000B2F 8E 02            [ 8] 2251 	mov	ar2,r6
      000B31 80 3F            [12] 2252 	sjmp 00134$
      000B33                       2253 00133$:
                                   2254 ;	printf_large.c:564: c = va_arg(ap,int);
      000B33 90s00r00rA8      [12] 2255 	mov	dptr,#__print_format_PARM_4
                                   2256 ;	genAssign: resultIsFar = FALSE
      000B37 E0               [ 8] 2257 	movx	a,@dptr
      000B38 FE               [ 4] 2258 	mov	r6,a
      000B39 A3               [12] 2259 	inc	dptr
      000B3A E0               [ 8] 2260 	movx	a,@dptr
      000B3B FF               [ 4] 2261 	mov	r7,a
      000B3C A3               [12] 2262 	inc	dptr
      000B3D E0               [ 8] 2263 	movx	a,@dptr
      000B3E F8               [ 4] 2264 	mov	r0,a
      000B3F A3               [12] 2265 	inc	dptr
      000B40 E0               [ 8] 2266 	movx	a,@dptr
      000B41 F9               [ 4] 2267 	mov	r1,a
      000B42 EE               [ 4] 2268 	mov	a,r6
      000B43 24 FE            [ 8] 2269 	add	a,#0xFE
      000B45 FE               [ 4] 2270 	mov	r6,a
      000B46 EF               [ 4] 2271 	mov	a,r7
      000B47 34 FF            [ 8] 2272 	addc	a,#0xFF
      000B49 FF               [ 4] 2273 	mov	r7,a
      000B4A E8               [ 4] 2274 	mov	a,r0
      000B4B 34 FF            [ 8] 2275 	addc	a,#0xFF
      000B4D F8               [ 4] 2276 	mov	r0,a
                                   2277 ;	genAssign: resultIsFar = TRUE
      000B4E 90s00r00rA8      [12] 2278 	mov	dptr,#__print_format_PARM_4
      000B52 EE               [ 4] 2279 	mov	a,r6
      000B53 F0               [ 8] 2280 	movx	@dptr,a
      000B54 A3               [12] 2281 	inc	dptr
      000B55 EF               [ 4] 2282 	mov	a,r7
      000B56 F0               [ 8] 2283 	movx	@dptr,a
      000B57 A3               [12] 2284 	inc	dptr
      000B58 E8               [ 4] 2285 	mov	a,r0
      000B59 F0               [ 8] 2286 	movx	@dptr,a
      000B5A A3               [12] 2287 	inc	dptr
      000B5B E9               [ 4] 2288 	mov	a,r1
      000B5C F0               [ 8] 2289 	movx	@dptr,a
      000B5D 8E 82            [ 8] 2290 	mov	dpl,r6
      000B5F 8F 83            [ 8] 2291 	mov	dph,r7
      000B61 88 93            [ 8] 2292 	mov	dpx,r0
      000B63 89 F0            [ 8] 2293 	mov	b,r1
      000B65 12s00r00r00      [16] 2294 	lcall	__gptrgetWord
      000B69 FE               [ 4] 2295 	mov	r6,a
      000B6A AF 9C            [ 8] 2296 	mov	r7,acc1
      000B6C 12s00r00r00      [16] 2297 	lcall	__decdptr
      000B70 8E 02            [ 8] 2298 	mov	ar2,r6
      000B72                       2299 00134$:
                                   2300 ;	printf_large.c:565: OUTPUT_CHAR( c, p );
      000B72 C0 05            [ 8] 2301 	push	ar5
      000B74 8A 82            [ 8] 2302 	mov	dpl,r2
      000B76 12s00r00r00      [16] 2303 	lcall	__output_char
      000B7A D0 05            [ 8] 2304 	pop	ar5
                                   2305 ;	printf_large.c:566: break;
      000B7C 02s00r0Er72      [16] 2306 	ljmp	00174$
                                   2307 ;	printf_large.c:568: case 'S':
      000B80                       2308 00135$:
                                   2309 ;	printf_large.c:569: PTR = va_arg(ap,ptr_t);
      000B80 90s00r00rA8      [12] 2310 	mov	dptr,#__print_format_PARM_4
                                   2311 ;	genAssign: resultIsFar = FALSE
      000B84 E0               [ 8] 2312 	movx	a,@dptr
      000B85 FE               [ 4] 2313 	mov	r6,a
      000B86 A3               [12] 2314 	inc	dptr
      000B87 E0               [ 8] 2315 	movx	a,@dptr
      000B88 FF               [ 4] 2316 	mov	r7,a
      000B89 A3               [12] 2317 	inc	dptr
      000B8A E0               [ 8] 2318 	movx	a,@dptr
      000B8B F8               [ 4] 2319 	mov	r0,a
      000B8C A3               [12] 2320 	inc	dptr
      000B8D E0               [ 8] 2321 	movx	a,@dptr
      000B8E F9               [ 4] 2322 	mov	r1,a
      000B8F EE               [ 4] 2323 	mov	a,r6
      000B90 24 FC            [ 8] 2324 	add	a,#0xFC
      000B92 FE               [ 4] 2325 	mov	r6,a
      000B93 EF               [ 4] 2326 	mov	a,r7
      000B94 34 FF            [ 8] 2327 	addc	a,#0xFF
      000B96 FF               [ 4] 2328 	mov	r7,a
      000B97 E8               [ 4] 2329 	mov	a,r0
      000B98 34 FF            [ 8] 2330 	addc	a,#0xFF
      000B9A F8               [ 4] 2331 	mov	r0,a
                                   2332 ;	genAssign: resultIsFar = TRUE
      000B9B 90s00r00rA8      [12] 2333 	mov	dptr,#__print_format_PARM_4
      000B9F EE               [ 4] 2334 	mov	a,r6
      000BA0 F0               [ 8] 2335 	movx	@dptr,a
      000BA1 A3               [12] 2336 	inc	dptr
      000BA2 EF               [ 4] 2337 	mov	a,r7
      000BA3 F0               [ 8] 2338 	movx	@dptr,a
      000BA4 A3               [12] 2339 	inc	dptr
      000BA5 E8               [ 4] 2340 	mov	a,r0
      000BA6 F0               [ 8] 2341 	movx	@dptr,a
      000BA7 A3               [12] 2342 	inc	dptr
      000BA8 E9               [ 4] 2343 	mov	a,r1
      000BA9 F0               [ 8] 2344 	movx	@dptr,a
      000BAA 8E 82            [ 8] 2345 	mov	dpl,r6
      000BAC 8F 83            [ 8] 2346 	mov	dph,r7
      000BAE 88 93            [ 8] 2347 	mov	dpx,r0
      000BB0 89 F0            [ 8] 2348 	mov	b,r1
      000BB2 12s00r00r00      [16] 2349 	lcall	__gptrgetWord
      000BB6 FE               [ 4] 2350 	mov	r6,a
      000BB7 AF 9C            [ 8] 2351 	mov	r7,acc1
      000BB9 A3               [12] 2352 	inc	dptr
      000BBA 12s00r00r00      [16] 2353 	lcall	__gptrgetWord
      000BBE F8               [ 4] 2354 	mov	r0,a
      000BBF A9 9C            [ 8] 2355 	mov	r1,acc1
      000BC1 12s00r00r00      [16] 2356 	lcall	__decdptr
      000BC5 12s00r00r00      [16] 2357 	lcall	__decdptr
      000BC9 12s00r00r00      [16] 2358 	lcall	__decdptr
      000BCD 90s00r00r07      [12] 2359 	mov	dptr,#_value
      000BD1 EE               [ 4] 2360 	mov	a,r6
      000BD2 F0               [ 8] 2361 	movx	@dptr,a
      000BD3 A3               [12] 2362 	inc	dptr
      000BD4 EF               [ 4] 2363 	mov	a,r7
      000BD5 F0               [ 8] 2364 	movx	@dptr,a
      000BD6 A3               [12] 2365 	inc	dptr
      000BD7 E8               [ 4] 2366 	mov	a,r0
      000BD8 F0               [ 8] 2367 	movx	@dptr,a
      000BD9 A3               [12] 2368 	inc	dptr
      000BDA E9               [ 4] 2369 	mov	a,r1
      000BDB F0               [ 8] 2370 	movx	@dptr,a
                                   2371 ;	printf_large.c:572: if (PTR==0)
      000BDC EE               [ 4] 2372 	mov	a,r6
      000BDD 4F               [ 4] 2373 	orl	a,r7
      000BDE 48               [ 4] 2374 	orl	a,r0
      000BDF 70 1C            [12] 2375 	jnz  00137$
      000BE1                       2376 00534$:
                                   2377 ;	printf_large.c:574: PTR=NULL_STRING;
      000BE1 90s00r00r07      [12] 2378 	mov	dptr,#_value
      000BE5 74r00            [ 8] 2379 	mov	a,#___str_0
      000BE7 F0               [ 8] 2380 	movx	@dptr,a
      000BE8 A3               [12] 2381 	inc	dptr
      000BE9 74s00            [ 8] 2382 	mov	a,#(___str_0 >> 8)
      000BEB F0               [ 8] 2383 	movx	@dptr,a
      000BEC A3               [12] 2384 	inc	dptr
      000BED 74s00            [ 8] 2385 	mov	a,#(___str_0 >> 16)
      000BEF F0               [ 8] 2386 	movx	@dptr,a
      000BF0 A3               [12] 2387 	inc	dptr
      000BF1 74 80            [ 8] 2388 	mov	a,#0x80
      000BF3 F0               [ 8] 2389 	movx	@dptr,a
                                   2390 ;	printf_large.c:575: length=NULL_STRING_LENGTH;
                                   2391 ;	genAssign: resultIsFar = TRUE
      000BF4 90s00r00rAE      [12] 2392 	mov	dptr,#__print_format_length_1_98
      000BF8 74 06            [ 8] 2393 	mov	a,#0x06
      000BFA F0               [ 8] 2394 	movx	@dptr,a
      000BFB 80 29            [12] 2395 	sjmp 00138$
      000BFD                       2396 00137$:
                                   2397 ;	printf_large.c:579: length = strlen(PTR);
      000BFD 90s00r00r07      [12] 2398 	mov	dptr,#_value
      000C01 E0               [ 8] 2399 	movx	a,@dptr
      000C02 A3               [12] 2400 	inc	dptr
      000C03 FF               [ 4] 2401 	mov	r7,a
      000C04 E0               [ 8] 2402 	movx	a,@dptr
      000C05 A3               [12] 2403 	inc	dptr
      000C06 F8               [ 4] 2404 	mov	r0,a
      000C07 E0               [ 8] 2405 	movx	a,@dptr
      000C08 A3               [12] 2406 	inc	dptr
      000C09 F9               [ 4] 2407 	mov	r1,a
      000C0A E0               [ 8] 2408 	movx	a,@dptr
      000C0B FB               [ 4] 2409 	mov	r3,a
      000C0C C0 05            [ 8] 2410 	push	ar5
      000C0E 8F 82            [ 8] 2411 	mov	dpl,r7
      000C10 88 83            [ 8] 2412 	mov	dph,r0
      000C12 89 93            [ 8] 2413 	mov	dpx,r1
      000C14 8B F0            [ 8] 2414 	mov	b,r3
      000C16 12s00r00r00      [16] 2415 	lcall	_strlen
      000C1A AB 82            [ 8] 2416 	mov	r3,dpl
      000C1C AF 83            [ 8] 2417 	mov	r7,dph
      000C1E D0 05            [ 8] 2418 	pop	ar5
      000C20 90s00r00rAE      [12] 2419 	mov	dptr,#__print_format_length_1_98
      000C24 EB               [ 4] 2420 	mov	a,r3
      000C25 F0               [ 8] 2421 	movx	@dptr,a
                                   2422 ;	printf_large.c:872: return charsOutputted;
                                   2423 ;	printf_large.c:579: length = strlen(PTR);
      000C26                       2424 00138$:
                                   2425 ;	printf_large.c:584: if ( decimals == -1 )
      000C26 BD FF 06         [16] 2426 	cjne r5,#0xFF,00140$
      000C29                       2427 00536$:
                                   2428 ;	printf_large.c:586: decimals = length;
      000C29 90s00r00rAE      [12] 2429 	mov	dptr,#__print_format_length_1_98
                                   2430 ;	genAssign: resultIsFar = TRUE
      000C2D E0               [ 8] 2431 	movx	a,@dptr
      000C2E FD               [ 4] 2432 	mov	r5,a
      000C2F                       2433 00140$:
                                   2434 ;	printf_large.c:588: if ( ( !left_justify ) && (length < width) )
      000C2F 20*06 5B         [12] 2435 	jb   __print_format_left_justify_1_98,00290$
      000C32                       2436 00537$:
      000C32 90s00r00rAD      [12] 2437 	mov	dptr,#__print_format_width_1_98
      000C36 75 86 01         [12] 2438 	mov	dps, #1
      000C39 90s00r00rAE      [12] 2439 	mov	dptr, #__print_format_length_1_98
      000C3D 15 86            [ 8] 2440 	dec	dps
      000C3F C3               [ 4] 2441 	clr	c
      000C40 75 86 01         [12] 2442 	mov	dps,#1
      000C43 E0               [ 8] 2443 	movx	a,@dptr
      000C44 75 86 00         [12] 2444 	mov	dps,#0
      000C47 C5 F0            [ 8] 2445 	xch	a, b
      000C49 E0               [ 8] 2446 	movx	a,@dptr
      000C4A C5 F0            [ 8] 2447 	xch	a, b
      000C4C 95 F0            [ 8] 2448 	subb	a,b
      000C4E 50 3D            [12] 2449 	jnc  00290$
      000C50                       2450 00538$:
                                   2451 ;	printf_large.c:590: width -= length;
      000C50 90s00r00rAE      [12] 2452 	mov	dptr,#__print_format_length_1_98
      000C54 75 86 01         [12] 2453 	mov	dps, #1
      000C57 90s00r00rAD      [12] 2454 	mov	dptr, #__print_format_width_1_98
      000C5B 15 86            [ 8] 2455 	dec	dps
      000C5D C3               [ 4] 2456 	clr	c
      000C5E E0               [ 8] 2457 	movx	a,@dptr
      000C5F F5 F0            [ 8] 2458 	mov	b,a
      000C61 05 86            [ 8] 2459 	inc	dps
      000C63 E0               [ 8] 2460 	movx	a,@dptr
      000C64 95 F0            [ 8] 2461 	subb	a,b
      000C66 F0               [ 8] 2462 	movx	@dptr,a
      000C67 75 86 00         [12] 2463 	mov	dps,#0
                                   2464 ;	printf_large.c:591: while( width-- != 0 )
      000C6A 90s00r00rAD      [12] 2465 	mov	dptr,#__print_format_width_1_98
                                   2466 ;	genAssign: resultIsFar = FALSE
      000C6E E0               [ 8] 2467 	movx	a,@dptr
      000C6F FF               [ 4] 2468 	mov	r7,a
      000C70                       2469 00141$:
                                   2470 ;	genAssign: resultIsFar = FALSE
      000C70 8F 00            [ 8] 2471 	mov	ar0,r7
      000C72 1F               [ 4] 2472 	dec	r7
      000C73 E8               [ 4] 2473 	mov	a,r0
      000C74 60 11            [12] 2474 	jz  00326$
      000C76                       2475 00539$:
                                   2476 ;	printf_large.c:593: OUTPUT_CHAR( ' ', p );
      000C76 C0 05            [ 8] 2477 	push	ar5
      000C78 C0 07            [ 8] 2478 	push	ar7
      000C7A 75 82 20         [12] 2479 	mov	dpl,#0x20
      000C7D 12s00r00r00      [16] 2480 	lcall	__output_char
      000C81 D0 07            [ 8] 2481 	pop	ar7
      000C83 D0 05            [ 8] 2482 	pop	ar5
                                   2483 ;	printf_large.c:597: while ( (c = *PTR)  && (decimals-- > 0))
      000C85 80 E9            [12] 2484 	sjmp 00141$
      000C87                       2485 00326$:
                                   2486 ;	genAssign: resultIsFar = TRUE
      000C87 90s00r00rAD      [12] 2487 	mov	dptr,#__print_format_width_1_98
      000C8B EF               [ 4] 2488 	mov	a,r7
      000C8C F0               [ 8] 2489 	movx	@dptr,a
      000C8D                       2490 00290$:
                                   2491 ;	genAssign: resultIsFar = FALSE
      000C8D 8D 07            [ 8] 2492 	mov	ar7,r5
      000C8F                       2493 00148$:
      000C8F 90s00r00r07      [12] 2494 	mov	dptr,#_value
      000C93 E0               [ 8] 2495 	movx	a,@dptr
      000C94 A3               [12] 2496 	inc	dptr
      000C95 F8               [ 4] 2497 	mov	r0,a
      000C96 E0               [ 8] 2498 	movx	a,@dptr
      000C97 A3               [12] 2499 	inc	dptr
      000C98 F9               [ 4] 2500 	mov	r1,a
      000C99 E0               [ 8] 2501 	movx	a,@dptr
      000C9A A3               [12] 2502 	inc	dptr
      000C9B FB               [ 4] 2503 	mov	r3,a
      000C9C E0               [ 8] 2504 	movx	a,@dptr
      000C9D FE               [ 4] 2505 	mov	r6,a
      000C9E 88 82            [ 8] 2506 	mov	dpl,r0
      000CA0 89 83            [ 8] 2507 	mov	dph,r1
      000CA2 8B 93            [ 8] 2508 	mov	dpx,r3
      000CA4 8E F0            [ 8] 2509 	mov	b,r6
      000CA6 12s00r00r00      [16] 2510 	lcall	__gptrget
                                   2511 ;	genAssign: resultIsFar = TRUE
      000CAA F8               [ 4] 2512 	mov  r0,a
      000CAB 88 02            [ 8] 2513 	mov  ar2,r0 
      000CAD 60 43            [12] 2514 	jz  00327$
      000CAF                       2515 00540$:
                                   2516 ;	genAssign: resultIsFar = FALSE
      000CAF 8F 06            [ 8] 2517 	mov	ar6,r7
      000CB1 1F               [ 4] 2518 	dec	r7
      000CB2 C3               [ 4] 2519 	clr	c
      000CB3 E4               [ 4] 2520 	clr	a
      000CB4 64 80            [ 8] 2521 	xrl	a,#0x80
      000CB6 8E F0            [ 8] 2522 	mov	b,r6
      000CB8 63 F0 80         [12] 2523 	xrl	b,#0x80
      000CBB 95 F0            [ 8] 2524 	subb	a,b
      000CBD 50 33            [12] 2525 	jnc  00327$
      000CBF                       2526 00541$:
                                   2527 ;	printf_large.c:599: OUTPUT_CHAR( c, p );
      000CBF C0 07            [ 8] 2528 	push	ar7
      000CC1 8A 82            [ 8] 2529 	mov	dpl,r2
      000CC3 12s00r00r00      [16] 2530 	lcall	__output_char
      000CC7 D0 07            [ 8] 2531 	pop	ar7
                                   2532 ;	printf_large.c:600: PTR++;
      000CC9 90s00r00r07      [12] 2533 	mov	dptr,#_value
      000CCD E0               [ 8] 2534 	movx	a,@dptr
      000CCE A3               [12] 2535 	inc	dptr
      000CCF FE               [ 4] 2536 	mov	r6,a
      000CD0 E0               [ 8] 2537 	movx	a,@dptr
      000CD1 A3               [12] 2538 	inc	dptr
      000CD2 F8               [ 4] 2539 	mov	r0,a
      000CD3 E0               [ 8] 2540 	movx	a,@dptr
      000CD4 A3               [12] 2541 	inc	dptr
      000CD5 F9               [ 4] 2542 	mov	r1,a
      000CD6 E0               [ 8] 2543 	movx	a,@dptr
      000CD7 FB               [ 4] 2544 	mov	r3,a
      000CD8 0E               [ 4] 2545 	inc	r6
      000CD9 BE 00 05         [16] 2546 	cjne	r6,#0x00,00542$
      000CDC 08               [ 4] 2547 	inc	r0
      000CDD B8 00 01         [16] 2548 	cjne	r0,#0x00,00542$
      000CE0 09               [ 4] 2549 	inc	r1
      000CE1                       2550 00542$:
      000CE1 90s00r00r07      [12] 2551 	mov	dptr,#_value
      000CE5 EE               [ 4] 2552 	mov	a,r6
      000CE6 F0               [ 8] 2553 	movx	@dptr,a
      000CE7 A3               [12] 2554 	inc	dptr
      000CE8 E8               [ 4] 2555 	mov	a,r0
      000CE9 F0               [ 8] 2556 	movx	@dptr,a
      000CEA A3               [12] 2557 	inc	dptr
      000CEB E9               [ 4] 2558 	mov	a,r1
      000CEC F0               [ 8] 2559 	movx	@dptr,a
      000CED A3               [12] 2560 	inc	dptr
      000CEE EB               [ 4] 2561 	mov	a,r3
      000CEF F0               [ 8] 2562 	movx	@dptr,a
      000CF0 80 9D            [12] 2563 	sjmp 00148$
      000CF2                       2564 00327$:
                                   2565 ;	genAssign: resultIsFar = TRUE
      000CF2 8F 05            [ 8] 2566 	mov	ar5,r7
                                   2567 ;	printf_large.c:603: if ( left_justify && (length < width))
      000CF4 20*06 04         [12] 2568 	jb	__print_format_left_justify_1_98,00543$
      000CF7 02s00r0Er72      [16] 2569 	ljmp	00174$
      000CFB                       2570 00543$:
      000CFB 90s00r00rAD      [12] 2571 	mov	dptr,#__print_format_width_1_98
      000CFF 75 86 01         [12] 2572 	mov	dps, #1
      000D02 90s00r00rAE      [12] 2573 	mov	dptr, #__print_format_length_1_98
      000D06 15 86            [ 8] 2574 	dec	dps
      000D08 C3               [ 4] 2575 	clr	c
      000D09 75 86 01         [12] 2576 	mov	dps,#1
      000D0C E0               [ 8] 2577 	movx	a,@dptr
      000D0D 75 86 00         [12] 2578 	mov	dps,#0
      000D10 C5 F0            [ 8] 2579 	xch	a, b
      000D12 E0               [ 8] 2580 	movx	a,@dptr
      000D13 C5 F0            [ 8] 2581 	xch	a, b
      000D15 95 F0            [ 8] 2582 	subb	a,b
      000D17 40 04            [12] 2583 	jc	00544$
      000D19 02s00r0Er72      [16] 2584 	ljmp	00174$
      000D1D                       2585 00544$:
                                   2586 ;	printf_large.c:605: width -= length;
      000D1D 90s00r00rAE      [12] 2587 	mov	dptr,#__print_format_length_1_98
      000D21 75 86 01         [12] 2588 	mov	dps, #1
      000D24 90s00r00rAD      [12] 2589 	mov	dptr, #__print_format_width_1_98
      000D28 15 86            [ 8] 2590 	dec	dps
      000D2A C3               [ 4] 2591 	clr	c
      000D2B E0               [ 8] 2592 	movx	a,@dptr
      000D2C F5 F0            [ 8] 2593 	mov	b,a
      000D2E 05 86            [ 8] 2594 	inc	dps
      000D30 E0               [ 8] 2595 	movx	a,@dptr
      000D31 95 F0            [ 8] 2596 	subb	a,b
      000D33 F0               [ 8] 2597 	movx	@dptr,a
      000D34 75 86 00         [12] 2598 	mov	dps,#0
                                   2599 ;	printf_large.c:606: while( width-- != 0 )
      000D37 90s00r00rAD      [12] 2600 	mov	dptr,#__print_format_width_1_98
                                   2601 ;	genAssign: resultIsFar = FALSE
      000D3B E0               [ 8] 2602 	movx	a,@dptr
      000D3C FE               [ 4] 2603 	mov	r6,a
      000D3D                       2604 00151$:
                                   2605 ;	genAssign: resultIsFar = FALSE
      000D3D 8E 07            [ 8] 2606 	mov	ar7,r6
      000D3F 1E               [ 4] 2607 	dec	r6
      000D40 EF               [ 4] 2608 	mov	a,r7
      000D41 70 04            [12] 2609 	jnz	00545$
      000D43 02s00r0Er6C      [16] 2610 	ljmp	00328$
      000D47                       2611 00545$:
                                   2612 ;	printf_large.c:608: OUTPUT_CHAR( ' ', p );
      000D47 C0 05            [ 8] 2613 	push	ar5
      000D49 C0 06            [ 8] 2614 	push	ar6
      000D4B 75 82 20         [12] 2615 	mov	dpl,#0x20
      000D4E 12s00r00r00      [16] 2616 	lcall	__output_char
      000D52 D0 06            [ 8] 2617 	pop	ar6
      000D54 D0 05            [ 8] 2618 	pop	ar5
                                   2619 ;	printf_large.c:613: case 'P':
      000D56 80 E5            [12] 2620 	sjmp 00151$
      000D58                       2621 00157$:
                                   2622 ;	printf_large.c:614: PTR = va_arg(ap,ptr_t);
      000D58 90s00r00rA8      [12] 2623 	mov	dptr,#__print_format_PARM_4
                                   2624 ;	genAssign: resultIsFar = FALSE
      000D5C E0               [ 8] 2625 	movx	a,@dptr
      000D5D FF               [ 4] 2626 	mov	r7,a
      000D5E A3               [12] 2627 	inc	dptr
      000D5F E0               [ 8] 2628 	movx	a,@dptr
      000D60 F8               [ 4] 2629 	mov	r0,a
      000D61 A3               [12] 2630 	inc	dptr
      000D62 E0               [ 8] 2631 	movx	a,@dptr
      000D63 F9               [ 4] 2632 	mov	r1,a
      000D64 A3               [12] 2633 	inc	dptr
      000D65 E0               [ 8] 2634 	movx	a,@dptr
      000D66 FB               [ 4] 2635 	mov	r3,a
      000D67 EF               [ 4] 2636 	mov	a,r7
      000D68 24 FC            [ 8] 2637 	add	a,#0xFC
      000D6A FF               [ 4] 2638 	mov	r7,a
      000D6B E8               [ 4] 2639 	mov	a,r0
      000D6C 34 FF            [ 8] 2640 	addc	a,#0xFF
      000D6E F8               [ 4] 2641 	mov	r0,a
      000D6F E9               [ 4] 2642 	mov	a,r1
      000D70 34 FF            [ 8] 2643 	addc	a,#0xFF
      000D72 F9               [ 4] 2644 	mov	r1,a
                                   2645 ;	genAssign: resultIsFar = TRUE
      000D73 90s00r00rA8      [12] 2646 	mov	dptr,#__print_format_PARM_4
      000D77 EF               [ 4] 2647 	mov	a,r7
      000D78 F0               [ 8] 2648 	movx	@dptr,a
      000D79 A3               [12] 2649 	inc	dptr
      000D7A E8               [ 4] 2650 	mov	a,r0
      000D7B F0               [ 8] 2651 	movx	@dptr,a
      000D7C A3               [12] 2652 	inc	dptr
      000D7D E9               [ 4] 2653 	mov	a,r1
      000D7E F0               [ 8] 2654 	movx	@dptr,a
      000D7F A3               [12] 2655 	inc	dptr
      000D80 EB               [ 4] 2656 	mov	a,r3
      000D81 F0               [ 8] 2657 	movx	@dptr,a
      000D82 8F 82            [ 8] 2658 	mov	dpl,r7
      000D84 88 83            [ 8] 2659 	mov	dph,r0
      000D86 89 93            [ 8] 2660 	mov	dpx,r1
      000D88 8B F0            [ 8] 2661 	mov	b,r3
      000D8A 12s00r00r00      [16] 2662 	lcall	__gptrgetWord
      000D8E FB               [ 4] 2663 	mov	r3,a
      000D8F AF 9C            [ 8] 2664 	mov	r7,acc1
      000D91 A3               [12] 2665 	inc	dptr
      000D92 12s00r00r00      [16] 2666 	lcall	__gptrgetWord
      000D96 F8               [ 4] 2667 	mov	r0,a
      000D97 A9 9C            [ 8] 2668 	mov	r1,acc1
      000D99 12s00r00r00      [16] 2669 	lcall	__decdptr
      000D9D 12s00r00r00      [16] 2670 	lcall	__decdptr
      000DA1 12s00r00r00      [16] 2671 	lcall	__decdptr
      000DA5 90s00r00r07      [12] 2672 	mov	dptr,#_value
      000DA9 EB               [ 4] 2673 	mov	a,r3
      000DAA F0               [ 8] 2674 	movx	@dptr,a
      000DAB A3               [12] 2675 	inc	dptr
      000DAC EF               [ 4] 2676 	mov	a,r7
      000DAD F0               [ 8] 2677 	movx	@dptr,a
      000DAE A3               [12] 2678 	inc	dptr
      000DAF E8               [ 4] 2679 	mov	a,r0
      000DB0 F0               [ 8] 2680 	movx	@dptr,a
      000DB1 A3               [12] 2681 	inc	dptr
      000DB2 E9               [ 4] 2682 	mov	a,r1
      000DB3 F0               [ 8] 2683 	movx	@dptr,a
                                   2684 ;	printf_large.c:618: unsigned char memtype = value.byte[3];
      000DB4 90s00r00r0A      [12] 2685 	mov	dptr,#(_value + 0x000003)
      000DB8 E0               [ 8] 2686 	movx	a,@dptr
      000DB9 FB               [ 4] 2687 	mov	r3,a
                                   2688 ;	genAssign: resultIsFar = FALSE
      000DBA 8B 02            [ 8] 2689 	mov	ar2,r3
                                   2690 ;	printf_large.c:619: if (memtype >= 0x80)
      000DBC BA 80 00         [16] 2691 	cjne	r2,#0x80,00546$
      000DBF                       2692 00546$:
      000DBF 40 04            [12] 2693 	jc   00165$
      000DC1                       2694 00547$:
                                   2695 ;	printf_large.c:620: c = 'C';
                                   2696 ;	genAssign: resultIsFar = TRUE
      000DC1 7A 43            [ 8] 2697 	mov	r2,#0x43
      000DC3 80 14            [12] 2698 	sjmp 00166$
      000DC5                       2699 00165$:
                                   2700 ;	printf_large.c:621: else if (memtype >= 0x60)
      000DC5 BA 60 00         [16] 2701 	cjne	r2,#0x60,00548$
      000DC8                       2702 00548$:
      000DC8 40 04            [12] 2703 	jc   00162$
      000DCA                       2704 00549$:
                                   2705 ;	printf_large.c:622: c = 'P';
                                   2706 ;	genAssign: resultIsFar = TRUE
      000DCA 7A 50            [ 8] 2707 	mov	r2,#0x50
      000DCC 80 0B            [12] 2708 	sjmp 00166$
      000DCE                       2709 00162$:
                                   2710 ;	printf_large.c:623: else if (memtype >= 0x40)
      000DCE BA 40 00         [16] 2711 	cjne	r2,#0x40,00550$
      000DD1                       2712 00550$:
      000DD1 40 04            [12] 2713 	jc   00159$
      000DD3                       2714 00551$:
                                   2715 ;	printf_large.c:624: c = 'I';
                                   2716 ;	genAssign: resultIsFar = TRUE
      000DD3 7A 49            [ 8] 2717 	mov	r2,#0x49
      000DD5 80 02            [12] 2718 	sjmp 00166$
      000DD7                       2719 00159$:
                                   2720 ;	printf_large.c:626: c = 'X';
                                   2721 ;	genAssign: resultIsFar = TRUE
      000DD7 7A 58            [ 8] 2722 	mov	r2,#0x58
      000DD9                       2723 00166$:
                                   2724 ;	printf_large.c:628: OUTPUT_CHAR(c, p);
      000DD9 C0 05            [ 8] 2725 	push	ar5
      000DDB 8A 82            [ 8] 2726 	mov	dpl,r2
      000DDD 12s00r00r00      [16] 2727 	lcall	__output_char
      000DE1 D0 05            [ 8] 2728 	pop	ar5
                                   2729 ;	printf_large.c:629: OUTPUT_CHAR(':', p);
      000DE3 C0 05            [ 8] 2730 	push	ar5
      000DE5 75 82 3A         [12] 2731 	mov	dpl,#0x3A
      000DE8 12s00r00r00      [16] 2732 	lcall	__output_char
      000DEC D0 05            [ 8] 2733 	pop	ar5
                                   2734 ;	printf_large.c:630: OUTPUT_CHAR('0', p);
      000DEE C0 05            [ 8] 2735 	push	ar5
      000DF0 75 82 30         [12] 2736 	mov	dpl,#0x30
      000DF3 12s00r00r00      [16] 2737 	lcall	__output_char
      000DF7 D0 05            [ 8] 2738 	pop	ar5
                                   2739 ;	printf_large.c:631: OUTPUT_CHAR('x', p);
      000DF9 C0 05            [ 8] 2740 	push	ar5
      000DFB 75 82 78         [12] 2741 	mov	dpl,#0x78
      000DFE 12s00r00r00      [16] 2742 	lcall	__output_char
      000E02 D0 05            [ 8] 2743 	pop	ar5
                                   2744 ;	printf_large.c:632: OUTPUT_2DIGITS( value.byte[2] );
      000E04 90s00r00r09      [12] 2745 	mov	dptr,#(_value + 0x000002)
      000E08 E0               [ 8] 2746 	movx	a,@dptr
      000E09 FF               [ 4] 2747 	mov	r7,a
      000E0A C0 05            [ 8] 2748 	push	ar5
      000E0C 8F 82            [ 8] 2749 	mov	dpl,r7
      000E0E 12s00r00r66      [16] 2750 	lcall	_output_2digits
      000E12 D0 05            [ 8] 2751 	pop	ar5
                                   2752 ;	printf_large.c:633: OUTPUT_2DIGITS( value.byte[1] );
      000E14 90s00r00r08      [12] 2753 	mov	dptr,#(_value + 0x000001)
      000E18 E0               [ 8] 2754 	movx	a,@dptr
      000E19 FF               [ 4] 2755 	mov	r7,a
      000E1A C0 05            [ 8] 2756 	push	ar5
      000E1C 8F 82            [ 8] 2757 	mov	dpl,r7
      000E1E 12s00r00r66      [16] 2758 	lcall	_output_2digits
      000E22 D0 05            [ 8] 2759 	pop	ar5
                                   2760 ;	printf_large.c:634: OUTPUT_2DIGITS( value.byte[0] );
      000E24 90s00r00r07      [12] 2761 	mov	dptr,#_value
      000E28 E0               [ 8] 2762 	movx	a,@dptr
      000E29 FF               [ 4] 2763 	mov	r7,a
      000E2A C0 05            [ 8] 2764 	push	ar5
      000E2C 8F 82            [ 8] 2765 	mov	dpl,r7
      000E2E 12s00r00r66      [16] 2766 	lcall	_output_2digits
      000E32 D0 05            [ 8] 2767 	pop	ar5
                                   2768 ;	printf_large.c:663: break;
                                   2769 ;	printf_large.c:666: case 'I':
      000E34 80 3C            [12] 2770 	sjmp 00174$
      000E36                       2771 00168$:
                                   2772 ;	printf_large.c:667: signed_argument = 1;
                                   2773 ;	genAssign: resultIsFar = FALSE
      000E36 D2*0A            [ 8] 2774 	setb	__print_format_signed_argument_1_98
                                   2775 ;	printf_large.c:668: radix = 10;
                                   2776 ;	genAssign: resultIsFar = TRUE
      000E38 90s00r00rAC      [12] 2777 	mov	dptr,#__print_format_radix_1_98
      000E3C 74 0A            [ 8] 2778 	mov	a,#0x0A
      000E3E F0               [ 8] 2779 	movx	@dptr,a
                                   2780 ;	printf_large.c:669: break;
                                   2781 ;	printf_large.c:671: case 'O':
      000E3F 80 31            [12] 2782 	sjmp 00174$
      000E41                       2783 00169$:
                                   2784 ;	printf_large.c:672: radix = 8;
                                   2785 ;	genAssign: resultIsFar = TRUE
      000E41 90s00r00rAC      [12] 2786 	mov	dptr,#__print_format_radix_1_98
      000E45 74 08            [ 8] 2787 	mov	a,#0x08
      000E47 F0               [ 8] 2788 	movx	@dptr,a
                                   2789 ;	printf_large.c:673: break;
                                   2790 ;	printf_large.c:675: case 'U':
      000E48 80 28            [12] 2791 	sjmp 00174$
      000E4A                       2792 00170$:
                                   2793 ;	printf_large.c:676: radix = 10;
                                   2794 ;	genAssign: resultIsFar = TRUE
      000E4A 90s00r00rAC      [12] 2795 	mov	dptr,#__print_format_radix_1_98
      000E4E 74 0A            [ 8] 2796 	mov	a,#0x0A
      000E50 F0               [ 8] 2797 	movx	@dptr,a
                                   2798 ;	printf_large.c:677: break;
                                   2799 ;	printf_large.c:679: case 'X':
      000E51 80 1F            [12] 2800 	sjmp 00174$
      000E53                       2801 00171$:
                                   2802 ;	printf_large.c:680: radix = 16;
                                   2803 ;	genAssign: resultIsFar = TRUE
      000E53 90s00r00rAC      [12] 2804 	mov	dptr,#__print_format_radix_1_98
      000E57 74 10            [ 8] 2805 	mov	a,#0x10
      000E59 F0               [ 8] 2806 	movx	@dptr,a
                                   2807 ;	printf_large.c:681: break;
                                   2808 ;	printf_large.c:683: case 'F':
      000E5A 80 16            [12] 2809 	sjmp 00174$
      000E5C                       2810 00172$:
                                   2811 ;	printf_large.c:684: float_argument=1;
                                   2812 ;	genAssign: resultIsFar = FALSE
      000E5C D2*0D            [ 8] 2813 	setb	__print_format_float_argument_1_98
                                   2814 ;	printf_large.c:685: break;
                                   2815 ;	printf_large.c:687: default:
      000E5E 80 12            [12] 2816 	sjmp 00174$
      000E60                       2817 00173$:
                                   2818 ;	printf_large.c:689: OUTPUT_CHAR( c, p );
      000E60 C0 05            [ 8] 2819 	push	ar5
      000E62 8A 82            [ 8] 2820 	mov	dpl,r2
      000E64 12s00r00r00      [16] 2821 	lcall	__output_char
      000E68 D0 05            [ 8] 2822 	pop	ar5
                                   2823 ;	printf_large.c:872: return charsOutputted;
                                   2824 ;	printf_large.c:691: }
      000E6A 80 06            [12] 2825 	sjmp 00174$
      000E6C                       2826 00328$:
                                   2827 ;	genAssign: resultIsFar = TRUE
      000E6C 90s00r00rAD      [12] 2828 	mov	dptr,#__print_format_width_1_98
      000E70 EE               [ 4] 2829 	mov	a,r6
      000E71 F0               [ 8] 2830 	movx	@dptr,a
      000E72                       2831 00174$:
                                   2832 ;	printf_large.c:693: if (float_argument)
      000E72 20*0D 04         [12] 2833 	jb	__print_format_float_argument_1_98,00552$
      000E75 02s00r0Fr10      [16] 2834 	ljmp	00237$
      000E79                       2835 00552$:
                                   2836 ;	printf_large.c:695: value.f = va_arg(ap, float);
      000E79 90s00r00rA8      [12] 2837 	mov	dptr,#__print_format_PARM_4
                                   2838 ;	genAssign: resultIsFar = FALSE
      000E7D E0               [ 8] 2839 	movx	a,@dptr
      000E7E FE               [ 4] 2840 	mov	r6,a
      000E7F A3               [12] 2841 	inc	dptr
      000E80 E0               [ 8] 2842 	movx	a,@dptr
      000E81 FF               [ 4] 2843 	mov	r7,a
      000E82 A3               [12] 2844 	inc	dptr
      000E83 E0               [ 8] 2845 	movx	a,@dptr
      000E84 F8               [ 4] 2846 	mov	r0,a
      000E85 A3               [12] 2847 	inc	dptr
      000E86 E0               [ 8] 2848 	movx	a,@dptr
      000E87 F9               [ 4] 2849 	mov	r1,a
      000E88 EE               [ 4] 2850 	mov	a,r6
      000E89 24 FC            [ 8] 2851 	add	a,#0xFC
      000E8B FE               [ 4] 2852 	mov	r6,a
      000E8C EF               [ 4] 2853 	mov	a,r7
      000E8D 34 FF            [ 8] 2854 	addc	a,#0xFF
      000E8F FF               [ 4] 2855 	mov	r7,a
      000E90 E8               [ 4] 2856 	mov	a,r0
      000E91 34 FF            [ 8] 2857 	addc	a,#0xFF
      000E93 F8               [ 4] 2858 	mov	r0,a
                                   2859 ;	genAssign: resultIsFar = TRUE
      000E94 90s00r00rA8      [12] 2860 	mov	dptr,#__print_format_PARM_4
      000E98 EE               [ 4] 2861 	mov	a,r6
      000E99 F0               [ 8] 2862 	movx	@dptr,a
      000E9A A3               [12] 2863 	inc	dptr
      000E9B EF               [ 4] 2864 	mov	a,r7
      000E9C F0               [ 8] 2865 	movx	@dptr,a
      000E9D A3               [12] 2866 	inc	dptr
      000E9E E8               [ 4] 2867 	mov	a,r0
      000E9F F0               [ 8] 2868 	movx	@dptr,a
      000EA0 A3               [12] 2869 	inc	dptr
      000EA1 E9               [ 4] 2870 	mov	a,r1
      000EA2 F0               [ 8] 2871 	movx	@dptr,a
      000EA3 8E 82            [ 8] 2872 	mov	dpl,r6
      000EA5 8F 83            [ 8] 2873 	mov	dph,r7
      000EA7 88 93            [ 8] 2874 	mov	dpx,r0
      000EA9 89 F0            [ 8] 2875 	mov	b,r1
      000EAB 12s00r00r00      [16] 2876 	lcall	__gptrgetWord
      000EAF FE               [ 4] 2877 	mov	r6,a
      000EB0 AF 9C            [ 8] 2878 	mov	r7,acc1
      000EB2 A3               [12] 2879 	inc	dptr
      000EB3 12s00r00r00      [16] 2880 	lcall	__gptrgetWord
      000EB7 F8               [ 4] 2881 	mov	r0,a
      000EB8 A9 9C            [ 8] 2882 	mov	r1,acc1
      000EBA 12s00r00r00      [16] 2883 	lcall	__decdptr
      000EBE 12s00r00r00      [16] 2884 	lcall	__decdptr
      000EC2 12s00r00r00      [16] 2885 	lcall	__decdptr
      000EC6 90s00r00r07      [12] 2886 	mov	dptr,#_value
      000ECA EE               [ 4] 2887 	mov	a,r6
      000ECB F0               [ 8] 2888 	movx	@dptr,a
      000ECC A3               [12] 2889 	inc	dptr
      000ECD EF               [ 4] 2890 	mov	a,r7
      000ECE F0               [ 8] 2891 	movx	@dptr,a
      000ECF A3               [12] 2892 	inc	dptr
      000ED0 E8               [ 4] 2893 	mov	a,r0
      000ED1 F0               [ 8] 2894 	movx	@dptr,a
      000ED2 A3               [12] 2895 	inc	dptr
      000ED3 E9               [ 4] 2896 	mov	a,r1
      000ED4 F0               [ 8] 2897 	movx	@dptr,a
                                   2898 ;	printf_large.c:713: OUTPUT_FLOAT(value.f, width, decimals, left_justify,
      000ED5 90s00r00r07      [12] 2899 	mov	dptr,#_value
      000ED9 E0               [ 8] 2900 	movx	a,@dptr
      000EDA A3               [12] 2901 	inc	dptr
      000EDB E0               [ 8] 2902 	movx	a,@dptr
      000EDC A3               [12] 2903 	inc	dptr
      000EDD E0               [ 8] 2904 	movx	a,@dptr
      000EDE A3               [12] 2905 	inc	dptr
      000EDF E0               [ 8] 2906 	movx	a,@dptr
      000EE0 90s00r00rAD      [12] 2907 	mov	dptr,#__print_format_width_1_98
                                   2908 ;	genAssign: resultIsFar = TRUE
      000EE4 E0               [ 8] 2909 	movx	a,@dptr
      000EE5 90s00r00r0E      [12] 2910 	mov	dptr,#_output_float_PARM_2
      000EE9 F0               [ 8] 2911 	movx	@dptr,a
                                   2912 ;	genAssign: resultIsFar = TRUE
      000EEA 90s00r00r0F      [12] 2913 	mov	dptr,#_output_float_PARM_3
      000EEE ED               [ 4] 2914 	mov	a,r5
      000EEF F0               [ 8] 2915 	movx	@dptr,a
                                   2916 ;	genAssign: resultIsFar = FALSE
      000EF0 A2*06            [ 8] 2917 	mov	c,__print_format_left_justify_1_98
      000EF2 92*01            [ 8] 2918 	mov	_output_float_PARM_4,c
                                   2919 ;	genAssign: resultIsFar = FALSE
      000EF4 A2*07            [ 8] 2920 	mov	c,__print_format_zero_padding_1_98
      000EF6 92*02            [ 8] 2921 	mov	_output_float_PARM_5,c
                                   2922 ;	genAssign: resultIsFar = FALSE
      000EF8 A2*08            [ 8] 2923 	mov	c,__print_format_prefix_sign_1_98
      000EFA 92*03            [ 8] 2924 	mov	_output_float_PARM_6,c
                                   2925 ;	genAssign: resultIsFar = FALSE
      000EFC A2*09            [ 8] 2926 	mov	c,__print_format_prefix_space_1_98
      000EFE 92*04            [ 8] 2927 	mov	_output_float_PARM_7,c
      000F00 8E 82            [ 8] 2928 	mov	dpl,r6
      000F02 8F 83            [ 8] 2929 	mov	dph,r7
      000F04 88 93            [ 8] 2930 	mov	dpx,r0
      000F06 89 F0            [ 8] 2931 	mov	b,r1
      000F08 12s00r00rE0      [16] 2932 	lcall	_output_float
      000F0C 02s00r09r4E      [16] 2933 	ljmp	00242$
      000F10                       2934 00237$:
                                   2935 ;	printf_large.c:718: else if (radix != 0)
      000F10 90s00r00rAC      [12] 2936 	mov	dptr,#__print_format_radix_1_98
      000F14 E0               [ 8] 2937 	movx	a,@dptr
      000F15 70 04            [12] 2938 	jnz	00553$
      000F17 02s00r09r4E      [16] 2939 	ljmp	00242$
      000F1B                       2940 00553$:
                                   2941 ;	printf_large.c:723: unsigned char MEM_SPACE_BUF_PP *pstore = &store[5];
                                   2942 ;	genAssign: resultIsFar = TRUE
      000F1B 90s00r00rB5      [12] 2943 	mov	dptr,#__print_format_pstore_4_120
      000F1F 74rB4            [ 8] 2944 	mov	a,#(__print_format_store_4_120 + 0x000005)
      000F21 F0               [ 8] 2945 	movx	@dptr,a
      000F22 A3               [12] 2946 	inc	dptr
      000F23 74s00            [ 8] 2947 	mov	a,#((__print_format_store_4_120 + 0x000005) >> 8)
      000F25 F0               [ 8] 2948 	movx	@dptr,a
      000F26 A3               [12] 2949 	inc	dptr
      000F27 74s00            [ 8] 2950 	mov	a,#((__print_format_store_4_120 + 0x000005) >> 16)
      000F29 F0               [ 8] 2951 	movx	@dptr,a
                                   2952 ;	printf_large.c:726: if (char_argument)
      000F2A 30*0B 78         [12] 2953 	jnb  __print_format_char_argument_1_98,00183$
      000F2D                       2954 00554$:
                                   2955 ;	printf_large.c:728: value.l = va_arg(ap, char);
      000F2D 90s00r00rA8      [12] 2956 	mov	dptr,#__print_format_PARM_4
                                   2957 ;	genAssign: resultIsFar = FALSE
      000F31 E0               [ 8] 2958 	movx	a,@dptr
      000F32 F8               [ 4] 2959 	mov	r0,a
      000F33 A3               [12] 2960 	inc	dptr
      000F34 E0               [ 8] 2961 	movx	a,@dptr
      000F35 F9               [ 4] 2962 	mov	r1,a
      000F36 A3               [12] 2963 	inc	dptr
      000F37 E0               [ 8] 2964 	movx	a,@dptr
      000F38 FD               [ 4] 2965 	mov	r5,a
      000F39 A3               [12] 2966 	inc	dptr
      000F3A E0               [ 8] 2967 	movx	a,@dptr
      000F3B FE               [ 4] 2968 	mov	r6,a
      000F3C 18               [ 4] 2969 	dec	r0
      000F3D B8 FF 05         [16] 2970 	cjne	r0,#0xFF,00555$
      000F40 19               [ 4] 2971 	dec	r1
      000F41 B9 FF 01         [16] 2972 	cjne	r1,#0xFF,00555$
      000F44 1D               [ 4] 2973 	dec	r5
      000F45                       2974 00555$:
                                   2975 ;	genAssign: resultIsFar = TRUE
      000F45 90s00r00rA8      [12] 2976 	mov	dptr,#__print_format_PARM_4
      000F49 E8               [ 4] 2977 	mov	a,r0
      000F4A F0               [ 8] 2978 	movx	@dptr,a
      000F4B A3               [12] 2979 	inc	dptr
      000F4C E9               [ 4] 2980 	mov	a,r1
      000F4D F0               [ 8] 2981 	movx	@dptr,a
      000F4E A3               [12] 2982 	inc	dptr
      000F4F ED               [ 4] 2983 	mov	a,r5
      000F50 F0               [ 8] 2984 	movx	@dptr,a
      000F51 A3               [12] 2985 	inc	dptr
      000F52 EE               [ 4] 2986 	mov	a,r6
      000F53 F0               [ 8] 2987 	movx	@dptr,a
      000F54 88 82            [ 8] 2988 	mov	dpl,r0
      000F56 89 83            [ 8] 2989 	mov	dph,r1
      000F58 8D 93            [ 8] 2990 	mov	dpx,r5
      000F5A 8E F0            [ 8] 2991 	mov	b,r6
      000F5C 12s00r00r00      [16] 2992 	lcall	__gptrget
      000F60 FD               [ 4] 2993 	mov  r5,a
      000F61 33               [ 4] 2994 	rlc	a
      000F62 95 E0            [ 8] 2995 	subb	a,acc
      000F64 FE               [ 4] 2996 	mov	r6,a
      000F65 FF               [ 4] 2997 	mov	r7,a
      000F66 F8               [ 4] 2998 	mov	r0,a
      000F67 90s00r00r07      [12] 2999 	mov	dptr,#_value
      000F6B ED               [ 4] 3000 	mov	a,r5
      000F6C F0               [ 8] 3001 	movx	@dptr,a
      000F6D A3               [12] 3002 	inc	dptr
      000F6E EE               [ 4] 3003 	mov	a,r6
      000F6F F0               [ 8] 3004 	movx	@dptr,a
      000F70 A3               [12] 3005 	inc	dptr
      000F71 EF               [ 4] 3006 	mov	a,r7
      000F72 F0               [ 8] 3007 	movx	@dptr,a
      000F73 A3               [12] 3008 	inc	dptr
      000F74 E8               [ 4] 3009 	mov	a,r0
      000F75 F0               [ 8] 3010 	movx	@dptr,a
                                   3011 ;	printf_large.c:729: if (!signed_argument)
      000F76 30*0A 04         [12] 3012 	jnb	__print_format_signed_argument_1_98,00556$
      000F79 02s00r10r7D      [16] 3013 	ljmp	00184$
      000F7D                       3014 00556$:
                                   3015 ;	printf_large.c:731: value.l &= 0xFF;
      000F7D 90s00r00r07      [12] 3016 	mov	dptr,#_value
      000F81 E0               [ 8] 3017 	movx	a,@dptr
      000F82 A3               [12] 3018 	inc	dptr
      000F83 F8               [ 4] 3019 	mov	r0,a
      000F84 E0               [ 8] 3020 	movx	a,@dptr
      000F85 A3               [12] 3021 	inc	dptr
      000F86 F9               [ 4] 3022 	mov	r1,a
      000F87 E0               [ 8] 3023 	movx	a,@dptr
      000F88 A3               [12] 3024 	inc	dptr
      000F89 FD               [ 4] 3025 	mov	r5,a
      000F8A E0               [ 8] 3026 	movx	a,@dptr
      000F8B FE               [ 4] 3027 	mov	r6,a
      000F8C 79 00            [ 8] 3028 	mov	r1,#0x00
      000F8E 7D 00            [ 8] 3029 	mov	r5,#0x00
      000F90 7E 00            [ 8] 3030 	mov	r6,#0x00
      000F92 90s00r00r07      [12] 3031 	mov	dptr,#_value
      000F96 E8               [ 4] 3032 	mov	a,r0
      000F97 F0               [ 8] 3033 	movx	@dptr,a
      000F98 A3               [12] 3034 	inc	dptr
      000F99 E9               [ 4] 3035 	mov	a,r1
      000F9A F0               [ 8] 3036 	movx	@dptr,a
      000F9B A3               [12] 3037 	inc	dptr
      000F9C ED               [ 4] 3038 	mov	a,r5
      000F9D F0               [ 8] 3039 	movx	@dptr,a
      000F9E A3               [12] 3040 	inc	dptr
      000F9F EE               [ 4] 3041 	mov	a,r6
      000FA0 F0               [ 8] 3042 	movx	@dptr,a
      000FA1 02s00r10r7D      [16] 3043 	ljmp	00184$
      000FA5                       3044 00183$:
                                   3045 ;	printf_large.c:734: else if (long_argument)
      000FA5 30*0C 5E         [12] 3046 	jnb  __print_format_long_argument_1_98,00180$
      000FA8                       3047 00557$:
                                   3048 ;	printf_large.c:736: value.l = va_arg(ap, long);
      000FA8 90s00r00rA8      [12] 3049 	mov	dptr,#__print_format_PARM_4
                                   3050 ;	genAssign: resultIsFar = FALSE
      000FAC E0               [ 8] 3051 	movx	a,@dptr
      000FAD F8               [ 4] 3052 	mov	r0,a
      000FAE A3               [12] 3053 	inc	dptr
      000FAF E0               [ 8] 3054 	movx	a,@dptr
      000FB0 F9               [ 4] 3055 	mov	r1,a
      000FB1 A3               [12] 3056 	inc	dptr
      000FB2 E0               [ 8] 3057 	movx	a,@dptr
      000FB3 FD               [ 4] 3058 	mov	r5,a
      000FB4 A3               [12] 3059 	inc	dptr
      000FB5 E0               [ 8] 3060 	movx	a,@dptr
      000FB6 FE               [ 4] 3061 	mov	r6,a
      000FB7 E8               [ 4] 3062 	mov	a,r0
      000FB8 24 FC            [ 8] 3063 	add	a,#0xFC
      000FBA F8               [ 4] 3064 	mov	r0,a
      000FBB E9               [ 4] 3065 	mov	a,r1
      000FBC 34 FF            [ 8] 3066 	addc	a,#0xFF
      000FBE F9               [ 4] 3067 	mov	r1,a
      000FBF ED               [ 4] 3068 	mov	a,r5
      000FC0 34 FF            [ 8] 3069 	addc	a,#0xFF
      000FC2 FD               [ 4] 3070 	mov	r5,a
                                   3071 ;	genAssign: resultIsFar = TRUE
      000FC3 90s00r00rA8      [12] 3072 	mov	dptr,#__print_format_PARM_4
      000FC7 E8               [ 4] 3073 	mov	a,r0
      000FC8 F0               [ 8] 3074 	movx	@dptr,a
      000FC9 A3               [12] 3075 	inc	dptr
      000FCA E9               [ 4] 3076 	mov	a,r1
      000FCB F0               [ 8] 3077 	movx	@dptr,a
      000FCC A3               [12] 3078 	inc	dptr
      000FCD ED               [ 4] 3079 	mov	a,r5
      000FCE F0               [ 8] 3080 	movx	@dptr,a
      000FCF A3               [12] 3081 	inc	dptr
      000FD0 EE               [ 4] 3082 	mov	a,r6
      000FD1 F0               [ 8] 3083 	movx	@dptr,a
      000FD2 88 82            [ 8] 3084 	mov	dpl,r0
      000FD4 89 83            [ 8] 3085 	mov	dph,r1
      000FD6 8D 93            [ 8] 3086 	mov	dpx,r5
      000FD8 8E F0            [ 8] 3087 	mov	b,r6
      000FDA 12s00r00r00      [16] 3088 	lcall	__gptrgetWord
      000FDE FD               [ 4] 3089 	mov	r5,a
      000FDF AE 9C            [ 8] 3090 	mov	r6,acc1
      000FE1 A3               [12] 3091 	inc	dptr
      000FE2 12s00r00r00      [16] 3092 	lcall	__gptrgetWord
      000FE6 FF               [ 4] 3093 	mov	r7,a
      000FE7 A8 9C            [ 8] 3094 	mov	r0,acc1
      000FE9 12s00r00r00      [16] 3095 	lcall	__decdptr
      000FED 12s00r00r00      [16] 3096 	lcall	__decdptr
      000FF1 12s00r00r00      [16] 3097 	lcall	__decdptr
      000FF5 90s00r00r07      [12] 3098 	mov	dptr,#_value
      000FF9 ED               [ 4] 3099 	mov	a,r5
      000FFA F0               [ 8] 3100 	movx	@dptr,a
      000FFB A3               [12] 3101 	inc	dptr
      000FFC EE               [ 4] 3102 	mov	a,r6
      000FFD F0               [ 8] 3103 	movx	@dptr,a
      000FFE A3               [12] 3104 	inc	dptr
      000FFF EF               [ 4] 3105 	mov	a,r7
      001000 F0               [ 8] 3106 	movx	@dptr,a
      001001 A3               [12] 3107 	inc	dptr
      001002 E8               [ 4] 3108 	mov	a,r0
      001003 F0               [ 8] 3109 	movx	@dptr,a
      001004 80 77            [12] 3110 	sjmp 00184$
      001006                       3111 00180$:
                                   3112 ;	printf_large.c:740: value.l = va_arg(ap, int);
      001006 90s00r00rA8      [12] 3113 	mov	dptr,#__print_format_PARM_4
                                   3114 ;	genAssign: resultIsFar = FALSE
      00100A E0               [ 8] 3115 	movx	a,@dptr
      00100B F8               [ 4] 3116 	mov	r0,a
      00100C A3               [12] 3117 	inc	dptr
      00100D E0               [ 8] 3118 	movx	a,@dptr
      00100E F9               [ 4] 3119 	mov	r1,a
      00100F A3               [12] 3120 	inc	dptr
      001010 E0               [ 8] 3121 	movx	a,@dptr
      001011 FD               [ 4] 3122 	mov	r5,a
      001012 A3               [12] 3123 	inc	dptr
      001013 E0               [ 8] 3124 	movx	a,@dptr
      001014 FE               [ 4] 3125 	mov	r6,a
      001015 E8               [ 4] 3126 	mov	a,r0
      001016 24 FE            [ 8] 3127 	add	a,#0xFE
      001018 F8               [ 4] 3128 	mov	r0,a
      001019 E9               [ 4] 3129 	mov	a,r1
      00101A 34 FF            [ 8] 3130 	addc	a,#0xFF
      00101C F9               [ 4] 3131 	mov	r1,a
      00101D ED               [ 4] 3132 	mov	a,r5
      00101E 34 FF            [ 8] 3133 	addc	a,#0xFF
      001020 FD               [ 4] 3134 	mov	r5,a
                                   3135 ;	genAssign: resultIsFar = TRUE
      001021 90s00r00rA8      [12] 3136 	mov	dptr,#__print_format_PARM_4
      001025 E8               [ 4] 3137 	mov	a,r0
      001026 F0               [ 8] 3138 	movx	@dptr,a
      001027 A3               [12] 3139 	inc	dptr
      001028 E9               [ 4] 3140 	mov	a,r1
      001029 F0               [ 8] 3141 	movx	@dptr,a
      00102A A3               [12] 3142 	inc	dptr
      00102B ED               [ 4] 3143 	mov	a,r5
      00102C F0               [ 8] 3144 	movx	@dptr,a
      00102D A3               [12] 3145 	inc	dptr
      00102E EE               [ 4] 3146 	mov	a,r6
      00102F F0               [ 8] 3147 	movx	@dptr,a
      001030 88 82            [ 8] 3148 	mov	dpl,r0
      001032 89 83            [ 8] 3149 	mov	dph,r1
      001034 8D 93            [ 8] 3150 	mov	dpx,r5
      001036 8E F0            [ 8] 3151 	mov	b,r6
      001038 12s00r00r00      [16] 3152 	lcall	__gptrgetWord
      00103C FD               [ 4] 3153 	mov	r5,a
      00103D AE 9C            [ 8] 3154 	mov	r6,acc1
      00103F 12s00r00r00      [16] 3155 	lcall	__decdptr
      001043 EE               [ 4] 3156 	mov	a,r6
      001044 33               [ 4] 3157 	rlc	a
      001045 95 E0            [ 8] 3158 	subb	a,acc
      001047 FF               [ 4] 3159 	mov	r7,a
      001048 F8               [ 4] 3160 	mov	r0,a
      001049 90s00r00r07      [12] 3161 	mov	dptr,#_value
      00104D ED               [ 4] 3162 	mov	a,r5
      00104E F0               [ 8] 3163 	movx	@dptr,a
      00104F A3               [12] 3164 	inc	dptr
      001050 EE               [ 4] 3165 	mov	a,r6
      001051 F0               [ 8] 3166 	movx	@dptr,a
      001052 A3               [12] 3167 	inc	dptr
      001053 EF               [ 4] 3168 	mov	a,r7
      001054 F0               [ 8] 3169 	movx	@dptr,a
      001055 A3               [12] 3170 	inc	dptr
      001056 E8               [ 4] 3171 	mov	a,r0
      001057 F0               [ 8] 3172 	movx	@dptr,a
                                   3173 ;	printf_large.c:741: if (!signed_argument)
      001058 20*0A 22         [12] 3174 	jb   __print_format_signed_argument_1_98,00184$
      00105B                       3175 00558$:
                                   3176 ;	printf_large.c:743: value.l &= 0xFFFF;
      00105B 90s00r00r07      [12] 3177 	mov	dptr,#_value
      00105F E0               [ 8] 3178 	movx	a,@dptr
      001060 A3               [12] 3179 	inc	dptr
      001061 F8               [ 4] 3180 	mov	r0,a
      001062 E0               [ 8] 3181 	movx	a,@dptr
      001063 A3               [12] 3182 	inc	dptr
      001064 F9               [ 4] 3183 	mov	r1,a
      001065 E0               [ 8] 3184 	movx	a,@dptr
      001066 A3               [12] 3185 	inc	dptr
      001067 FD               [ 4] 3186 	mov	r5,a
      001068 E0               [ 8] 3187 	movx	a,@dptr
      001069 FE               [ 4] 3188 	mov	r6,a
      00106A 7D 00            [ 8] 3189 	mov	r5,#0x00
      00106C 7E 00            [ 8] 3190 	mov	r6,#0x00
      00106E 90s00r00r07      [12] 3191 	mov	dptr,#_value
      001072 E8               [ 4] 3192 	mov	a,r0
      001073 F0               [ 8] 3193 	movx	@dptr,a
      001074 A3               [12] 3194 	inc	dptr
      001075 E9               [ 4] 3195 	mov	a,r1
      001076 F0               [ 8] 3196 	movx	@dptr,a
      001077 A3               [12] 3197 	inc	dptr
      001078 ED               [ 4] 3198 	mov	a,r5
      001079 F0               [ 8] 3199 	movx	@dptr,a
      00107A A3               [12] 3200 	inc	dptr
      00107B EE               [ 4] 3201 	mov	a,r6
      00107C F0               [ 8] 3202 	movx	@dptr,a
                                   3203 ;	printf_large.c:872: return charsOutputted;
                                   3204 ;	printf_large.c:743: value.l &= 0xFFFF;
      00107D                       3205 00184$:
                                   3206 ;	printf_large.c:747: if ( signed_argument )
      00107D 30*0A 41         [12] 3207 	jnb  __print_format_signed_argument_1_98,00189$
      001080                       3208 00559$:
                                   3209 ;	printf_large.c:749: if (value.l < 0)
      001080 90s00r00r07      [12] 3210 	mov	dptr,#_value
      001084 E0               [ 8] 3211 	movx	a,@dptr
      001085 A3               [12] 3212 	inc	dptr
      001086 F8               [ 4] 3213 	mov	r0,a
      001087 E0               [ 8] 3214 	movx	a,@dptr
      001088 A3               [12] 3215 	inc	dptr
      001089 F9               [ 4] 3216 	mov	r1,a
      00108A E0               [ 8] 3217 	movx	a,@dptr
      00108B A3               [12] 3218 	inc	dptr
      00108C FD               [ 4] 3219 	mov	r5,a
      00108D E0               [ 8] 3220 	movx	a,@dptr
      00108E FE               [ 4] 3221 	mov  r6,a
      00108F 30 E7 2D         [12] 3222 	jnb  acc[7],00186$
      001092                       3223 00560$:
                                   3224 ;	printf_large.c:750: value.l = -value.l;
      001092 90s00r00r07      [12] 3225 	mov	dptr,#_value
      001096 E0               [ 8] 3226 	movx	a,@dptr
      001097 A3               [12] 3227 	inc	dptr
      001098 F8               [ 4] 3228 	mov	r0,a
      001099 E0               [ 8] 3229 	movx	a,@dptr
      00109A A3               [12] 3230 	inc	dptr
      00109B F9               [ 4] 3231 	mov	r1,a
      00109C E0               [ 8] 3232 	movx	a,@dptr
      00109D A3               [12] 3233 	inc	dptr
      00109E FD               [ 4] 3234 	mov	r5,a
      00109F E0               [ 8] 3235 	movx	a,@dptr
      0010A0 FE               [ 4] 3236 	mov	r6,a
      0010A1 C3               [ 4] 3237 	clr	c
      0010A2 E4               [ 4] 3238 	clr	a
      0010A3 98               [ 4] 3239 	subb	a,r0
      0010A4 F8               [ 4] 3240 	mov	r0,a
      0010A5 E4               [ 4] 3241 	clr	a
      0010A6 99               [ 4] 3242 	subb	a,r1
      0010A7 F9               [ 4] 3243 	mov	r1,a
      0010A8 E4               [ 4] 3244 	clr	a
      0010A9 9D               [ 4] 3245 	subb	a,r5
      0010AA FD               [ 4] 3246 	mov	r5,a
      0010AB E4               [ 4] 3247 	clr	a
      0010AC 9E               [ 4] 3248 	subb	a,r6
      0010AD FE               [ 4] 3249 	mov	r6,a
      0010AE 90s00r00r07      [12] 3250 	mov	dptr,#_value
      0010B2 E8               [ 4] 3251 	mov	a,r0
      0010B3 F0               [ 8] 3252 	movx	@dptr,a
      0010B4 A3               [12] 3253 	inc	dptr
      0010B5 E9               [ 4] 3254 	mov	a,r1
      0010B6 F0               [ 8] 3255 	movx	@dptr,a
      0010B7 A3               [12] 3256 	inc	dptr
      0010B8 ED               [ 4] 3257 	mov	a,r5
      0010B9 F0               [ 8] 3258 	movx	@dptr,a
      0010BA A3               [12] 3259 	inc	dptr
      0010BB EE               [ 4] 3260 	mov	a,r6
      0010BC F0               [ 8] 3261 	movx	@dptr,a
      0010BD 80 02            [12] 3262 	sjmp 00189$
      0010BF                       3263 00186$:
                                   3264 ;	printf_large.c:752: signed_argument = 0;
                                   3265 ;	genAssign: resultIsFar = FALSE
      0010BF C2*0A            [ 8] 3266 	clr	__print_format_signed_argument_1_98
      0010C1                       3267 00189$:
                                   3268 ;	printf_large.c:756: lsd = 1;
                                   3269 ;	genAssign: resultIsFar = FALSE
      0010C1 D2*0E            [ 8] 3270 	setb	__print_format_lsd_1_98
                                   3271 ;	printf_large.c:758: do {
      0010C3 90s00r00rB5      [12] 3272 	mov	dptr,#__print_format_pstore_4_120
                                   3273 ;	genAssign: resultIsFar = FALSE
      0010C7 E0               [ 8] 3274 	movx	a,@dptr
      0010C8 F8               [ 4] 3275 	mov	r0,a
      0010C9 A3               [12] 3276 	inc	dptr
      0010CA E0               [ 8] 3277 	movx	a,@dptr
      0010CB F9               [ 4] 3278 	mov	r1,a
      0010CC A3               [12] 3279 	inc	dptr
      0010CD E0               [ 8] 3280 	movx	a,@dptr
      0010CE FD               [ 4] 3281 	mov	r5,a
                                   3282 ;	genAssign: resultIsFar = FALSE
      0010CF 7A 00            [ 8] 3283 	mov	r2,#0x00
      0010D1                       3284 00193$:
                                   3285 ;	printf_large.c:759: value.byte[4] = 0;
      0010D1 90s00r00r0B      [12] 3286 	mov	dptr,#(_value + 0x000004)
      0010D5 E4               [ 4] 3287 	clr	a
      0010D6 F0               [ 8] 3288 	movx	@dptr,a
                                   3289 ;	printf_large.c:763: calculate_digit(radix);
      0010D7 C0 02            [ 8] 3290 	push	ar2
      0010D9 C0 05            [ 8] 3291 	push	ar5
      0010DB C0 00            [ 8] 3292 	push	ar0
      0010DD C0 01            [ 8] 3293 	push	ar1
      0010DF 90s00r00rAC      [12] 3294 	mov	dptr,#__print_format_radix_1_98
      0010E3 E0               [ 8] 3295 	movx	a,@dptr
      0010E4 F5 82            [ 8] 3296 	mov	dpl,a
      0010E6 12s00r00r81      [16] 3297 	lcall	_calculate_digit
      0010EA D0 01            [ 8] 3298 	pop	ar1
      0010EC D0 00            [ 8] 3299 	pop	ar0
      0010EE D0 05            [ 8] 3300 	pop	ar5
      0010F0 D0 02            [ 8] 3301 	pop	ar2
                                   3302 ;	printf_large.c:765: if (!lsd)
      0010F2 20*0E 29         [12] 3303 	jb   __print_format_lsd_1_98,00191$
      0010F5                       3304 00561$:
                                   3305 ;	printf_large.c:767: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
      0010F5 C0 02            [ 8] 3306 	push	ar2
      0010F7 90s00r00r0B      [12] 3307 	mov	dptr,#(_value + 0x000004)
      0010FB E0               [ 8] 3308 	movx	a,@dptr
      0010FC FF               [ 4] 3309 	mov  r7,a
      0010FD C4               [ 4] 3310 	swap	a
      0010FE FF               [ 4] 3311 	mov	r7,a
      0010FF 88 82            [ 8] 3312 	mov	dpl,r0
      001101 89 83            [ 8] 3313 	mov	dph,r1
      001103 8D 93            [ 8] 3314 	mov	dpx,r5
      001105 E0               [ 8] 3315 	movx	a,@dptr
      001106 FE               [ 4] 3316 	mov  r6,a
      001107 42 07            [ 8] 3317 	orl	ar7,a
      001109 88 82            [ 8] 3318 	mov	dpl,r0
      00110B 89 83            [ 8] 3319 	mov	dph,r1
      00110D 8D 93            [ 8] 3320 	mov	dpx,r5
      00110F EF               [ 4] 3321 	mov	a,r7
      001110 F0               [ 8] 3322 	movx	@dptr,a
                                   3323 ;	printf_large.c:768: pstore--;
      001111 18               [ 4] 3324 	dec	r0
      001112 B8 FF 05         [16] 3325 	cjne	r0,#0xFF,00562$
      001115 19               [ 4] 3326 	dec	r1
      001116 B9 FF 01         [16] 3327 	cjne	r1,#0xFF,00562$
      001119 1D               [ 4] 3328 	dec	r5
      00111A                       3329 00562$:
      00111A D0 02            [ 8] 3330 	pop	ar2
      00111C 80 0D            [12] 3331 	sjmp 00192$
      00111E                       3332 00191$:
                                   3333 ;	printf_large.c:772: *pstore = value.byte[4];
      00111E 90s00r00r0B      [12] 3334 	mov	dptr,#(_value + 0x000004)
      001122 E0               [ 8] 3335 	movx	a,@dptr
      001123 FF               [ 4] 3336 	mov  r7,a
      001124 88 82            [ 8] 3337 	mov  dpl,r0
      001126 89 83            [ 8] 3338 	mov  dph,r1
      001128 8D 93            [ 8] 3339 	mov  dpx,r5
      00112A F0               [ 8] 3340 	movx	@dptr,a
      00112B                       3341 00192$:
                                   3342 ;	printf_large.c:774: length++;
      00112B 0A               [ 4] 3343 	inc	r2
                                   3344 ;	printf_large.c:775: lsd = !lsd;
      00112C B2*0E            [ 8] 3345 	cpl	__print_format_lsd_1_98
                                   3346 ;	printf_large.c:776: } while( value.ul );
      00112E 90s00r00r07      [12] 3347 	mov	dptr,#_value
      001132 E0               [ 8] 3348 	movx	a,@dptr
      001133 A3               [12] 3349 	inc	dptr
      001134 FF               [ 4] 3350 	mov	r7,a
      001135 E0               [ 8] 3351 	movx	a,@dptr
      001136 A3               [12] 3352 	inc	dptr
      001137 FC               [ 4] 3353 	mov	r4,a
      001138 E0               [ 8] 3354 	movx	a,@dptr
      001139 A3               [12] 3355 	inc	dptr
      00113A FB               [ 4] 3356 	mov	r3,a
      00113B E0               [ 8] 3357 	movx	a,@dptr
      00113C FE               [ 4] 3358 	mov	r6,a
      00113D EF               [ 4] 3359 	mov	a,r7
      00113E 4C               [ 4] 3360 	orl	a,r4
      00113F 4B               [ 4] 3361 	orl	a,r3
      001140 4E               [ 4] 3362 	orl	a,r6
      001141 70 8E            [12] 3363 	jnz  00193$
      001143                       3364 00563$:
                                   3365 ;	printf_large.c:778: if (width == 0)
                                   3366 ;	genAssign: resultIsFar = TRUE
      001143 90s00r00rB5      [12] 3367 	mov	dptr,#__print_format_pstore_4_120
      001147 E8               [ 4] 3368 	mov	a,r0
      001148 F0               [ 8] 3369 	movx	@dptr,a
      001149 A3               [12] 3370 	inc	dptr
      00114A E9               [ 4] 3371 	mov	a,r1
      00114B F0               [ 8] 3372 	movx	@dptr,a
      00114C A3               [12] 3373 	inc	dptr
      00114D ED               [ 4] 3374 	mov	a,r5
      00114E F0               [ 8] 3375 	movx	@dptr,a
                                   3376 ;	genAssign: resultIsFar = TRUE
      00114F 90s00r00rAE      [12] 3377 	mov	dptr,#__print_format_length_1_98
      001153 EA               [ 4] 3378 	mov	a,r2
      001154 F0               [ 8] 3379 	movx	@dptr,a
      001155 90s00r00rAD      [12] 3380 	mov	dptr,#__print_format_width_1_98
      001159 E0               [ 8] 3381 	movx	a,@dptr
      00115A 70 07            [12] 3382 	jnz  00197$
      00115C                       3383 00564$:
                                   3384 ;	printf_large.c:783: width = 1;
                                   3385 ;	genAssign: resultIsFar = TRUE
      00115C 90s00r00rAD      [12] 3386 	mov	dptr,#__print_format_width_1_98
      001160 74 01            [ 8] 3387 	mov	a,#0x01
      001162 F0               [ 8] 3388 	movx	@dptr,a
      001163                       3389 00197$:
                                   3390 ;	printf_large.c:787: if (!zero_padding && !left_justify)
      001163 20*07 2E         [12] 3391 	jb   __print_format_zero_padding_1_98,00202$
      001166                       3392 00565$:
      001166 20*06 2B         [12] 3393 	jb   __print_format_left_justify_1_98,00202$
      001169                       3394 00566$:
                                   3395 ;	printf_large.c:789: while ( width > (unsigned char) (length+1) )
      001169 90s00r00rAE      [12] 3396 	mov	dptr,#__print_format_length_1_98
      00116D E0               [ 8] 3397 	movx	a,@dptr
      00116E 24 01            [ 8] 3398 	add	a,#0x01
      001170 FB               [ 4] 3399 	mov	r3,a
      001171 90s00r00rAD      [12] 3400 	mov	dptr,#__print_format_width_1_98
                                   3401 ;	genAssign: resultIsFar = FALSE
      001175 E0               [ 8] 3402 	movx	a,@dptr
      001176 FC               [ 4] 3403 	mov	r4,a
      001177                       3404 00198$:
      001177 C3               [ 4] 3405 	clr	c
      001178 EB               [ 4] 3406 	mov	a,r3
      001179 9C               [ 4] 3407 	subb	a,r4
      00117A 50 12            [12] 3408 	jnc  00330$
      00117C                       3409 00567$:
                                   3410 ;	printf_large.c:791: OUTPUT_CHAR( ' ', p );
      00117C C0 03            [ 8] 3411 	push	ar3
      00117E C0 04            [ 8] 3412 	push	ar4
      001180 75 82 20         [12] 3413 	mov	dpl,#0x20
      001183 12s00r00r00      [16] 3414 	lcall	__output_char
      001187 D0 04            [ 8] 3415 	pop	ar4
      001189 D0 03            [ 8] 3416 	pop	ar3
                                   3417 ;	printf_large.c:792: width--;
      00118B 1C               [ 4] 3418 	dec	r4
      00118C 80 E9            [12] 3419 	sjmp 00198$
      00118E                       3420 00330$:
                                   3421 ;	genAssign: resultIsFar = TRUE
      00118E 90s00r00rAD      [12] 3422 	mov	dptr,#__print_format_width_1_98
      001192 EC               [ 4] 3423 	mov	a,r4
      001193 F0               [ 8] 3424 	movx	@dptr,a
      001194                       3425 00202$:
                                   3426 ;	printf_large.c:796: if (signed_argument) // this now means the original value was negative
      001194 30*0A 14         [12] 3427 	jnb  __print_format_signed_argument_1_98,00212$
      001197                       3428 00568$:
                                   3429 ;	printf_large.c:798: OUTPUT_CHAR( '-', p );
      001197 75 82 2D         [12] 3430 	mov	dpl,#0x2D
      00119A 12s00r00r00      [16] 3431 	lcall	__output_char
                                   3432 ;	printf_large.c:800: width--;
      00119E 90s00r00rAD      [12] 3433 	mov	dptr,#__print_format_width_1_98
      0011A2 E0               [ 8] 3434 	movx	a,@dptr
      0011A3 14               [ 4] 3435 	dec	a
                                   3436 ;	genAssign: resultIsFar = TRUE
      0011A4 90s00r00rAD      [12] 3437 	mov	dptr,#__print_format_width_1_98
      0011A8 F0               [ 8] 3438 	movx	@dptr,a
      0011A9 80 33            [12] 3439 	sjmp 00213$
      0011AB                       3440 00212$:
                                   3441 ;	printf_large.c:802: else if (length != 0)
      0011AB 90s00r00rAE      [12] 3442 	mov	dptr,#__print_format_length_1_98
      0011AF E0               [ 8] 3443 	movx	a,@dptr
      0011B0 60 2C            [12] 3444 	jz  00213$
      0011B2                       3445 00569$:
                                   3446 ;	printf_large.c:805: if (prefix_sign)
      0011B2 30*08 14         [12] 3447 	jnb  __print_format_prefix_sign_1_98,00207$
      0011B5                       3448 00570$:
                                   3449 ;	printf_large.c:807: OUTPUT_CHAR( '+', p );
      0011B5 75 82 2B         [12] 3450 	mov	dpl,#0x2B
      0011B8 12s00r00r00      [16] 3451 	lcall	__output_char
                                   3452 ;	printf_large.c:809: width--;
      0011BC 90s00r00rAD      [12] 3453 	mov	dptr,#__print_format_width_1_98
      0011C0 E0               [ 8] 3454 	movx	a,@dptr
      0011C1 14               [ 4] 3455 	dec	a
                                   3456 ;	genAssign: resultIsFar = TRUE
      0011C2 90s00r00rAD      [12] 3457 	mov	dptr,#__print_format_width_1_98
      0011C6 F0               [ 8] 3458 	movx	@dptr,a
      0011C7 80 15            [12] 3459 	sjmp 00213$
      0011C9                       3460 00207$:
                                   3461 ;	printf_large.c:811: else if (prefix_space)
      0011C9 30*09 12         [12] 3462 	jnb  __print_format_prefix_space_1_98,00213$
      0011CC                       3463 00571$:
                                   3464 ;	printf_large.c:813: OUTPUT_CHAR( ' ', p );
      0011CC 75 82 20         [12] 3465 	mov	dpl,#0x20
      0011CF 12s00r00r00      [16] 3466 	lcall	__output_char
                                   3467 ;	printf_large.c:815: width--;
      0011D3 90s00r00rAD      [12] 3468 	mov	dptr,#__print_format_width_1_98
      0011D7 E0               [ 8] 3469 	movx	a,@dptr
      0011D8 14               [ 4] 3470 	dec	a
                                   3471 ;	genAssign: resultIsFar = TRUE
      0011D9 90s00r00rAD      [12] 3472 	mov	dptr,#__print_format_width_1_98
      0011DD F0               [ 8] 3473 	movx	@dptr,a
      0011DE                       3474 00213$:
                                   3475 ;	printf_large.c:820: if (!left_justify)
      0011DE 20*06 27         [12] 3476 	jb   __print_format_left_justify_1_98,00221$
      0011E1                       3477 00572$:
                                   3478 ;	printf_large.c:822: while ( width-- > length )
      0011E1 90s00r00rAD      [12] 3479 	mov	dptr,#__print_format_width_1_98
                                   3480 ;	genAssign: resultIsFar = FALSE
      0011E5 E0               [ 8] 3481 	movx	a,@dptr
      0011E6 FB               [ 4] 3482 	mov	r3,a
      0011E7                       3483 00214$:
                                   3484 ;	genAssign: resultIsFar = FALSE
      0011E7 8B 04            [ 8] 3485 	mov	ar4,r3
      0011E9 1B               [ 4] 3486 	dec	r3
      0011EA 90s00r00rAE      [12] 3487 	mov	dptr,#__print_format_length_1_98
      0011EE C3               [ 4] 3488 	clr	c
      0011EF E0               [ 8] 3489 	movx	a,@dptr
      0011F0 9C               [ 4] 3490 	subb	a,r4
      0011F1 50 57            [12] 3491 	jnc  00331$
      0011F3                       3492 00573$:
                                   3493 ;	printf_large.c:824: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
      0011F3 30*07 04         [12] 3494 	jnb  __print_format_zero_padding_1_98,00247$
      0011F6                       3495 00574$:
                                   3496 ;	genAssign: resultIsFar = FALSE
      0011F6 7C 30            [ 8] 3497 	mov	r4,#0x30
      0011F8 80 02            [12] 3498 	sjmp 00248$
      0011FA                       3499 00247$:
                                   3500 ;	genAssign: resultIsFar = FALSE
      0011FA 7C 20            [ 8] 3501 	mov	r4,#0x20
      0011FC                       3502 00248$:
      0011FC C0 03            [ 8] 3503 	push	ar3
      0011FE 8C 82            [ 8] 3504 	mov	dpl,r4
      001200 12s00r00r00      [16] 3505 	lcall	__output_char
      001204 D0 03            [ 8] 3506 	pop	ar3
      001206 80 DF            [12] 3507 	sjmp 00214$
      001208                       3508 00221$:
                                   3509 ;	printf_large.c:830: if (width > length)
      001208 90s00r00rAE      [12] 3510 	mov	dptr,#__print_format_length_1_98
      00120C 75 86 01         [12] 3511 	mov	dps, #1
      00120F 90s00r00rAD      [12] 3512 	mov	dptr, #__print_format_width_1_98
      001213 15 86            [ 8] 3513 	dec	dps
      001215 C3               [ 4] 3514 	clr	c
      001216 E0               [ 8] 3515 	movx	a,@dptr
      001217 75 86 01         [12] 3516 	mov	dps,#1
      00121A C5 F0            [ 8] 3517 	xch	a, b
      00121C E0               [ 8] 3518 	movx	a,@dptr
      00121D 75 86 00         [12] 3519 	mov	dps,#0
      001220 C5 F0            [ 8] 3520 	xch	a, b
      001222 95 F0            [ 8] 3521 	subb	a,b
      001224 50 1C            [12] 3522 	jnc  00218$
      001226                       3523 00575$:
                                   3524 ;	printf_large.c:831: width -= length;
      001226 90s00r00rAE      [12] 3525 	mov	dptr,#__print_format_length_1_98
      00122A 75 86 01         [12] 3526 	mov	dps, #1
      00122D 90s00r00rAD      [12] 3527 	mov	dptr, #__print_format_width_1_98
      001231 15 86            [ 8] 3528 	dec	dps
      001233 C3               [ 4] 3529 	clr	c
      001234 E0               [ 8] 3530 	movx	a,@dptr
      001235 F5 F0            [ 8] 3531 	mov	b,a
      001237 05 86            [ 8] 3532 	inc	dps
      001239 E0               [ 8] 3533 	movx	a,@dptr
      00123A 95 F0            [ 8] 3534 	subb	a,b
      00123C F0               [ 8] 3535 	movx	@dptr,a
      00123D 75 86 00         [12] 3536 	mov	dps,#0
      001240 80 0E            [12] 3537 	sjmp 00323$
      001242                       3538 00218$:
                                   3539 ;	printf_large.c:833: width = 0;
                                   3540 ;	genAssign: resultIsFar = TRUE
      001242 90s00r00rAD      [12] 3541 	mov	dptr,#__print_format_width_1_98
      001246 E4               [ 4] 3542 	clr	a
      001247 F0               [ 8] 3543 	movx	@dptr,a
                                   3544 ;	printf_large.c:872: return charsOutputted;
                                   3545 ;	printf_large.c:837: while( length-- )
      001248 80 06            [12] 3546 	sjmp 00323$
      00124A                       3547 00331$:
                                   3548 ;	genAssign: resultIsFar = TRUE
      00124A 90s00r00rAD      [12] 3549 	mov	dptr,#__print_format_width_1_98
      00124E EB               [ 4] 3550 	mov	a,r3
      00124F F0               [ 8] 3551 	movx	@dptr,a
      001250                       3552 00323$:
      001250 90s00r00rB5      [12] 3553 	mov	dptr,#__print_format_pstore_4_120
                                   3554 ;	genAssign: resultIsFar = FALSE
      001254 E0               [ 8] 3555 	movx	a,@dptr
      001255 FB               [ 4] 3556 	mov	r3,a
      001256 A3               [12] 3557 	inc	dptr
      001257 E0               [ 8] 3558 	movx	a,@dptr
      001258 FC               [ 4] 3559 	mov	r4,a
      001259 A3               [12] 3560 	inc	dptr
      00125A E0               [ 8] 3561 	movx	a,@dptr
      00125B FD               [ 4] 3562 	mov	r5,a
      00125C 90s00r00rAE      [12] 3563 	mov	dptr,#__print_format_length_1_98
                                   3564 ;	genAssign: resultIsFar = FALSE
      001260 E0               [ 8] 3565 	movx	a,@dptr
      001261 FE               [ 4] 3566 	mov	r6,a
      001262                       3567 00226$:
                                   3568 ;	genAssign: resultIsFar = FALSE
      001262 8E 07            [ 8] 3569 	mov	ar7,r6
      001264 1E               [ 4] 3570 	dec	r6
      001265 EF               [ 4] 3571 	mov	a,r7
      001266 60 50            [12] 3572 	jz  00228$
      001268                       3573 00576$:
                                   3574 ;	printf_large.c:839: lsd = !lsd;
      001268 B2*0E            [ 8] 3575 	cpl	__print_format_lsd_1_98
                                   3576 ;	printf_large.c:840: if (!lsd)
      00126A 20*0E 1C         [12] 3577 	jb   __print_format_lsd_1_98,00224$
      00126D                       3578 00577$:
                                   3579 ;	printf_large.c:842: pstore++;
      00126D 0B               [ 4] 3580 	inc	r3
      00126E BB 00 05         [16] 3581 	cjne	r3,#0x00,00578$
      001271 0C               [ 4] 3582 	inc	r4
      001272 BC 00 01         [16] 3583 	cjne	r4,#0x00,00578$
      001275 0D               [ 4] 3584 	inc	r5
      001276                       3585 00578$:
                                   3586 ;	printf_large.c:843: value.byte[4] = *pstore >> 4;
      001276 8B 82            [ 8] 3587 	mov	dpl,r3
      001278 8C 83            [ 8] 3588 	mov	dph,r4
      00127A 8D 93            [ 8] 3589 	mov	dpx,r5
      00127C E0               [ 8] 3590 	movx	a,@dptr
      00127D FF               [ 4] 3591 	mov  r7,a
      00127E C4               [ 4] 3592 	swap	a
      00127F 54 0F            [ 8] 3593 	anl	a,#0x0F
      001281 FF               [ 4] 3594 	mov  r7,a
      001282 90s00r00r0B      [12] 3595 	mov  dptr,#(_value + 0x000004)
      001286 F0               [ 8] 3596 	movx @dptr,a
      001287 80 11            [12] 3597 	sjmp 00225$
      001289                       3598 00224$:
                                   3599 ;	printf_large.c:847: value.byte[4] = *pstore & 0x0F;
      001289 8B 82            [ 8] 3600 	mov	dpl,r3
      00128B 8C 83            [ 8] 3601 	mov	dph,r4
      00128D 8D 93            [ 8] 3602 	mov	dpx,r5
      00128F E0               [ 8] 3603 	movx	a,@dptr
      001290 FF               [ 4] 3604 	mov	r7,a
      001291 53 07 0F         [12] 3605 	anl	ar7,#0x0F
      001294 90s00r00r0B      [12] 3606 	mov	dptr,#(_value + 0x000004)
      001298 EF               [ 4] 3607 	mov	a,r7
      001299 F0               [ 8] 3608 	movx	@dptr,a
      00129A                       3609 00225$:
                                   3610 ;	printf_large.c:853: output_digit( value.byte[4] );
      00129A 90s00r00r0B      [12] 3611 	mov	dptr,#(_value + 0x000004)
      00129E E0               [ 8] 3612 	movx	a,@dptr
      00129F FF               [ 4] 3613 	mov	r7,a
      0012A0 C0 03            [ 8] 3614 	push	ar3
      0012A2 C0 04            [ 8] 3615 	push	ar4
      0012A4 C0 05            [ 8] 3616 	push	ar5
      0012A6 C0 06            [ 8] 3617 	push	ar6
      0012A8 8F 82            [ 8] 3618 	mov	dpl,r7
      0012AA 12s00r00r49      [16] 3619 	lcall	_output_digit
      0012AE D0 06            [ 8] 3620 	pop	ar6
      0012B0 D0 05            [ 8] 3621 	pop	ar5
      0012B2 D0 04            [ 8] 3622 	pop	ar4
      0012B4 D0 03            [ 8] 3623 	pop	ar3
      0012B6 80 AA            [12] 3624 	sjmp 00226$
      0012B8                       3625 00228$:
                                   3626 ;	printf_large.c:856: if (left_justify)
      0012B8 20*06 04         [12] 3627 	jb	__print_format_left_justify_1_98,00579$
      0012BB 02s00r09r4E      [16] 3628 	ljmp	00242$
      0012BF                       3629 00579$:
                                   3630 ;	printf_large.c:858: while (width-- > 0)
      0012BF 90s00r00rAD      [12] 3631 	mov	dptr,#__print_format_width_1_98
                                   3632 ;	genAssign: resultIsFar = FALSE
      0012C3 E0               [ 8] 3633 	movx	a,@dptr
      0012C4 FB               [ 4] 3634 	mov	r3,a
      0012C5                       3635 00229$:
                                   3636 ;	genAssign: resultIsFar = FALSE
      0012C5 8B 04            [ 8] 3637 	mov	ar4,r3
      0012C7 1B               [ 4] 3638 	dec	r3
      0012C8 EC               [ 4] 3639 	mov	a,r4
      0012C9 70 04            [12] 3640 	jnz	00580$
      0012CB 02s00r09r4E      [16] 3641 	ljmp	00242$
      0012CF                       3642 00580$:
                                   3643 ;	printf_large.c:860: OUTPUT_CHAR(' ', p);
      0012CF C0 03            [ 8] 3644 	push	ar3
      0012D1 75 82 20         [12] 3645 	mov	dpl,#0x20
      0012D4 12s00r00r00      [16] 3646 	lcall	__output_char
      0012D8 D0 03            [ 8] 3647 	pop	ar3
      0012DA 80 E9            [12] 3648 	sjmp 00229$
      0012DC                       3649 00240$:
                                   3650 ;	printf_large.c:868: OUTPUT_CHAR( c, p );
      0012DC 8A 82            [ 8] 3651 	mov	dpl,r2
      0012DE 12s00r00r00      [16] 3652 	lcall	__output_char
      0012E2 02s00r09r4E      [16] 3653 	ljmp	00242$
      0012E6                       3654 00244$:
                                   3655 ;	printf_large.c:872: return charsOutputted;
      0012E6 75 86 01         [12] 3656 	mov     dps, #1
      0012E9 90s00r00r0C      [12] 3657 	mov     dptr, #_charsOutputted
      0012ED E0               [ 8] 3658 	movx	a,@dptr
      0012EE F5 82            [ 8] 3659 	mov	dpl,a
      0012F0 A3               [12] 3660 	inc	dptr
      0012F1 E0               [ 8] 3661 	movx	a,@dptr
      0012F2 F5 83            [ 8] 3662 	mov	dph,a
      0012F4 75 86 00         [12] 3663 	mov	dps,#0
      0012F7                       3664 00245$:
      0012F7 22               [16] 3665 	ret
                                   3666 	.area CSEG    (CODE)
                                   3667 	.area CONST   (CODE)
      000000                       3668 ___str_0:
      000000 3C 4E 55 4C 4C 3E     3669 	.ascii "<NULL>"
      000006 00                    3670 	.db 0x00
                                   3671 	.area XINIT   (CODE)
                                   3672 	.area CABS    (ABS,CODE)
