                              1 ;; crt0_asm.s - tlcs90
                              2 	
                              3 	.t90
                              4 	
                              5 	.module crt0
                              6 
                              7 	.globl _meminit
                              8 	.globl _main
                              9 	.globl _xxaddr
                             10 	.globl _xxby
                             11 	.globl _xxdata
                             12 
                             13 	.globl _ser_putchar_irq
                             14 	.globl _ser_puts
                             15 	
                             16 	;; put as abs in dat at end of file..
                             17 	;.globl _ser_irq_flags
                             18 	;.globl _ser_char
                             19 	
                             20 	.globl _xget_byte_asm
                             21 	.globl _xset_byte_asm
                             22 
                             23 
                             24 	 ;; for interrupts the pc and af are pushed on the stack
                             25 	
                             26 	.globl _irq_info_swi
                             27 	.globl _irq_info_intwd
                             28 	.globl _irq_info_intt0
                             29 	.globl _irq_info_intt1
                             30 	.globl _timer1_irq
                             31 	.globl _irq_info_intt3
                             32 	.globl _irq_info_intt4
                             33 	.globl _irq_info_int1
                             34 	.globl _irq_info_intt5
                             35 
                             36 	.globl _ticks16
                             37 	.globl _xflag
                             38 	
                             39 	;; NOTE: header might get trashed by linker when code loc ist not used!?
                             40 	.area	_HEADER (ABS)
                             41 	
   0000                      42 	.org 	0
                             43 
                             44 	.include "t90regs.s"
                     FFC0     1 P0	.equ 0x0ffc0
                     FFC1     2 P1	.equ 0x0ffc1
                     FFC2     3 P01CR	.equ 0x0ffc2
                     FFC2     4 IRFL	.equ 0x0ffc2
                     FFC3     5 IRFH	.equ 0x0ffc3
                     FFC4     6 P2	.equ 0x0ffc4
                     FFC5     7 P2CR	.equ 0x0ffc5
                     FFC6     8 P3	.equ 0x0ffc6
                     FFC7     9 P3CR	.equ 0x0ffc7
                     FFC8    10 P4	.equ 0x0ffc8
                     FFC9    11 P4CR	.equ 0x0ffc9
                     FFCA    12 P5	.equ 0x0ffca
                     FFCB    13 SMMOD	.equ 0x0ffcb
                     FFCC    14 P6	.equ 0x0ffcc
                     FFCD    15 P7	.equ 0x0ffcd
                     FFCE    16 P67CR	.equ 0x0ffce
                     FFCF    17 SMCR	.equ 0x0ffcf
                     FFD0    18 P8	.equ 0x0ffd0
                     FFD1    19 P8CR	.equ 0x0ffd1
                     FFD2    20 WDMOD	.equ 0x0ffd2
                     FFD3    21 WDCR	.equ 0x0ffd3
                     FFD4    22 TREG0	.equ 0x0ffd4
                     FFD5    23 TREG1	.equ 0x0ffd5
                     FFD6    24 TREG2	.equ 0x0ffd6
                     FFD7    25 TREG3	.equ 0x0ffd7
                     FFD8    26 TCLK	.equ 0x0ffd8
                     FFD9    27 TFFCR	.equ 0x0ffd9
                     FFDA    28 TMOD	.equ 0x0ffda
                     FFDB    29 TRUN	.equ 0x0ffdb
                     FFDC    30 CAP1L	.equ 0x0ffdc
                     FFDD    31 CAP1H	.equ 0x0ffdd
                     FFDE    32 CAP2L	.equ 0x0ffde
                     FFDF    33 CAL2H	.equ 0x0ffdf
                     FFE0    34 TREG4L	.equ 0x0ffe0
                     FFE1    35 TREG4H	.equ 0x0ffe1
                     FFE2    36 TREG5L	.equ 0x0ffe2
                     FFE3    37 TREG5H	.equ 0x0ffe3
                     FFE4    38 T4MOD	.equ 0x0ffe4
                     FFE5    39 T4FFCR	.equ 0x0ffe5
                     FFE6    40 INTEL	.equ 0x0ffe6
                     FFE7    41 INTEH	.equ 0x0ffe7
                     FFE8    42 DMAEH	.equ 0x0ffe8
                     FFE9    43 SCMOD	.equ 0x0ffe9
                     FFEA    44 SCCR	.equ 0x0ffea
                     FFEB    45 SCBUF	.equ 0x0ffeb
                     FFEC    46 BX	.equ 0x0ffec
                     FFED    47 BY	.equ 0x0ffed
                     FFEE    48 ADREG	.equ 0x0ffee
                     FFEF    49 ADMOD	.equ 0x0ffef
                             45 
                             46 	;; _ser_irq_flags
                     0000    47 TX_ACTIVE	.equ 0
                     0001    48 RX_READY        .equ 1
                             49 	
   0000                      50 L0:
                             51 	;halt
                             52 	;jr    L0
   0000 1Ar00r01      [ 7]   53 	jp    _astart
   0003 00            [ 4]   54 	nop  
   0004 00            [ 4]   55 	nop  
   0005 00            [ 4]   56 	nop  
   0006 00            [ 4]   57 	nop  
   0007 00            [ 4]   58 	nop  
   0008 00            [ 4]   59 	nop  
   0009 00            [ 4]   60 	nop  
   000A 00            [ 4]   61 	nop  
   000B 00            [ 4]   62 	nop  
   000C 00            [ 4]   63 	nop  
   000D 00            [ 4]   64 	nop  
   000E 00            [ 4]   65 	nop  
   000F 00            [ 4]   66 	nop
   0010                      67 L10:	
                             68 	; SWI
   0010 1Ar3Fr00      [ 7]   69 	jp    _swi_irq
   0013 00            [ 4]   70 	nop  
   0014 00            [ 4]   71 	nop  
   0015 00            [ 4]   72 	nop  
   0016 00            [ 4]   73 	nop  
   0017 00            [ 4]   74 	nop  
                             75 
   0018                      76 L18:	
   0018 00            [ 4]   77 	nop  ; NMI
   0019 00            [ 4]   78 	nop  
   001A 00            [ 4]   79 	nop  
   001B 00            [ 4]   80 	nop  
   001C 00            [ 4]   81 	nop  
   001D 00            [ 4]   82 	nop  
   001E 00            [ 4]   83 	nop  
   001F 00            [ 4]   84 	nop  
                             85 
   0020                      86 L20:
                             87 	; INTWD
   0020 1Ar4Fr00      [ 7]   88 	jp    _intwd_irq
   0023 00            [ 4]   89 	nop  
   0024 00            [ 4]   90 	nop  
   0025 00            [ 4]   91 	nop  
   0026 00            [ 4]   92 	nop  
   0027 00            [ 4]   93 	nop
   0028                      94 L28:	
   0028 1F            [ 4]   95 	reti ; INT0
   0029 00            [ 4]   96 	nop  
   002A 00            [ 4]   97 	nop  
   002B 00            [ 4]   98 	nop  
   002C 00            [ 4]   99 	nop  
   002D 00            [ 4]  100 	nop  
   002E 00            [ 4]  101 	nop  
   002F 00            [ 4]  102 	nop  
   0030                     103 L30:	
                            104 	; INTT0
   0030 1Ar53r00      [ 7]  105 	jp    _intt0_irq
   0033 00            [ 4]  106 	nop  
   0034 00            [ 4]  107 	nop  
   0035 00            [ 4]  108 	nop  
   0036 00            [ 4]  109 	nop  
   0037 00            [ 4]  110 	nop
   0038                     111 L38:	
                            112 	; INTT1
   0038 1Ar57r00      [ 7]  113 	jp    _intt1_irq
   003B 00            [ 4]  114 	nop  
   003C 00            [ 4]  115 	nop  
   003D 00            [ 4]  116 	nop  
   003E 00            [ 4]  117 	nop  
   003F 00            [ 4]  118 	nop
   0040                     119 L40:
                            120 	; INTAD 
   0040 1F            [ 4]  121 	reti 
   0041 00            [ 4]  122 	nop  
   0042 00            [ 4]  123 	nop  
   0043 00            [ 4]  124 	nop  
   0044 00            [ 4]  125 	nop  
   0045 00            [ 4]  126 	nop  
   0046 00            [ 4]  127 	nop  
   0047 00            [ 4]  128 	nop
   0048                     129 L48:	
                            130 	; INTT3
   0048 1Ar60r00      [ 7]  131 	jp    _intt3_irq
   004B 00            [ 4]  132 	nop  
   004C 00            [ 4]  133 	nop  
   004D 00            [ 4]  134 	nop  
   004E 00            [ 4]  135 	nop  
   004F 00            [ 4]  136 	nop
   0050                     137 L50:	
                            138 	; INTT4
   0050 1Ar64r00      [ 7]  139 	jp    _intt4_irq
   0053 00            [ 4]  140 	nop  
   0054 00            [ 4]  141 	nop  
   0055 00            [ 4]  142 	nop  
   0056 00            [ 4]  143 	nop  
   0057 00            [ 4]  144 	nop
   0058                     145 L58:	
                            146 	; INT1
   0058 1Ar68r00      [ 7]  147 	jp    _int1_irq
   005B 00            [ 4]  148 	nop  
   005C 00            [ 4]  149 	nop  
   005D 00            [ 4]  150 	nop  
   005E 00            [ 4]  151 	nop  
   005F 00            [ 4]  152 	nop
   0060                     153 L60:	
                            154 	; INTT5
   0060 1Ar6Cr00      [ 7]  155 	jp    _intt5_irq
   0063 00            [ 4]  156 	nop  
   0064 00            [ 4]  157 	nop  
   0065 00            [ 4]  158 	nop  
   0066 00            [ 4]  159 	nop  
   0067 00            [ 4]  160 	nop
   0068                     161 L68:	
   0068 1F            [ 4]  162 	reti ; INT2
   0069 00            [ 4]  163 	nop  
   006A 00            [ 4]  164 	nop  
   006B 00            [ 4]  165 	nop  
   006C 00            [ 4]  166 	nop  
   006D 00            [ 4]  167 	nop  
   006E 00            [ 4]  168 	nop  
   006F 00            [ 4]  169 	nop
   0070                     170 L70:	
   0070 1Ar32r00      [ 7]  171 	jp _serial_rx_irq
   0073 00            [ 4]  172 	nop  
   0074 00            [ 4]  173 	nop  
   0075 00            [ 4]  174 	nop  
   0076 00            [ 4]  175 	nop  
   0077 00            [ 4]  176 	nop
   0078                     177 L78:	
   0078 1Ar39r00      [ 7]  178 	jp _serial_tx_irq
   007B 00            [ 4]  179 	nop  
   007C 00            [ 4]  180 	nop  
   007D 00            [ 4]  181 	nop  
   007E 00            [ 4]  182 	nop  
   007F 00            [ 4]  183 	nop
   0080                     184 L80:	
   0080 00            [ 4]  185 	nop  
                            186 
   0100                     187 	.org 0x100
                            188 	
   0100                     189 _astart:
   0100 3E A0 FF      [ 7]  190 	ld    sp, #0x0FFA0	; stack
                            191 	
                            192 	;halt
                            193 	;swi
                            194 	
   0103 EF C2 6E 04   [11]  195 	or    (P01CR), #0x04
                            196 	
   0107 37 C6 F7      [ 4]  197 	ld    (P3), #0xF7	
   010A 37 C7 A5      [ 4]  198 	ld    (P3CR), #0xA5	; P30 = RXD, P31 = IN:PaperOut CN3, P32 = TXD, P33 = OUT:CN2.LF P34:IN, P37:IN
                            199 	
   010D 37 C8 00      [ 4]  200 	ld    (P4), #0x00
   0110 37 C9 03      [ 4]  201 	ld    (P4CR), #0x03	; address output
   0113 37 CD 03      [ 4]  202 	ld    (P7), #0x03
   0116 37 CE F0      [ 4]  203 	ld    (P67CR), #0xF0
   0119 37 CB A0      [ 4]  204 	ld    (SMMOD), #0xA0
   011C 37 CF 00      [ 4]  205 	ld    (SMCR), #0x00
   011F 37 E4 35      [ 4]  206 	ld    (T4MOD), #0x35
   0122 37 D0 08      [ 4]  207 	ld    (P8), #0x08
   0125 37 D1 08      [ 4]  208 	ld    (P8CR), #0x08
   0128 37 E5 01      [ 4]  209 	ld    (T4FFCR), #0x01
                            210 	
   012B 37 DA 40      [ 4]  211 	ld    (TMOD), #0x40
                            212 	
                            213 	;ld    (SCMOD), #0x03	; 9600
   012E 37 E9 01      [ 4]  214 	ld    (SCMOD), #0x01	; 19200
   0131 EF E9 6E 08   [11]  215 	or    (SCMOD), #0x08	; 8-bit data
   0135 EF E9 6E 20   [11]  216 	or    (SCMOD), #0x20	; receiver enable
                            217 
   0139 37 EA 00      [ 4]  218 	ld    (SCCR), #0x00
                            219 	
   013C 37 D2 C0      [ 4]  220 	ld    (WDMOD), #0xC0
   013F 37 DB 20      [ 4]  221 	ld    (TRUN), #0x20	; PRRUN, start prescaler
   0142 EF DB 6E E0   [11]  222 	or    (TRUN), #0xE0	; BRATE, 19200 baud
                            223 
                            224 	;; enable rx/tx irqs
   0146 B8 E6         [ 4]  225 	set   0,(INTEL)		; tx
   0148 B9 E6         [ 4]  226 	set   1,(INTEL)		; rx
                            227 
                            228 	;call _boot1
                            229 	
   014A 3A 20 FF      [13]  230 	ld    hl, #0xFF20	; data start
   014D 36 00         [10]  231 	ld    a, #0x00
                            232 	
   014F                     233 clear_ram:
   014F 1CrA4r00      [ 4]  234 	call  _wd_reset_asm
                            235 	
   0152 EA 26         [10]  236 	ld    (hl),a
   0154 92            [ 4]  237 	inc   hl
   0155 7F C0 FF      [ 4]  238 	cp    hl, #0xFFC0	; io start, 160 bytes data
   0158 CE F5         [ 7]  239 	jr    nz, clear_ram
                            240 	
   015A 1CrA4r00      [ 4]  241 	call  _wd_reset_asm
                            242 
   015D B0 BF         [ 4]  243 	res   TX_ACTIVE,(_ser_irq_flags)
                            244 	
                            245 	;call _boot2
   015F 1Cr00r00      [ 4]  246 	call _meminit
                            247 	
   0162 1CrA4r00      [ 4]  248 	call  _wd_reset_asm
                            249 	
                            250         ;; Initialise global variables
                            251 
                            252 	;call _boot3
                            253 	
   0165 1Cr00r00      [ 4]  254         call gsinit
                            255 
                            256 	;call _boot4
                            257 	
   0168 1Cr00r00      [ 4]  258 	call _main
   016B 01            [10]  259 	halt
                            260 	
                            261 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            262 
                            263 	.area _CODE
                            264 	
                            265 	;; get far byte using by
                            266 	
   0000                     267 _xget_byte_asm:
   0000 50            [ 4]  268 	push bc
   0001 E3r00r00 4D   [19]  269 	ld	iy, (_xxaddr)
   0005 E7 ED 28      [11]  270 	ld	b, (BY)
   0008 E3r00r00 2E   [19]  271 	ld	a, (_xxby)
   000C 2F ED         [ 4]  272 	ld	(BY), a
   000E E5 2E         [11]  273 	ld	a,(iy)
   0010 EF ED 20      [11]  274 	ld	(BY), b
   0013 EBr00r00 26   [ 4]  275 	ld	(_xxdata), a
   0017 58            [ 4]  276 	pop	bc
   0018 1E            [ 7]  277 	ret
                            278 
   0019                     279 _xset_byte_asm:
   0019 50            [ 4]  280 	push bc
   001A E3r00r00 4D   [19]  281 	ld	iy, (_xxaddr)
   001E E7 ED 28      [11]  282 	ld	b, (BY)
   0021 E3r00r00 2E   [19]  283 	ld	a, (_xxby)
   0025 2F ED         [ 4]  284 	ld	(BY), a
   0027 E3r00r00 2E   [19]  285 	ld 	a, (_xxdata)
   002B ED 26               286 	ld	(iy), a
   002D EF ED 20      [11]  287 	ld	(BY), b
   0030 58            [ 4]  288 	pop	bc
   0031 1E            [ 7]  289 	ret
                            290 	
                            291 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            292 
   0032                     293 _serial_rx_irq:
   0032 27 EB         [ 4]  294 	ld a, (SCBUF)
   0034 2F BE         [ 4]  295 	ld (_ser_char), a
   0036 B9 BF         [ 4]  296 	set RX_READY, (_ser_irq_flags)
   0038 1F            [ 4]  297 	reti 
                            298 
                            299 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            300 	
   0039                     301 _serial_tx_irq:
   0039 B0 BF         [ 4]  302 	res TX_ACTIVE,(_ser_irq_flags)
   003B 37 C3 0F      [ 4]  303 	ld (IRFH), #0x0F ; clear tx request flag (vector 0x78/8 = 0x0F)
   003E 1F            [ 4]  304 	reti 
                            305 
                            306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            307 
   003F                     308 _swi_irq:
   003F 52            [ 4]  309 	push hl
   0040 F2 04 4A      [10]  310 	ld hl, 4(sp)
   0043 4F BC         [ 4]  311 	ld (_swi_pc), hl	; pc
   0045 F2 02 4A      [10]  312 	ld hl, 2(sp)
   0048 4F BA         [ 4]  313 	ld (_swi_af), hl	; af
   004A 1Cr00r00      [ 4]  314 	call _irq_info_swi
   004D 5A            [ 4]  315 	pop hl
   004E 1F            [ 4]  316 	reti
   004F                     317 _intwd_irq:	
   004F 1Cr00r00      [ 4]  318 	call _irq_info_intwd
   0052 1F            [ 4]  319 	reti
   0053                     320 _intt0_irq:	
   0053 1Cr00r00      [ 4]  321 	call _irq_info_intt0
   0056 1F            [ 4]  322 	reti
   0057                     323 _intt1_irq:	
                            324 	;call _irq_info_intt1
                            325 	;exx
                            326 
                            327 	; hangs when exx is used?
   0057 97 B8         [ 4]  328 	incw (_ticks16) 
                            329 
                            330 	; hangs when exx is used?
                            331 	;; ld hl, (_ticks16)
                            332 	;; inc hl
                            333 	;; ld (_ticks16), hl
                            334 	
   0059 37 D3 4E      [ 4]  335 	ld (WDCR), #0x4E
   005C 37 C2 10      [ 4]  336 	ld (IRFL), #0x10;
                            337 	;call _timer1_irq
                            338 	;exx
   005F 1F            [ 4]  339 	reti
   0060                     340 _intt3_irq:	
   0060 1Cr00r00      [ 4]  341 	call _irq_info_intt3
   0063 1F            [ 4]  342 	reti
   0064                     343 _intt4_irq:	
   0064 1Cr00r00      [ 4]  344 	call _irq_info_intt4
   0067 1F            [ 4]  345 	reti
   0068                     346 _int1_irq:	
   0068 1Cr00r00      [ 4]  347 	call _irq_info_int1
   006B 1F            [ 4]  348 	reti
   006C                     349 _intt5_irq:	
   006C 1Cr00r00      [ 4]  350 	call _irq_info_intt5
   006F 1F            [ 4]  351 	reti
                            352 
                            353 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            354 	
   0070                     355 _ser_putchar_irq:
   0070 F2 02 2E      [10]  356 	ld    a, 2(sp)
                            357 
   0073                     358 _ser_putchar_asm:
                            359 	
   0073                     360 loop1:
                            361 
                            362 	;; check tx active flag
   0073 A8 BF         [ 4]  363 	bit   TX_ACTIVE,(_ser_irq_flags)
   0075 C6 0D         [ 7]  364 	jr    z, send1
                            365 
   0077 02            [ 7]  366 	di
   0078 A8 C3         [ 4]  367 	bit   0,(IRFH) ; check irq
   007A CE 08         [ 7]  368 	jr    nz, send1
   007C 03            [ 6]  369 	ei
                            370 	
   007D 00            [ 4]  371 	nop
   007E 00            [ 4]  372 	nop
   007F 1CrA4r00      [ 4]  373 	call  _wd_reset_asm
   0082 C8 EF         [11]  374 	jr    loop1 ; loop, wait for irq
                            375 
   0084                     376 send1:	
   0084 02            [ 7]  377 	di
   0085 37 C3 0F      [ 4]  378 	ld    (IRFH),#0x0F ; clear tx request flag (vector 0x78/8 = 0x0F)
   0088 2F EB         [ 4]  379 	ld    (SCBUF),a ; send
   008A B8 BF         [ 4]  380 	set   TX_ACTIVE,(_ser_irq_flags) ; tx active..
   008C 03            [ 6]  381 	ei
   008D 1E            [ 7]  382 	ret
                            383 	
                            384 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            385 	
   008E                     386 _ser_puts:
   008E F2 02 4A      [10]  387 	ld hl, 2(sp)
                            388 	
   0091                     389 ser_puts1:
   0091 E2 2E         [10]  390 	ld a,(hl)
   0093 FE 66         [ 7]  391 	or a, a
   0095 FE D6         [ 7]  392 	ret z
                            393 	
   0097 1Cr73r00      [ 4]  394 	call _ser_putchar_asm
   009A 92            [ 4]  395 	inc hl
   009B C8 F4         [11]  396 	jr ser_puts1
                            397 	
                            398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            399 
   009D                     400 _WatchDogDisable:
   009D 37 D2 00      [ 4]  401 	ld    (WDMOD), #0x00 	; wd disable code
   00A0 37 D3 B1      [ 4]  402 	ld    (WDCR), #0xB1 	; wd disable code
   00A3 1E            [ 7]  403 	ret
                            404 	
   00A4                     405 _wd_reset_asm:
   00A4 37 D3 4E      [ 4]  406 	ld    (WDCR), #0x4E 	; wd clear code
                            407 
                     0000   408 .if 0
                            409 	; STAR ASIC? Not needed..
                            410 	push  bc
                            411 	push  iy
                            412 	
                            413 	ld    b,(BY)
                            414 	ld    (BY), #0x01
                            415 	ld    iy, #0x4001		
                            416 	set   1,(iy)
                            417 	nop  
                            418 	nop  
                            419 	res   1,(iy)
                            420 	ld    (BY),b
                            421 	
                            422 	pop   iy
                            423 	pop   bc
                            424 
                            425 .endif
                            426 	
   00A7 1E            [ 7]  427 	ret
                            428 	
                            429 	;; Ordering of segments for the linker.
                            430 	.area	_HOME
                            431 	.area	_CODE
                            432 	.area	_INITIALIZER
                            433 	.area   _GSINIT
                            434 	.area   _GSFINAL
                            435 
                            436 	.area	_DATA
                            437 	.area	_INITIALIZED
                            438 	.area	_BSEG
                            439 	.area   _BSS
                            440 	.area   _HEAP
                            441 
                            442 	.area   _CODE
                            443 
                            444 	.area   _GSINIT
   0000                     445 gsinit::
   0000 38r00r00      [12]  446 	ld	bc, #l__INITIALIZER
   0003 20            [12]  447 	ld	a, b
   0004 F9 66         [ 6]  448 	or	a, c
   0006 C6 08         [ 7]  449 	jr	Z, gsinit_next
   0008 39r00r00      [11]  450 	ld	de, #s__INITIALIZED
   000B 3Ar00r00      [13]  451 	ld	hl, #s__INITIALIZER
   000E FE 59         [ 7]  452 	ldir
   0010                     453 gsinit_next:
                            454 
                            455 	.area   _GSFINAL
   0000 1E            [ 7]  456 	ret
                            457 	
                            458 	.area _DATA
                            459 ; __sfr __at	
                     FFBF   460 _ser_irq_flags	=	0xffbf
                     FFBE   461 _ser_char	=	0xffbe
                     FFBC   462 _swi_pc		=       0xffbc
                     FFBA   463 _swi_af         =       0xffba
                     FFB8   464 _ticks16	=	0xffb8
                     FFB7   465 _xflag		=	0xffb7
                            466 	
