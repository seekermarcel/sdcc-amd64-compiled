                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:30 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _autobaud
                                      7 	.optsdcc -mds400 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _autobaud
                                     35 ;--------------------------------------------------------
                                     36 ; special function registers
                                     37 ;--------------------------------------------------------
                           000080    38 _P0	=	0x0080
                           000081    39 _SP	=	0x0081
                           000082    40 _DPL	=	0x0082
                           000083    41 _DPH	=	0x0083
                           000087    42 _PCON	=	0x0087
                           000088    43 _TCON	=	0x0088
                           000089    44 _TMOD	=	0x0089
                           00008A    45 _TL0	=	0x008a
                           00008B    46 _TL1	=	0x008b
                           00008C    47 _TH0	=	0x008c
                           00008D    48 _TH1	=	0x008d
                           000090    49 _P1	=	0x0090
                           000098    50 _SCON	=	0x0098
                           000099    51 _SBUF	=	0x0099
                           0000A0    52 _P2	=	0x00a0
                           0000A8    53 _IE	=	0x00a8
                           0000B0    54 _P3	=	0x00b0
                           0000B8    55 _IP	=	0x00b8
                           0000D0    56 _PSW	=	0x00d0
                           0000E0    57 _ACC	=	0x00e0
                           0000F0    58 _B	=	0x00f0
                                     59 ;--------------------------------------------------------
                                     60 ; special function bits
                                     61 ;--------------------------------------------------------
                           000080    62 _P0_0	=	0x0080
                           000081    63 _P0_1	=	0x0081
                           000082    64 _P0_2	=	0x0082
                           000083    65 _P0_3	=	0x0083
                           000084    66 _P0_4	=	0x0084
                           000085    67 _P0_5	=	0x0085
                           000086    68 _P0_6	=	0x0086
                           000087    69 _P0_7	=	0x0087
                           000088    70 _IT0	=	0x0088
                           000089    71 _IE0	=	0x0089
                           00008A    72 _IT1	=	0x008a
                           00008B    73 _IE1	=	0x008b
                           00008C    74 _TR0	=	0x008c
                           00008D    75 _TF0	=	0x008d
                           00008E    76 _TR1	=	0x008e
                           00008F    77 _TF1	=	0x008f
                           000090    78 _P1_0	=	0x0090
                           000091    79 _P1_1	=	0x0091
                           000092    80 _P1_2	=	0x0092
                           000093    81 _P1_3	=	0x0093
                           000094    82 _P1_4	=	0x0094
                           000095    83 _P1_5	=	0x0095
                           000096    84 _P1_6	=	0x0096
                           000097    85 _P1_7	=	0x0097
                           000098    86 _RI	=	0x0098
                           000099    87 _TI	=	0x0099
                           00009A    88 _RB8	=	0x009a
                           00009B    89 _TB8	=	0x009b
                           00009C    90 _REN	=	0x009c
                           00009D    91 _SM2	=	0x009d
                           00009E    92 _SM1	=	0x009e
                           00009F    93 _SM0	=	0x009f
                           0000A0    94 _P2_0	=	0x00a0
                           0000A1    95 _P2_1	=	0x00a1
                           0000A2    96 _P2_2	=	0x00a2
                           0000A3    97 _P2_3	=	0x00a3
                           0000A4    98 _P2_4	=	0x00a4
                           0000A5    99 _P2_5	=	0x00a5
                           0000A6   100 _P2_6	=	0x00a6
                           0000A7   101 _P2_7	=	0x00a7
                           0000A8   102 _EX0	=	0x00a8
                           0000A9   103 _ET0	=	0x00a9
                           0000AA   104 _EX1	=	0x00aa
                           0000AB   105 _ET1	=	0x00ab
                           0000AC   106 _ES	=	0x00ac
                           0000AF   107 _EA	=	0x00af
                           0000B0   108 _P3_0	=	0x00b0
                           0000B1   109 _P3_1	=	0x00b1
                           0000B2   110 _P3_2	=	0x00b2
                           0000B3   111 _P3_3	=	0x00b3
                           0000B4   112 _P3_4	=	0x00b4
                           0000B5   113 _P3_5	=	0x00b5
                           0000B6   114 _P3_6	=	0x00b6
                           0000B7   115 _P3_7	=	0x00b7
                           0000B0   116 _RXD	=	0x00b0
                           0000B1   117 _TXD	=	0x00b1
                           0000B2   118 _INT0	=	0x00b2
                           0000B3   119 _INT1	=	0x00b3
                           0000B4   120 _T0	=	0x00b4
                           0000B5   121 _T1	=	0x00b5
                           0000B6   122 _WR	=	0x00b6
                           0000B7   123 _RD	=	0x00b7
                           0000B8   124 _PX0	=	0x00b8
                           0000B9   125 _PT0	=	0x00b9
                           0000BA   126 _PX1	=	0x00ba
                           0000BB   127 _PT1	=	0x00bb
                           0000BC   128 _PS	=	0x00bc
                           0000D0   129 _P	=	0x00d0
                           0000D1   130 _F1	=	0x00d1
                           0000D2   131 _OV	=	0x00d2
                           0000D3   132 _RS0	=	0x00d3
                           0000D4   133 _RS1	=	0x00d4
                           0000D5   134 _F0	=	0x00d5
                           0000D6   135 _AC	=	0x00d6
                           0000D7   136 _CY	=	0x00d7
                                    137 ;--------------------------------------------------------
                                    138 ; overlayable register banks
                                    139 ;--------------------------------------------------------
                                    140 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        141 	.ds 8
                                    142 	.area REG_BANK_3	(REL,OVR,DATA)
      000000                        143 	.ds 8
                                    144 ;--------------------------------------------------------
                                    145 ; internal ram data
                                    146 ;--------------------------------------------------------
                                    147 	.area DSEG    (DATA)
                                    148 ;--------------------------------------------------------
                                    149 ; overlayable items in internal ram 
                                    150 ;--------------------------------------------------------
                                    151 ;--------------------------------------------------------
                                    152 ; indirectly addressable internal ram data
                                    153 ;--------------------------------------------------------
                                    154 	.area ISEG    (DATA)
                                    155 ;--------------------------------------------------------
                                    156 ; absolute internal ram data
                                    157 ;--------------------------------------------------------
                                    158 	.area IABS    (ABS,DATA)
                                    159 	.area IABS    (ABS,DATA)
                                    160 ;--------------------------------------------------------
                                    161 ; bit data
                                    162 ;--------------------------------------------------------
                                    163 	.area BSEG    (BIT)
                                    164 ;--------------------------------------------------------
                                    165 ; paged external ram data
                                    166 ;--------------------------------------------------------
                                    167 	.area PSEG    (PAG,XDATA)
                                    168 ;--------------------------------------------------------
                                    169 ; external ram data
                                    170 ;--------------------------------------------------------
                                    171 	.area XSEG    (XDATA)
                                    172 ;--------------------------------------------------------
                                    173 ; absolute external ram data
                                    174 ;--------------------------------------------------------
                                    175 	.area XABS    (ABS,XDATA)
                                    176 ;--------------------------------------------------------
                                    177 ; external initialized ram data
                                    178 ;--------------------------------------------------------
                                    179 	.area XISEG   (XDATA)
                                    180 ;--------------------------------------------------------
                                    181 ; global & static initialisations
                                    182 ;--------------------------------------------------------
                                    183 	.area HOME    (CODE)
                                    184 	.area GSINIT  (CODE)
                                    185 	.area GSFINAL (CODE)
                                    186 	.area GSINIT  (CODE)
                                    187 ;--------------------------------------------------------
                                    188 ; Home
                                    189 ;--------------------------------------------------------
                                    190 	.area HOME    (CODE)
                                    191 	.area HOME    (CODE)
                                    192 ;--------------------------------------------------------
                                    193 ; code
                                    194 ;--------------------------------------------------------
                                    195 	.area CSEG    (CODE)
                                    196 ;------------------------------------------------------------
                                    197 ;Allocation info for local variables in function 'autobaud'
                                    198 ;------------------------------------------------------------
                                    199 ;	_autobaud.c:57: void autobaud ()
                                    200 ;	-----------------------------------------
                                    201 ;	 function autobaud
                                    202 ;	-----------------------------------------
      000000                        203 _autobaud:
                           000002   204 	ar2 = 0x02
                           000003   205 	ar3 = 0x03
                           000004   206 	ar4 = 0x04
                           000005   207 	ar5 = 0x05
                           000006   208 	ar6 = 0x06
                           000007   209 	ar7 = 0x07
                           000000   210 	ar0 = 0x00
                           000001   211 	ar1 = 0x01
                                    212 ;	_autobaud.c:61: TMOD=0x11;
                                    213 ;	genAssign: resultIsFar = FALSE
      000000 75 89 11         [12]  214 	mov	_TMOD,#0x11
                                    215 ;	_autobaud.c:62: TCON = 0;
                                    216 ;	genAssign: resultIsFar = FALSE
      000003 75 88 00         [12]  217 	mov	_TCON,#0x00
                                    218 ;	_autobaud.c:63: TH1 = TL1 = 0;
                                    219 ;	genAssign: resultIsFar = FALSE
      000006 75 8B 00         [12]  220 	mov	_TL1,#0x00
                                    221 ;	genAssign: resultIsFar = FALSE
      000009 75 8D 00         [12]  222 	mov	_TH1,#0x00
                                    223 ;	_autobaud.c:67: while(RXD) ; 
      00000C                        224 00102$:
      00000C 20 B0 FD         [12]  225 	jb   _RXD,00102$
      00000F                        226 00166$:
                                    227 ;	_autobaud.c:71: if (RXD) goto autobaud2;
      00000F 20 B0 FA         [12]  228 	jb   _RXD,00102$
      000012                        229 00167$:
                                    230 ;	_autobaud.c:72: if (RXD) goto autobaud2;
      000012 20 B0 F7         [12]  231 	jb   _RXD,00102$
      000015                        232 00168$:
                                    233 ;	_autobaud.c:73: if (RXD) goto autobaud2;
      000015 20 B0 F4         [12]  234 	jb   _RXD,00102$
      000018                        235 00169$:
                                    236 ;	_autobaud.c:74: if (RXD) goto autobaud2;
      000018 20 B0 F1         [12]  237 	jb   _RXD,00102$
      00001B                        238 00170$:
                                    239 ;	_autobaud.c:77: while (!RXD);
      00001B                        240 00113$:
      00001B 30 B0 FD         [12]  241 	jnb  _RXD,00113$
      00001E                        242 00171$:
                                    243 ;	_autobaud.c:78: TR1 = 1; /* start the timer */
                                    244 ;	genAssign: resultIsFar = FALSE
      00001E D2 8E            [ 8]  245 	setb	_TR1
                                    246 ;	_autobaud.c:79: while (RXD);             // wait for bit #1 to begin
      000020                        247 00116$:
      000020 20 B0 FD         [12]  248 	jb   _RXD,00116$
      000023                        249 00172$:
                                    250 ;	_autobaud.c:80: while(!RXD);             // wait for bit #2 to begin
      000023                        251 00119$:
      000023 30 B0 FD         [12]  252 	jnb  _RXD,00119$
      000026                        253 00173$:
                                    254 ;	_autobaud.c:81: while(RXD);              // wait for bit #4 to begin
      000026                        255 00122$:
      000026 20 B0 FD         [12]  256 	jb   _RXD,00122$
      000029                        257 00174$:
                                    258 ;	_autobaud.c:82: while (!RXD);            // wait for stop bit to begin
      000029                        259 00125$:
      000029 30 B0 FD         [12]  260 	jnb  _RXD,00125$
      00002C                        261 00175$:
                                    262 ;	_autobaud.c:83: TR1 = 0;                 // stop timing
                                    263 ;	genAssign: resultIsFar = FALSE
      00002C C2 8E            [ 8]  264 	clr	_TR1
                                    265 ;	_autobaud.c:86: TH1 = (TH1 << 1) | (TL1 >> 7);
      00002E E5 8D            [ 8]  266 	mov	a,_TH1
      000030 25 E0            [ 8]  267 	add	a,acc
      000032 FA               [ 4]  268 	mov	r2,a
      000033 E5 8B            [ 8]  269 	mov	a,_TL1
      000035 23               [ 4]  270 	rl	a
      000036 54 01            [ 8]  271 	anl	a,#0x01
      000038 FB               [ 4]  272 	mov  r3,a
      000039 4A               [ 4]  273 	orl	a,r2
                                    274 ;	_autobaud.c:89: TH1 = (TH1 << 1) | ((TL1 >> 6) & 0x01);
      00003A F5 8D            [ 8]  275 	mov  _TH1,a
      00003C 25 E0            [ 8]  276 	add	a,acc
      00003E FA               [ 4]  277 	mov	r2,a
      00003F E5 8B            [ 8]  278 	mov	a,_TL1
      000041 23               [ 4]  279 	rl	a
      000042 23               [ 4]  280 	rl	a
      000043 54 01            [ 8]  281 	anl  a,#(0x03 & 0x01)
      000045 FB               [ 4]  282 	mov  r3,a
      000046 4A               [ 4]  283 	orl	a,r2
                                    284 ;	_autobaud.c:92: TH1 = ~TH1;
      000047 F4               [ 4]  285 	cpl  a
                                    286 ;	_autobaud.c:95: TH1++ ;
      000048 04               [ 4]  287 	inc  a
      000049 F5 8D            [ 8]  288 	mov  _TH1,a
                                    289 ;	_autobaud.c:97: TL1 = TH1;
                                    290 ;	genAssign: resultIsFar = FALSE
      00004B 85 8D 8B         [12]  291 	mov	_TL1,_TH1
                                    292 ;	_autobaud.c:98: TMOD =  0x21     ;      // set timer #1 for 8 bit auto-reload
                                    293 ;	genAssign: resultIsFar = FALSE
      00004E 75 89 21         [12]  294 	mov	_TMOD,#0x21
                                    295 ;	_autobaud.c:99: PCON =  0x80     ;      // configure built-in uart
                                    296 ;	genAssign: resultIsFar = FALSE
      000051 75 87 80         [12]  297 	mov	_PCON,#0x80
                                    298 ;	_autobaud.c:100: SCON =  0x52     ;
                                    299 ;	genAssign: resultIsFar = FALSE
      000054 75 98 52         [12]  300 	mov	_SCON,#0x52
      000057                        301 00128$:
      000057 22               [16]  302 	ret
                                    303 	.area CSEG    (CODE)
                                    304 	.area CONST   (CODE)
                                    305 	.area XINIT   (CODE)
                                    306 	.area CABS    (ABS,CODE)
