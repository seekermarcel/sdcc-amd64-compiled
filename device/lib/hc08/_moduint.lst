                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:10:32 2022
                              5 ;--------------------------------------------------------
                              6 	.module _moduint
                              7 	.optsdcc -mhc08
                              8 	
                              9 	.area HOME    (CODE)
                             10 	.area GSINIT0 (CODE)
                             11 	.area GSINIT  (CODE)
                             12 	.area GSFINAL (CODE)
                             13 	.area CSEG    (CODE)
                             14 	.area XINIT   (CODE)
                             15 	.area CONST   (CODE)
                             16 	.area DSEG    (PAG)
                             17 	.area OSEG    (PAG, OVR)
                             18 	.area XSEG
                             19 	.area XISEG
                             20 ;--------------------------------------------------------
                             21 ; Public variables in this module
                             22 ;--------------------------------------------------------
                             23 	.globl __moduint_PARM_2
                             24 	.globl __moduint
                             25 ;--------------------------------------------------------
                             26 ; ram data
                             27 ;--------------------------------------------------------
                             28 	.area DSEG    (PAG)
                             29 ;--------------------------------------------------------
                             30 ; overlayable items in ram 
                             31 ;--------------------------------------------------------
                             32 ;--------------------------------------------------------
                             33 ; absolute ram data
                             34 ;--------------------------------------------------------
                             35 	.area IABS    (ABS)
                             36 	.area IABS    (ABS)
                             37 ;--------------------------------------------------------
                             38 ; absolute external ram data
                             39 ;--------------------------------------------------------
                             40 	.area XABS    (ABS)
                             41 ;--------------------------------------------------------
                             42 ; external initialized ram data
                             43 ;--------------------------------------------------------
                             44 	.area XISEG
                             45 ;--------------------------------------------------------
                             46 ; extended address mode data
                             47 ;--------------------------------------------------------
                             48 	.area XSEG
   0000                      49 __moduint_PARM_2:
   0000                      50 	.ds 2
   0002                      51 __moduint_a_1_1:
   0002                      52 	.ds 2
                             53 ;--------------------------------------------------------
                             54 ; global & static initialisations
                             55 ;--------------------------------------------------------
                             56 	.area HOME    (CODE)
                             57 	.area GSINIT  (CODE)
                             58 	.area GSFINAL (CODE)
                             59 	.area GSINIT  (CODE)
                             60 ;--------------------------------------------------------
                             61 ; Home
                             62 ;--------------------------------------------------------
                             63 	.area HOME    (CODE)
                             64 	.area HOME    (CODE)
                             65 ;--------------------------------------------------------
                             66 ; code
                             67 ;--------------------------------------------------------
                             68 	.area CSEG    (CODE)
                             69 ;------------------------------------------------------------
                             70 ;Allocation info for local variables in function '_moduint'
                             71 ;------------------------------------------------------------
                             72 ;b                         Allocated with name '__moduint_PARM_2'
                             73 ;a                         Allocated with name '__moduint_a_1_1'
                             74 ;count                     Allocated to registers h 
                             75 ;------------------------------------------------------------
                             76 ;../_moduint.c:173: _moduint (unsigned int a, unsigned int b)
                             77 ;	-----------------------------------------
                             78 ;	 function _moduint
                             79 ;	-----------------------------------------
                             80 ;	Register assignment is optimal.
                             81 ;	Stack space usage: 0 bytes.
   0000                      82 __moduint:
   0000 C7r00r03      [ 4]   83 	sta	(__moduint_a_1_1 + 1)
   0003 CFr00r02      [ 4]   84 	stx	__moduint_a_1_1
                             85 ;../_moduint.c:175: unsigned char count = 0;
   0006 8C            [ 1]   86 	clrh
                             87 ;../_moduint.c:177: while (!MSB_SET(b))
   0007 5F            [ 1]   88 	clrx
   0008                      89 00103$:
   0008 C6r00r00      [ 4]   90 	lda	__moduint_PARM_2
   000B 49            [ 1]   91 	rola
   000C 4F            [ 1]   92 	clra
   000D 49            [ 1]   93 	rola
   000E 4D            [ 1]   94 	tsta
   000F 26 34         [ 3]   95 	bne	00117$
                             96 ;../_moduint.c:179: b <<= 1;
   0011 89            [ 2]   97 	pshx
   0012 C6r00r01      [ 4]   98 	lda	(__moduint_PARM_2 + 1)
   0015 CEr00r00      [ 4]   99 	ldx	__moduint_PARM_2
   0018 48            [ 1]  100 	lsla
   0019 59            [ 1]  101 	rolx
   001A C7r00r01      [ 4]  102 	sta	(__moduint_PARM_2 + 1)
   001D CFr00r00      [ 4]  103 	stx	__moduint_PARM_2
   0020 88            [ 2]  104 	pulx
                            105 ;../_moduint.c:180: if (b > a)
   0021 C6r00r03      [ 4]  106 	lda	(__moduint_a_1_1 + 1)
   0024 C0r00r01      [ 4]  107 	sub	(__moduint_PARM_2 + 1)
   0027 C6r00r02      [ 4]  108 	lda	__moduint_a_1_1
   002A C2r00r00      [ 4]  109 	sbc	__moduint_PARM_2
   002D 24 10         [ 3]  110 	bcc	00102$
                            111 ;../_moduint.c:182: b >>=1;
   002F C6r00r01      [ 4]  112 	lda	(__moduint_PARM_2 + 1)
   0032 CEr00r00      [ 4]  113 	ldx	__moduint_PARM_2
   0035 54            [ 1]  114 	lsrx
   0036 46            [ 1]  115 	rora
   0037 C7r00r01      [ 4]  116 	sta	(__moduint_PARM_2 + 1)
   003A CFr00r00      [ 4]  117 	stx	__moduint_PARM_2
                            118 ;../_moduint.c:183: break;
   003D 20 06         [ 3]  119 	bra	00117$
   003F                     120 00102$:
                            121 ;../_moduint.c:185: count++;
   003F AF 01         [ 2]  122 	aix	#1
   0041 89            [ 2]  123 	pshx
   0042 8A            [ 2]  124 	pulh
   0043 20 C3         [ 3]  125 	bra	00103$
                            126 ;../_moduint.c:187: do
   0045                     127 00117$:
   0045 8B            [ 2]  128 	pshh
   0046 88            [ 2]  129 	pulx
   0047                     130 00108$:
                            131 ;../_moduint.c:189: if (a >= b)
   0047 C6r00r03      [ 4]  132 	lda	(__moduint_a_1_1 + 1)
   004A C0r00r01      [ 4]  133 	sub	(__moduint_PARM_2 + 1)
   004D C6r00r02      [ 4]  134 	lda	__moduint_a_1_1
   0050 C2r00r00      [ 4]  135 	sbc	__moduint_PARM_2
   0053 25 12         [ 3]  136 	bcs	00107$
                            137 ;../_moduint.c:190: a -= b;
   0055 C6r00r03      [ 4]  138 	lda	(__moduint_a_1_1 + 1)
   0058 C0r00r01      [ 4]  139 	sub	(__moduint_PARM_2 + 1)
   005B C7r00r03      [ 4]  140 	sta	(__moduint_a_1_1 + 1)
   005E C6r00r02      [ 4]  141 	lda	__moduint_a_1_1
   0061 C2r00r00      [ 4]  142 	sbc	__moduint_PARM_2
   0064 C7r00r02      [ 4]  143 	sta	__moduint_a_1_1
   0067                     144 00107$:
                            145 ;../_moduint.c:191: b >>= 1;
   0067 89            [ 2]  146 	pshx
   0068 C6r00r01      [ 4]  147 	lda	(__moduint_PARM_2 + 1)
   006B CEr00r00      [ 4]  148 	ldx	__moduint_PARM_2
   006E 54            [ 1]  149 	lsrx
   006F 46            [ 1]  150 	rora
   0070 C7r00r01      [ 4]  151 	sta	(__moduint_PARM_2 + 1)
   0073 CFr00r00      [ 4]  152 	stx	__moduint_PARM_2
   0076 88            [ 2]  153 	pulx
                            154 ;../_moduint.c:193: while (count--);
   0077 9F            [ 1]  155 	txa
   0078 5A            [ 1]  156 	decx
   0079 4D            [ 1]  157 	tsta
   007A 26 CB         [ 3]  158 	bne	00108$
                            159 ;../_moduint.c:194: return a;
   007C CEr00r02      [ 4]  160 	ldx	__moduint_a_1_1
   007F C6r00r03      [ 4]  161 	lda	(__moduint_a_1_1 + 1)
   0082 81            [ 4]  162 	rts
                            163 	.area CSEG    (CODE)
                            164 	.area CONST   (CODE)
                            165 	.area XINIT   (CODE)
                            166 	.area CABS    (ABS,CODE)
