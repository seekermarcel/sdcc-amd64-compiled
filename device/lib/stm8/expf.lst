                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:17:02 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module expf
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _ldexpf
                                     13 	.globl _expf
                                     14 ;--------------------------------------------------------
                                     15 ; ram data
                                     16 ;--------------------------------------------------------
                                     17 	.area DATA
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area INITIALIZED
                                     22 ;--------------------------------------------------------
                                     23 ; absolute external ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area DABS (ABS)
                                     26 ;--------------------------------------------------------
                                     27 ; global & static initialisations
                                     28 ;--------------------------------------------------------
                                     29 	.area HOME
                                     30 	.area GSINIT
                                     31 	.area GSFINAL
                                     32 	.area GSINIT
                                     33 ;--------------------------------------------------------
                                     34 ; Home
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area HOME
                                     38 ;--------------------------------------------------------
                                     39 ; code
                                     40 ;--------------------------------------------------------
                                     41 	.area CODE
                                     42 ;	../expf.c: 330: float expf(float x) _FLOAT_FUNC_REENTRANT
                                     43 ;	-----------------------------------------
                                     44 ;	 function expf
                                     45 ;	-----------------------------------------
      000000                         46 _expf:
      000000 52 2C            [ 2]   47 	sub	sp, #44
                                     48 ;	../expf.c: 336: if(x>=0.0)
      000002 5F               [ 1]   49 	clrw	x
      000003 89               [ 2]   50 	pushw	x
      000004 5F               [ 1]   51 	clrw	x
      000005 89               [ 2]   52 	pushw	x
      000006 1E 35            [ 2]   53 	ldw	x, (0x35, sp)
      000008 89               [ 2]   54 	pushw	x
      000009 1E 35            [ 2]   55 	ldw	x, (0x35, sp)
      00000B 89               [ 2]   56 	pushw	x
      00000C CDr00r00         [ 4]   57 	call	___fslt
      00000F 5B 08            [ 2]   58 	addw	sp, #8
      000011 4D               [ 1]   59 	tnz	a
      000012 26 0C            [ 1]   60 	jrne	00102$
                                     61 ;	../expf.c: 337: { y=x;  sign=0; }
      000014 16 31            [ 2]   62 	ldw	y, (0x31, sp)
      000016 17 04            [ 2]   63 	ldw	(0x04, sp), y
      000018 16 2F            [ 2]   64 	ldw	y, (0x2f, sp)
      00001A 17 02            [ 2]   65 	ldw	(0x02, sp), y
      00001C 0F 01            [ 1]   66 	clr	(0x01, sp)
      00001E 20 0F            [ 2]   67 	jra	00103$
      000020                         68 00102$:
                                     69 ;	../expf.c: 339: { y=-x; sign=1; }
      000020 16 31            [ 2]   70 	ldw	y, (0x31, sp)
      000022 1E 2F            [ 2]   71 	ldw	x, (0x2f, sp)
      000024 58               [ 2]   72 	sllw	x
      000025 8C               [ 1]   73 	ccf
      000026 56               [ 2]   74 	rrcw	x
      000027 17 04            [ 2]   75 	ldw	(0x04, sp), y
      000029 1F 02            [ 2]   76 	ldw	(0x02, sp), x
      00002B A6 01            [ 1]   77 	ld	a, #0x01
      00002D 6B 01            [ 1]   78 	ld	(0x01, sp), a
      00002F                         79 00103$:
                                     80 ;	../expf.c: 341: if(y<EXPEPS) return 1.0;
      00002F 4B 95            [ 1]   81 	push	#0x95
      000031 4B BF            [ 1]   82 	push	#0xbf
      000033 4B D6            [ 1]   83 	push	#0xd6
      000035 4B 33            [ 1]   84 	push	#0x33
      000037 1E 08            [ 2]   85 	ldw	x, (0x08, sp)
      000039 89               [ 2]   86 	pushw	x
      00003A 1E 08            [ 2]   87 	ldw	x, (0x08, sp)
      00003C 89               [ 2]   88 	pushw	x
      00003D CDr00r00         [ 4]   89 	call	___fslt
      000040 5B 08            [ 2]   90 	addw	sp, #8
      000042 6B 18            [ 1]   91 	ld	(0x18, sp), a
      000044 0D 18            [ 1]   92 	tnz	(0x18, sp)
      000046 27 08            [ 1]   93 	jreq	00105$
      000048 5F               [ 1]   94 	clrw	x
      000049 90 AE 3F 80      [ 2]   95 	ldw	y, #0x3f80
      00004D CCr01rFC         [ 2]   96 	jp	00118$
      000050                         97 00105$:
                                     98 ;	../expf.c: 343: if(y>BIGX)
      000050 4B 18            [ 1]   99 	push	#0x18
      000052 4B 72            [ 1]  100 	push	#0x72
      000054 4B B1            [ 1]  101 	push	#0xb1
      000056 4B 42            [ 1]  102 	push	#0x42
      000058 1E 08            [ 2]  103 	ldw	x, (0x08, sp)
      00005A 89               [ 2]  104 	pushw	x
      00005B 1E 08            [ 2]  105 	ldw	x, (0x08, sp)
      00005D 89               [ 2]  106 	pushw	x
      00005E CDr00r00         [ 4]  107 	call	___fsgt
      000061 5B 08            [ 2]  108 	addw	sp, #8
      000063 4D               [ 1]  109 	tnz	a
      000064 27 1A            [ 1]  110 	jreq	00110$
                                    111 ;	../expf.c: 345: if(sign)
      000066 0D 01            [ 1]  112 	tnz	(0x01, sp)
      000068 27 10            [ 1]  113 	jreq	00107$
                                    114 ;	../expf.c: 347: errno=ERANGE;
      00006A AE 00 22         [ 2]  115 	ldw	x, #0x0022
      00006D CFu00u00         [ 2]  116 	ldw	_errno+0, x
                                    117 ;	../expf.c: 349: ;
      000070 AE FF FF         [ 2]  118 	ldw	x, #0xffff
      000073 90 AE 7F 7F      [ 2]  119 	ldw	y, #0x7f7f
      000077 CCr01rFC         [ 2]  120 	jp	00118$
      00007A                        121 00107$:
                                    122 ;	../expf.c: 353: return 0.0;
      00007A 5F               [ 1]  123 	clrw	x
      00007B 90 5F            [ 1]  124 	clrw	y
      00007D CCr01rFC         [ 2]  125 	jp	00118$
      000080                        126 00110$:
                                    127 ;	../expf.c: 357: z=y*K1;
      000080 1E 04            [ 2]  128 	ldw	x, (0x04, sp)
      000082 89               [ 2]  129 	pushw	x
      000083 1E 04            [ 2]  130 	ldw	x, (0x04, sp)
      000085 89               [ 2]  131 	pushw	x
      000086 4B 3B            [ 1]  132 	push	#0x3b
      000088 4B AA            [ 1]  133 	push	#0xaa
      00008A 4B B8            [ 1]  134 	push	#0xb8
      00008C 4B 3F            [ 1]  135 	push	#0x3f
      00008E CDr00r00         [ 4]  136 	call	___fsmul
      000091 5B 08            [ 2]  137 	addw	sp, #8
      000093 1F 08            [ 2]  138 	ldw	(0x08, sp), x
      000095 17 06            [ 2]  139 	ldw	(0x06, sp), y
      000097 16 08            [ 2]  140 	ldw	y, (0x08, sp)
      000099 17 27            [ 2]  141 	ldw	(0x27, sp), y
      00009B 16 06            [ 2]  142 	ldw	y, (0x06, sp)
      00009D 17 25            [ 2]  143 	ldw	(0x25, sp), y
                                    144 ;	../expf.c: 358: n=z;
      00009F 1E 27            [ 2]  145 	ldw	x, (0x27, sp)
      0000A1 89               [ 2]  146 	pushw	x
      0000A2 1E 27            [ 2]  147 	ldw	x, (0x27, sp)
      0000A4 89               [ 2]  148 	pushw	x
      0000A5 CDr00r00         [ 4]  149 	call	___fs2sint
      0000A8 5B 04            [ 2]  150 	addw	sp, #4
      0000AA 1F 16            [ 2]  151 	ldw	(0x16, sp), x
                                    152 ;	../expf.c: 360: if(n<0) --n;
      0000AC 0D 16            [ 1]  153 	tnz	(0x16, sp)
      0000AE 2A 05            [ 1]  154 	jrpl	00112$
      0000B0 1E 16            [ 2]  155 	ldw	x, (0x16, sp)
      0000B2 5A               [ 2]  156 	decw	x
      0000B3 1F 16            [ 2]  157 	ldw	(0x16, sp), x
      0000B5                        158 00112$:
                                    159 ;	../expf.c: 361: if(z-n>=0.5) ++n;
      0000B5 1E 16            [ 2]  160 	ldw	x, (0x16, sp)
      0000B7 89               [ 2]  161 	pushw	x
      0000B8 CDr00r00         [ 4]  162 	call	___sint2fs
      0000BB 5B 02            [ 2]  163 	addw	sp, #2
      0000BD 89               [ 2]  164 	pushw	x
      0000BE 90 89            [ 2]  165 	pushw	y
      0000C0 1E 2B            [ 2]  166 	ldw	x, (0x2b, sp)
      0000C2 89               [ 2]  167 	pushw	x
      0000C3 1E 2B            [ 2]  168 	ldw	x, (0x2b, sp)
      0000C5 89               [ 2]  169 	pushw	x
      0000C6 CDr00r00         [ 4]  170 	call	___fssub
      0000C9 5B 08            [ 2]  171 	addw	sp, #8
      0000CB 4B 00            [ 1]  172 	push	#0x00
      0000CD 4B 00            [ 1]  173 	push	#0x00
      0000CF 4B 00            [ 1]  174 	push	#0x00
      0000D1 4B 3F            [ 1]  175 	push	#0x3f
      0000D3 89               [ 2]  176 	pushw	x
      0000D4 90 89            [ 2]  177 	pushw	y
      0000D6 CDr00r00         [ 4]  178 	call	___fslt
      0000D9 5B 08            [ 2]  179 	addw	sp, #8
      0000DB 4D               [ 1]  180 	tnz	a
      0000DC 26 05            [ 1]  181 	jrne	00114$
      0000DE 1E 16            [ 2]  182 	ldw	x, (0x16, sp)
      0000E0 5C               [ 2]  183 	incw	x
      0000E1 1F 16            [ 2]  184 	ldw	(0x16, sp), x
      0000E3                        185 00114$:
                                    186 ;	../expf.c: 362: xn=n;
      0000E3 1E 16            [ 2]  187 	ldw	x, (0x16, sp)
      0000E5 89               [ 2]  188 	pushw	x
      0000E6 CDr00r00         [ 4]  189 	call	___sint2fs
      0000E9 5B 02            [ 2]  190 	addw	sp, #2
      0000EB 1F 14            [ 2]  191 	ldw	(0x14, sp), x
      0000ED 17 12            [ 2]  192 	ldw	(0x12, sp), y
                                    193 ;	../expf.c: 363: g=((y-xn*C1))-xn*C2;
      0000EF 1E 14            [ 2]  194 	ldw	x, (0x14, sp)
      0000F1 89               [ 2]  195 	pushw	x
      0000F2 1E 14            [ 2]  196 	ldw	x, (0x14, sp)
      0000F4 89               [ 2]  197 	pushw	x
      0000F5 4B 00            [ 1]  198 	push	#0x00
      0000F7 4B 80            [ 1]  199 	push	#0x80
      0000F9 4B 31            [ 1]  200 	push	#0x31
      0000FB 4B 3F            [ 1]  201 	push	#0x3f
      0000FD CDr00r00         [ 4]  202 	call	___fsmul
      000100 5B 08            [ 2]  203 	addw	sp, #8
      000102 89               [ 2]  204 	pushw	x
      000103 90 89            [ 2]  205 	pushw	y
      000105 1E 08            [ 2]  206 	ldw	x, (0x08, sp)
      000107 89               [ 2]  207 	pushw	x
      000108 1E 08            [ 2]  208 	ldw	x, (0x08, sp)
      00010A 89               [ 2]  209 	pushw	x
      00010B CDr00r00         [ 4]  210 	call	___fssub
      00010E 5B 08            [ 2]  211 	addw	sp, #8
      000110 1F 23            [ 2]  212 	ldw	(0x23, sp), x
      000112 17 21            [ 2]  213 	ldw	(0x21, sp), y
      000114 1E 14            [ 2]  214 	ldw	x, (0x14, sp)
      000116 89               [ 2]  215 	pushw	x
      000117 1E 14            [ 2]  216 	ldw	x, (0x14, sp)
      000119 89               [ 2]  217 	pushw	x
      00011A 4B 83            [ 1]  218 	push	#0x83
      00011C 4B 80            [ 1]  219 	push	#0x80
      00011E 4B 5E            [ 1]  220 	push	#0x5e
      000120 4B B9            [ 1]  221 	push	#0xb9
      000122 CDr00r00         [ 4]  222 	call	___fsmul
      000125 5B 08            [ 2]  223 	addw	sp, #8
      000127 89               [ 2]  224 	pushw	x
      000128 90 89            [ 2]  225 	pushw	y
      00012A 1E 27            [ 2]  226 	ldw	x, (0x27, sp)
      00012C 89               [ 2]  227 	pushw	x
      00012D 1E 27            [ 2]  228 	ldw	x, (0x27, sp)
      00012F 89               [ 2]  229 	pushw	x
      000130 CDr00r00         [ 4]  230 	call	___fssub
      000133 5B 08            [ 2]  231 	addw	sp, #8
      000135 1F 10            [ 2]  232 	ldw	(0x10, sp), x
      000137 17 0E            [ 2]  233 	ldw	(0x0e, sp), y
                                    234 ;	../expf.c: 364: z=g*g;
      000139 1E 10            [ 2]  235 	ldw	x, (0x10, sp)
      00013B 89               [ 2]  236 	pushw	x
      00013C 1E 10            [ 2]  237 	ldw	x, (0x10, sp)
      00013E 89               [ 2]  238 	pushw	x
      00013F 1E 14            [ 2]  239 	ldw	x, (0x14, sp)
      000141 89               [ 2]  240 	pushw	x
      000142 1E 14            [ 2]  241 	ldw	x, (0x14, sp)
      000144 89               [ 2]  242 	pushw	x
      000145 CDr00r00         [ 4]  243 	call	___fsmul
      000148 5B 08            [ 2]  244 	addw	sp, #8
      00014A 1F 08            [ 2]  245 	ldw	(0x08, sp), x
      00014C 17 06            [ 2]  246 	ldw	(0x06, sp), y
                                    247 ;	../expf.c: 365: r=P(z)*g;
      00014E 1E 08            [ 2]  248 	ldw	x, (0x08, sp)
      000150 89               [ 2]  249 	pushw	x
      000151 1E 08            [ 2]  250 	ldw	x, (0x08, sp)
      000153 89               [ 2]  251 	pushw	x
      000154 4B 08            [ 1]  252 	push	#0x08
      000156 4B 53            [ 1]  253 	push	#0x53
      000158 4B 88            [ 1]  254 	push	#0x88
      00015A 4B 3B            [ 1]  255 	push	#0x3b
      00015C CDr00r00         [ 4]  256 	call	___fsmul
      00015F 5B 08            [ 2]  257 	addw	sp, #8
      000161 4B 00            [ 1]  258 	push	#0x00
      000163 4B 00            [ 1]  259 	push	#0x00
      000165 4B 80            [ 1]  260 	push	#0x80
      000167 4B 3E            [ 1]  261 	push	#0x3e
      000169 89               [ 2]  262 	pushw	x
      00016A 90 89            [ 2]  263 	pushw	y
      00016C CDr00r00         [ 4]  264 	call	___fsadd
      00016F 5B 08            [ 2]  265 	addw	sp, #8
      000171 1F 2B            [ 2]  266 	ldw	(0x2b, sp), x
      000173 1E 10            [ 2]  267 	ldw	x, (0x10, sp)
      000175 89               [ 2]  268 	pushw	x
      000176 1E 10            [ 2]  269 	ldw	x, (0x10, sp)
      000178 89               [ 2]  270 	pushw	x
      000179 1E 2F            [ 2]  271 	ldw	x, (0x2f, sp)
      00017B 89               [ 2]  272 	pushw	x
      00017C 90 89            [ 2]  273 	pushw	y
      00017E CDr00r00         [ 4]  274 	call	___fsmul
      000181 5B 08            [ 2]  275 	addw	sp, #8
      000183 1F 1B            [ 2]  276 	ldw	(0x1b, sp), x
      000185 17 19            [ 2]  277 	ldw	(0x19, sp), y
                                    278 ;	../expf.c: 366: r=0.5+(r/(Q(z)-r));
      000187 1E 08            [ 2]  279 	ldw	x, (0x08, sp)
      000189 89               [ 2]  280 	pushw	x
      00018A 1E 08            [ 2]  281 	ldw	x, (0x08, sp)
      00018C 89               [ 2]  282 	pushw	x
      00018D 4B 5B            [ 1]  283 	push	#0x5b
      00018F 4B BF            [ 1]  284 	push	#0xbf
      000191 4B 4C            [ 1]  285 	push	#0x4c
      000193 4B 3D            [ 1]  286 	push	#0x3d
      000195 CDr00r00         [ 4]  287 	call	___fsmul
      000198 5B 08            [ 2]  288 	addw	sp, #8
      00019A 4B 00            [ 1]  289 	push	#0x00
      00019C 4B 00            [ 1]  290 	push	#0x00
      00019E 4B 00            [ 1]  291 	push	#0x00
      0001A0 4B 3F            [ 1]  292 	push	#0x3f
      0001A2 89               [ 2]  293 	pushw	x
      0001A3 90 89            [ 2]  294 	pushw	y
      0001A5 CDr00r00         [ 4]  295 	call	___fsadd
      0001A8 5B 08            [ 2]  296 	addw	sp, #8
      0001AA 1F 1F            [ 2]  297 	ldw	(0x1f, sp), x
      0001AC 1E 1B            [ 2]  298 	ldw	x, (0x1b, sp)
      0001AE 89               [ 2]  299 	pushw	x
      0001AF 1E 1B            [ 2]  300 	ldw	x, (0x1b, sp)
      0001B1 89               [ 2]  301 	pushw	x
      0001B2 1E 23            [ 2]  302 	ldw	x, (0x23, sp)
      0001B4 89               [ 2]  303 	pushw	x
      0001B5 90 89            [ 2]  304 	pushw	y
      0001B7 CDr00r00         [ 4]  305 	call	___fssub
      0001BA 5B 08            [ 2]  306 	addw	sp, #8
      0001BC 89               [ 2]  307 	pushw	x
      0001BD 90 89            [ 2]  308 	pushw	y
      0001BF 1E 1F            [ 2]  309 	ldw	x, (0x1f, sp)
      0001C1 89               [ 2]  310 	pushw	x
      0001C2 1E 1F            [ 2]  311 	ldw	x, (0x1f, sp)
      0001C4 89               [ 2]  312 	pushw	x
      0001C5 CDr00r00         [ 4]  313 	call	___fsdiv
      0001C8 5B 08            [ 2]  314 	addw	sp, #8
      0001CA 4B 00            [ 1]  315 	push	#0x00
      0001CC 4B 00            [ 1]  316 	push	#0x00
      0001CE 4B 00            [ 1]  317 	push	#0x00
      0001D0 4B 3F            [ 1]  318 	push	#0x3f
      0001D2 89               [ 2]  319 	pushw	x
      0001D3 90 89            [ 2]  320 	pushw	y
      0001D5 CDr00r00         [ 4]  321 	call	___fsadd
      0001D8 5B 08            [ 2]  322 	addw	sp, #8
      0001DA 1F 0C            [ 2]  323 	ldw	(0x0c, sp), x
                                    324 ;	../expf.c: 368: n++;
      0001DC 1E 16            [ 2]  325 	ldw	x, (0x16, sp)
      0001DE 5C               [ 2]  326 	incw	x
                                    327 ;	../expf.c: 369: z=ldexpf(r, n);
      0001DF 89               [ 2]  328 	pushw	x
      0001E0 1E 0E            [ 2]  329 	ldw	x, (0x0e, sp)
      0001E2 89               [ 2]  330 	pushw	x
      0001E3 90 89            [ 2]  331 	pushw	y
      0001E5 CDr00r00         [ 4]  332 	call	_ldexpf
      0001E8 5B 06            [ 2]  333 	addw	sp, #6
                                    334 ;	../expf.c: 370: if(sign)
      0001EA 0D 01            [ 1]  335 	tnz	(0x01, sp)
      0001EC 27 0E            [ 1]  336 	jreq	00116$
                                    337 ;	../expf.c: 371: return 1.0/z;
      0001EE 89               [ 2]  338 	pushw	x
      0001EF 90 89            [ 2]  339 	pushw	y
      0001F1 5F               [ 1]  340 	clrw	x
      0001F2 89               [ 2]  341 	pushw	x
      0001F3 4B 80            [ 1]  342 	push	#0x80
      0001F5 4B 3F            [ 1]  343 	push	#0x3f
      0001F7 CDr00r00         [ 4]  344 	call	___fsdiv
      0001FA 5B 08            [ 2]  345 	addw	sp, #8
                                    346 ;	../expf.c: 373: return z;
      0001FC                        347 00116$:
      0001FC                        348 00118$:
      0001FC 5B 2C            [ 2]  349 	addw	sp, #44
      0001FE 81               [ 4]  350 	ret
                                    351 	.area CODE
                                    352 	.area INITIALIZER
                                    353 	.area CABS (ABS)
