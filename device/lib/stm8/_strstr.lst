                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:17:17 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _strstr
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _strstr
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area INITIALIZED
                                     21 ;--------------------------------------------------------
                                     22 ; absolute external ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DABS (ABS)
                                     25 ;--------------------------------------------------------
                                     26 ; global & static initialisations
                                     27 ;--------------------------------------------------------
                                     28 	.area HOME
                                     29 	.area GSINIT
                                     30 	.area GSFINAL
                                     31 	.area GSINIT
                                     32 ;--------------------------------------------------------
                                     33 ; Home
                                     34 ;--------------------------------------------------------
                                     35 	.area HOME
                                     36 	.area HOME
                                     37 ;--------------------------------------------------------
                                     38 ; code
                                     39 ;--------------------------------------------------------
                                     40 	.area CODE
                                     41 ;	../_strstr.c: 31: char * strstr ( const char * str1, const char * str2 )
                                     42 ;	-----------------------------------------
                                     43 ;	 function strstr
                                     44 ;	-----------------------------------------
      000000                         45 _strstr:
      000000 52 0F            [ 2]   46 	sub	sp, #15
                                     47 ;	../_strstr.c: 33: const char * cp = str1;
      000002 16 12            [ 2]   48 	ldw	y, (0x12, sp)
      000004 17 05            [ 2]   49 	ldw	(0x05, sp), y
                                     50 ;	../_strstr.c: 37: if ( !*str2 )
      000006 16 14            [ 2]   51 	ldw	y, (0x14, sp)
      000008 17 01            [ 2]   52 	ldw	(0x01, sp), y
      00000A 1E 01            [ 2]   53 	ldw	x, (0x01, sp)
      00000C F6               [ 1]   54 	ld	a, (x)
      00000D 6B 0F            [ 1]   55 	ld	(0x0f, sp), a
      00000F 0D 0F            [ 1]   56 	tnz	(0x0f, sp)
      000011 26 04            [ 1]   57 	jrne	00122$
                                     58 ;	../_strstr.c: 38: return str1;
      000013 1E 05            [ 2]   59 	ldw	x, (0x05, sp)
      000015 20 5E            [ 2]   60 	jra	00113$
                                     61 ;	../_strstr.c: 40: while (*cp)
      000017                         62 00122$:
      000017 16 05            [ 2]   63 	ldw	y, (0x05, sp)
      000019 17 03            [ 2]   64 	ldw	(0x03, sp), y
      00001B                         65 00110$:
      00001B 1E 03            [ 2]   66 	ldw	x, (0x03, sp)
      00001D F6               [ 1]   67 	ld	a, (x)
      00001E 4D               [ 1]   68 	tnz	a
      00001F 27 53            [ 1]   69 	jreq	00112$
                                     70 ;	../_strstr.c: 43: s2 = str2;
      000021 16 01            [ 2]   71 	ldw	y, (0x01, sp)
                                     72 ;	../_strstr.c: 45: while ( *s1 && *s2 && !(*s1-*s2) )
      000023 1E 03            [ 2]   73 	ldw	x, (0x03, sp)
      000025 1F 0D            [ 2]   74 	ldw	(0x0d, sp), x
      000027 17 0B            [ 2]   75 	ldw	(0x0b, sp), y
      000029                         76 00105$:
      000029 1E 0D            [ 2]   77 	ldw	x, (0x0d, sp)
      00002B F6               [ 1]   78 	ld	a, (x)
      00002C 6B 0A            [ 1]   79 	ld	(0x0a, sp), a
      00002E 1E 0B            [ 2]   80 	ldw	x, (0x0b, sp)
      000030 F6               [ 1]   81 	ld	a, (x)
      000031 6B 09            [ 1]   82 	ld	(0x09, sp), a
      000033 0D 0A            [ 1]   83 	tnz	(0x0a, sp)
      000035 27 2A            [ 1]   84 	jreq	00107$
      000037 0D 09            [ 1]   85 	tnz	(0x09, sp)
      000039 27 26            [ 1]   86 	jreq	00107$
      00003B 7B 0A            [ 1]   87 	ld	a, (0x0a, sp)
      00003D 97               [ 1]   88 	ld	xl, a
      00003E 49               [ 1]   89 	rlc	a
      00003F 4F               [ 1]   90 	clr	a
      000040 A2 00            [ 1]   91 	sbc	a, #0x00
      000042 95               [ 1]   92 	ld	xh, a
      000043 7B 09            [ 1]   93 	ld	a, (0x09, sp)
      000045 6B 08            [ 1]   94 	ld	(0x08, sp), a
      000047 7B 08            [ 1]   95 	ld	a, (0x08, sp)
      000049 49               [ 1]   96 	rlc	a
      00004A 4F               [ 1]   97 	clr	a
      00004B A2 00            [ 1]   98 	sbc	a, #0x00
      00004D 6B 07            [ 1]   99 	ld	(0x07, sp), a
      00004F 72 F0 07         [ 2]  100 	subw	x, (0x07, sp)
      000052 5D               [ 2]  101 	tnzw	x
      000053 26 0C            [ 1]  102 	jrne	00107$
                                    103 ;	../_strstr.c: 46: s1++, s2++;
      000055 1E 0D            [ 2]  104 	ldw	x, (0x0d, sp)
      000057 5C               [ 2]  105 	incw	x
      000058 1F 0D            [ 2]  106 	ldw	(0x0d, sp), x
      00005A 1E 0B            [ 2]  107 	ldw	x, (0x0b, sp)
      00005C 5C               [ 2]  108 	incw	x
      00005D 1F 0B            [ 2]  109 	ldw	(0x0b, sp), x
      00005F 20 C8            [ 2]  110 	jra	00105$
      000061                        111 00107$:
                                    112 ;	../_strstr.c: 48: if (!*s2)
      000061 0D 09            [ 1]  113 	tnz	(0x09, sp)
      000063 26 04            [ 1]  114 	jrne	00109$
                                    115 ;	../_strstr.c: 49: return( (char*)cp );
      000065 1E 05            [ 2]  116 	ldw	x, (0x05, sp)
      000067 20 0C            [ 2]  117 	jra	00113$
      000069                        118 00109$:
                                    119 ;	../_strstr.c: 51: cp++;
      000069 1E 03            [ 2]  120 	ldw	x, (0x03, sp)
      00006B 5C               [ 2]  121 	incw	x
      00006C 1F 03            [ 2]  122 	ldw	(0x03, sp), x
      00006E 16 03            [ 2]  123 	ldw	y, (0x03, sp)
      000070 17 05            [ 2]  124 	ldw	(0x05, sp), y
      000072 20 A7            [ 2]  125 	jra	00110$
      000074                        126 00112$:
                                    127 ;	../_strstr.c: 54: return (NULL) ;
      000074 5F               [ 1]  128 	clrw	x
      000075                        129 00113$:
      000075 5B 0F            [ 2]  130 	addw	sp, #15
      000077 81               [ 4]  131 	ret
                                    132 	.area CODE
                                    133 	.area INITIALIZER
                                    134 	.area CABS (ABS)
