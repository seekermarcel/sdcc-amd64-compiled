                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:17:28 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module _ltoa
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __ltoa
                                     13 	.globl __ultoa
                                     14 ;--------------------------------------------------------
                                     15 ; ram data
                                     16 ;--------------------------------------------------------
                                     17 	.area DATA
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area INITIALIZED
                                     22 ;--------------------------------------------------------
                                     23 ; absolute external ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area DABS (ABS)
                                     26 ;--------------------------------------------------------
                                     27 ; global & static initialisations
                                     28 ;--------------------------------------------------------
                                     29 	.area HOME
                                     30 	.area GSINIT
                                     31 	.area GSFINAL
                                     32 	.area GSINIT
                                     33 ;--------------------------------------------------------
                                     34 ; Home
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area HOME
                                     38 ;--------------------------------------------------------
                                     39 ; code
                                     40 ;--------------------------------------------------------
                                     41 	.area CODE
                                     42 ;	../_ltoa.c: 56: void _ultoa(unsigned long value, char* string, unsigned char radix)
                                     43 ;	-----------------------------------------
                                     44 ;	 function _ultoa
                                     45 ;	-----------------------------------------
      000000                         46 __ultoa:
      000000 52 27            [ 2]   47 	sub	sp, #39
                                     48 ;	../_ltoa.c: 61: do {
      000002 96               [ 1]   49 	ldw	x, sp
      000003 5C               [ 2]   50 	incw	x
      000004 5C               [ 2]   51 	incw	x
      000005 1F 22            [ 2]   52 	ldw	(0x22, sp), x
      000007 A6 20            [ 1]   53 	ld	a, #0x20
      000009 6B 01            [ 1]   54 	ld	(0x01, sp), a
      00000B                         55 00103$:
                                     56 ;	../_ltoa.c: 62: unsigned char c = '0' + (value % radix);
      00000B 7B 30            [ 1]   57 	ld	a, (0x30, sp)
      00000D 6B 27            [ 1]   58 	ld	(0x27, sp), a
      00000F 0F 26            [ 1]   59 	clr	(0x26, sp)
      000011 0F 25            [ 1]   60 	clr	(0x25, sp)
      000013 0F 24            [ 1]   61 	clr	(0x24, sp)
      000015 1E 26            [ 2]   62 	ldw	x, (0x26, sp)
      000017 89               [ 2]   63 	pushw	x
      000018 1E 26            [ 2]   64 	ldw	x, (0x26, sp)
      00001A 89               [ 2]   65 	pushw	x
      00001B 1E 30            [ 2]   66 	ldw	x, (0x30, sp)
      00001D 89               [ 2]   67 	pushw	x
      00001E 1E 30            [ 2]   68 	ldw	x, (0x30, sp)
      000020 89               [ 2]   69 	pushw	x
      000021 CDr00r00         [ 4]   70 	call	__modulong
      000024 5B 08            [ 2]   71 	addw	sp, #8
      000026 9F               [ 1]   72 	ld	a, xl
      000027 AB 30            [ 1]   73 	add	a, #0x30
                                     74 ;	../_ltoa.c: 63: if (c > (unsigned char)'9')
      000029 A1 39            [ 1]   75 	cp	a, #0x39
      00002B 23 02            [ 2]   76 	jrule	00102$
                                     77 ;	../_ltoa.c: 64: c += 'A' - '9' - 1;
      00002D AB 07            [ 1]   78 	add	a, #0x07
      00002F                         79 00102$:
                                     80 ;	../_ltoa.c: 65: buffer[--index] = c;
      00002F 0A 01            [ 1]   81 	dec	(0x01, sp)
      000031 5F               [ 1]   82 	clrw	x
      000032 41               [ 1]   83 	exg	a, xl
      000033 7B 01            [ 1]   84 	ld	a, (0x01, sp)
      000035 41               [ 1]   85 	exg	a, xl
      000036 72 FB 22         [ 2]   86 	addw	x, (0x22, sp)
      000039 F7               [ 1]   87 	ld	(x), a
                                     88 ;	../_ltoa.c: 66: value /= radix;
      00003A 1E 26            [ 2]   89 	ldw	x, (0x26, sp)
      00003C 89               [ 2]   90 	pushw	x
      00003D 1E 26            [ 2]   91 	ldw	x, (0x26, sp)
      00003F 89               [ 2]   92 	pushw	x
      000040 1E 30            [ 2]   93 	ldw	x, (0x30, sp)
      000042 89               [ 2]   94 	pushw	x
      000043 1E 30            [ 2]   95 	ldw	x, (0x30, sp)
      000045 89               [ 2]   96 	pushw	x
      000046 CDr00r00         [ 4]   97 	call	__divulong
      000049 5B 08            [ 2]   98 	addw	sp, #8
      00004B 1F 2C            [ 2]   99 	ldw	(0x2c, sp), x
      00004D 17 2A            [ 2]  100 	ldw	(0x2a, sp), y
                                    101 ;	../_ltoa.c: 67: } while (value);
      00004F 1E 2C            [ 2]  102 	ldw	x, (0x2c, sp)
      000051 26 B8            [ 1]  103 	jrne	00103$
      000053 1E 2A            [ 2]  104 	ldw	x, (0x2a, sp)
      000055 26 B4            [ 1]  105 	jrne	00103$
                                    106 ;	../_ltoa.c: 69: do {
      000057 16 2E            [ 2]  107 	ldw	y, (0x2e, sp)
      000059 7B 01            [ 1]  108 	ld	a, (0x01, sp)
      00005B                        109 00106$:
                                    110 ;	../_ltoa.c: 70: *string++ = buffer[index];
      00005B 5F               [ 1]  111 	clrw	x
      00005C 97               [ 1]  112 	ld	xl, a
      00005D 72 FB 22         [ 2]  113 	addw	x, (0x22, sp)
      000060 88               [ 1]  114 	push	a
      000061 F6               [ 1]  115 	ld	a, (x)
      000062 97               [ 1]  116 	ld	xl, a
      000063 90 F7            [ 1]  117 	ld	(y), a
      000065 84               [ 1]  118 	pop	a
      000066 90 5C            [ 2]  119 	incw	y
                                    120 ;	../_ltoa.c: 71: } while ( ++index != NUMBER_OF_DIGITS );
      000068 4C               [ 1]  121 	inc	a
      000069 A1 20            [ 1]  122 	cp	a, #0x20
      00006B 26 EE            [ 1]  123 	jrne	00106$
                                    124 ;	../_ltoa.c: 73: *string = 0;  /* string terminator */
      00006D 90 7F            [ 1]  125 	clr	(y)
      00006F 5B 27            [ 2]  126 	addw	sp, #39
      000071 81               [ 4]  127 	ret
                                    128 ;	../_ltoa.c: 76: void _ltoa(long value, char* string, unsigned char radix)
                                    129 ;	-----------------------------------------
                                    130 ;	 function _ltoa
                                    131 ;	-----------------------------------------
      000072                        132 __ltoa:
                                    133 ;	../_ltoa.c: 78: if (value < 0 && radix == 10) {
      000072 0D 03            [ 1]  134 	tnz	(0x03, sp)
      000074 2A 1E            [ 1]  135 	jrpl	00102$
      000076 7B 09            [ 1]  136 	ld	a, (0x09, sp)
      000078 A1 0A            [ 1]  137 	cp	a, #0x0a
      00007A 26 18            [ 1]  138 	jrne	00102$
                                    139 ;	../_ltoa.c: 79: *string++ = '-';
      00007C 1E 07            [ 2]  140 	ldw	x, (0x07, sp)
      00007E A6 2D            [ 1]  141 	ld	a, #0x2d
      000080 F7               [ 1]  142 	ld	(x), a
      000081 5C               [ 2]  143 	incw	x
      000082 1F 07            [ 2]  144 	ldw	(0x07, sp), x
                                    145 ;	../_ltoa.c: 80: value = -value;
      000084 16 05            [ 2]  146 	ldw	y, (0x05, sp)
      000086 90 50            [ 2]  147 	negw	y
      000088 4F               [ 1]  148 	clr	a
      000089 12 04            [ 1]  149 	sbc	a, (0x04, sp)
      00008B 97               [ 1]  150 	ld	xl, a
      00008C 4F               [ 1]  151 	clr	a
      00008D 12 03            [ 1]  152 	sbc	a, (0x03, sp)
      00008F 95               [ 1]  153 	ld	xh, a
      000090 17 05            [ 2]  154 	ldw	(0x05, sp), y
      000092 1F 03            [ 2]  155 	ldw	(0x03, sp), x
      000094                        156 00102$:
                                    157 ;	../_ltoa.c: 82: _ultoa(value, string, radix);
      000094 7B 09            [ 1]  158 	ld	a, (0x09, sp)
      000096 88               [ 1]  159 	push	a
      000097 1E 08            [ 2]  160 	ldw	x, (0x08, sp)
      000099 89               [ 2]  161 	pushw	x
      00009A 1E 08            [ 2]  162 	ldw	x, (0x08, sp)
      00009C 89               [ 2]  163 	pushw	x
      00009D 1E 08            [ 2]  164 	ldw	x, (0x08, sp)
      00009F 89               [ 2]  165 	pushw	x
      0000A0 CDr00r00         [ 4]  166 	call	__ultoa
      0000A3 5B 07            [ 2]  167 	addw	sp, #7
      0000A5 81               [ 4]  168 	ret
                                    169 	.area CODE
                                    170 	.area INITIALIZER
                                    171 	.area CABS (ABS)
