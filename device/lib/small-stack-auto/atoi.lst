                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:50 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module atoi
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _atoi
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; overlayable bit register bank
                                     30 ;--------------------------------------------------------
                                     31 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         32 bits:
      000000                         33 	.ds 1
                           008000    34 	b0 = bits[0]
                           008100    35 	b1 = bits[1]
                           008200    36 	b2 = bits[2]
                           008300    37 	b3 = bits[3]
                           008400    38 	b4 = bits[4]
                           008500    39 	b5 = bits[5]
                           008600    40 	b6 = bits[6]
                           008700    41 	b7 = bits[7]
                                     42 ;--------------------------------------------------------
                                     43 ; internal ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area DSEG    (DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; overlayable items in internal ram 
                                     48 ;--------------------------------------------------------
                                     49 ;--------------------------------------------------------
                                     50 ; indirectly addressable internal ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area ISEG    (DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; absolute internal ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area IABS    (ABS,DATA)
                                     57 	.area IABS    (ABS,DATA)
                                     58 ;--------------------------------------------------------
                                     59 ; bit data
                                     60 ;--------------------------------------------------------
                                     61 	.area BSEG    (BIT)
                                     62 ;--------------------------------------------------------
                                     63 ; paged external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area PSEG    (PAG,XDATA)
                                     66 ;--------------------------------------------------------
                                     67 ; external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area XSEG    (XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; absolute external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XABS    (ABS,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; external initialized ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XISEG   (XDATA)
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT0 (CODE)
                                     80 	.area GSINIT1 (CODE)
                                     81 	.area GSINIT2 (CODE)
                                     82 	.area GSINIT3 (CODE)
                                     83 	.area GSINIT4 (CODE)
                                     84 	.area GSINIT5 (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 	.area GSFINAL (CODE)
                                     87 	.area CSEG    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; global & static initialisations
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME    (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 	.area GSFINAL (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; Home
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME    (CODE)
                                     99 	.area HOME    (CODE)
                                    100 ;--------------------------------------------------------
                                    101 ; code
                                    102 ;--------------------------------------------------------
                                    103 	.area CSEG    (CODE)
                                    104 ;------------------------------------------------------------
                                    105 ;Allocation info for local variables in function 'atoi'
                                    106 ;------------------------------------------------------------
                                    107 ;nptr                      Allocated to stack - _bp +1
                                    108 ;__00010004                Allocated to registers 
                                    109 ;__00010001                Allocated to registers 
                                    110 ;ret                       Allocated to registers r3 r4 
                                    111 ;neg                       Allocated to registers b0 
                                    112 ;__00020002                Allocated to stack - _bp +7
                                    113 ;c                         Allocated to registers 
                                    114 ;__00020005                Allocated to registers r2 r4 
                                    115 ;c                         Allocated to registers 
                                    116 ;sloc0                     Allocated to stack - _bp +19
                                    117 ;sloc1                     Allocated to stack - _bp +4
                                    118 ;------------------------------------------------------------
                                    119 ;	atoi.c:34: int atoi(const char *nptr)
                                    120 ;	-----------------------------------------
                                    121 ;	 function atoi
                                    122 ;	-----------------------------------------
      000000                        123 _atoi:
                           000007   124 	ar7 = 0x07
                           000006   125 	ar6 = 0x06
                           000005   126 	ar5 = 0x05
                           000004   127 	ar4 = 0x04
                           000003   128 	ar3 = 0x03
                           000002   129 	ar2 = 0x02
                           000001   130 	ar1 = 0x01
                           000000   131 	ar0 = 0x00
      000000 C0*00            [24]  132 	push	_bp
      000002 85 81*00         [24]  133 	mov	_bp,sp
      000005 C0 82            [24]  134 	push	dpl
      000007 C0 83            [24]  135 	push	dph
      000009 C0 F0            [24]  136 	push	b
      00000B E5 81            [12]  137 	mov	a,sp
      00000D 24 05            [12]  138 	add	a,#0x05
      00000F F5 81            [12]  139 	mov	sp,a
                                    140 ;	atoi.c:36: int ret = 0;
      000011 7B 00            [12]  141 	mov	r3,#0x00
      000013 7C 00            [12]  142 	mov	r4,#0x00
                                    143 ;	atoi.c:39: while (isblank (*nptr))
      000015 A8*00            [24]  144 	mov	r0,_bp
      000017 08               [12]  145 	inc	r0
      000018 86 02            [24]  146 	mov	ar2,@r0
      00001A 08               [12]  147 	inc	r0
      00001B 86 06            [24]  148 	mov	ar6,@r0
      00001D 08               [12]  149 	inc	r0
      00001E 86 07            [24]  150 	mov	ar7,@r0
      000020                        151 00101$:
      000020 8A 82            [24]  152 	mov	dpl,r2
      000022 8E 83            [24]  153 	mov	dph,r6
      000024 8F F0            [24]  154 	mov	b,r7
      000026 12r00r00         [24]  155 	lcall	__gptrget
      000029 FD               [12]  156 	mov	r5,a
      00002A E5*00            [12]  157 	mov	a,_bp
      00002C 24 07            [12]  158 	add	a,#0x07
      00002E F8               [12]  159 	mov	r0,a
      00002F A6 05            [24]  160 	mov	@r0,ar5
      000031 ED               [12]  161 	mov	a,r5
      000032 33               [12]  162 	rlc	a
      000033 95 E0            [12]  163 	subb	a,acc
      000035 08               [12]  164 	inc	r0
      000036 F6               [12]  165 	mov	@r0,a
                                    166 ;	../../device/include/ctype.h:53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
      000037 E5*00            [12]  167 	mov	a,_bp
      000039 24 07            [12]  168 	add	a,#0x07
      00003B F8               [12]  169 	mov	r0,a
      00003C 86 05            [24]  170 	mov	ar5,@r0
      00003E BD 20 02         [24]  171 	cjne	r5,#0x20,00147$
      000041 80 03            [24]  172 	sjmp	00115$
      000043                        173 00147$:
      000043 BD 09 07         [24]  174 	cjne	r5,#0x09,00131$
      000046                        175 00115$:
                                    176 ;	atoi.c:40: nptr++;
      000046 0A               [12]  177 	inc	r2
      000047 BA 00 D6         [24]  178 	cjne	r2,#0x00,00101$
      00004A 0E               [12]  179 	inc	r6
      00004B 80 D3            [24]  180 	sjmp	00101$
      00004D                        181 00131$:
      00004D A8*00            [24]  182 	mov	r0,_bp
      00004F 08               [12]  183 	inc	r0
      000050 A6 02            [24]  184 	mov	@r0,ar2
      000052 08               [12]  185 	inc	r0
      000053 A6 06            [24]  186 	mov	@r0,ar6
      000055 08               [12]  187 	inc	r0
      000056 A6 07            [24]  188 	mov	@r0,ar7
                                    189 ;	atoi.c:42: neg = (*nptr == '-');
      000058 8A 82            [24]  190 	mov	dpl,r2
      00005A 8E 83            [24]  191 	mov	dph,r6
      00005C 8F F0            [24]  192 	mov	b,r7
      00005E 12r00r00         [24]  193 	lcall	__gptrget
      000061 FF               [12]  194 	mov	r7,a
      000062 BF 2D 03         [24]  195 	cjne	r7,#0x2D,00151$
      000065 D3               [12]  196 	setb	c
      000066 80 01            [24]  197 	sjmp	00152$
      000068                        198 00151$:
      000068 C3               [12]  199 	clr	c
      000069                        200 00152$:
      000069 92*00            [24]  201 	mov	b0,c
                                    202 ;	atoi.c:44: if (*nptr == '-' || *nptr == '+')
      00006B BF 2D 02         [24]  203 	cjne	r7,#0x2D,00153$
      00006E 80 03            [24]  204 	sjmp	00104$
      000070                        205 00153$:
      000070 BF 2B 09         [24]  206 	cjne	r7,#0x2B,00129$
      000073                        207 00104$:
                                    208 ;	atoi.c:45: nptr++;
      000073 A8*00            [24]  209 	mov	r0,_bp
      000075 08               [12]  210 	inc	r0
      000076 06               [12]  211 	inc	@r0
      000077 B6 00 02         [24]  212 	cjne	@r0,#0x00,00156$
      00007A 08               [12]  213 	inc	r0
      00007B 06               [12]  214 	inc	@r0
      00007C                        215 00156$:
                                    216 ;	atoi.c:47: while (isdigit (*nptr))
      00007C                        217 00129$:
      00007C A8*00            [24]  218 	mov	r0,_bp
      00007E 08               [12]  219 	inc	r0
      00007F E5*00            [12]  220 	mov	a,_bp
      000081 24 04            [12]  221 	add	a,#0x04
      000083 F9               [12]  222 	mov	r1,a
      000084 E6               [12]  223 	mov	a,@r0
      000085 F7               [12]  224 	mov	@r1,a
      000086 08               [12]  225 	inc	r0
      000087 09               [12]  226 	inc	r1
      000088 E6               [12]  227 	mov	a,@r0
      000089 F7               [12]  228 	mov	@r1,a
      00008A 08               [12]  229 	inc	r0
      00008B 09               [12]  230 	inc	r1
      00008C E6               [12]  231 	mov	a,@r0
      00008D F7               [12]  232 	mov	@r1,a
      00008E                        233 00107$:
      00008E C0 03            [24]  234 	push	ar3
      000090 C0 04            [24]  235 	push	ar4
      000092 E5*00            [12]  236 	mov	a,_bp
      000094 24 04            [12]  237 	add	a,#0x04
      000096 F8               [12]  238 	mov	r0,a
      000097 86 82            [24]  239 	mov	dpl,@r0
      000099 08               [12]  240 	inc	r0
      00009A 86 83            [24]  241 	mov	dph,@r0
      00009C 08               [12]  242 	inc	r0
      00009D 86 F0            [24]  243 	mov	b,@r0
      00009F 12r00r00         [24]  244 	lcall	__gptrget
      0000A2 FA               [12]  245 	mov	r2,a
      0000A3 33               [12]  246 	rlc	a
      0000A4 95 E0            [12]  247 	subb	a,acc
      0000A6 FC               [12]  248 	mov	r4,a
                                    249 ;	../../device/include/ctype.h:62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      0000A7 BA 30 00         [24]  250 	cjne	r2,#0x30,00157$
      0000AA                        251 00157$:
      0000AA D0 04            [24]  252 	pop	ar4
      0000AC D0 03            [24]  253 	pop	ar3
      0000AE 40 4D            [24]  254 	jc	00109$
      0000B0 EA               [12]  255 	mov	a,r2
      0000B1 24 C6            [12]  256 	add	a,#0xff - 0x39
      0000B3 40 48            [24]  257 	jc	00109$
                                    258 ;	atoi.c:48: ret = ret * 10 + (*(nptr++) - '0');
      0000B5 C0*00            [24]  259 	push	bits
      0000B7 C0 03            [24]  260 	push	ar3
      0000B9 C0 04            [24]  261 	push	ar4
      0000BB 90 00 0A         [24]  262 	mov	dptr,#0x000A
      0000BE 12r00r00         [24]  263 	lcall	__mulint
      0000C1 AA 82            [24]  264 	mov	r2,dpl
      0000C3 AF 83            [24]  265 	mov	r7,dph
      0000C5 15 81            [12]  266 	dec	sp
      0000C7 15 81            [12]  267 	dec	sp
      0000C9 D0*00            [24]  268 	pop	bits
      0000CB E5*00            [12]  269 	mov	a,_bp
      0000CD 24 04            [12]  270 	add	a,#0x04
      0000CF F8               [12]  271 	mov	r0,a
      0000D0 86 82            [24]  272 	mov	dpl,@r0
      0000D2 08               [12]  273 	inc	r0
      0000D3 86 83            [24]  274 	mov	dph,@r0
      0000D5 08               [12]  275 	inc	r0
      0000D6 86 F0            [24]  276 	mov	b,@r0
      0000D8 12r00r00         [24]  277 	lcall	__gptrget
      0000DB FE               [12]  278 	mov	r6,a
      0000DC A3               [24]  279 	inc	dptr
      0000DD 18               [12]  280 	dec	r0
      0000DE 18               [12]  281 	dec	r0
      0000DF A6 82            [24]  282 	mov	@r0,dpl
      0000E1 08               [12]  283 	inc	r0
      0000E2 A6 83            [24]  284 	mov	@r0,dph
      0000E4 EE               [12]  285 	mov	a,r6
      0000E5 33               [12]  286 	rlc	a
      0000E6 95 E0            [12]  287 	subb	a,acc
      0000E8 FD               [12]  288 	mov	r5,a
      0000E9 EE               [12]  289 	mov	a,r6
      0000EA 24 D0            [12]  290 	add	a,#0xD0
      0000EC FE               [12]  291 	mov	r6,a
      0000ED ED               [12]  292 	mov	a,r5
      0000EE 34 FF            [12]  293 	addc	a,#0xFF
      0000F0 FD               [12]  294 	mov	r5,a
      0000F1 EE               [12]  295 	mov	a,r6
      0000F2 2A               [12]  296 	add	a,r2
      0000F3 FA               [12]  297 	mov	r2,a
      0000F4 ED               [12]  298 	mov	a,r5
      0000F5 3F               [12]  299 	addc	a,r7
      0000F6 FF               [12]  300 	mov	r7,a
      0000F7 8A 03            [24]  301 	mov	ar3,r2
      0000F9 8F 04            [24]  302 	mov	ar4,r7
      0000FB 80 91            [24]  303 	sjmp	00107$
      0000FD                        304 00109$:
                                    305 ;	atoi.c:50: return (neg ? -ret : ret); // Since -INT_MIN is INT_MIN in sdcc, the result value always turns out ok.
      0000FD 30*00 09         [24]  306 	jnb	b0,00120$
      000100 C3               [12]  307 	clr	c
      000101 E4               [12]  308 	clr	a
      000102 9B               [12]  309 	subb	a,r3
      000103 FE               [12]  310 	mov	r6,a
      000104 E4               [12]  311 	clr	a
      000105 9C               [12]  312 	subb	a,r4
      000106 FF               [12]  313 	mov	r7,a
      000107 80 04            [24]  314 	sjmp	00121$
      000109                        315 00120$:
      000109 8B 06            [24]  316 	mov	ar6,r3
      00010B 8C 07            [24]  317 	mov	ar7,r4
      00010D                        318 00121$:
      00010D 8E 82            [24]  319 	mov	dpl,r6
      00010F 8F 83            [24]  320 	mov	dph,r7
      000111 85*00 81         [24]  321 	mov	sp,_bp
      000114 D0*00            [24]  322 	pop	_bp
      000116 22               [24]  323 	ret
                                    324 	.area CSEG    (CODE)
                                    325 	.area CONST   (CODE)
                                    326 	.area XINIT   (CODE)
                                    327 	.area CABS    (ABS,CODE)
