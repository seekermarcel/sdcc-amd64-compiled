                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                              4 ; This file was generated Mon Apr  4 14:15:28 2022
                              5 ;--------------------------------------------------------
                              6 	.module _malloc
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl __sdcc_heap_init
                             13 	.globl _malloc
                             14 ;--------------------------------------------------------
                             15 ; special function registers
                             16 ;--------------------------------------------------------
                             17 ;--------------------------------------------------------
                             18 ; ram data
                             19 ;--------------------------------------------------------
                             20 	.area _DATA
                             21 ;--------------------------------------------------------
                             22 ; ram data
                             23 ;--------------------------------------------------------
                             24 	.area _INITIALIZED
                             25 ;--------------------------------------------------------
                             26 ; absolute external ram data
                             27 ;--------------------------------------------------------
                             28 	.area _DABS (ABS)
                             29 ;--------------------------------------------------------
                             30 ; global & static initialisations
                             31 ;--------------------------------------------------------
                             32 	.area _HOME
                             33 	.area _GSINIT
                             34 	.area _GSFINAL
                             35 	.area _GSINIT
                             36 ;--------------------------------------------------------
                             37 ; Home
                             38 ;--------------------------------------------------------
                             39 	.area _HOME
                             40 	.area _HOME
                             41 ;--------------------------------------------------------
                             42 ; code
                             43 ;--------------------------------------------------------
                             44 	.area _CODE
                             45 ;../_malloc.c:59: _sdcc_heap_init(void)
                             46 ;	---------------------------------
                             47 ; Function _sdcc_heap_init
                             48 ; ---------------------------------
   0000                      49 __sdcc_heap_init::
                             50 ;../_malloc.c:61: MEMHEADER *pbase = &_sdcc_heap_start;
                             51 ;../_malloc.c:62: unsigned int size = &_sdcc_heap_end - (char *)pbase;
   0000 21r00r00      [10]   52 	ld	hl,#__sdcc_heap_end+0
   0003 11r00r00      [10]   53 	ld	de,#__sdcc_heap_start
   0006 BF            [ 4]   54 	cp	a, a
   0007 ED 52         [15]   55 	sbc	hl, de
                             56 ;../_malloc.c:64: pbase->next = (MEMHEADER *)((char *)pbase + size - HEADER_SIZE);
   0009 19            [11]   57 	add	hl,de
   000A 7D            [ 4]   58 	ld	a,l
   000B C6 FA         [ 7]   59 	add	a,#0xFA
   000D 5F            [ 4]   60 	ld	e,a
   000E 7C            [ 4]   61 	ld	a,h
   000F CE FF         [ 7]   62 	adc	a,#0xFF
   0011 57            [ 4]   63 	ld	d,a
   0012 ED 53r00r00   [20]   64 	ld	(__sdcc_heap_start), de
                             65 ;../_malloc.c:65: pbase->next->next = NULL; //And mark it as last
   0016 3E 00         [ 7]   66 	ld	a,#0x00
   0018 12            [ 7]   67 	ld	(de),a
   0019 13            [ 6]   68 	inc	de
   001A 3E 00         [ 7]   69 	ld	a,#0x00
   001C 12            [ 7]   70 	ld	(de),a
                             71 ;../_malloc.c:66: pbase->prev       = NULL; //and mark first as first
   001D 21 00 00      [10]   72 	ld	hl,#0x0000
   0020 22r02r00      [16]   73 	ld	((__sdcc_heap_start + 0x0002)), hl
                             74 ;../_malloc.c:67: pbase->len        = 0;    //Empty and ready.
   0023 2E 00         [ 7]   75 	ld	l, #0x00
   0025 22r04r00      [16]   76 	ld	((__sdcc_heap_start + 0x0004)), hl
   0028 C9            [10]   77 	ret
                             78 ;../_malloc.c:71: malloc (unsigned int size)
                             79 ;	---------------------------------
                             80 ; Function malloc
                             81 ; ---------------------------------
   0029                      82 _malloc::
   0029 DD E5         [15]   83 	push	ix
   002B DD 21 00 00   [14]   84 	ld	ix,#0
   002F DD 39         [15]   85 	add	ix,sp
   0031 F5            [11]   86 	push	af
                             87 ;../_malloc.c:77: if (size>(0xFFFF-HEADER_SIZE))
   0032 3E F9         [ 7]   88 	ld	a,#0xF9
   0034 DD BE 04      [19]   89 	cp	a, 4 (ix)
   0037 3E FF         [ 7]   90 	ld	a,#0xFF
   0039 DD 9E 05      [19]   91 	sbc	a, 5 (ix)
   003C 30 06         [12]   92 	jr	NC,00102$
                             93 ;../_malloc.c:79: return NULL; //To prevent overflow in next line
   003E 21 00 00      [10]   94 	ld	hl,#0x0000
   0041 C3r2Er01      [10]   95 	jp	00117$
   0044                      96 00102$:
                             97 ;../_malloc.c:82: size += HEADER_SIZE; //We need a memory for header too
   0044 DD 7E 04      [19]   98 	ld	a,4 (ix)
   0047 C6 06         [ 7]   99 	add	a, #0x06
   0049 DD 77 04      [19]  100 	ld	4 (ix),a
   004C DD 7E 05      [19]  101 	ld	a,5 (ix)
   004F CE 00         [ 7]  102 	adc	a, #0x00
   0051 DD 77 05      [19]  103 	ld	5 (ix),a
                            104 ;../_malloc.c:83: current_header = &_sdcc_heap_start;
   0054 DD 36 FEr00   [19]  105 	ld	-2 (ix),#<(__sdcc_heap_start)
   0058 DD 36 FFs00   [19]  106 	ld	-1 (ix),#>(__sdcc_heap_start)
                            107 ;../_malloc.c:132: }
   005C ED 57         [ 9]  108 	ld	a,i
   005E F3            [ 4]  109 	di
   005F F5            [11]  110 	push	af
                            111 ;../_malloc.c:87: while (1)
   0060                     112 00108$:
                            113 ;../_malloc.c:96: if ((((unsigned int)current_header->next) -
   0060 DD 6E FE      [19]  114 	ld	l,-2 (ix)
   0063 DD 66 FF      [19]  115 	ld	h,-1 (ix)
   0066 5E            [ 7]  116 	ld	e,(hl)
   0067 23            [ 6]  117 	inc	hl
   0068 56            [ 7]  118 	ld	d,(hl)
   0069 6B            [ 4]  119 	ld	l, e
   006A 62            [ 4]  120 	ld	h, d
                            121 ;../_malloc.c:97: ((unsigned int)current_header) -
   006B DD 4E FE      [19]  122 	ld	c,-2 (ix)
   006E DD 46 FF      [19]  123 	ld	b,-1 (ix)
   0071 7D            [ 4]  124 	ld	a,l
   0072 91            [ 4]  125 	sub	a, c
   0073 4F            [ 4]  126 	ld	c,a
   0074 7C            [ 4]  127 	ld	a,h
   0075 98            [ 4]  128 	sbc	a, b
   0076 47            [ 4]  129 	ld	b,a
                            130 ;../_malloc.c:98: current_header->len) >= size)
   0077 DD 6E FE      [19]  131 	ld	l,-2 (ix)
   007A DD 66 FF      [19]  132 	ld	h,-1 (ix)
   007D 23            [ 6]  133 	inc	hl
   007E 23            [ 6]  134 	inc	hl
   007F 23            [ 6]  135 	inc	hl
   0080 23            [ 6]  136 	inc	hl
   0081 7E            [ 7]  137 	ld	a, (hl)
   0082 23            [ 6]  138 	inc	hl
   0083 66            [ 7]  139 	ld	h,(hl)
   0084 6F            [ 4]  140 	ld	l,a
   0085 79            [ 4]  141 	ld	a,c
   0086 95            [ 4]  142 	sub	a, l
   0087 6F            [ 4]  143 	ld	l,a
   0088 78            [ 4]  144 	ld	a,b
   0089 9C            [ 4]  145 	sbc	a, h
   008A 67            [ 4]  146 	ld	h,a
   008B 7D            [ 4]  147 	ld	a,l
   008C DD 96 04      [19]  148 	sub	a, 4 (ix)
   008F 7C            [ 4]  149 	ld	a,h
   0090 DD 9E 05      [19]  150 	sbc	a, 5 (ix)
   0093 38 0E         [12]  151 	jr	C,00104$
                            152 ;../_malloc.c:100: ret = &current_header->mem;
   0095 DD 7E FE      [19]  153 	ld	a,-2 (ix)
   0098 C6 06         [ 7]  154 	add	a, #0x06
   009A 4F            [ 4]  155 	ld	c,a
   009B DD 7E FF      [19]  156 	ld	a,-1 (ix)
   009E CE 00         [ 7]  157 	adc	a, #0x00
   00A0 47            [ 4]  158 	ld	b,a
                            159 ;../_malloc.c:101: break;
   00A1 18 16         [12]  160 	jr	00109$
   00A3                     161 00104$:
                            162 ;../_malloc.c:103: current_header = current_header->next;    //else try next
   00A3 DD 73 FE      [19]  163 	ld	-2 (ix),e
   00A6 DD 72 FF      [19]  164 	ld	-1 (ix),d
                            165 ;../_malloc.c:96: if ((((unsigned int)current_header->next) -
   00A9 DD 6E FE      [19]  166 	ld	l,-2 (ix)
   00AC DD 66 FF      [19]  167 	ld	h,-1 (ix)
   00AF 5E            [ 7]  168 	ld	e,(hl)
   00B0 23            [ 6]  169 	inc	hl
   00B1 56            [ 7]  170 	ld	d,(hl)
                            171 ;../_malloc.c:104: if (!current_header->next)
   00B2 7A            [ 4]  172 	ld	a,d
   00B3 B3            [ 4]  173 	or	a,e
   00B4 20 AA         [12]  174 	jr	NZ,00108$
                            175 ;../_malloc.c:106: ret = NULL;
   00B6 01 00 00      [10]  176 	ld	bc,#0x0000
                            177 ;../_malloc.c:107: break;
   00B9                     178 00109$:
                            179 ;../_malloc.c:111: if (ret)
   00B9 78            [ 4]  180 	ld	a,b
   00BA B1            [ 4]  181 	or	a,c
   00BB 28 6A         [12]  182 	jr	Z,00116$
                            183 ;../_malloc.c:113: if (!current_header->len)
   00BD FD 21 04 00   [14]  184 	ld	iy,#0x0004
   00C1 C5            [11]  185 	push	bc
   00C2 DD 4E FE      [19]  186 	ld	c,-2 (ix)
   00C5 DD 46 FF      [19]  187 	ld	b,-1 (ix)
   00C8 FD 09         [15]  188 	add	iy, bc
   00CA C1            [10]  189 	pop	bc
   00CB FD 6E 00      [19]  190 	ld	l,0 (iy)
   00CE FD 66 01      [19]  191 	ld	h,1 (iy)
   00D1 7C            [ 4]  192 	ld	a,h
   00D2 B5            [ 4]  193 	or	a,l
   00D3 20 0E         [12]  194 	jr	NZ,00113$
                            195 ;../_malloc.c:115: current_header->len = size; //for first allocation
   00D5 DD 7E 04      [19]  196 	ld	a,4 (ix)
   00D8 FD 77 00      [19]  197 	ld	0 (iy),a
   00DB DD 7E 05      [19]  198 	ld	a,5 (ix)
   00DE FD 77 01      [19]  199 	ld	1 (iy),a
   00E1 18 44         [12]  200 	jr	00116$
   00E3                     201 00113$:
                            202 ;../_malloc.c:120: new_header = (MEMHEADER * )((char *)current_header + current_header->len);
   00E3 DD 4E FE      [19]  203 	ld	c,-2 (ix)
   00E6 DD 46 FF      [19]  204 	ld	b,-1 (ix)
   00E9 09            [11]  205 	add	hl,bc
                            206 ;../_malloc.c:121: new_header->next = current_header->next; //and plug it into the chain
   00EA 4D            [ 4]  207 	ld	c,l
   00EB 44            [ 4]  208 	ld	b,h
   00EC 73            [ 7]  209 	ld	(hl),e
   00ED 23            [ 6]  210 	inc	hl
   00EE 72            [ 7]  211 	ld	(hl),d
                            212 ;../_malloc.c:122: new_header->prev = current_header;
   00EF 69            [ 4]  213 	ld	l, c
   00F0 60            [ 4]  214 	ld	h, b
   00F1 23            [ 6]  215 	inc	hl
   00F2 23            [ 6]  216 	inc	hl
   00F3 DD 7E FE      [19]  217 	ld	a,-2 (ix)
   00F6 77            [ 7]  218 	ld	(hl),a
   00F7 23            [ 6]  219 	inc	hl
   00F8 DD 7E FF      [19]  220 	ld	a,-1 (ix)
   00FB 77            [ 7]  221 	ld	(hl),a
                            222 ;../_malloc.c:123: current_header->next  = new_header;
   00FC DD 6E FE      [19]  223 	ld	l,-2 (ix)
   00FF DD 66 FF      [19]  224 	ld	h,-1 (ix)
   0102 71            [ 7]  225 	ld	(hl),c
   0103 23            [ 6]  226 	inc	hl
   0104 70            [ 7]  227 	ld	(hl),b
                            228 ;../_malloc.c:124: if (new_header->next)
   0105 69            [ 4]  229 	ld	l, c
   0106 60            [ 4]  230 	ld	h, b
   0107 7E            [ 7]  231 	ld	a, (hl)
   0108 23            [ 6]  232 	inc	hl
   0109 66            [ 7]  233 	ld	h,(hl)
   010A 6F            [ 4]  234 	ld	l,a
   010B 7A            [ 4]  235 	ld	a,d
   010C B3            [ 4]  236 	or	a,e
   010D 28 05         [12]  237 	jr	Z,00111$
                            238 ;../_malloc.c:126: new_header->next->prev = new_header;
   010F 23            [ 6]  239 	inc	hl
   0110 23            [ 6]  240 	inc	hl
   0111 71            [ 7]  241 	ld	(hl),c
   0112 23            [ 6]  242 	inc	hl
   0113 70            [ 7]  243 	ld	(hl),b
   0114                     244 00111$:
                            245 ;../_malloc.c:128: new_header->len  = size; //mark as used
   0114 21 04 00      [10]  246 	ld	hl,#0x0004
   0117 09            [11]  247 	add	hl,bc
   0118 DD 7E 04      [19]  248 	ld	a,4 (ix)
   011B 77            [ 7]  249 	ld	(hl),a
   011C 23            [ 6]  250 	inc	hl
   011D DD 7E 05      [19]  251 	ld	a,5 (ix)
   0120 77            [ 7]  252 	ld	(hl),a
                            253 ;../_malloc.c:129: ret = &new_header->mem;
   0121 21 06 00      [10]  254 	ld	hl,#0x0006
   0124 09            [11]  255 	add	hl,bc
   0125 4D            [ 4]  256 	ld	c, l
   0126 44            [ 4]  257 	ld	b, h
   0127                     258 00116$:
   0127 F1            [10]  259 	pop	af
   0128 E2r2Cr01      [10]  260 	jp	PO,00148$
   012B FB            [ 4]  261 	ei
   012C                     262 00148$:
                            263 ;../_malloc.c:133: return ret;
   012C 69            [ 4]  264 	ld	l, c
   012D 60            [ 4]  265 	ld	h, b
   012E                     266 00117$:
   012E DD F9         [10]  267 	ld	sp, ix
   0130 DD E1         [14]  268 	pop	ix
   0132 C9            [10]  269 	ret
                            270 	.area _CODE
                            271 	.area _INITIALIZER
                            272 	.area _CABS (ABS)
