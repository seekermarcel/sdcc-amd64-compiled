                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:50 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module time
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl ___day
                                     13 	.globl ___month
                                     14 	.globl _RtcRead
                                     15 	.globl _sprintf
                                     16 	.globl _time
                                     17 	.globl _asctime
                                     18 	.globl _ctime
                                     19 	.globl _localtime
                                     20 	.globl _gmtime
                                     21 	.globl _mktime
                                     22 ;--------------------------------------------------------
                                     23 ; special function registers
                                     24 ;--------------------------------------------------------
                                     25 	.area RSEG    (ABS,DATA)
      000000                         26 	.org 0x0000
                                     27 ;--------------------------------------------------------
                                     28 ; special function bits
                                     29 ;--------------------------------------------------------
                                     30 	.area RSEG    (ABS,DATA)
      000000                         31 	.org 0x0000
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable register banks
                                     34 ;--------------------------------------------------------
                                     35 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         36 	.ds 8
                                     37 ;--------------------------------------------------------
                                     38 ; internal ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area DSEG    (DATA)
      000000                         41 _ascTimeBuffer:
      000000                         42 	.ds 32
      000020                         43 _lastTime:
      000020                         44 	.ds 12
                                     45 ;--------------------------------------------------------
                                     46 ; overlayable items in internal ram 
                                     47 ;--------------------------------------------------------
                                     48 ;--------------------------------------------------------
                                     49 ; indirectly addressable internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area ISEG    (DATA)
                                     52 ;--------------------------------------------------------
                                     53 ; absolute internal ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area IABS    (ABS,DATA)
                                     56 	.area IABS    (ABS,DATA)
                                     57 ;--------------------------------------------------------
                                     58 ; bit data
                                     59 ;--------------------------------------------------------
                                     60 	.area BSEG    (BIT)
                                     61 ;--------------------------------------------------------
                                     62 ; paged external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area PSEG    (PAG,XDATA)
                                     65 ;--------------------------------------------------------
                                     66 ; external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area XSEG    (XDATA)
                                     69 ;--------------------------------------------------------
                                     70 ; absolute external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XABS    (ABS,XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; external initialized ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XISEG   (XDATA)
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT0 (CODE)
                                     79 	.area GSINIT1 (CODE)
                                     80 	.area GSINIT2 (CODE)
                                     81 	.area GSINIT3 (CODE)
                                     82 	.area GSINIT4 (CODE)
                                     83 	.area GSINIT5 (CODE)
                                     84 	.area GSINIT  (CODE)
                                     85 	.area GSFINAL (CODE)
                                     86 	.area CSEG    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; global & static initialisations
                                     89 ;--------------------------------------------------------
                                     90 	.area HOME    (CODE)
                                     91 	.area GSINIT  (CODE)
                                     92 	.area GSFINAL (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 ;--------------------------------------------------------
                                     95 ; Home
                                     96 ;--------------------------------------------------------
                                     97 	.area HOME    (CODE)
                                     98 	.area HOME    (CODE)
                                     99 ;--------------------------------------------------------
                                    100 ; code
                                    101 ;--------------------------------------------------------
                                    102 	.area CSEG    (CODE)
                                    103 ;------------------------------------------------------------
                                    104 ;Allocation info for local variables in function 'RtcRead'
                                    105 ;------------------------------------------------------------
                                    106 ;timeptr                   Allocated to registers 
                                    107 ;------------------------------------------------------------
                                    108 ;	time.c:42: unsigned char RtcRead(struct tm *timeptr) {
                                    109 ;	-----------------------------------------
                                    110 ;	 function RtcRead
                                    111 ;	-----------------------------------------
      000000                        112 _RtcRead:
                           000007   113 	ar7 = 0x07
                           000006   114 	ar6 = 0x06
                           000005   115 	ar5 = 0x05
                           000004   116 	ar4 = 0x04
                           000003   117 	ar3 = 0x03
                           000002   118 	ar2 = 0x02
                           000001   119 	ar1 = 0x01
                           000000   120 	ar0 = 0x00
                                    121 ;	time.c:45: return 0;
      000000 75 82 00         [24]  122 	mov	dpl,#0x00
      000003 22               [24]  123 	ret
                                    124 ;------------------------------------------------------------
                                    125 ;Allocation info for local variables in function 'time'
                                    126 ;------------------------------------------------------------
                                    127 ;timeptr                   Allocated to stack - _bp +1
                                    128 ;now                       Allocated to stack - _bp +4
                                    129 ;t                         Allocated to stack - _bp +16
                                    130 ;------------------------------------------------------------
                                    131 ;	time.c:50: time_t time(time_t *timeptr) {
                                    132 ;	-----------------------------------------
                                    133 ;	 function time
                                    134 ;	-----------------------------------------
      000004                        135 _time:
      000004 C0*00            [24]  136 	push	_bp
      000006 85 81*00         [24]  137 	mov	_bp,sp
      000009 C0 82            [24]  138 	push	dpl
      00000B C0 83            [24]  139 	push	dph
      00000D C0 F0            [24]  140 	push	b
      00000F E5 81            [12]  141 	mov	a,sp
      000011 24 10            [12]  142 	add	a,#0x10
      000013 F5 81            [12]  143 	mov	sp,a
                                    144 ;	time.c:52: time_t t=(time_t) -1;
      000015 E5*00            [12]  145 	mov	a,_bp
      000017 24 10            [12]  146 	add	a,#0x10
      000019 F8               [12]  147 	mov	r0,a
      00001A 74 FF            [12]  148 	mov	a,#0xFF
      00001C F6               [12]  149 	mov	@r0,a
      00001D 08               [12]  150 	inc	r0
      00001E F6               [12]  151 	mov	@r0,a
      00001F 08               [12]  152 	inc	r0
      000020 F6               [12]  153 	mov	@r0,a
      000021 08               [12]  154 	inc	r0
      000022 F6               [12]  155 	mov	@r0,a
                                    156 ;	time.c:54: if (RtcRead(&now)) {
      000023 E5*00            [12]  157 	mov	a,_bp
      000025 24 04            [12]  158 	add	a,#0x04
      000027 FE               [12]  159 	mov	r6,a
      000028 FC               [12]  160 	mov	r4,a
      000029 7D 00            [12]  161 	mov	r5,#0x00
      00002B 7F 40            [12]  162 	mov	r7,#0x40
      00002D 8C 82            [24]  163 	mov	dpl,r4
      00002F 8D 83            [24]  164 	mov	dph,r5
      000031 8F F0            [24]  165 	mov	b,r7
      000033 C0 06            [24]  166 	push	ar6
      000035 12r00r00         [24]  167 	lcall	_RtcRead
      000038 E5 82            [12]  168 	mov	a,dpl
      00003A D0 06            [24]  169 	pop	ar6
      00003C 60 24            [24]  170 	jz	00102$
                                    171 ;	time.c:55: t=mktime(&now);
      00003E 7F 00            [12]  172 	mov	r7,#0x00
      000040 7D 40            [12]  173 	mov	r5,#0x40
      000042 8E 82            [24]  174 	mov	dpl,r6
      000044 8F 83            [24]  175 	mov	dph,r7
      000046 8D F0            [24]  176 	mov	b,r5
      000048 12r06r13         [24]  177 	lcall	_mktime
      00004B AC 82            [24]  178 	mov	r4,dpl
      00004D AD 83            [24]  179 	mov	r5,dph
      00004F AE F0            [24]  180 	mov	r6,b
      000051 FF               [12]  181 	mov	r7,a
      000052 E5*00            [12]  182 	mov	a,_bp
      000054 24 10            [12]  183 	add	a,#0x10
      000056 F8               [12]  184 	mov	r0,a
      000057 A6 04            [24]  185 	mov	@r0,ar4
      000059 08               [12]  186 	inc	r0
      00005A A6 05            [24]  187 	mov	@r0,ar5
      00005C 08               [12]  188 	inc	r0
      00005D A6 06            [24]  189 	mov	@r0,ar6
      00005F 08               [12]  190 	inc	r0
      000060 A6 07            [24]  191 	mov	@r0,ar7
      000062                        192 00102$:
                                    193 ;	time.c:57: if (timeptr) {
      000062 A8*00            [24]  194 	mov	r0,_bp
      000064 08               [12]  195 	inc	r0
      000065 E6               [12]  196 	mov	a,@r0
      000066 08               [12]  197 	inc	r0
      000067 46               [12]  198 	orl	a,@r0
      000068 60 26            [24]  199 	jz	00104$
                                    200 ;	time.c:58: *timeptr=t;
      00006A A8*00            [24]  201 	mov	r0,_bp
      00006C 08               [12]  202 	inc	r0
      00006D 86 82            [24]  203 	mov	dpl,@r0
      00006F 08               [12]  204 	inc	r0
      000070 86 83            [24]  205 	mov	dph,@r0
      000072 08               [12]  206 	inc	r0
      000073 86 F0            [24]  207 	mov	b,@r0
      000075 E5*00            [12]  208 	mov	a,_bp
      000077 24 10            [12]  209 	add	a,#0x10
      000079 F9               [12]  210 	mov	r1,a
      00007A E7               [12]  211 	mov	a,@r1
      00007B 12r00r00         [24]  212 	lcall	__gptrput
      00007E A3               [24]  213 	inc	dptr
      00007F 09               [12]  214 	inc	r1
      000080 E7               [12]  215 	mov	a,@r1
      000081 12r00r00         [24]  216 	lcall	__gptrput
      000084 A3               [24]  217 	inc	dptr
      000085 09               [12]  218 	inc	r1
      000086 E7               [12]  219 	mov	a,@r1
      000087 12r00r00         [24]  220 	lcall	__gptrput
      00008A A3               [24]  221 	inc	dptr
      00008B 09               [12]  222 	inc	r1
      00008C E7               [12]  223 	mov	a,@r1
      00008D 12r00r00         [24]  224 	lcall	__gptrput
      000090                        225 00104$:
                                    226 ;	time.c:60: return t;
      000090 E5*00            [12]  227 	mov	a,_bp
      000092 24 10            [12]  228 	add	a,#0x10
      000094 F8               [12]  229 	mov	r0,a
      000095 86 82            [24]  230 	mov	dpl,@r0
      000097 08               [12]  231 	inc	r0
      000098 86 83            [24]  232 	mov	dph,@r0
      00009A 08               [12]  233 	inc	r0
      00009B 86 F0            [24]  234 	mov	b,@r0
      00009D 08               [12]  235 	inc	r0
      00009E E6               [12]  236 	mov	a,@r0
      00009F 85*00 81         [24]  237 	mov	sp,_bp
      0000A2 D0*00            [24]  238 	pop	_bp
      0000A4 22               [24]  239 	ret
                                    240 ;------------------------------------------------------------
                                    241 ;Allocation info for local variables in function 'CheckTime'
                                    242 ;------------------------------------------------------------
                                    243 ;timeptr                   Allocated to registers r5 r6 r7 
                                    244 ;------------------------------------------------------------
                                    245 ;	time.c:73: static void CheckTime(struct tm *timeptr) {
                                    246 ;	-----------------------------------------
                                    247 ;	 function CheckTime
                                    248 ;	-----------------------------------------
      0000A5                        249 _CheckTime:
                                    250 ;	time.c:84: if (timeptr->tm_sec>59) timeptr->tm_sec=59;
      0000A5 AD 82            [24]  251 	mov	r5,dpl
      0000A7 AE 83            [24]  252 	mov	r6,dph
      0000A9 AF F0            [24]  253 	mov	r7,b
      0000AB 12r00r00         [24]  254 	lcall	__gptrget
      0000AE FC               [12]  255 	mov  r4,a
      0000AF 24 C4            [12]  256 	add	a,#0xff - 0x3B
      0000B1 50 0B            [24]  257 	jnc	00102$
      0000B3 8D 82            [24]  258 	mov	dpl,r5
      0000B5 8E 83            [24]  259 	mov	dph,r6
      0000B7 8F F0            [24]  260 	mov	b,r7
      0000B9 74 3B            [12]  261 	mov	a,#0x3B
      0000BB 12r00r00         [24]  262 	lcall	__gptrput
      0000BE                        263 00102$:
                                    264 ;	time.c:85: if (timeptr->tm_min>59) timeptr->tm_min=59;
      0000BE 74 01            [12]  265 	mov	a,#0x01
      0000C0 2D               [12]  266 	add	a,r5
      0000C1 FA               [12]  267 	mov	r2,a
      0000C2 E4               [12]  268 	clr	a
      0000C3 3E               [12]  269 	addc	a,r6
      0000C4 FB               [12]  270 	mov	r3,a
      0000C5 8F 04            [24]  271 	mov	ar4,r7
      0000C7 8A 82            [24]  272 	mov	dpl,r2
      0000C9 8B 83            [24]  273 	mov	dph,r3
      0000CB 8C F0            [24]  274 	mov	b,r4
      0000CD 12r00r00         [24]  275 	lcall	__gptrget
      0000D0 F9               [12]  276 	mov  r1,a
      0000D1 24 C4            [12]  277 	add	a,#0xff - 0x3B
      0000D3 50 0B            [24]  278 	jnc	00104$
      0000D5 8A 82            [24]  279 	mov	dpl,r2
      0000D7 8B 83            [24]  280 	mov	dph,r3
      0000D9 8C F0            [24]  281 	mov	b,r4
      0000DB 74 3B            [12]  282 	mov	a,#0x3B
      0000DD 12r00r00         [24]  283 	lcall	__gptrput
      0000E0                        284 00104$:
                                    285 ;	time.c:86: if (timeptr->tm_hour>23) timeptr->tm_hour=23;
      0000E0 74 02            [12]  286 	mov	a,#0x02
      0000E2 2D               [12]  287 	add	a,r5
      0000E3 FA               [12]  288 	mov	r2,a
      0000E4 E4               [12]  289 	clr	a
      0000E5 3E               [12]  290 	addc	a,r6
      0000E6 FB               [12]  291 	mov	r3,a
      0000E7 8F 04            [24]  292 	mov	ar4,r7
      0000E9 8A 82            [24]  293 	mov	dpl,r2
      0000EB 8B 83            [24]  294 	mov	dph,r3
      0000ED 8C F0            [24]  295 	mov	b,r4
      0000EF 12r00r00         [24]  296 	lcall	__gptrget
      0000F2 F9               [12]  297 	mov  r1,a
      0000F3 24 E8            [12]  298 	add	a,#0xff - 0x17
      0000F5 50 0B            [24]  299 	jnc	00106$
      0000F7 8A 82            [24]  300 	mov	dpl,r2
      0000F9 8B 83            [24]  301 	mov	dph,r3
      0000FB 8C F0            [24]  302 	mov	b,r4
      0000FD 74 17            [12]  303 	mov	a,#0x17
      0000FF 12r00r00         [24]  304 	lcall	__gptrput
      000102                        305 00106$:
                                    306 ;	time.c:87: if (timeptr->tm_wday>6) timeptr->tm_wday=6;
      000102 74 07            [12]  307 	mov	a,#0x07
      000104 2D               [12]  308 	add	a,r5
      000105 FA               [12]  309 	mov	r2,a
      000106 E4               [12]  310 	clr	a
      000107 3E               [12]  311 	addc	a,r6
      000108 FB               [12]  312 	mov	r3,a
      000109 8F 04            [24]  313 	mov	ar4,r7
      00010B 8A 82            [24]  314 	mov	dpl,r2
      00010D 8B 83            [24]  315 	mov	dph,r3
      00010F 8C F0            [24]  316 	mov	b,r4
      000111 12r00r00         [24]  317 	lcall	__gptrget
      000114 F9               [12]  318 	mov  r1,a
      000115 24 F9            [12]  319 	add	a,#0xff - 0x06
      000117 50 0B            [24]  320 	jnc	00108$
      000119 8A 82            [24]  321 	mov	dpl,r2
      00011B 8B 83            [24]  322 	mov	dph,r3
      00011D 8C F0            [24]  323 	mov	b,r4
      00011F 74 06            [12]  324 	mov	a,#0x06
      000121 12r00r00         [24]  325 	lcall	__gptrput
      000124                        326 00108$:
                                    327 ;	time.c:88: if (timeptr->tm_mday<1) timeptr->tm_mday=1;
      000124 74 03            [12]  328 	mov	a,#0x03
      000126 2D               [12]  329 	add	a,r5
      000127 FA               [12]  330 	mov	r2,a
      000128 E4               [12]  331 	clr	a
      000129 3E               [12]  332 	addc	a,r6
      00012A FB               [12]  333 	mov	r3,a
      00012B 8F 04            [24]  334 	mov	ar4,r7
      00012D 8A 82            [24]  335 	mov	dpl,r2
      00012F 8B 83            [24]  336 	mov	dph,r3
      000131 8C F0            [24]  337 	mov	b,r4
      000133 12r00r00         [24]  338 	lcall	__gptrget
      000136 F9               [12]  339 	mov	r1,a
      000137 B9 01 00         [24]  340 	cjne	r1,#0x01,00148$
      00013A                        341 00148$:
      00013A 50 0D            [24]  342 	jnc	00112$
      00013C 8A 82            [24]  343 	mov	dpl,r2
      00013E 8B 83            [24]  344 	mov	dph,r3
      000140 8C F0            [24]  345 	mov	b,r4
      000142 74 01            [12]  346 	mov	a,#0x01
      000144 12r00r00         [24]  347 	lcall	__gptrput
      000147 80 10            [24]  348 	sjmp	00113$
      000149                        349 00112$:
                                    350 ;	time.c:89: else if (timeptr->tm_mday>31) timeptr->tm_mday=31;
      000149 E9               [12]  351 	mov	a,r1
      00014A 24 E0            [12]  352 	add	a,#0xff - 0x1F
      00014C 50 0B            [24]  353 	jnc	00113$
      00014E 8A 82            [24]  354 	mov	dpl,r2
      000150 8B 83            [24]  355 	mov	dph,r3
      000152 8C F0            [24]  356 	mov	b,r4
      000154 74 1F            [12]  357 	mov	a,#0x1F
      000156 12r00r00         [24]  358 	lcall	__gptrput
      000159                        359 00113$:
                                    360 ;	time.c:90: if (timeptr->tm_mon>11) timeptr->tm_mon=11;
      000159 74 04            [12]  361 	mov	a,#0x04
      00015B 2D               [12]  362 	add	a,r5
      00015C FA               [12]  363 	mov	r2,a
      00015D E4               [12]  364 	clr	a
      00015E 3E               [12]  365 	addc	a,r6
      00015F FB               [12]  366 	mov	r3,a
      000160 8F 04            [24]  367 	mov	ar4,r7
      000162 8A 82            [24]  368 	mov	dpl,r2
      000164 8B 83            [24]  369 	mov	dph,r3
      000166 8C F0            [24]  370 	mov	b,r4
      000168 12r00r00         [24]  371 	lcall	__gptrget
      00016B F9               [12]  372 	mov  r1,a
      00016C 24 F4            [12]  373 	add	a,#0xff - 0x0B
      00016E 50 0B            [24]  374 	jnc	00115$
      000170 8A 82            [24]  375 	mov	dpl,r2
      000172 8B 83            [24]  376 	mov	dph,r3
      000174 8C F0            [24]  377 	mov	b,r4
      000176 74 0B            [12]  378 	mov	a,#0x0B
      000178 12r00r00         [24]  379 	lcall	__gptrput
      00017B                        380 00115$:
                                    381 ;	time.c:91: if (timeptr->tm_year<0) timeptr->tm_year=0;
      00017B 74 05            [12]  382 	mov	a,#0x05
      00017D 2D               [12]  383 	add	a,r5
      00017E FD               [12]  384 	mov	r5,a
      00017F E4               [12]  385 	clr	a
      000180 3E               [12]  386 	addc	a,r6
      000181 FE               [12]  387 	mov	r6,a
      000182 8D 82            [24]  388 	mov	dpl,r5
      000184 8E 83            [24]  389 	mov	dph,r6
      000186 8F F0            [24]  390 	mov	b,r7
      000188 12r00r00         [24]  391 	lcall	__gptrget
      00018B FB               [12]  392 	mov	r3,a
      00018C A3               [24]  393 	inc	dptr
      00018D 12r00r00         [24]  394 	lcall	__gptrget
      000190 FC               [12]  395 	mov	r4,a
      000191 30 E7 0E         [24]  396 	jnb	acc.7,00118$
      000194 8D 82            [24]  397 	mov	dpl,r5
      000196 8E 83            [24]  398 	mov	dph,r6
      000198 8F F0            [24]  399 	mov	b,r7
      00019A E4               [12]  400 	clr	a
      00019B 12r00r00         [24]  401 	lcall	__gptrput
      00019E A3               [24]  402 	inc	dptr
      00019F 02r00r00         [24]  403 	ljmp	__gptrput
      0001A2                        404 00118$:
      0001A2 22               [24]  405 	ret
                                    406 ;------------------------------------------------------------
                                    407 ;Allocation info for local variables in function 'asctime'
                                    408 ;------------------------------------------------------------
                                    409 ;timeptr                   Allocated to stack - _bp +1
                                    410 ;sloc0                     Allocated to stack - _bp +4
                                    411 ;sloc1                     Allocated to stack - _bp +6
                                    412 ;sloc2                     Allocated to stack - _bp +9
                                    413 ;sloc3                     Allocated to stack - _bp +9
                                    414 ;sloc4                     Allocated to stack - _bp +11
                                    415 ;sloc5                     Allocated to stack - _bp +13
                                    416 ;------------------------------------------------------------
                                    417 ;	time.c:95: char *asctime(struct tm *timeptr) {
                                    418 ;	-----------------------------------------
                                    419 ;	 function asctime
                                    420 ;	-----------------------------------------
      0001A3                        421 _asctime:
      0001A3 C0*00            [24]  422 	push	_bp
      0001A5 85 81*00         [24]  423 	mov	_bp,sp
      0001A8 C0 82            [24]  424 	push	dpl
      0001AA C0 83            [24]  425 	push	dph
      0001AC C0 F0            [24]  426 	push	b
      0001AE E5 81            [12]  427 	mov	a,sp
      0001B0 24 0C            [12]  428 	add	a,#0x0C
      0001B2 F5 81            [12]  429 	mov	sp,a
                                    430 ;	time.c:96: CheckTime(timeptr);
      0001B4 A8*00            [24]  431 	mov	r0,_bp
      0001B6 08               [12]  432 	inc	r0
      0001B7 86 82            [24]  433 	mov	dpl,@r0
      0001B9 08               [12]  434 	inc	r0
      0001BA 86 83            [24]  435 	mov	dph,@r0
      0001BC 08               [12]  436 	inc	r0
      0001BD 86 F0            [24]  437 	mov	b,@r0
      0001BF 12r00rA5         [24]  438 	lcall	_CheckTime
                                    439 ;	time.c:100: timeptr->tm_year+1900);
      0001C2 A8*00            [24]  440 	mov	r0,_bp
      0001C4 08               [12]  441 	inc	r0
      0001C5 74 05            [12]  442 	mov	a,#0x05
      0001C7 26               [12]  443 	add	a,@r0
      0001C8 FA               [12]  444 	mov	r2,a
      0001C9 E4               [12]  445 	clr	a
      0001CA 08               [12]  446 	inc	r0
      0001CB 36               [12]  447 	addc	a,@r0
      0001CC FB               [12]  448 	mov	r3,a
      0001CD 08               [12]  449 	inc	r0
      0001CE 86 04            [24]  450 	mov	ar4,@r0
      0001D0 8A 82            [24]  451 	mov	dpl,r2
      0001D2 8B 83            [24]  452 	mov	dph,r3
      0001D4 8C F0            [24]  453 	mov	b,r4
      0001D6 12r00r00         [24]  454 	lcall	__gptrget
      0001D9 FA               [12]  455 	mov	r2,a
      0001DA A3               [24]  456 	inc	dptr
      0001DB 12r00r00         [24]  457 	lcall	__gptrget
      0001DE FB               [12]  458 	mov	r3,a
      0001DF 74 6C            [12]  459 	mov	a,#0x6C
      0001E1 2A               [12]  460 	add	a,r2
      0001E2 FF               [12]  461 	mov	r7,a
      0001E3 74 07            [12]  462 	mov	a,#0x07
      0001E5 3B               [12]  463 	addc	a,r3
      0001E6 FE               [12]  464 	mov	r6,a
                                    465 ;	time.c:99: timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec, 
      0001E7 A8*00            [24]  466 	mov	r0,_bp
      0001E9 08               [12]  467 	inc	r0
      0001EA 86 82            [24]  468 	mov	dpl,@r0
      0001EC 08               [12]  469 	inc	r0
      0001ED 86 83            [24]  470 	mov	dph,@r0
      0001EF 08               [12]  471 	inc	r0
      0001F0 86 F0            [24]  472 	mov	b,@r0
      0001F2 12r00r00         [24]  473 	lcall	__gptrget
      0001F5 FC               [12]  474 	mov	r4,a
      0001F6 E5*00            [12]  475 	mov	a,_bp
      0001F8 24 04            [12]  476 	add	a,#0x04
      0001FA F8               [12]  477 	mov	r0,a
      0001FB A6 04            [24]  478 	mov	@r0,ar4
      0001FD 08               [12]  479 	inc	r0
      0001FE 76 00            [12]  480 	mov	@r0,#0x00
      000200 A8*00            [24]  481 	mov	r0,_bp
      000202 08               [12]  482 	inc	r0
      000203 74 01            [12]  483 	mov	a,#0x01
      000205 26               [12]  484 	add	a,@r0
      000206 FD               [12]  485 	mov	r5,a
      000207 E4               [12]  486 	clr	a
      000208 08               [12]  487 	inc	r0
      000209 36               [12]  488 	addc	a,@r0
      00020A FC               [12]  489 	mov	r4,a
      00020B 08               [12]  490 	inc	r0
      00020C 86 03            [24]  491 	mov	ar3,@r0
      00020E 8D 82            [24]  492 	mov	dpl,r5
      000210 8C 83            [24]  493 	mov	dph,r4
      000212 8B F0            [24]  494 	mov	b,r3
      000214 12r00r00         [24]  495 	lcall	__gptrget
      000217 FD               [12]  496 	mov	r5,a
      000218 E5*00            [12]  497 	mov	a,_bp
      00021A 24 06            [12]  498 	add	a,#0x06
      00021C F8               [12]  499 	mov	r0,a
      00021D A6 05            [24]  500 	mov	@r0,ar5
      00021F 08               [12]  501 	inc	r0
      000220 76 00            [12]  502 	mov	@r0,#0x00
      000222 A8*00            [24]  503 	mov	r0,_bp
      000224 08               [12]  504 	inc	r0
      000225 74 02            [12]  505 	mov	a,#0x02
      000227 26               [12]  506 	add	a,@r0
      000228 FB               [12]  507 	mov	r3,a
      000229 E4               [12]  508 	clr	a
      00022A 08               [12]  509 	inc	r0
      00022B 36               [12]  510 	addc	a,@r0
      00022C FC               [12]  511 	mov	r4,a
      00022D 08               [12]  512 	inc	r0
      00022E 86 05            [24]  513 	mov	ar5,@r0
      000230 8B 82            [24]  514 	mov	dpl,r3
      000232 8C 83            [24]  515 	mov	dph,r4
      000234 8D F0            [24]  516 	mov	b,r5
      000236 12r00r00         [24]  517 	lcall	__gptrget
      000239 FB               [12]  518 	mov	r3,a
      00023A E5*00            [12]  519 	mov	a,_bp
      00023C 24 09            [12]  520 	add	a,#0x09
      00023E F8               [12]  521 	mov	r0,a
      00023F A6 03            [24]  522 	mov	@r0,ar3
      000241 08               [12]  523 	inc	r0
      000242 76 00            [12]  524 	mov	@r0,#0x00
                                    525 ;	time.c:98: __day[timeptr->tm_wday], __month[timeptr->tm_mon], timeptr->tm_mday,
      000244 A8*00            [24]  526 	mov	r0,_bp
      000246 08               [12]  527 	inc	r0
      000247 74 03            [12]  528 	mov	a,#0x03
      000249 26               [12]  529 	add	a,@r0
      00024A FA               [12]  530 	mov	r2,a
      00024B E4               [12]  531 	clr	a
      00024C 08               [12]  532 	inc	r0
      00024D 36               [12]  533 	addc	a,@r0
      00024E FC               [12]  534 	mov	r4,a
      00024F 08               [12]  535 	inc	r0
      000250 86 05            [24]  536 	mov	ar5,@r0
      000252 8A 82            [24]  537 	mov	dpl,r2
      000254 8C 83            [24]  538 	mov	dph,r4
      000256 8D F0            [24]  539 	mov	b,r5
      000258 12r00r00         [24]  540 	lcall	__gptrget
      00025B FA               [12]  541 	mov	r2,a
      00025C E5*00            [12]  542 	mov	a,_bp
      00025E 24 0B            [12]  543 	add	a,#0x0b
      000260 F8               [12]  544 	mov	r0,a
      000261 A6 02            [24]  545 	mov	@r0,ar2
      000263 08               [12]  546 	inc	r0
      000264 76 00            [12]  547 	mov	@r0,#0x00
      000266 A8*00            [24]  548 	mov	r0,_bp
      000268 08               [12]  549 	inc	r0
      000269 74 04            [12]  550 	mov	a,#0x04
      00026B 26               [12]  551 	add	a,@r0
      00026C FB               [12]  552 	mov	r3,a
      00026D E4               [12]  553 	clr	a
      00026E 08               [12]  554 	inc	r0
      00026F 36               [12]  555 	addc	a,@r0
      000270 FC               [12]  556 	mov	r4,a
      000271 08               [12]  557 	inc	r0
      000272 86 05            [24]  558 	mov	ar5,@r0
      000274 8B 82            [24]  559 	mov	dpl,r3
      000276 8C 83            [24]  560 	mov	dph,r4
      000278 8D F0            [24]  561 	mov	b,r5
      00027A 12r00r00         [24]  562 	lcall	__gptrget
      00027D 75 F0 02         [24]  563 	mov	b,#0x02
      000280 A4               [48]  564 	mul	ab
      000281 24r0C            [12]  565 	add	a,#___month
      000283 F5 82            [12]  566 	mov	dpl,a
      000285 74s00            [12]  567 	mov	a,#(___month >> 8)
      000287 35 F0            [12]  568 	addc	a,b
      000289 F5 83            [12]  569 	mov	dph,a
      00028B E4               [12]  570 	clr	a
      00028C 93               [24]  571 	movc	a,@a+dptr
      00028D FC               [12]  572 	mov	r4,a
      00028E A3               [24]  573 	inc	dptr
      00028F E4               [12]  574 	clr	a
      000290 93               [24]  575 	movc	a,@a+dptr
      000291 FD               [12]  576 	mov	r5,a
      000292 E5*00            [12]  577 	mov	a,_bp
      000294 24 0D            [12]  578 	add	a,#0x0d
      000296 F8               [12]  579 	mov	r0,a
      000297 A6 04            [24]  580 	mov	@r0,ar4
      000299 08               [12]  581 	inc	r0
      00029A A6 05            [24]  582 	mov	@r0,ar5
      00029C 08               [12]  583 	inc	r0
      00029D 76 80            [12]  584 	mov	@r0,#0x80
      00029F A8*00            [24]  585 	mov	r0,_bp
      0002A1 08               [12]  586 	inc	r0
      0002A2 74 07            [12]  587 	mov	a,#0x07
      0002A4 26               [12]  588 	add	a,@r0
      0002A5 FA               [12]  589 	mov	r2,a
      0002A6 E4               [12]  590 	clr	a
      0002A7 08               [12]  591 	inc	r0
      0002A8 36               [12]  592 	addc	a,@r0
      0002A9 FC               [12]  593 	mov	r4,a
      0002AA 08               [12]  594 	inc	r0
      0002AB 86 05            [24]  595 	mov	ar5,@r0
      0002AD 8A 82            [24]  596 	mov	dpl,r2
      0002AF 8C 83            [24]  597 	mov	dph,r4
      0002B1 8D F0            [24]  598 	mov	b,r5
      0002B3 12r00r00         [24]  599 	lcall	__gptrget
      0002B6 75 F0 02         [24]  600 	mov	b,#0x02
      0002B9 A4               [48]  601 	mul	ab
      0002BA 24r24            [12]  602 	add	a,#___day
      0002BC F5 82            [12]  603 	mov	dpl,a
      0002BE 74s00            [12]  604 	mov	a,#(___day >> 8)
      0002C0 35 F0            [12]  605 	addc	a,b
      0002C2 F5 83            [12]  606 	mov	dph,a
      0002C4 E4               [12]  607 	clr	a
      0002C5 93               [24]  608 	movc	a,@a+dptr
      0002C6 FC               [12]  609 	mov	r4,a
      0002C7 A3               [24]  610 	inc	dptr
      0002C8 E4               [12]  611 	clr	a
      0002C9 93               [24]  612 	movc	a,@a+dptr
      0002CA FD               [12]  613 	mov	r5,a
      0002CB 7B 80            [12]  614 	mov	r3,#0x80
                                    615 ;	time.c:97: sprintf (ascTimeBuffer, "%s %s %2d %02d:%02d:%02d %04d\n",
      0002CD C0 07            [24]  616 	push	ar7
      0002CF C0 06            [24]  617 	push	ar6
      0002D1 E5*00            [12]  618 	mov	a,_bp
      0002D3 24 04            [12]  619 	add	a,#0x04
      0002D5 F8               [12]  620 	mov	r0,a
      0002D6 E6               [12]  621 	mov	a,@r0
      0002D7 C0 E0            [24]  622 	push	acc
      0002D9 08               [12]  623 	inc	r0
      0002DA E6               [12]  624 	mov	a,@r0
      0002DB C0 E0            [24]  625 	push	acc
      0002DD E5*00            [12]  626 	mov	a,_bp
      0002DF 24 06            [12]  627 	add	a,#0x06
      0002E1 F8               [12]  628 	mov	r0,a
      0002E2 E6               [12]  629 	mov	a,@r0
      0002E3 C0 E0            [24]  630 	push	acc
      0002E5 08               [12]  631 	inc	r0
      0002E6 E6               [12]  632 	mov	a,@r0
      0002E7 C0 E0            [24]  633 	push	acc
      0002E9 E5*00            [12]  634 	mov	a,_bp
      0002EB 24 09            [12]  635 	add	a,#0x09
      0002ED F8               [12]  636 	mov	r0,a
      0002EE E6               [12]  637 	mov	a,@r0
      0002EF C0 E0            [24]  638 	push	acc
      0002F1 08               [12]  639 	inc	r0
      0002F2 E6               [12]  640 	mov	a,@r0
      0002F3 C0 E0            [24]  641 	push	acc
      0002F5 E5*00            [12]  642 	mov	a,_bp
      0002F7 24 0B            [12]  643 	add	a,#0x0b
      0002F9 F8               [12]  644 	mov	r0,a
      0002FA E6               [12]  645 	mov	a,@r0
      0002FB C0 E0            [24]  646 	push	acc
      0002FD 08               [12]  647 	inc	r0
      0002FE E6               [12]  648 	mov	a,@r0
      0002FF C0 E0            [24]  649 	push	acc
      000301 E5*00            [12]  650 	mov	a,_bp
      000303 24 0D            [12]  651 	add	a,#0x0d
      000305 F8               [12]  652 	mov	r0,a
      000306 E6               [12]  653 	mov	a,@r0
      000307 C0 E0            [24]  654 	push	acc
      000309 08               [12]  655 	inc	r0
      00030A E6               [12]  656 	mov	a,@r0
      00030B C0 E0            [24]  657 	push	acc
      00030D 08               [12]  658 	inc	r0
      00030E E6               [12]  659 	mov	a,@r0
      00030F C0 E0            [24]  660 	push	acc
      000311 C0 04            [24]  661 	push	ar4
      000313 C0 05            [24]  662 	push	ar5
      000315 C0 03            [24]  663 	push	ar3
      000317 74r32            [12]  664 	mov	a,#___str_0
      000319 C0 E0            [24]  665 	push	acc
      00031B 74s00            [12]  666 	mov	a,#(___str_0 >> 8)
      00031D C0 E0            [24]  667 	push	acc
      00031F EB               [12]  668 	mov	a,r3
      000320 C0 E0            [24]  669 	push	acc
      000322 74r00            [12]  670 	mov	a,#_ascTimeBuffer
      000324 C0 E0            [24]  671 	push	acc
      000326 74s00            [12]  672 	mov	a,#(_ascTimeBuffer >> 8)
      000328 C0 E0            [24]  673 	push	acc
      00032A 74 40            [12]  674 	mov	a,#0x40
      00032C C0 E0            [24]  675 	push	acc
      00032E 12r00r00         [24]  676 	lcall	_sprintf
      000331 E5 81            [12]  677 	mov	a,sp
      000333 24 EA            [12]  678 	add	a,#0xea
      000335 F5 81            [12]  679 	mov	sp,a
                                    680 ;	time.c:101: return ascTimeBuffer;
      000337 90r00r00         [24]  681 	mov	dptr,#_ascTimeBuffer
      00033A 75 F0 40         [24]  682 	mov	b,#0x40
      00033D 85*00 81         [24]  683 	mov	sp,_bp
      000340 D0*00            [24]  684 	pop	_bp
      000342 22               [24]  685 	ret
                                    686 ;------------------------------------------------------------
                                    687 ;Allocation info for local variables in function 'ctime'
                                    688 ;------------------------------------------------------------
                                    689 ;timep                     Allocated to registers r5 r6 r7 
                                    690 ;------------------------------------------------------------
                                    691 ;	time.c:104: char *ctime(time_t *timep) {
                                    692 ;	-----------------------------------------
                                    693 ;	 function ctime
                                    694 ;	-----------------------------------------
      000343                        695 _ctime:
                                    696 ;	time.c:105: return asctime(localtime(timep));
      000343 12r03r49         [24]  697 	lcall	_localtime
      000346 02r01rA3         [24]  698 	ljmp	_asctime
                                    699 ;------------------------------------------------------------
                                    700 ;Allocation info for local variables in function 'localtime'
                                    701 ;------------------------------------------------------------
                                    702 ;timep                     Allocated to registers r5 r6 r7 
                                    703 ;------------------------------------------------------------
                                    704 ;	time.c:121: struct tm *localtime(time_t *timep) {
                                    705 ;	-----------------------------------------
                                    706 ;	 function localtime
                                    707 ;	-----------------------------------------
      000349                        708 _localtime:
                                    709 ;	time.c:122: return gmtime(timep);
      000349 02r03r4C         [24]  710 	ljmp	_gmtime
                                    711 ;------------------------------------------------------------
                                    712 ;Allocation info for local variables in function 'gmtime'
                                    713 ;------------------------------------------------------------
                                    714 ;timep                     Allocated to registers r5 r6 r7 
                                    715 ;epoch                     Allocated to stack - _bp +5
                                    716 ;year                      Allocated to registers r2 r3 
                                    717 ;month                     Allocated to registers r5 
                                    718 ;monthLength               Allocated to registers r4 
                                    719 ;days                      Allocated to stack - _bp +9
                                    720 ;sloc0                     Allocated to stack - _bp +1
                                    721 ;------------------------------------------------------------
                                    722 ;	time.c:125: struct tm *gmtime(time_t *timep) {
                                    723 ;	-----------------------------------------
                                    724 ;	 function gmtime
                                    725 ;	-----------------------------------------
      00034C                        726 _gmtime:
      00034C C0*00            [24]  727 	push	_bp
      00034E E5 81            [12]  728 	mov	a,sp
      000350 F5*00            [12]  729 	mov	_bp,a
      000352 24 0C            [12]  730 	add	a,#0x0C
      000354 F5 81            [12]  731 	mov	sp,a
                                    732 ;	time.c:126: unsigned long epoch=*timep;
      000356 E5*00            [12]  733 	mov	a,_bp
      000358 24 05            [12]  734 	add	a,#0x05
      00035A F8               [12]  735 	mov	r0,a
      00035B 12r00r00         [24]  736 	lcall	__gptrget
      00035E F6               [12]  737 	mov	@r0,a
      00035F A3               [24]  738 	inc	dptr
      000360 12r00r00         [24]  739 	lcall	__gptrget
      000363 08               [12]  740 	inc	r0
      000364 F6               [12]  741 	mov	@r0,a
      000365 A3               [24]  742 	inc	dptr
      000366 12r00r00         [24]  743 	lcall	__gptrget
      000369 08               [12]  744 	inc	r0
      00036A F6               [12]  745 	mov	@r0,a
      00036B A3               [24]  746 	inc	dptr
      00036C 12r00r00         [24]  747 	lcall	__gptrget
      00036F 08               [12]  748 	inc	r0
      000370 F6               [12]  749 	mov	@r0,a
                                    750 ;	time.c:131: lastTime.tm_sec=epoch%60;
      000371 74 3C            [12]  751 	mov	a,#0x3C
      000373 C0 E0            [24]  752 	push	acc
      000375 E4               [12]  753 	clr	a
      000376 C0 E0            [24]  754 	push	acc
      000378 C0 E0            [24]  755 	push	acc
      00037A C0 E0            [24]  756 	push	acc
      00037C E5*00            [12]  757 	mov	a,_bp
      00037E 24 05            [12]  758 	add	a,#0x05
      000380 F8               [12]  759 	mov	r0,a
      000381 86 82            [24]  760 	mov	dpl,@r0
      000383 08               [12]  761 	inc	r0
      000384 86 83            [24]  762 	mov	dph,@r0
      000386 08               [12]  763 	inc	r0
      000387 86 F0            [24]  764 	mov	b,@r0
      000389 08               [12]  765 	inc	r0
      00038A E6               [12]  766 	mov	a,@r0
      00038B 12r00r00         [24]  767 	lcall	__modulong
      00038E AA 82            [24]  768 	mov	r2,dpl
      000390 E5 81            [12]  769 	mov	a,sp
      000392 24 FC            [12]  770 	add	a,#0xfc
      000394 F5 81            [12]  771 	mov	sp,a
      000396 8A*20            [24]  772 	mov	_lastTime,r2
                                    773 ;	time.c:132: epoch/=60; // now it is minutes
      000398 74 3C            [12]  774 	mov	a,#0x3C
      00039A C0 E0            [24]  775 	push	acc
      00039C E4               [12]  776 	clr	a
      00039D C0 E0            [24]  777 	push	acc
      00039F C0 E0            [24]  778 	push	acc
      0003A1 C0 E0            [24]  779 	push	acc
      0003A3 E5*00            [12]  780 	mov	a,_bp
      0003A5 24 05            [12]  781 	add	a,#0x05
      0003A7 F8               [12]  782 	mov	r0,a
      0003A8 86 82            [24]  783 	mov	dpl,@r0
      0003AA 08               [12]  784 	inc	r0
      0003AB 86 83            [24]  785 	mov	dph,@r0
      0003AD 08               [12]  786 	inc	r0
      0003AE 86 F0            [24]  787 	mov	b,@r0
      0003B0 08               [12]  788 	inc	r0
      0003B1 E6               [12]  789 	mov	a,@r0
      0003B2 12r00r00         [24]  790 	lcall	__divulong
      0003B5 AC 82            [24]  791 	mov	r4,dpl
      0003B7 AD 83            [24]  792 	mov	r5,dph
      0003B9 AE F0            [24]  793 	mov	r6,b
      0003BB FF               [12]  794 	mov	r7,a
      0003BC E5 81            [12]  795 	mov	a,sp
      0003BE 24 FC            [12]  796 	add	a,#0xfc
      0003C0 F5 81            [12]  797 	mov	sp,a
      0003C2 E5*00            [12]  798 	mov	a,_bp
      0003C4 24 05            [12]  799 	add	a,#0x05
      0003C6 F8               [12]  800 	mov	r0,a
      0003C7 A6 04            [24]  801 	mov	@r0,ar4
      0003C9 08               [12]  802 	inc	r0
      0003CA A6 05            [24]  803 	mov	@r0,ar5
      0003CC 08               [12]  804 	inc	r0
      0003CD A6 06            [24]  805 	mov	@r0,ar6
      0003CF 08               [12]  806 	inc	r0
      0003D0 A6 07            [24]  807 	mov	@r0,ar7
                                    808 ;	time.c:133: lastTime.tm_min=epoch%60;
      0003D2 74 3C            [12]  809 	mov	a,#0x3C
      0003D4 C0 E0            [24]  810 	push	acc
      0003D6 E4               [12]  811 	clr	a
      0003D7 C0 E0            [24]  812 	push	acc
      0003D9 C0 E0            [24]  813 	push	acc
      0003DB C0 E0            [24]  814 	push	acc
      0003DD E5*00            [12]  815 	mov	a,_bp
      0003DF 24 05            [12]  816 	add	a,#0x05
      0003E1 F8               [12]  817 	mov	r0,a
      0003E2 86 82            [24]  818 	mov	dpl,@r0
      0003E4 08               [12]  819 	inc	r0
      0003E5 86 83            [24]  820 	mov	dph,@r0
      0003E7 08               [12]  821 	inc	r0
      0003E8 86 F0            [24]  822 	mov	b,@r0
      0003EA 08               [12]  823 	inc	r0
      0003EB E6               [12]  824 	mov	a,@r0
      0003EC 12r00r00         [24]  825 	lcall	__modulong
      0003EF AC 82            [24]  826 	mov	r4,dpl
      0003F1 E5 81            [12]  827 	mov	a,sp
      0003F3 24 FC            [12]  828 	add	a,#0xfc
      0003F5 F5 81            [12]  829 	mov	sp,a
      0003F7 8C*21            [24]  830 	mov	(_lastTime + 0x0001),r4
                                    831 ;	time.c:134: epoch/=60; // now it is hours
      0003F9 74 3C            [12]  832 	mov	a,#0x3C
      0003FB C0 E0            [24]  833 	push	acc
      0003FD E4               [12]  834 	clr	a
      0003FE C0 E0            [24]  835 	push	acc
      000400 C0 E0            [24]  836 	push	acc
      000402 C0 E0            [24]  837 	push	acc
      000404 E5*00            [12]  838 	mov	a,_bp
      000406 24 05            [12]  839 	add	a,#0x05
      000408 F8               [12]  840 	mov	r0,a
      000409 86 82            [24]  841 	mov	dpl,@r0
      00040B 08               [12]  842 	inc	r0
      00040C 86 83            [24]  843 	mov	dph,@r0
      00040E 08               [12]  844 	inc	r0
      00040F 86 F0            [24]  845 	mov	b,@r0
      000411 08               [12]  846 	inc	r0
      000412 E6               [12]  847 	mov	a,@r0
      000413 12r00r00         [24]  848 	lcall	__divulong
      000416 AC 82            [24]  849 	mov	r4,dpl
      000418 AD 83            [24]  850 	mov	r5,dph
      00041A AE F0            [24]  851 	mov	r6,b
      00041C FF               [12]  852 	mov	r7,a
      00041D E5 81            [12]  853 	mov	a,sp
      00041F 24 FC            [12]  854 	add	a,#0xfc
      000421 F5 81            [12]  855 	mov	sp,a
      000423 E5*00            [12]  856 	mov	a,_bp
      000425 24 05            [12]  857 	add	a,#0x05
      000427 F8               [12]  858 	mov	r0,a
      000428 A6 04            [24]  859 	mov	@r0,ar4
      00042A 08               [12]  860 	inc	r0
      00042B A6 05            [24]  861 	mov	@r0,ar5
      00042D 08               [12]  862 	inc	r0
      00042E A6 06            [24]  863 	mov	@r0,ar6
      000430 08               [12]  864 	inc	r0
      000431 A6 07            [24]  865 	mov	@r0,ar7
                                    866 ;	time.c:135: lastTime.tm_hour=epoch%24;
      000433 74 18            [12]  867 	mov	a,#0x18
      000435 C0 E0            [24]  868 	push	acc
      000437 E4               [12]  869 	clr	a
      000438 C0 E0            [24]  870 	push	acc
      00043A C0 E0            [24]  871 	push	acc
      00043C C0 E0            [24]  872 	push	acc
      00043E E5*00            [12]  873 	mov	a,_bp
      000440 24 05            [12]  874 	add	a,#0x05
      000442 F8               [12]  875 	mov	r0,a
      000443 86 82            [24]  876 	mov	dpl,@r0
      000445 08               [12]  877 	inc	r0
      000446 86 83            [24]  878 	mov	dph,@r0
      000448 08               [12]  879 	inc	r0
      000449 86 F0            [24]  880 	mov	b,@r0
      00044B 08               [12]  881 	inc	r0
      00044C E6               [12]  882 	mov	a,@r0
      00044D 12r00r00         [24]  883 	lcall	__modulong
      000450 AC 82            [24]  884 	mov	r4,dpl
      000452 E5 81            [12]  885 	mov	a,sp
      000454 24 FC            [12]  886 	add	a,#0xfc
      000456 F5 81            [12]  887 	mov	sp,a
      000458 8C*22            [24]  888 	mov	(_lastTime + 0x0002),r4
                                    889 ;	time.c:136: epoch/=24; // now it is days
      00045A 74 18            [12]  890 	mov	a,#0x18
      00045C C0 E0            [24]  891 	push	acc
      00045E E4               [12]  892 	clr	a
      00045F C0 E0            [24]  893 	push	acc
      000461 C0 E0            [24]  894 	push	acc
      000463 C0 E0            [24]  895 	push	acc
      000465 E5*00            [12]  896 	mov	a,_bp
      000467 24 05            [12]  897 	add	a,#0x05
      000469 F8               [12]  898 	mov	r0,a
      00046A 86 82            [24]  899 	mov	dpl,@r0
      00046C 08               [12]  900 	inc	r0
      00046D 86 83            [24]  901 	mov	dph,@r0
      00046F 08               [12]  902 	inc	r0
      000470 86 F0            [24]  903 	mov	b,@r0
      000472 08               [12]  904 	inc	r0
      000473 E6               [12]  905 	mov	a,@r0
      000474 12r00r00         [24]  906 	lcall	__divulong
      000477 AC 82            [24]  907 	mov	r4,dpl
      000479 AD 83            [24]  908 	mov	r5,dph
      00047B AE F0            [24]  909 	mov	r6,b
      00047D FF               [12]  910 	mov	r7,a
      00047E E5 81            [12]  911 	mov	a,sp
      000480 24 FC            [12]  912 	add	a,#0xfc
      000482 F5 81            [12]  913 	mov	sp,a
      000484 E5*00            [12]  914 	mov	a,_bp
      000486 24 05            [12]  915 	add	a,#0x05
      000488 F8               [12]  916 	mov	r0,a
      000489 A6 04            [24]  917 	mov	@r0,ar4
      00048B 08               [12]  918 	inc	r0
      00048C A6 05            [24]  919 	mov	@r0,ar5
      00048E 08               [12]  920 	inc	r0
      00048F A6 06            [24]  921 	mov	@r0,ar6
      000491 08               [12]  922 	inc	r0
      000492 A6 07            [24]  923 	mov	@r0,ar7
                                    924 ;	time.c:137: lastTime.tm_wday=(epoch+4)%7;
      000494 E5*00            [12]  925 	mov	a,_bp
      000496 24 05            [12]  926 	add	a,#0x05
      000498 F8               [12]  927 	mov	r0,a
      000499 74 04            [12]  928 	mov	a,#0x04
      00049B 26               [12]  929 	add	a,@r0
      00049C FC               [12]  930 	mov	r4,a
      00049D E4               [12]  931 	clr	a
      00049E 08               [12]  932 	inc	r0
      00049F 36               [12]  933 	addc	a,@r0
      0004A0 FD               [12]  934 	mov	r5,a
      0004A1 E4               [12]  935 	clr	a
      0004A2 08               [12]  936 	inc	r0
      0004A3 36               [12]  937 	addc	a,@r0
      0004A4 FE               [12]  938 	mov	r6,a
      0004A5 E4               [12]  939 	clr	a
      0004A6 08               [12]  940 	inc	r0
      0004A7 36               [12]  941 	addc	a,@r0
      0004A8 FF               [12]  942 	mov	r7,a
      0004A9 74 07            [12]  943 	mov	a,#0x07
      0004AB C0 E0            [24]  944 	push	acc
      0004AD E4               [12]  945 	clr	a
      0004AE C0 E0            [24]  946 	push	acc
      0004B0 C0 E0            [24]  947 	push	acc
      0004B2 C0 E0            [24]  948 	push	acc
      0004B4 8C 82            [24]  949 	mov	dpl,r4
      0004B6 8D 83            [24]  950 	mov	dph,r5
      0004B8 8E F0            [24]  951 	mov	b,r6
      0004BA EF               [12]  952 	mov	a,r7
      0004BB 12r00r00         [24]  953 	lcall	__modulong
      0004BE AC 82            [24]  954 	mov	r4,dpl
      0004C0 AD 83            [24]  955 	mov	r5,dph
      0004C2 AE F0            [24]  956 	mov	r6,b
      0004C4 FF               [12]  957 	mov	r7,a
      0004C5 E5 81            [12]  958 	mov	a,sp
      0004C7 24 FC            [12]  959 	add	a,#0xfc
      0004C9 F5 81            [12]  960 	mov	sp,a
      0004CB 8C*27            [24]  961 	mov	(_lastTime + 0x0007),r4
                                    962 ;	time.c:140: days=0;
      0004CD E5*00            [12]  963 	mov	a,_bp
      0004CF 24 09            [12]  964 	add	a,#0x09
      0004D1 F8               [12]  965 	mov	r0,a
      0004D2 E4               [12]  966 	clr	a
      0004D3 F6               [12]  967 	mov	@r0,a
      0004D4 08               [12]  968 	inc	r0
      0004D5 F6               [12]  969 	mov	@r0,a
      0004D6 08               [12]  970 	inc	r0
      0004D7 F6               [12]  971 	mov	@r0,a
      0004D8 08               [12]  972 	inc	r0
      0004D9 F6               [12]  973 	mov	@r0,a
                                    974 ;	time.c:141: while((days += (LEAP_YEAR(year) ? 366 : 365)) <= epoch) {
      0004DA 7A B2            [12]  975 	mov	r2,#0xB2
      0004DC 7B 07            [12]  976 	mov	r3,#0x07
      0004DE                        977 00101$:
      0004DE 74 03            [12]  978 	mov	a,#0x03
      0004E0 5A               [12]  979 	anl	a,r2
      0004E1 FE               [12]  980 	mov	r6,a
      0004E2 7F 00            [12]  981 	mov	r7,#0x00
      0004E4 4F               [12]  982 	orl	a,r7
      0004E5 70 06            [24]  983 	jnz	00118$
      0004E7 7E 6E            [12]  984 	mov	r6,#0x6E
      0004E9 7F 01            [12]  985 	mov	r7,#0x01
      0004EB 80 04            [24]  986 	sjmp	00119$
      0004ED                        987 00118$:
      0004ED 7E 6D            [12]  988 	mov	r6,#0x6D
      0004EF 7F 01            [12]  989 	mov	r7,#0x01
      0004F1                        990 00119$:
      0004F1 EF               [12]  991 	mov	a,r7
      0004F2 33               [12]  992 	rlc	a
      0004F3 95 E0            [12]  993 	subb	a,acc
      0004F5 FD               [12]  994 	mov	r5,a
      0004F6 FC               [12]  995 	mov	r4,a
      0004F7 E5*00            [12]  996 	mov	a,_bp
      0004F9 24 09            [12]  997 	add	a,#0x09
      0004FB F8               [12]  998 	mov	r0,a
      0004FC EE               [12]  999 	mov	a,r6
      0004FD 26               [12] 1000 	add	a,@r0
      0004FE FE               [12] 1001 	mov	r6,a
      0004FF EF               [12] 1002 	mov	a,r7
      000500 08               [12] 1003 	inc	r0
      000501 36               [12] 1004 	addc	a,@r0
      000502 FF               [12] 1005 	mov	r7,a
      000503 ED               [12] 1006 	mov	a,r5
      000504 08               [12] 1007 	inc	r0
      000505 36               [12] 1008 	addc	a,@r0
      000506 FD               [12] 1009 	mov	r5,a
      000507 EC               [12] 1010 	mov	a,r4
      000508 08               [12] 1011 	inc	r0
      000509 36               [12] 1012 	addc	a,@r0
      00050A FC               [12] 1013 	mov	r4,a
      00050B E5*00            [12] 1014 	mov	a,_bp
      00050D 24 09            [12] 1015 	add	a,#0x09
      00050F F8               [12] 1016 	mov	r0,a
      000510 A6 06            [24] 1017 	mov	@r0,ar6
      000512 08               [12] 1018 	inc	r0
      000513 A6 07            [24] 1019 	mov	@r0,ar7
      000515 08               [12] 1020 	inc	r0
      000516 A6 05            [24] 1021 	mov	@r0,ar5
      000518 08               [12] 1022 	inc	r0
      000519 A6 04            [24] 1023 	mov	@r0,ar4
      00051B E5*00            [12] 1024 	mov	a,_bp
      00051D 24 05            [12] 1025 	add	a,#0x05
      00051F F8               [12] 1026 	mov	r0,a
      000520 C3               [12] 1027 	clr	c
      000521 E6               [12] 1028 	mov	a,@r0
      000522 9E               [12] 1029 	subb	a,r6
      000523 08               [12] 1030 	inc	r0
      000524 E6               [12] 1031 	mov	a,@r0
      000525 9F               [12] 1032 	subb	a,r7
      000526 08               [12] 1033 	inc	r0
      000527 E6               [12] 1034 	mov	a,@r0
      000528 9D               [12] 1035 	subb	a,r5
      000529 08               [12] 1036 	inc	r0
      00052A E6               [12] 1037 	mov	a,@r0
      00052B 9C               [12] 1038 	subb	a,r4
      00052C 40 07            [24] 1039 	jc	00103$
                                   1040 ;	time.c:142: year++;
      00052E 0A               [12] 1041 	inc	r2
      00052F BA 00 AC         [24] 1042 	cjne	r2,#0x00,00101$
      000532 0B               [12] 1043 	inc	r3
      000533 80 A9            [24] 1044 	sjmp	00101$
      000535                       1045 00103$:
                                   1046 ;	time.c:144: lastTime.tm_year=year-1900;
      000535 EA               [12] 1047 	mov	a,r2
      000536 24 94            [12] 1048 	add	a,#0x94
      000538 FE               [12] 1049 	mov	r6,a
      000539 EB               [12] 1050 	mov	a,r3
      00053A 34 F8            [12] 1051 	addc	a,#0xF8
      00053C FF               [12] 1052 	mov	r7,a
      00053D 8E*25            [24] 1053 	mov	((_lastTime + 0x0005) + 0),r6
      00053F 8F*26            [24] 1054 	mov	((_lastTime + 0x0005) + 1),r7
                                   1055 ;	time.c:146: days -= LEAP_YEAR(year) ? 366 : 365;
      000541 74 03            [12] 1056 	mov	a,#0x03
      000543 5A               [12] 1057 	anl	a,r2
      000544 FE               [12] 1058 	mov	r6,a
      000545 7F 00            [12] 1059 	mov	r7,#0x00
      000547 4F               [12] 1060 	orl	a,r7
      000548 70 06            [24] 1061 	jnz	00120$
      00054A 7C 6E            [12] 1062 	mov	r4,#0x6E
      00054C 7D 01            [12] 1063 	mov	r5,#0x01
      00054E 80 04            [24] 1064 	sjmp	00121$
      000550                       1065 00120$:
      000550 7C 6D            [12] 1066 	mov	r4,#0x6D
      000552 7D 01            [12] 1067 	mov	r5,#0x01
      000554                       1068 00121$:
      000554 ED               [12] 1069 	mov	a,r5
      000555 33               [12] 1070 	rlc	a
      000556 95 E0            [12] 1071 	subb	a,acc
      000558 FB               [12] 1072 	mov	r3,a
      000559 FA               [12] 1073 	mov	r2,a
      00055A E5*00            [12] 1074 	mov	a,_bp
      00055C 24 09            [12] 1075 	add	a,#0x09
      00055E F8               [12] 1076 	mov	r0,a
      00055F E6               [12] 1077 	mov	a,@r0
      000560 C3               [12] 1078 	clr	c
      000561 9C               [12] 1079 	subb	a,r4
      000562 F6               [12] 1080 	mov	@r0,a
      000563 08               [12] 1081 	inc	r0
      000564 E6               [12] 1082 	mov	a,@r0
      000565 9D               [12] 1083 	subb	a,r5
      000566 F6               [12] 1084 	mov	@r0,a
      000567 08               [12] 1085 	inc	r0
      000568 E6               [12] 1086 	mov	a,@r0
      000569 9B               [12] 1087 	subb	a,r3
      00056A F6               [12] 1088 	mov	@r0,a
      00056B 08               [12] 1089 	inc	r0
      00056C E6               [12] 1090 	mov	a,@r0
      00056D 9A               [12] 1091 	subb	a,r2
      00056E F6               [12] 1092 	mov	@r0,a
                                   1093 ;	time.c:147: epoch -= days; // now it is days in this year, starting at 0
      00056F E5*00            [12] 1094 	mov	a,_bp
      000571 24 05            [12] 1095 	add	a,#0x05
      000573 F8               [12] 1096 	mov	r0,a
      000574 E5*00            [12] 1097 	mov	a,_bp
      000576 24 09            [12] 1098 	add	a,#0x09
      000578 F9               [12] 1099 	mov	r1,a
      000579 E6               [12] 1100 	mov	a,@r0
      00057A C3               [12] 1101 	clr	c
      00057B 97               [12] 1102 	subb	a,@r1
      00057C F6               [12] 1103 	mov	@r0,a
      00057D 08               [12] 1104 	inc	r0
      00057E E6               [12] 1105 	mov	a,@r0
      00057F 09               [12] 1106 	inc	r1
      000580 97               [12] 1107 	subb	a,@r1
      000581 F6               [12] 1108 	mov	@r0,a
      000582 08               [12] 1109 	inc	r0
      000583 E6               [12] 1110 	mov	a,@r0
      000584 09               [12] 1111 	inc	r1
      000585 97               [12] 1112 	subb	a,@r1
      000586 F6               [12] 1113 	mov	@r0,a
      000587 08               [12] 1114 	inc	r0
      000588 E6               [12] 1115 	mov	a,@r0
      000589 09               [12] 1116 	inc	r1
      00058A 97               [12] 1117 	subb	a,@r1
      00058B F6               [12] 1118 	mov	@r0,a
                                   1119 ;	time.c:148: lastTime.tm_yday=epoch;
      00058C E5*00            [12] 1120 	mov	a,_bp
      00058E 24 05            [12] 1121 	add	a,#0x05
      000590 F8               [12] 1122 	mov	r0,a
      000591 86 04            [24] 1123 	mov	ar4,@r0
      000593 08               [12] 1124 	inc	r0
      000594 86 05            [24] 1125 	mov	ar5,@r0
      000596 8C*28            [24] 1126 	mov	((_lastTime + 0x0008) + 0),r4
      000598 8D*29            [24] 1127 	mov	((_lastTime + 0x0008) + 1),r5
                                   1128 ;	time.c:153: for (month=0; month<12; month++) {
      00059A 7D 00            [12] 1129 	mov	r5,#0x00
      00059C                       1130 00114$:
                                   1131 ;	time.c:154: if (month==1) { // februari
      00059C BD 01 0C         [24] 1132 	cjne	r5,#0x01,00108$
                                   1133 ;	time.c:155: if (LEAP_YEAR(year)) {
      00059F EE               [12] 1134 	mov	a,r6
      0005A0 4F               [12] 1135 	orl	a,r7
      0005A1 70 04            [24] 1136 	jnz	00105$
                                   1137 ;	time.c:156: monthLength=29;
      0005A3 7C 1D            [12] 1138 	mov	r4,#0x1D
      0005A5 80 0A            [24] 1139 	sjmp	00109$
      0005A7                       1140 00105$:
                                   1141 ;	time.c:158: monthLength=28;
      0005A7 7C 1C            [12] 1142 	mov	r4,#0x1C
      0005A9 80 06            [24] 1143 	sjmp	00109$
      0005AB                       1144 00108$:
                                   1145 ;	time.c:161: monthLength = monthDays[month];
      0005AB ED               [12] 1146 	mov	a,r5
      0005AC 90r00r00         [24] 1147 	mov	dptr,#_monthDays
      0005AF 93               [24] 1148 	movc	a,@a+dptr
      0005B0 FC               [12] 1149 	mov	r4,a
      0005B1                       1150 00109$:
                                   1151 ;	time.c:164: if (epoch>=monthLength) {
      0005B1 A8*00            [24] 1152 	mov	r0,_bp
      0005B3 08               [12] 1153 	inc	r0
      0005B4 A6 04            [24] 1154 	mov	@r0,ar4
      0005B6 08               [12] 1155 	inc	r0
      0005B7 76 00            [12] 1156 	mov	@r0,#0x00
      0005B9 08               [12] 1157 	inc	r0
      0005BA 76 00            [12] 1158 	mov	@r0,#0x00
      0005BC 08               [12] 1159 	inc	r0
      0005BD 76 00            [12] 1160 	mov	@r0,#0x00
      0005BF E5*00            [12] 1161 	mov	a,_bp
      0005C1 24 05            [12] 1162 	add	a,#0x05
      0005C3 F8               [12] 1163 	mov	r0,a
      0005C4 A9*00            [24] 1164 	mov	r1,_bp
      0005C6 09               [12] 1165 	inc	r1
      0005C7 C3               [12] 1166 	clr	c
      0005C8 E6               [12] 1167 	mov	a,@r0
      0005C9 97               [12] 1168 	subb	a,@r1
      0005CA 08               [12] 1169 	inc	r0
      0005CB E6               [12] 1170 	mov	a,@r0
      0005CC 09               [12] 1171 	inc	r1
      0005CD 97               [12] 1172 	subb	a,@r1
      0005CE 08               [12] 1173 	inc	r0
      0005CF E6               [12] 1174 	mov	a,@r0
      0005D0 09               [12] 1175 	inc	r1
      0005D1 97               [12] 1176 	subb	a,@r1
      0005D2 08               [12] 1177 	inc	r0
      0005D3 E6               [12] 1178 	mov	a,@r0
      0005D4 09               [12] 1179 	inc	r1
      0005D5 97               [12] 1180 	subb	a,@r1
      0005D6 40 21            [24] 1181 	jc	00113$
                                   1182 ;	time.c:165: epoch-=monthLength;
      0005D8 E5*00            [12] 1183 	mov	a,_bp
      0005DA 24 05            [12] 1184 	add	a,#0x05
      0005DC F8               [12] 1185 	mov	r0,a
      0005DD A9*00            [24] 1186 	mov	r1,_bp
      0005DF 09               [12] 1187 	inc	r1
      0005E0 E6               [12] 1188 	mov	a,@r0
      0005E1 C3               [12] 1189 	clr	c
      0005E2 97               [12] 1190 	subb	a,@r1
      0005E3 F6               [12] 1191 	mov	@r0,a
      0005E4 08               [12] 1192 	inc	r0
      0005E5 E6               [12] 1193 	mov	a,@r0
      0005E6 09               [12] 1194 	inc	r1
      0005E7 97               [12] 1195 	subb	a,@r1
      0005E8 F6               [12] 1196 	mov	@r0,a
      0005E9 08               [12] 1197 	inc	r0
      0005EA E6               [12] 1198 	mov	a,@r0
      0005EB 09               [12] 1199 	inc	r1
      0005EC 97               [12] 1200 	subb	a,@r1
      0005ED F6               [12] 1201 	mov	@r0,a
      0005EE 08               [12] 1202 	inc	r0
      0005EF E6               [12] 1203 	mov	a,@r0
      0005F0 09               [12] 1204 	inc	r1
      0005F1 97               [12] 1205 	subb	a,@r1
      0005F2 F6               [12] 1206 	mov	@r0,a
                                   1207 ;	time.c:153: for (month=0; month<12; month++) {
      0005F3 0D               [12] 1208 	inc	r5
      0005F4 BD 0C 00         [24] 1209 	cjne	r5,#0x0C,00156$
      0005F7                       1210 00156$:
      0005F7 40 A3            [24] 1211 	jc	00114$
      0005F9                       1212 00113$:
                                   1213 ;	time.c:170: lastTime.tm_mon=month;
      0005F9 8D*24            [24] 1214 	mov	(_lastTime + 0x0004),r5
                                   1215 ;	time.c:171: lastTime.tm_mday=epoch+1;
      0005FB E5*00            [12] 1216 	mov	a,_bp
      0005FD 24 05            [12] 1217 	add	a,#0x05
      0005FF F8               [12] 1218 	mov	r0,a
      000600 E6               [12] 1219 	mov	a,@r0
      000601 04               [12] 1220 	inc	a
      000602 F5*23            [12] 1221 	mov	(_lastTime + 0x0003),a
                                   1222 ;	time.c:173: lastTime.tm_isdst=0;
      000604 75*2A 00         [24] 1223 	mov	(_lastTime + 0x000a),#0x00
                                   1224 ;	time.c:175: return &lastTime;
      000607 90r00r20         [24] 1225 	mov	dptr,#_lastTime
      00060A 75 F0 40         [24] 1226 	mov	b,#0x40
      00060D 85*00 81         [24] 1227 	mov	sp,_bp
      000610 D0*00            [24] 1228 	pop	_bp
      000612 22               [24] 1229 	ret
                                   1230 ;------------------------------------------------------------
                                   1231 ;Allocation info for local variables in function 'mktime'
                                   1232 ;------------------------------------------------------------
                                   1233 ;timeptr                   Allocated to stack - _bp +1
                                   1234 ;year                      Allocated to stack - _bp +12
                                   1235 ;month                     Allocated to stack - _bp +4
                                   1236 ;i                         Allocated to stack - _bp +6
                                   1237 ;seconds                   Allocated to stack - _bp +8
                                   1238 ;------------------------------------------------------------
                                   1239 ;	time.c:179: time_t mktime(struct tm *timeptr) {
                                   1240 ;	-----------------------------------------
                                   1241 ;	 function mktime
                                   1242 ;	-----------------------------------------
      000613                       1243 _mktime:
      000613 C0*00            [24] 1244 	push	_bp
      000615 85 81*00         [24] 1245 	mov	_bp,sp
      000618 C0 82            [24] 1246 	push	dpl
      00061A C0 83            [24] 1247 	push	dph
      00061C C0 F0            [24] 1248 	push	b
      00061E E5 81            [12] 1249 	mov	a,sp
      000620 24 0A            [12] 1250 	add	a,#0x0A
      000622 F5 81            [12] 1251 	mov	sp,a
                                   1252 ;	time.c:180: int year=timeptr->tm_year+1900, month=timeptr->tm_mon, i;
      000624 A8*00            [24] 1253 	mov	r0,_bp
      000626 08               [12] 1254 	inc	r0
      000627 74 05            [12] 1255 	mov	a,#0x05
      000629 26               [12] 1256 	add	a,@r0
      00062A FA               [12] 1257 	mov	r2,a
      00062B E4               [12] 1258 	clr	a
      00062C 08               [12] 1259 	inc	r0
      00062D 36               [12] 1260 	addc	a,@r0
      00062E FB               [12] 1261 	mov	r3,a
      00062F 08               [12] 1262 	inc	r0
      000630 86 04            [24] 1263 	mov	ar4,@r0
      000632 8A 82            [24] 1264 	mov	dpl,r2
      000634 8B 83            [24] 1265 	mov	dph,r3
      000636 8C F0            [24] 1266 	mov	b,r4
      000638 12r00r00         [24] 1267 	lcall	__gptrget
      00063B FA               [12] 1268 	mov	r2,a
      00063C A3               [24] 1269 	inc	dptr
      00063D 12r00r00         [24] 1270 	lcall	__gptrget
      000640 FB               [12] 1271 	mov	r3,a
      000641 E5*00            [12] 1272 	mov	a,_bp
      000643 24 0C            [12] 1273 	add	a,#0x0c
      000645 F8               [12] 1274 	mov	r0,a
      000646 74 6C            [12] 1275 	mov	a,#0x6C
      000648 2A               [12] 1276 	add	a,r2
      000649 F6               [12] 1277 	mov	@r0,a
      00064A 74 07            [12] 1278 	mov	a,#0x07
      00064C 3B               [12] 1279 	addc	a,r3
      00064D 08               [12] 1280 	inc	r0
      00064E F6               [12] 1281 	mov	@r0,a
      00064F A8*00            [24] 1282 	mov	r0,_bp
      000651 08               [12] 1283 	inc	r0
      000652 74 04            [12] 1284 	mov	a,#0x04
      000654 26               [12] 1285 	add	a,@r0
      000655 FA               [12] 1286 	mov	r2,a
      000656 E4               [12] 1287 	clr	a
      000657 08               [12] 1288 	inc	r0
      000658 36               [12] 1289 	addc	a,@r0
      000659 FB               [12] 1290 	mov	r3,a
      00065A 08               [12] 1291 	inc	r0
      00065B 86 04            [24] 1292 	mov	ar4,@r0
      00065D 8A 82            [24] 1293 	mov	dpl,r2
      00065F 8B 83            [24] 1294 	mov	dph,r3
      000661 8C F0            [24] 1295 	mov	b,r4
      000663 12r00r00         [24] 1296 	lcall	__gptrget
      000666 FA               [12] 1297 	mov	r2,a
      000667 E5*00            [12] 1298 	mov	a,_bp
      000669 24 04            [12] 1299 	add	a,#0x04
      00066B F8               [12] 1300 	mov	r0,a
      00066C A6 02            [24] 1301 	mov	@r0,ar2
      00066E 08               [12] 1302 	inc	r0
      00066F 76 00            [12] 1303 	mov	@r0,#0x00
                                   1304 ;	time.c:183: CheckTime(timeptr);
      000671 A8*00            [24] 1305 	mov	r0,_bp
      000673 08               [12] 1306 	inc	r0
      000674 86 82            [24] 1307 	mov	dpl,@r0
      000676 08               [12] 1308 	inc	r0
      000677 86 83            [24] 1309 	mov	dph,@r0
      000679 08               [12] 1310 	inc	r0
      00067A 86 F0            [24] 1311 	mov	b,@r0
      00067C 12r00rA5         [24] 1312 	lcall	_CheckTime
                                   1313 ;	time.c:186: seconds= (year-1970)*(60*60*24L*365);
      00067F E5*00            [12] 1314 	mov	a,_bp
      000681 24 0C            [12] 1315 	add	a,#0x0c
      000683 F8               [12] 1316 	mov	r0,a
      000684 E6               [12] 1317 	mov	a,@r0
      000685 24 4E            [12] 1318 	add	a,#0x4E
      000687 FB               [12] 1319 	mov	r3,a
      000688 08               [12] 1320 	inc	r0
      000689 E6               [12] 1321 	mov	a,@r0
      00068A 34 F8            [12] 1322 	addc	a,#0xF8
      00068C FA               [12] 1323 	mov	r2,a
      00068D 33               [12] 1324 	rlc	a
      00068E 95 E0            [12] 1325 	subb	a,acc
      000690 FC               [12] 1326 	mov	r4,a
      000691 FF               [12] 1327 	mov	r7,a
      000692 C0 03            [24] 1328 	push	ar3
      000694 C0 02            [24] 1329 	push	ar2
      000696 C0 04            [24] 1330 	push	ar4
      000698 C0 07            [24] 1331 	push	ar7
      00069A 90 33 80         [24] 1332 	mov	dptr,#0x3380
      00069D 75 F0 E1         [24] 1333 	mov	b,#0xE1
      0006A0 74 01            [12] 1334 	mov	a,#0x01
      0006A2 12r00r00         [24] 1335 	lcall	__mullong
      0006A5 AC 82            [24] 1336 	mov	r4,dpl
      0006A7 AD 83            [24] 1337 	mov	r5,dph
      0006A9 AE F0            [24] 1338 	mov	r6,b
      0006AB FF               [12] 1339 	mov	r7,a
      0006AC E5 81            [12] 1340 	mov	a,sp
      0006AE 24 FC            [12] 1341 	add	a,#0xfc
      0006B0 F5 81            [12] 1342 	mov	sp,a
      0006B2 E5*00            [12] 1343 	mov	a,_bp
      0006B4 24 08            [12] 1344 	add	a,#0x08
      0006B6 F8               [12] 1345 	mov	r0,a
      0006B7 A6 04            [24] 1346 	mov	@r0,ar4
      0006B9 08               [12] 1347 	inc	r0
      0006BA A6 05            [24] 1348 	mov	@r0,ar5
      0006BC 08               [12] 1349 	inc	r0
      0006BD A6 06            [24] 1350 	mov	@r0,ar6
      0006BF 08               [12] 1351 	inc	r0
      0006C0 A6 07            [24] 1352 	mov	@r0,ar7
                                   1353 ;	time.c:189: for (i=1970; i<year; i++) {
      0006C2 E5*00            [12] 1354 	mov	a,_bp
      0006C4 24 08            [12] 1355 	add	a,#0x08
      0006C6 F8               [12] 1356 	mov	r0,a
      0006C7 86 02            [24] 1357 	mov	ar2,@r0
      0006C9 08               [12] 1358 	inc	r0
      0006CA 86 03            [24] 1359 	mov	ar3,@r0
      0006CC 08               [12] 1360 	inc	r0
      0006CD 86 06            [24] 1361 	mov	ar6,@r0
      0006CF 08               [12] 1362 	inc	r0
      0006D0 86 07            [24] 1363 	mov	ar7,@r0
      0006D2 E5*00            [12] 1364 	mov	a,_bp
      0006D4 24 06            [12] 1365 	add	a,#0x06
      0006D6 F8               [12] 1366 	mov	r0,a
      0006D7 76 B2            [12] 1367 	mov	@r0,#0xB2
      0006D9 08               [12] 1368 	inc	r0
      0006DA 76 07            [12] 1369 	mov	@r0,#0x07
      0006DC                       1370 00110$:
      0006DC E5*00            [12] 1371 	mov	a,_bp
      0006DE 24 06            [12] 1372 	add	a,#0x06
      0006E0 F8               [12] 1373 	mov	r0,a
      0006E1 E5*00            [12] 1374 	mov	a,_bp
      0006E3 24 0C            [12] 1375 	add	a,#0x0c
      0006E5 F9               [12] 1376 	mov	r1,a
      0006E6 C3               [12] 1377 	clr	c
      0006E7 E6               [12] 1378 	mov	a,@r0
      0006E8 97               [12] 1379 	subb	a,@r1
      0006E9 08               [12] 1380 	inc	r0
      0006EA E6               [12] 1381 	mov	a,@r0
      0006EB 64 80            [12] 1382 	xrl	a,#0x80
      0006ED 09               [12] 1383 	inc	r1
      0006EE 87 F0            [24] 1384 	mov	b,@r1
      0006F0 63 F0 80         [24] 1385 	xrl	b,#0x80
      0006F3 95 F0            [12] 1386 	subb	a,b
      0006F5 50 4C            [24] 1387 	jnc	00124$
                                   1388 ;	time.c:190: if (LEAP_YEAR(i)) {
      0006F7 C0 07            [24] 1389 	push	ar7
      0006F9 C0 06            [24] 1390 	push	ar6
      0006FB C0 03            [24] 1391 	push	ar3
      0006FD C0 02            [24] 1392 	push	ar2
      0006FF 74 04            [12] 1393 	mov	a,#0x04
      000701 C0 E0            [24] 1394 	push	acc
      000703 E4               [12] 1395 	clr	a
      000704 C0 E0            [24] 1396 	push	acc
      000706 E5*00            [12] 1397 	mov	a,_bp
      000708 24 06            [12] 1398 	add	a,#0x06
      00070A F8               [12] 1399 	mov	r0,a
      00070B 86 82            [24] 1400 	mov	dpl,@r0
      00070D 08               [12] 1401 	inc	r0
      00070E 86 83            [24] 1402 	mov	dph,@r0
      000710 12r00r00         [24] 1403 	lcall	__modsint
      000713 AC 82            [24] 1404 	mov	r4,dpl
      000715 AD 83            [24] 1405 	mov	r5,dph
      000717 15 81            [12] 1406 	dec	sp
      000719 15 81            [12] 1407 	dec	sp
      00071B D0 02            [24] 1408 	pop	ar2
      00071D D0 03            [24] 1409 	pop	ar3
      00071F D0 06            [24] 1410 	pop	ar6
      000721 D0 07            [24] 1411 	pop	ar7
      000723 EC               [12] 1412 	mov	a,r4
      000724 4D               [12] 1413 	orl	a,r5
      000725 70 0F            [24] 1414 	jnz	00111$
                                   1415 ;	time.c:191: seconds+= 60*60*24L;
      000727 74 80            [12] 1416 	mov	a,#0x80
      000729 2A               [12] 1417 	add	a,r2
      00072A FA               [12] 1418 	mov	r2,a
      00072B 74 51            [12] 1419 	mov	a,#0x51
      00072D 3B               [12] 1420 	addc	a,r3
      00072E FB               [12] 1421 	mov	r3,a
      00072F 74 01            [12] 1422 	mov	a,#0x01
      000731 3E               [12] 1423 	addc	a,r6
      000732 FE               [12] 1424 	mov	r6,a
      000733 E4               [12] 1425 	clr	a
      000734 3F               [12] 1426 	addc	a,r7
      000735 FF               [12] 1427 	mov	r7,a
      000736                       1428 00111$:
                                   1429 ;	time.c:189: for (i=1970; i<year; i++) {
      000736 E5*00            [12] 1430 	mov	a,_bp
      000738 24 06            [12] 1431 	add	a,#0x06
      00073A F8               [12] 1432 	mov	r0,a
      00073B 06               [12] 1433 	inc	@r0
      00073C B6 00 02         [24] 1434 	cjne	@r0,#0x00,00142$
      00073F 08               [12] 1435 	inc	r0
      000740 06               [12] 1436 	inc	@r0
      000741                       1437 00142$:
      000741 80 99            [24] 1438 	sjmp	00110$
      000743                       1439 00124$:
      000743 E5*00            [12] 1440 	mov	a,_bp
      000745 24 08            [12] 1441 	add	a,#0x08
      000747 F8               [12] 1442 	mov	r0,a
      000748 A6 02            [24] 1443 	mov	@r0,ar2
      00074A 08               [12] 1444 	inc	r0
      00074B A6 03            [24] 1445 	mov	@r0,ar3
      00074D 08               [12] 1446 	inc	r0
      00074E A6 06            [24] 1447 	mov	@r0,ar6
      000750 08               [12] 1448 	inc	r0
      000751 A6 07            [24] 1449 	mov	@r0,ar7
                                   1450 ;	time.c:196: for (i=0; i<month; i++) {
      000753 74 04            [12] 1451 	mov	a,#0x04
      000755 C0 E0            [24] 1452 	push	acc
      000757 E4               [12] 1453 	clr	a
      000758 C0 E0            [24] 1454 	push	acc
      00075A E5*00            [12] 1455 	mov	a,_bp
      00075C 24 0C            [12] 1456 	add	a,#0x0c
      00075E F8               [12] 1457 	mov	r0,a
      00075F 86 82            [24] 1458 	mov	dpl,@r0
      000761 08               [12] 1459 	inc	r0
      000762 86 83            [24] 1460 	mov	dph,@r0
      000764 12r00r00         [24] 1461 	lcall	__modsint
      000767 AE 82            [24] 1462 	mov	r6,dpl
      000769 AF 83            [24] 1463 	mov	r7,dph
      00076B 15 81            [12] 1464 	dec	sp
      00076D 15 81            [12] 1465 	dec	sp
      00076F 7C 00            [12] 1466 	mov	r4,#0x00
      000771 7D 00            [12] 1467 	mov	r5,#0x00
      000773                       1468 00113$:
      000773 E5*00            [12] 1469 	mov	a,_bp
      000775 24 04            [12] 1470 	add	a,#0x04
      000777 F8               [12] 1471 	mov	r0,a
      000778 C3               [12] 1472 	clr	c
      000779 EC               [12] 1473 	mov	a,r4
      00077A 96               [12] 1474 	subb	a,@r0
      00077B ED               [12] 1475 	mov	a,r5
      00077C 64 80            [12] 1476 	xrl	a,#0x80
      00077E 08               [12] 1477 	inc	r0
      00077F 86 F0            [24] 1478 	mov	b,@r0
      000781 63 F0 80         [24] 1479 	xrl	b,#0x80
      000784 95 F0            [12] 1480 	subb	a,b
      000786 40 03            [24] 1481 	jc	00143$
      000788 02r08r0C         [24] 1482 	ljmp	00108$
      00078B                       1483 00143$:
                                   1484 ;	time.c:197: if (i==1 && LEAP_YEAR(year)) { 
      00078B BC 01 20         [24] 1485 	cjne	r4,#0x01,00105$
      00078E BD 00 1D         [24] 1486 	cjne	r5,#0x00,00105$
      000791 EE               [12] 1487 	mov	a,r6
      000792 4F               [12] 1488 	orl	a,r7
      000793 70 19            [24] 1489 	jnz	00105$
                                   1490 ;	time.c:198: seconds+= 60*60*24L*29;
      000795 E5*00            [12] 1491 	mov	a,_bp
      000797 24 08            [12] 1492 	add	a,#0x08
      000799 F8               [12] 1493 	mov	r0,a
      00079A 74 80            [12] 1494 	mov	a,#0x80
      00079C 26               [12] 1495 	add	a,@r0
      00079D F6               [12] 1496 	mov	@r0,a
      00079E 74 3B            [12] 1497 	mov	a,#0x3B
      0007A0 08               [12] 1498 	inc	r0
      0007A1 36               [12] 1499 	addc	a,@r0
      0007A2 F6               [12] 1500 	mov	@r0,a
      0007A3 74 26            [12] 1501 	mov	a,#0x26
      0007A5 08               [12] 1502 	inc	r0
      0007A6 36               [12] 1503 	addc	a,@r0
      0007A7 F6               [12] 1504 	mov	@r0,a
      0007A8 E4               [12] 1505 	clr	a
      0007A9 08               [12] 1506 	inc	r0
      0007AA 36               [12] 1507 	addc	a,@r0
      0007AB F6               [12] 1508 	mov	@r0,a
      0007AC 80 56            [24] 1509 	sjmp	00114$
      0007AE                       1510 00105$:
                                   1511 ;	time.c:200: seconds+= 60*60*24L*monthDays[i];
      0007AE C0 06            [24] 1512 	push	ar6
      0007B0 C0 07            [24] 1513 	push	ar7
      0007B2 EC               [12] 1514 	mov	a,r4
      0007B3 24r00            [12] 1515 	add	a,#_monthDays
      0007B5 F5 82            [12] 1516 	mov	dpl,a
      0007B7 ED               [12] 1517 	mov	a,r5
      0007B8 34s00            [12] 1518 	addc	a,#(_monthDays >> 8)
      0007BA F5 83            [12] 1519 	mov	dph,a
      0007BC E4               [12] 1520 	clr	a
      0007BD 93               [24] 1521 	movc	a,@a+dptr
      0007BE FA               [12] 1522 	mov	r2,a
      0007BF 33               [12] 1523 	rlc	a
      0007C0 95 E0            [12] 1524 	subb	a,acc
      0007C2 FB               [12] 1525 	mov	r3,a
      0007C3 FE               [12] 1526 	mov	r6,a
      0007C4 FF               [12] 1527 	mov	r7,a
      0007C5 C0 05            [24] 1528 	push	ar5
      0007C7 C0 04            [24] 1529 	push	ar4
      0007C9 C0 02            [24] 1530 	push	ar2
      0007CB C0 03            [24] 1531 	push	ar3
      0007CD C0 06            [24] 1532 	push	ar6
      0007CF C0 07            [24] 1533 	push	ar7
      0007D1 90 51 80         [24] 1534 	mov	dptr,#0x5180
      0007D4 75 F0 01         [24] 1535 	mov	b,#0x01
      0007D7 E4               [12] 1536 	clr	a
      0007D8 12r00r00         [24] 1537 	lcall	__mullong
      0007DB AA 82            [24] 1538 	mov	r2,dpl
      0007DD AB 83            [24] 1539 	mov	r3,dph
      0007DF AE F0            [24] 1540 	mov	r6,b
      0007E1 FF               [12] 1541 	mov	r7,a
      0007E2 E5 81            [12] 1542 	mov	a,sp
      0007E4 24 FC            [12] 1543 	add	a,#0xfc
      0007E6 F5 81            [12] 1544 	mov	sp,a
      0007E8 D0 04            [24] 1545 	pop	ar4
      0007EA D0 05            [24] 1546 	pop	ar5
      0007EC E5*00            [12] 1547 	mov	a,_bp
      0007EE 24 08            [12] 1548 	add	a,#0x08
      0007F0 F8               [12] 1549 	mov	r0,a
      0007F1 EA               [12] 1550 	mov	a,r2
      0007F2 26               [12] 1551 	add	a,@r0
      0007F3 F6               [12] 1552 	mov	@r0,a
      0007F4 EB               [12] 1553 	mov	a,r3
      0007F5 08               [12] 1554 	inc	r0
      0007F6 36               [12] 1555 	addc	a,@r0
      0007F7 F6               [12] 1556 	mov	@r0,a
      0007F8 EE               [12] 1557 	mov	a,r6
      0007F9 08               [12] 1558 	inc	r0
      0007FA 36               [12] 1559 	addc	a,@r0
      0007FB F6               [12] 1560 	mov	@r0,a
      0007FC EF               [12] 1561 	mov	a,r7
      0007FD 08               [12] 1562 	inc	r0
      0007FE 36               [12] 1563 	addc	a,@r0
      0007FF F6               [12] 1564 	mov	@r0,a
                                   1565 ;	time.c:208: return seconds;
      000800 D0 07            [24] 1566 	pop	ar7
      000802 D0 06            [24] 1567 	pop	ar6
                                   1568 ;	time.c:200: seconds+= 60*60*24L*monthDays[i];
      000804                       1569 00114$:
                                   1570 ;	time.c:196: for (i=0; i<month; i++) {
      000804 0C               [12] 1571 	inc	r4
      000805 BC 00 01         [24] 1572 	cjne	r4,#0x00,00147$
      000808 0D               [12] 1573 	inc	r5
      000809                       1574 00147$:
      000809 02r07r73         [24] 1575 	ljmp	00113$
      00080C                       1576 00108$:
                                   1577 ;	time.c:204: seconds+= (timeptr->tm_mday-1)*60*60*24L;
      00080C A8*00            [24] 1578 	mov	r0,_bp
      00080E 08               [12] 1579 	inc	r0
      00080F 74 03            [12] 1580 	mov	a,#0x03
      000811 26               [12] 1581 	add	a,@r0
      000812 FD               [12] 1582 	mov	r5,a
      000813 E4               [12] 1583 	clr	a
      000814 08               [12] 1584 	inc	r0
      000815 36               [12] 1585 	addc	a,@r0
      000816 FE               [12] 1586 	mov	r6,a
      000817 08               [12] 1587 	inc	r0
      000818 86 07            [24] 1588 	mov	ar7,@r0
      00081A 8D 82            [24] 1589 	mov	dpl,r5
      00081C 8E 83            [24] 1590 	mov	dph,r6
      00081E 8F F0            [24] 1591 	mov	b,r7
      000820 12r00r00         [24] 1592 	lcall	__gptrget
      000823 FD               [12] 1593 	mov	r5,a
      000824 7F 00            [12] 1594 	mov	r7,#0x00
      000826 1D               [12] 1595 	dec	r5
      000827 BD FF 01         [24] 1596 	cjne	r5,#0xFF,00148$
      00082A 1F               [12] 1597 	dec	r7
      00082B                       1598 00148$:
      00082B EF               [12] 1599 	mov	a,r7
      00082C 33               [12] 1600 	rlc	a
      00082D 95 E0            [12] 1601 	subb	a,acc
      00082F FE               [12] 1602 	mov	r6,a
      000830 FC               [12] 1603 	mov	r4,a
      000831 C0 05            [24] 1604 	push	ar5
      000833 C0 07            [24] 1605 	push	ar7
      000835 C0 06            [24] 1606 	push	ar6
      000837 C0 04            [24] 1607 	push	ar4
      000839 90 51 80         [24] 1608 	mov	dptr,#0x5180
      00083C 75 F0 01         [24] 1609 	mov	b,#0x01
      00083F E4               [12] 1610 	clr	a
      000840 12r00r00         [24] 1611 	lcall	__mullong
      000843 AC 82            [24] 1612 	mov	r4,dpl
      000845 AD 83            [24] 1613 	mov	r5,dph
      000847 AE F0            [24] 1614 	mov	r6,b
      000849 FF               [12] 1615 	mov	r7,a
      00084A E5 81            [12] 1616 	mov	a,sp
      00084C 24 FC            [12] 1617 	add	a,#0xfc
      00084E F5 81            [12] 1618 	mov	sp,a
      000850 E5*00            [12] 1619 	mov	a,_bp
      000852 24 08            [12] 1620 	add	a,#0x08
      000854 F8               [12] 1621 	mov	r0,a
      000855 EC               [12] 1622 	mov	a,r4
      000856 26               [12] 1623 	add	a,@r0
      000857 F6               [12] 1624 	mov	@r0,a
      000858 ED               [12] 1625 	mov	a,r5
      000859 08               [12] 1626 	inc	r0
      00085A 36               [12] 1627 	addc	a,@r0
      00085B F6               [12] 1628 	mov	@r0,a
      00085C EE               [12] 1629 	mov	a,r6
      00085D 08               [12] 1630 	inc	r0
      00085E 36               [12] 1631 	addc	a,@r0
      00085F F6               [12] 1632 	mov	@r0,a
      000860 EF               [12] 1633 	mov	a,r7
      000861 08               [12] 1634 	inc	r0
      000862 36               [12] 1635 	addc	a,@r0
      000863 F6               [12] 1636 	mov	@r0,a
                                   1637 ;	time.c:205: seconds+= timeptr->tm_hour*60*60L;
      000864 A8*00            [24] 1638 	mov	r0,_bp
      000866 08               [12] 1639 	inc	r0
      000867 74 02            [12] 1640 	mov	a,#0x02
      000869 26               [12] 1641 	add	a,@r0
      00086A FD               [12] 1642 	mov	r5,a
      00086B E4               [12] 1643 	clr	a
      00086C 08               [12] 1644 	inc	r0
      00086D 36               [12] 1645 	addc	a,@r0
      00086E FE               [12] 1646 	mov	r6,a
      00086F 08               [12] 1647 	inc	r0
      000870 86 07            [24] 1648 	mov	ar7,@r0
      000872 8D 82            [24] 1649 	mov	dpl,r5
      000874 8E 83            [24] 1650 	mov	dph,r6
      000876 8F F0            [24] 1651 	mov	b,r7
      000878 12r00r00         [24] 1652 	lcall	__gptrget
      00087B FD               [12] 1653 	mov	r5,a
      00087C 7F 00            [12] 1654 	mov	r7,#0x00
      00087E 7E 00            [12] 1655 	mov	r6,#0x00
      000880 7C 00            [12] 1656 	mov	r4,#0x00
      000882 C0 05            [24] 1657 	push	ar5
      000884 C0 07            [24] 1658 	push	ar7
      000886 C0 06            [24] 1659 	push	ar6
      000888 C0 04            [24] 1660 	push	ar4
      00088A 90 0E 10         [24] 1661 	mov	dptr,#0x0E10
      00088D E4               [12] 1662 	clr	a
      00088E F5 F0            [12] 1663 	mov	b,a
      000890 12r00r00         [24] 1664 	lcall	__mullong
      000893 AC 82            [24] 1665 	mov	r4,dpl
      000895 AD 83            [24] 1666 	mov	r5,dph
      000897 AE F0            [24] 1667 	mov	r6,b
      000899 FF               [12] 1668 	mov	r7,a
      00089A E5 81            [12] 1669 	mov	a,sp
      00089C 24 FC            [12] 1670 	add	a,#0xfc
      00089E F5 81            [12] 1671 	mov	sp,a
      0008A0 E5*00            [12] 1672 	mov	a,_bp
      0008A2 24 08            [12] 1673 	add	a,#0x08
      0008A4 F8               [12] 1674 	mov	r0,a
      0008A5 EC               [12] 1675 	mov	a,r4
      0008A6 26               [12] 1676 	add	a,@r0
      0008A7 F6               [12] 1677 	mov	@r0,a
      0008A8 ED               [12] 1678 	mov	a,r5
      0008A9 08               [12] 1679 	inc	r0
      0008AA 36               [12] 1680 	addc	a,@r0
      0008AB F6               [12] 1681 	mov	@r0,a
      0008AC EE               [12] 1682 	mov	a,r6
      0008AD 08               [12] 1683 	inc	r0
      0008AE 36               [12] 1684 	addc	a,@r0
      0008AF F6               [12] 1685 	mov	@r0,a
      0008B0 EF               [12] 1686 	mov	a,r7
      0008B1 08               [12] 1687 	inc	r0
      0008B2 36               [12] 1688 	addc	a,@r0
      0008B3 F6               [12] 1689 	mov	@r0,a
                                   1690 ;	time.c:206: seconds+= timeptr->tm_min*60;
      0008B4 A8*00            [24] 1691 	mov	r0,_bp
      0008B6 08               [12] 1692 	inc	r0
      0008B7 74 01            [12] 1693 	mov	a,#0x01
      0008B9 26               [12] 1694 	add	a,@r0
      0008BA FD               [12] 1695 	mov	r5,a
      0008BB E4               [12] 1696 	clr	a
      0008BC 08               [12] 1697 	inc	r0
      0008BD 36               [12] 1698 	addc	a,@r0
      0008BE FE               [12] 1699 	mov	r6,a
      0008BF 08               [12] 1700 	inc	r0
      0008C0 86 07            [24] 1701 	mov	ar7,@r0
      0008C2 8D 82            [24] 1702 	mov	dpl,r5
      0008C4 8E 83            [24] 1703 	mov	dph,r6
      0008C6 8F F0            [24] 1704 	mov	b,r7
      0008C8 12r00r00         [24] 1705 	lcall	__gptrget
      0008CB 75 F0 3C         [24] 1706 	mov	b,#0x3C
      0008CE A4               [48] 1707 	mul	ab
      0008CF FD               [12] 1708 	mov	r5,a
      0008D0 E5 F0            [12] 1709 	mov	a,b
      0008D2 FF               [12] 1710 	mov	r7,a
      0008D3 33               [12] 1711 	rlc	a
      0008D4 95 E0            [12] 1712 	subb	a,acc
      0008D6 FE               [12] 1713 	mov	r6,a
      0008D7 FC               [12] 1714 	mov	r4,a
      0008D8 E5*00            [12] 1715 	mov	a,_bp
      0008DA 24 08            [12] 1716 	add	a,#0x08
      0008DC F8               [12] 1717 	mov	r0,a
      0008DD ED               [12] 1718 	mov	a,r5
      0008DE 26               [12] 1719 	add	a,@r0
      0008DF F6               [12] 1720 	mov	@r0,a
      0008E0 EF               [12] 1721 	mov	a,r7
      0008E1 08               [12] 1722 	inc	r0
      0008E2 36               [12] 1723 	addc	a,@r0
      0008E3 F6               [12] 1724 	mov	@r0,a
      0008E4 EE               [12] 1725 	mov	a,r6
      0008E5 08               [12] 1726 	inc	r0
      0008E6 36               [12] 1727 	addc	a,@r0
      0008E7 F6               [12] 1728 	mov	@r0,a
      0008E8 EC               [12] 1729 	mov	a,r4
      0008E9 08               [12] 1730 	inc	r0
      0008EA 36               [12] 1731 	addc	a,@r0
      0008EB F6               [12] 1732 	mov	@r0,a
                                   1733 ;	time.c:207: seconds+= timeptr->tm_sec;
      0008EC A8*00            [24] 1734 	mov	r0,_bp
      0008EE 08               [12] 1735 	inc	r0
      0008EF 86 82            [24] 1736 	mov	dpl,@r0
      0008F1 08               [12] 1737 	inc	r0
      0008F2 86 83            [24] 1738 	mov	dph,@r0
      0008F4 08               [12] 1739 	inc	r0
      0008F5 86 F0            [24] 1740 	mov	b,@r0
      0008F7 12r00r00         [24] 1741 	lcall	__gptrget
      0008FA FF               [12] 1742 	mov	r7,a
      0008FB E4               [12] 1743 	clr	a
      0008FC FE               [12] 1744 	mov	r6,a
      0008FD 33               [12] 1745 	rlc	a
      0008FE 95 E0            [12] 1746 	subb	a,acc
      000900 FD               [12] 1747 	mov	r5,a
      000901 FC               [12] 1748 	mov	r4,a
      000902 E5*00            [12] 1749 	mov	a,_bp
      000904 24 08            [12] 1750 	add	a,#0x08
      000906 F8               [12] 1751 	mov	r0,a
      000907 EF               [12] 1752 	mov	a,r7
      000908 26               [12] 1753 	add	a,@r0
      000909 F6               [12] 1754 	mov	@r0,a
      00090A EE               [12] 1755 	mov	a,r6
      00090B 08               [12] 1756 	inc	r0
      00090C 36               [12] 1757 	addc	a,@r0
      00090D F6               [12] 1758 	mov	@r0,a
      00090E ED               [12] 1759 	mov	a,r5
      00090F 08               [12] 1760 	inc	r0
      000910 36               [12] 1761 	addc	a,@r0
      000911 F6               [12] 1762 	mov	@r0,a
      000912 EC               [12] 1763 	mov	a,r4
      000913 08               [12] 1764 	inc	r0
      000914 36               [12] 1765 	addc	a,@r0
      000915 F6               [12] 1766 	mov	@r0,a
                                   1767 ;	time.c:208: return seconds;
      000916 E5*00            [12] 1768 	mov	a,_bp
      000918 24 08            [12] 1769 	add	a,#0x08
      00091A F8               [12] 1770 	mov	r0,a
      00091B 86 82            [24] 1771 	mov	dpl,@r0
      00091D 08               [12] 1772 	inc	r0
      00091E 86 83            [24] 1773 	mov	dph,@r0
      000920 08               [12] 1774 	inc	r0
      000921 86 F0            [24] 1775 	mov	b,@r0
      000923 08               [12] 1776 	inc	r0
      000924 E6               [12] 1777 	mov	a,@r0
      000925 85*00 81         [24] 1778 	mov	sp,_bp
      000928 D0*00            [24] 1779 	pop	_bp
      00092A 22               [24] 1780 	ret
                                   1781 	.area CSEG    (CODE)
                                   1782 	.area CONST   (CODE)
      000000                       1783 _monthDays:
      000000 1F                    1784 	.db #0x1F	;  31
      000001 1C                    1785 	.db #0x1C	;  28
      000002 1F                    1786 	.db #0x1F	;  31
      000003 1E                    1787 	.db #0x1E	;  30
      000004 1F                    1788 	.db #0x1F	;  31
      000005 1E                    1789 	.db #0x1E	;  30
      000006 1F                    1790 	.db #0x1F	;  31
      000007 1F                    1791 	.db #0x1F	;  31
      000008 1E                    1792 	.db #0x1E	;  30
      000009 1F                    1793 	.db #0x1F	;  31
      00000A 1E                    1794 	.db #0x1E	;  30
      00000B 1F                    1795 	.db #0x1F	;  31
      00000C                       1796 ___month:
      00000Cr51s00                 1797 	.byte __str_1, (__str_1 >> 8)
      00000Er55s00                 1798 	.byte __str_2, (__str_2 >> 8)
      000010r59s00                 1799 	.byte __str_3, (__str_3 >> 8)
      000012r5Ds00                 1800 	.byte __str_4, (__str_4 >> 8)
      000014r61s00                 1801 	.byte __str_5, (__str_5 >> 8)
      000016r65s00                 1802 	.byte __str_6, (__str_6 >> 8)
      000018r69s00                 1803 	.byte __str_7, (__str_7 >> 8)
      00001Ar6Ds00                 1804 	.byte __str_8, (__str_8 >> 8)
      00001Cr71s00                 1805 	.byte __str_9, (__str_9 >> 8)
      00001Er75s00                 1806 	.byte __str_10, (__str_10 >> 8)
      000020r79s00                 1807 	.byte __str_11, (__str_11 >> 8)
      000022r7Ds00                 1808 	.byte __str_12, (__str_12 >> 8)
      000024                       1809 ___day:
      000024r81s00                 1810 	.byte __str_13, (__str_13 >> 8)
      000026r85s00                 1811 	.byte __str_14, (__str_14 >> 8)
      000028r89s00                 1812 	.byte __str_15, (__str_15 >> 8)
      00002Ar8Ds00                 1813 	.byte __str_16, (__str_16 >> 8)
      00002Cr91s00                 1814 	.byte __str_17, (__str_17 >> 8)
      00002Er95s00                 1815 	.byte __str_18, (__str_18 >> 8)
      000030r99s00                 1816 	.byte __str_19, (__str_19 >> 8)
      000032                       1817 ___str_0:
      000032 25 73 20 25 73 20 25  1818 	.ascii "%s %s %2d %02d:%02d:%02d %04d"
             32 64 20 25 30 32 64
             3A 25 30 32 64 3A 25
             30 32 64 20 25 30 34
             64
      00004F 0A                    1819 	.db 0x0A
      000050 00                    1820 	.db 0x00
      000051                       1821 __str_1:
      000051 4A 61 6E              1822 	.ascii "Jan"
      000054 00                    1823 	.db 0x00
      000055                       1824 __str_2:
      000055 46 65 62              1825 	.ascii "Feb"
      000058 00                    1826 	.db 0x00
      000059                       1827 __str_3:
      000059 4D 61 72              1828 	.ascii "Mar"
      00005C 00                    1829 	.db 0x00
      00005D                       1830 __str_4:
      00005D 41 70 72              1831 	.ascii "Apr"
      000060 00                    1832 	.db 0x00
      000061                       1833 __str_5:
      000061 4D 61 79              1834 	.ascii "May"
      000064 00                    1835 	.db 0x00
      000065                       1836 __str_6:
      000065 4A 75 6E              1837 	.ascii "Jun"
      000068 00                    1838 	.db 0x00
      000069                       1839 __str_7:
      000069 4A 75 6C              1840 	.ascii "Jul"
      00006C 00                    1841 	.db 0x00
      00006D                       1842 __str_8:
      00006D 41 75 67              1843 	.ascii "Aug"
      000070 00                    1844 	.db 0x00
      000071                       1845 __str_9:
      000071 53 65 70              1846 	.ascii "Sep"
      000074 00                    1847 	.db 0x00
      000075                       1848 __str_10:
      000075 4F 63 74              1849 	.ascii "Oct"
      000078 00                    1850 	.db 0x00
      000079                       1851 __str_11:
      000079 4E 6F 76              1852 	.ascii "Nov"
      00007C 00                    1853 	.db 0x00
      00007D                       1854 __str_12:
      00007D 44 65 63              1855 	.ascii "Dec"
      000080 00                    1856 	.db 0x00
      000081                       1857 __str_13:
      000081 53 75 6E              1858 	.ascii "Sun"
      000084 00                    1859 	.db 0x00
      000085                       1860 __str_14:
      000085 4D 6F 6E              1861 	.ascii "Mon"
      000088 00                    1862 	.db 0x00
      000089                       1863 __str_15:
      000089 54 75 65              1864 	.ascii "Tue"
      00008C 00                    1865 	.db 0x00
      00008D                       1866 __str_16:
      00008D 57 65 64              1867 	.ascii "Wed"
      000090 00                    1868 	.db 0x00
      000091                       1869 __str_17:
      000091 54 68 75              1870 	.ascii "Thu"
      000094 00                    1871 	.db 0x00
      000095                       1872 __str_18:
      000095 46 72 69              1873 	.ascii "Fri"
      000098 00                    1874 	.db 0x00
      000099                       1875 __str_19:
      000099 53 61 74              1876 	.ascii "Sat"
      00009C 00                    1877 	.db 0x00
                                   1878 	.area XINIT   (CODE)
                                   1879 	.area CABS    (ABS,CODE)
