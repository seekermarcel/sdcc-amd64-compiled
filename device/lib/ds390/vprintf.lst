                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  4 2022) (Linux)
                                      4 ; This file was generated Mon Apr  4 14:10:27 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module vprintf
                                      7 	.optsdcc -mds390 --model-flat24
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; CPU specific extensions
                                     11 ;--------------------------------------------------------
                                     12 	.DS80C390
                                     13 	.amode	2	; 24 bit flat addressing
                           000082    14 dpl	=	0x82
                           000083    15 dph	=	0x83
                           000084    16 dpl1	=	0x84
                           000085    17 dph1	=	0x85
                           000086    18 dps	=	0x86
                           000093    19 dpx	=	0x93
                           000095    20 dpx1	=	0x95
                           00009B    21 esp	=	0x9B
                           00009C    22 ap	=	0x9C
                           00009C    23 acc1	=	0x9C
                           0000D1    24 mcnt0	=	0xD1
                           0000D2    25 mcnt1	=	0xD2
                           0000D3    26 ma	=	0xD3
                           0000D4    27 mb	=	0xD4
                           0000D5    28 mc	=	0xD5
                           00009D    29 acon	=	0x9D
                           0000D1    30 F1	=	0xD1	; user flag
                                     31 ;--------------------------------------------------------
                                     32 ; Public variables in this module
                                     33 ;--------------------------------------------------------
                                     34 	.globl _putchar
                                     35 	.globl __print_format
                                     36 	.globl _vprintf_PARM_2
                                     37 	.globl _vprintf
                                     38 	.globl _printf
                                     39 ;--------------------------------------------------------
                                     40 ; special function registers
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; special function bits
                                     44 ;--------------------------------------------------------
                                     45 ;--------------------------------------------------------
                                     46 ; overlayable register banks
                                     47 ;--------------------------------------------------------
                                     48 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         49 	.ds 8
                                     50 ;--------------------------------------------------------
                                     51 ; internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area DSEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; overlayable items in internal ram 
                                     56 ;--------------------------------------------------------
                                     57 ;--------------------------------------------------------
                                     58 ; indirectly addressable internal ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area ISEG    (DATA)
                                     61 ;--------------------------------------------------------
                                     62 ; absolute internal ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area IABS    (ABS,DATA)
                                     65 	.area IABS    (ABS,DATA)
                                     66 ;--------------------------------------------------------
                                     67 ; bit data
                                     68 ;--------------------------------------------------------
                                     69 	.area BSEG    (BIT)
                                     70 ;--------------------------------------------------------
                                     71 ; paged external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area PSEG    (PAG,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XSEG    (XDATA)
      000000                         78 _vprintf_PARM_2:
      000000                         79 	.ds 4
                                     80 ;--------------------------------------------------------
                                     81 ; absolute external ram data
                                     82 ;--------------------------------------------------------
                                     83 	.area XABS    (ABS,XDATA)
                                     84 ;--------------------------------------------------------
                                     85 ; external initialized ram data
                                     86 ;--------------------------------------------------------
                                     87 	.area XISEG   (XDATA)
                                     88 ;--------------------------------------------------------
                                     89 ; global & static initialisations
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME    (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 	.area GSFINAL (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; Home
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME    (CODE)
                                     99 	.area HOME    (CODE)
                                    100 ;--------------------------------------------------------
                                    101 ; code
                                    102 ;--------------------------------------------------------
                                    103 	.area CSEG    (CODE)
                                    104 ;------------------------------------------------------------
                                    105 ;Allocation info for local variables in function 'put_char_to_stdout'
                                    106 ;------------------------------------------------------------
                                    107 ;p                         Allocated to stack - _bp -8
                                    108 ;c                         Allocated to registers r2 
                                    109 ;------------------------------------------------------------
                                    110 ;	vprintf.c:34: put_char_to_stdout (char c, void* p) _REENTRANT
                                    111 ;	-----------------------------------------
                                    112 ;	 function put_char_to_stdout
                                    113 ;	-----------------------------------------
      000000                        114 _put_char_to_stdout:
                           000002   115 	ar2 = 0x02
                           000003   116 	ar3 = 0x03
                           000004   117 	ar4 = 0x04
                           000005   118 	ar5 = 0x05
                           000006   119 	ar6 = 0x06
                           000007   120 	ar7 = 0x07
                           000000   121 	ar0 = 0x00
                           000001   122 	ar1 = 0x01
      000000 C0*00            [ 8]  123 	push	_bpx
      000002 C0*01            [ 8]  124 	push	_bpx+1
      000004 85 81*00         [12]  125 	mov	_bpx,sp
      000007 85 9B*01         [12]  126 	mov	_bpx+1,esp
      00000A 53*01 03         [12]  127 	anl	_bpx+1,#3
      00000D AA 82            [ 8]  128 	mov	r2,dpl
                                    129 ;	vprintf.c:37: putchar (c);
      00000F 8A 82            [ 8]  130 	mov	dpl,r2
      000011 12s00r00r00      [16]  131 	lcall	_putchar
      000015                        132 00101$:
      000015 85*00 81         [12]  133 	mov	sp,_bpx
      000018 85*01 9B         [12]  134 	mov	esp,_bpx+1
      00001B D0*01            [ 8]  135 	pop	_bpx+1
      00001D D0*00            [ 8]  136 	pop	_bpx
      00001F 22               [16]  137 	ret
                                    138 ;------------------------------------------------------------
                                    139 ;Allocation info for local variables in function 'vprintf'
                                    140 ;------------------------------------------------------------
                                    141 ;ap                        Allocated with name '_vprintf_PARM_2'
                                    142 ;format                    Allocated to registers r2 r3 r4 r5 
                                    143 ;------------------------------------------------------------
                                    144 ;	vprintf.c:41: vprintf (const char *format, va_list ap)
                                    145 ;	-----------------------------------------
                                    146 ;	 function vprintf
                                    147 ;	-----------------------------------------
      000020                        148 _vprintf:
      000020 AA 82            [ 8]  149 	mov	r2,dpl
      000022 AB 83            [ 8]  150 	mov	r3,dph
      000024 AC 93            [ 8]  151 	mov	r4,dpx
      000026 AD F0            [ 8]  152 	mov	r5,b
                                    153 ;	vprintf.c:43: return _print_format (put_char_to_stdout, NULL, format, ap);
      000028 90s00r00r00      [12]  154 	mov	dptr,#_vprintf_PARM_2
                                    155 ;	genAssign: resultIsFar = FALSE
      00002C E0               [ 8]  156 	movx	a,@dptr
      00002D FE               [ 4]  157 	mov	r6,a
      00002E A3               [12]  158 	inc	dptr
      00002F E0               [ 8]  159 	movx	a,@dptr
      000030 FF               [ 4]  160 	mov	r7,a
      000031 A3               [12]  161 	inc	dptr
      000032 E0               [ 8]  162 	movx	a,@dptr
      000033 F8               [ 4]  163 	mov	r0,a
      000034 A3               [12]  164 	inc	dptr
      000035 E0               [ 8]  165 	movx	a,@dptr
      000036 F9               [ 4]  166 	mov	r1,a
                                    167 ;	genAssign: resultIsFar = TRUE
      000037 90s00r00r00      [12]  168 	mov	dptr,#__print_format_PARM_2
      00003B E4               [ 4]  169 	clr	a
      00003C F0               [ 8]  170 	movx	@dptr,a
      00003D A3               [12]  171 	inc	dptr
      00003E F0               [ 8]  172 	movx	@dptr,a
      00003F A3               [12]  173 	inc	dptr
      000040 F0               [ 8]  174 	movx	@dptr,a
      000041 A3               [12]  175 	inc	dptr
      000042 E4               [ 4]  176 	clr	a
      000043 F0               [ 8]  177 	movx	@dptr,a
                                    178 ;	genAssign: resultIsFar = TRUE
      000044 90s00r00r00      [12]  179 	mov	dptr,#__print_format_PARM_3
      000048 EA               [ 4]  180 	mov	a,r2
      000049 F0               [ 8]  181 	movx	@dptr,a
      00004A A3               [12]  182 	inc	dptr
      00004B EB               [ 4]  183 	mov	a,r3
      00004C F0               [ 8]  184 	movx	@dptr,a
      00004D A3               [12]  185 	inc	dptr
      00004E EC               [ 4]  186 	mov	a,r4
      00004F F0               [ 8]  187 	movx	@dptr,a
      000050 A3               [12]  188 	inc	dptr
      000051 ED               [ 4]  189 	mov	a,r5
      000052 F0               [ 8]  190 	movx	@dptr,a
                                    191 ;	genAssign: resultIsFar = TRUE
      000053 90s00r00r00      [12]  192 	mov	dptr,#__print_format_PARM_4
      000057 EE               [ 4]  193 	mov	a,r6
      000058 F0               [ 8]  194 	movx	@dptr,a
      000059 A3               [12]  195 	inc	dptr
      00005A EF               [ 4]  196 	mov	a,r7
      00005B F0               [ 8]  197 	movx	@dptr,a
      00005C A3               [12]  198 	inc	dptr
      00005D E8               [ 4]  199 	mov	a,r0
      00005E F0               [ 8]  200 	movx	@dptr,a
      00005F A3               [12]  201 	inc	dptr
      000060 E9               [ 4]  202 	mov	a,r1
      000061 F0               [ 8]  203 	movx	@dptr,a
      000062 90s00r00r00      [12]  204 	mov dptr,#_put_char_to_stdout
      000066 12s00r00r00      [16]  205 	lcall	__print_format
      00006A                        206 00101$:
      00006A 22               [16]  207 	ret
                                    208 ;------------------------------------------------------------
                                    209 ;Allocation info for local variables in function 'printf'
                                    210 ;------------------------------------------------------------
                                    211 ;format                    Allocated to stack - _bp -8
                                    212 ;arg                       Allocated to registers r2 r3 r4 r5 
                                    213 ;i                         Allocated to registers r2 r3 
                                    214 ;------------------------------------------------------------
                                    215 ;	vprintf.c:47: printf (const char *format, ...)
                                    216 ;	-----------------------------------------
                                    217 ;	 function printf
                                    218 ;	-----------------------------------------
      00006B                        219 _printf:
      00006B C0*00            [ 8]  220 	push	_bpx
      00006D C0*01            [ 8]  221 	push	_bpx+1
      00006F 85 81*00         [12]  222 	mov	_bpx,sp
      000072 85 9B*01         [12]  223 	mov	_bpx+1,esp
      000075 53*01 03         [12]  224 	anl	_bpx+1,#3
                                    225 ;	vprintf.c:52: va_start (arg, format);
      000078 E5*00            [ 8]  226 	mov	a,_bpx
      00007A 24 F8            [ 8]  227 	add	a,#0xF8
      00007C F5 F0            [ 8]  228 	mov	b,a
      00007E E5*01            [ 8]  229 	mov	a,_bpx+1
      000080 34 FF            [ 8]  230 	addc	a,#0xFF
      000082 AA F0            [ 8]  231 	mov	r2,b
      000084 FB               [ 4]  232 	mov	r3,a
      000085 7C 40            [ 8]  233 	mov	r4,#0x40
      000087 7D 00            [ 8]  234 	mov	r5,#0x00
                                    235 ;	vprintf.c:53: i = _print_format (put_char_to_stdout, NULL, format, arg);
      000089 E5*00            [ 8]  236 	mov	a,_bpx
      00008B C3               [ 4]  237 	clr	c
      00008C 94 08            [ 8]  238 	subb	a,#0x08
      00008E F5 82            [ 8]  239 	mov	dpl,a
      000090 E5*01            [ 8]  240 	mov	a,_bpx+1
      000092 94 00            [ 8]  241 	subb	a,#0x00
      000094 F5 83            [ 8]  242 	mov	dph,a
      000096 75 93 40         [12]  243 	mov	dpx,#0x40
                                    244 ;	genAssign: resultIsFar = FALSE
      000099 E0               [ 8]  245 	movx	a,@dptr
      00009A FE               [ 4]  246 	mov	r6,a
      00009B A3               [12]  247 	inc	dptr
      00009C E0               [ 8]  248 	movx	a,@dptr
      00009D FF               [ 4]  249 	mov	r7,a
      00009E A3               [12]  250 	inc	dptr
      00009F E0               [ 8]  251 	movx	a,@dptr
      0000A0 F8               [ 4]  252 	mov	r0,a
      0000A1 A3               [12]  253 	inc	dptr
      0000A2 E0               [ 8]  254 	movx	a,@dptr
      0000A3 F9               [ 4]  255 	mov	r1,a
                                    256 ;	genAssign: resultIsFar = TRUE
      0000A4 90s00r00r00      [12]  257 	mov	dptr,#__print_format_PARM_2
      0000A8 E4               [ 4]  258 	clr	a
      0000A9 F0               [ 8]  259 	movx	@dptr,a
      0000AA A3               [12]  260 	inc	dptr
      0000AB F0               [ 8]  261 	movx	@dptr,a
      0000AC A3               [12]  262 	inc	dptr
      0000AD F0               [ 8]  263 	movx	@dptr,a
      0000AE A3               [12]  264 	inc	dptr
      0000AF E4               [ 4]  265 	clr	a
      0000B0 F0               [ 8]  266 	movx	@dptr,a
                                    267 ;	genAssign: resultIsFar = TRUE
      0000B1 90s00r00r00      [12]  268 	mov	dptr,#__print_format_PARM_3
      0000B5 EE               [ 4]  269 	mov	a,r6
      0000B6 F0               [ 8]  270 	movx	@dptr,a
      0000B7 A3               [12]  271 	inc	dptr
      0000B8 EF               [ 4]  272 	mov	a,r7
      0000B9 F0               [ 8]  273 	movx	@dptr,a
      0000BA A3               [12]  274 	inc	dptr
      0000BB E8               [ 4]  275 	mov	a,r0
      0000BC F0               [ 8]  276 	movx	@dptr,a
      0000BD A3               [12]  277 	inc	dptr
      0000BE E9               [ 4]  278 	mov	a,r1
      0000BF F0               [ 8]  279 	movx	@dptr,a
                                    280 ;	genAssign: resultIsFar = TRUE
      0000C0 90s00r00r00      [12]  281 	mov	dptr,#__print_format_PARM_4
      0000C4 EA               [ 4]  282 	mov	a,r2
      0000C5 F0               [ 8]  283 	movx	@dptr,a
      0000C6 A3               [12]  284 	inc	dptr
      0000C7 EB               [ 4]  285 	mov	a,r3
      0000C8 F0               [ 8]  286 	movx	@dptr,a
      0000C9 A3               [12]  287 	inc	dptr
      0000CA EC               [ 4]  288 	mov	a,r4
      0000CB F0               [ 8]  289 	movx	@dptr,a
      0000CC A3               [12]  290 	inc	dptr
      0000CD ED               [ 4]  291 	mov	a,r5
      0000CE F0               [ 8]  292 	movx	@dptr,a
      0000CF 90s00r00r00      [12]  293 	mov dptr,#_put_char_to_stdout
      0000D3 12s00r00r00      [16]  294 	lcall	__print_format
      0000D7 AA 82            [ 8]  295 	mov	r2,dpl
      0000D9 AB 83            [ 8]  296 	mov	r3,dph
                                    297 ;	genAssign: resultIsFar = FALSE
      0000DB 8A 82            [ 8]  298 	mov	dpl,r2
      0000DD 8B 83            [ 8]  299 	mov	dph,r3
                                    300 ;	vprintf.c:56: return i;
      0000DF                        301 00101$:
      0000DF 85*00 81         [12]  302 	mov	sp,_bpx
      0000E2 85*01 9B         [12]  303 	mov	esp,_bpx+1
      0000E5 D0*01            [ 8]  304 	pop	_bpx+1
      0000E7 D0*00            [ 8]  305 	pop	_bpx
      0000E9 22               [16]  306 	ret
                                    307 	.area CSEG    (CODE)
                                    308 	.area CONST   (CODE)
                                    309 	.area XINIT   (CODE)
                                    310 	.area CABS    (ABS,CODE)
